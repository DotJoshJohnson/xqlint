// This file was generated on Wed Mar 27, 2013 03:31 (UTC+01) by REx v5.25 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net>
// REx command line: JSONiqParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "JSONiqParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module){
                                                            var JSONiqParser = exports.JSONiqParser = function JSONiqParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 40 "JSONiqParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? JSONiqParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = JSONiqParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [JSONiqParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(245);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Module();
    shift(26);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  this.parse_PredicateList = function()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(88);              // END | S^WS | '(:' | '['
      if (l1 != 64)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    if (l1 == 164)                  // 'jsoniq'
    {
      parse_VersionDecl();
    }
    lookahead1W(239);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 179:                       // 'module'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | 'namespace'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 92851:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(164);                     // 'jsoniq'
    lookahead1W(114);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 121:                       // 'encoding'
      shift(121);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
      break;
    default:
      shift(261);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
      lookahead1W(107);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 121)                // 'encoding'
      {
        shift(121);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(12);                  // StringLiteral
      }
    }
    lookahead1W(27);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(136);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(179);                     // 'module'
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shift(181);                     // 'namespace'
    lookahead1W(219);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(28);                // S^WS | '(:' | '='
    shift(57);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(27);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(239);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(197);           // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
                                    // 'construction' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'ft-option' | 'function' | 'index' | 'integrity' | 'namespace' | 'option' |
                                    // 'ordering' | 'revalidation' | 'updating' | 'variable'
        break;
      case 149:                     // 'import'
        lookahead2W(163);           // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
        break;
      default:
        lk = l1;
      }
      if (lk != 40552               // 'declare' 'base-uri'
       && lk != 41576               // 'declare' 'boundary-space'
       && lk != 48232               // 'declare' 'construction'
       && lk != 51304               // 'declare' 'copy-namespaces'
       && lk != 52328               // 'declare' 'decimal-format'
       && lk != 53864               // 'declare' 'default'
       && lk != 70248               // 'declare' 'ft-option'
       && lk != 91797               // 'import' 'module'
       && lk != 92776               // 'declare' 'namespace'
       && lk != 102504              // 'declare' 'ordering'
       && lk != 112232              // 'declare' 'revalidation'
       && lk != 113813)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(187);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 53864)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 92776:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 149:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70248:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(27);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(239);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(189);           // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      if (lk != 17000               // 'declare' '%'
       && lk != 46696               // 'declare' 'collection'
       && lk != 49768               // 'declare' 'context'
       && lk != 72296               // 'declare' 'function'
       && lk != 77416               // 'declare' 'index'
       && lk != 80488               // 'declare' 'integrity'
       && lk != 100456              // 'declare' 'option'
       && lk != 130664              // 'declare' 'updating'
       && lk != 133224)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(186);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 49768:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 100456:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(27);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(50);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 104:                       // 'declare'
      lookahead2W(184);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 53864)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 41576:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 40552:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 48232:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 102504:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 112232:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 51304:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'boundary-space'
    shift(81);                      // 'boundary-space'
    lookahead1W(131);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 211:                       // 'preserve'
      shift(211);                   // 'preserve'
      break;
    default:
      shift(239);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shift(105);                     // 'default'
    lookahead1W(37);                // S^WS | '(:' | 'collation'
    shift(90);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(104);                    // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shiftT(105);                    // 'default'
    lookahead1W(37);                // S^WS | '(:' | 'collation'
    shiftT(90);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(8);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(31);                // S^WS | '(:' | 'base-uri'
    shift(79);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(40);                // S^WS | '(:' | 'construction'
    shift(94);                      // 'construction'
    lookahead1W(131);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 239:                       // 'strip'
      shift(239);                   // 'strip'
      break;
    default:
      shift(211);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(67);                // S^WS | '(:' | 'ordering'
    shift(200);                     // 'ordering'
    lookahead1W(129);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 199:                       // 'ordered'
      shift(199);                   // 'ordered'
      break;
    default:
      shift(254);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shift(105);                     // 'default'
    lookahead1W(66);                // S^WS | '(:' | 'order'
    shift(198);                     // 'order'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shift(119);                     // 'empty'
    lookahead1W(119);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 143:                       // 'greatest'
      shift(143);                   // 'greatest'
      break;
    default:
      shift(170);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(104);                    // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shiftT(105);                    // 'default'
    lookahead1W(66);                // S^WS | '(:' | 'order'
    shiftT(198);                    // 'order'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shiftT(119);                    // 'empty'
    lookahead1W(119);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 143:                       // 'greatest'
      shiftT(143);                  // 'greatest'
      break;
    default:
      shiftT(170);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'copy-namespaces'
    shift(100);                     // 'copy-namespaces'
    lookahead1W(126);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(42);                      // ','
    lookahead1W(121);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 211:                       // 'preserve'
      shift(211);                   // 'preserve'
      break;
    default:
      shift(187);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      shift(153);                   // 'inherit'
      break;
    default:
      shift(186);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(112);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 102:                       // 'decimal-format'
      shift(102);                   // 'decimal-format'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      shift(105);                   // 'default'
      lookahead1W(44);              // S^WS | '(:' | 'decimal-format'
      shift(102);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(191);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 50)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(28);              // S^WS | '(:' | '='
      shift(57);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 103:                       // 'decimal-separator'
      shift(103);                   // 'decimal-separator'
      break;
    case 145:                       // 'grouping-separator'
      shift(145);                   // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      shift(152);                   // 'infinity'
      break;
    case 176:                       // 'minus-sign'
      shift(176);                   // 'minus-sign'
      break;
    case 63:                        // 'NaN'
      shift(63);                    // 'NaN'
      break;
    case 206:                       // 'percent'
      shift(206);                   // 'percent'
      break;
    case 205:                       // 'per-mille'
      shift(205);                   // 'per-mille'
      break;
    case 273:                       // 'zero-digit'
      shift(273);                   // 'zero-digit'
      break;
    case 112:                       // 'digit'
      shift(112);                   // 'digit'
      break;
    default:
      shift(204);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 149:                       // 'import'
      lookahead2W(124);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 113813:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(149);                     // 'import'
    lookahead1W(71);                // S^WS | '(:' | 'schema'
    shift(222);                     // 'schema'
    lookahead1W(135);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 8)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(106);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 77)                   // 'at'
    {
      shift(77);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(8);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 181:                       // 'namespace'
      shift(181);                   // 'namespace'
      lookahead1W(219);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(28);              // S^WS | '(:' | '='
      shift(57);                    // '='
      break;
    default:
      shift(105);                   // 'default'
      lookahead1W(46);              // S^WS | '(:' | 'element'
      shift(117);                   // 'element'
      lookahead1W(60);              // S^WS | '(:' | 'namespace'
      shift(181);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(149);                     // 'import'
    lookahead1W(59);                // S^WS | '(:' | 'module'
    shift(179);                     // 'module'
    lookahead1W(89);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 181)                  // 'namespace'
    {
      shift(181);                   // 'namespace'
      lookahead1W(219);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(28);              // S^WS | '(:' | '='
      shift(57);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(106);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 77)                   // 'at'
    {
      shift(77);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(8);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shift(181);                     // 'namespace'
    lookahead1W(219);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(28);                // S^WS | '(:' | '='
    shift(57);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shift(105);                     // 'default'
    lookahead1W(113);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 117:                       // 'element'
      shift(117);                   // 'element'
      break;
    default:
      shift(141);                   // 'function'
    }
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shift(181);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(104);                    // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shiftT(105);                    // 'default'
    lookahead1W(113);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 117:                       // 'element'
      shiftT(117);                  // 'element'
      break;
    default:
      shiftT(141);                  // 'function'
    }
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shiftT(181);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(8);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    shift(137);                     // 'ft-option'
    lookahead1W(79);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(104);                     // 'declare'
    for (;;)
    {
      lookahead1W(182);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 255)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 260:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 141:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 91:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 151:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(255);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(33);                      // '%'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(183);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(158);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(158);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(33);                     // '%'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(183);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(158);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(158);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(260);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(150);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(104);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 49:                        // ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(129);                   // 'external'
      lookahead1W(102);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shift(49);                  // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(42);                // S^WS | '(:' | 'context'
    shift(97);                      // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    shift(161);                     // 'item'
    lookahead1W(150);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 75)                   // 'as'
    {
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(104);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 49:                        // ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(129);                   // 'external'
      lookahead1W(102);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shift(49);                  // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(99);              // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(99);              // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(146);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(146);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(280);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(65);                // S^WS | '(:' | 'option'
    shift(196);                     // 'option'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(12);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 217                 // 'return'
       || l1 == 226)                // 'select'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 217                 // 'return'
       || l1 == 226)                // 'select'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 133:                       // 'for'
    case 136:                       // 'from'
      lookahead2W(144);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
    case 16520:                     // 'from' '$'
      parse_ForClause();
      break;
    case 171:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 133:                       // 'for'
    case 136:                       // 'from'
      lookahead2W(144);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
    case 16520:                     // 'from' '$'
      try_ForClause();
      break;
    case 171:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 264:                       // 'where'
      parse_WhereClause();
      break;
    case 144:                       // 'group'
      parse_GroupByClause();
      break;
    case 198:                       // 'order'
    case 234:                       // 'stable'
      parse_OrderByClause();
      break;
    case 101:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_InitialClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 264:                       // 'where'
      try_WhereClause();
      break;
    case 144:                       // 'group'
      try_GroupByClause();
      break;
    case 198:                       // 'order'
    case 234:                       // 'stable'
      try_OrderByClause();
      break;
    case 101:                       // 'count'
      try_CountClause();
      break;
    default:
      try_InitialClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    switch (l1)
    {
    case 133:                       // 'for'
      shift(133);                   // 'for'
      break;
    default:
      shift(136);                   // 'from'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    switch (l1)
    {
    case 133:                       // 'for'
      shiftT(133);                  // 'for'
      break;
    default:
      shiftT(136);                  // 'from'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(175);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 68)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(153);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(120);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 225)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(175);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 68)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(153);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(120);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 225)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(68);                      // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shift(119);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(68);                     // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shiftT(119);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(77);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(77);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(225);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(225);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(171);                     // 'let'
    lookahead1W(94);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(94);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(171);                    // 'let'
    lookahead1W(94);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(94);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 32:                        // '$'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(103);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(26);                // S^WS | '(:' | ':='
    shift(49);                      // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 32:                        // '$'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(103);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(26);                // S^WS | '(:' | ':='
    shiftT(49);                     // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    switch (l1)
    {
    case 133:                       // 'for'
      shift(133);                   // 'for'
      break;
    default:
      shift(136);                   // 'from'
    }
    lookahead1W(133);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 249:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    switch (l1)
    {
    case 133:                       // 'for'
      shiftT(133);                  // 'for'
      break;
    default:
      shiftT(136);                  // 'from'
    }
    lookahead1W(133);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 249:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(249);                     // 'tumbling'
    lookahead1W(83);                // S^WS | '(:' | 'window'
    shift(267);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(108);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 122                   // 'end'
     || l1 == 195)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(249);                    // 'tumbling'
    lookahead1W(83);                // S^WS | '(:' | 'window'
    shiftT(267);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(108);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 122                   // 'end'
     || l1 == 195)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(232);                     // 'sliding'
    lookahead1W(83);                // S^WS | '(:' | 'window'
    shift(267);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(108);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(232);                    // 'sliding'
    lookahead1W(83);                // S^WS | '(:' | 'window'
    shiftT(267);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(108);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(235);                     // 'start'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(81);                // S^WS | '(:' | 'when'
    shift(263);                     // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(235);                    // 'start'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(81);                // S^WS | '(:' | 'when'
    shiftT(263);                    // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 195)                  // 'only'
    {
      shift(195);                   // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    shift(122);                     // 'end'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(81);                // S^WS | '(:' | 'when'
    shift(263);                     // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 195)                  // 'only'
    {
      shiftT(195);                  // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    shiftT(122);                    // 'end'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(81);                // S^WS | '(:' | 'when'
    shiftT(263);                    // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(167);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 77)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(156);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 212)                  // 'previous'
    {
      shift(212);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(125);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 184)                  // 'next'
    {
      shift(184);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(167);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 77)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(156);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 212)                  // 'previous'
    {
      shiftT(212);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(125);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 184)                  // 'next'
    {
      shiftT(184);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(101);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(101);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(264);                     // 'where'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(264);                    // 'where'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(144);                     // 'group'
    lookahead1W(33);                // S^WS | '(:' | 'by'
    shift(83);                      // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(144);                    // 'group'
    lookahead1W(33);                // S^WS | '(:' | 'by'
    shiftT(83);                     // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(190);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(190);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(196);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'from' |
                                    // 'group' | 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 49                    // ':='
     || l1 == 75)                   // 'as'
    {
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(26);              // S^WS | '(:' | ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 90)                   // 'collation'
    {
      shift(90);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(196);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'from' |
                                    // 'group' | 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 49                    // ':='
     || l1 == 75)                   // 'as'
    {
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(26);              // S^WS | '(:' | ':='
      shiftT(49);                   // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 90)                   // 'collation'
    {
      shiftT(90);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(8);                    // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 198:                       // 'order'
      shift(198);                   // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shift(83);                    // 'by'
      break;
    default:
      shift(234);                   // 'stable'
      lookahead1W(66);              // S^WS | '(:' | 'order'
      shift(198);                   // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shift(83);                    // 'by'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 198:                       // 'order'
      shiftT(198);                  // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shiftT(83);                   // 'by'
      break;
    default:
      shiftT(234);                  // 'stable'
      lookahead1W(66);              // S^WS | '(:' | 'order'
      shiftT(198);                  // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shiftT(83);                   // 'by'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(190);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(190);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 76                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 76:                      // 'ascending'
        shift(76);                  // 'ascending'
        break;
      default:
        shift(109);                 // 'descending'
      }
    }
    lookahead1W(194);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'from' | 'group' |
                                    // 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 119)                  // 'empty'
    {
      shift(119);                   // 'empty'
      lookahead1W(119);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 143:                     // 'greatest'
        shift(143);                 // 'greatest'
        break;
      default:
        shift(170);                 // 'least'
      }
    }
    lookahead1W(193);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'from' | 'group' | 'let' |
                                    // 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 90)                   // 'collation'
    {
      shift(90);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 76                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 76:                      // 'ascending'
        shiftT(76);                 // 'ascending'
        break;
      default:
        shiftT(109);                // 'descending'
      }
    }
    lookahead1W(194);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'from' | 'group' |
                                    // 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 119)                  // 'empty'
    {
      shiftT(119);                  // 'empty'
      lookahead1W(119);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 143:                     // 'greatest'
        shiftT(143);                // 'greatest'
        break;
      default:
        shiftT(170);                // 'least'
      }
    }
    lookahead1W(193);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'from' | 'group' | 'let' |
                                    // 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 90)                   // 'collation'
    {
      shiftT(90);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(8);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 233:                       // 'some'
      shift(233);                   // 'some'
      break;
    default:
      shift(125);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(108);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(108);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shift(150);                   // 'in'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(221);                     // 'satisfies'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 233:                       // 'some'
      shiftT(233);                  // 'some'
      break;
    default:
      shiftT(125);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(108);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(108);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shiftT(150);                  // 'in'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(221);                    // 'satisfies'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(241);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(241);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(84);                    // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(84);                   // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(251);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(143);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(251);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(143);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(84);                      // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(84);                     // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(157);             // S^WS | '(:' | 'return' | 'select' | '|'
      if (l1 != 277)                // '|'
      {
        break;
      }
      shift(277);                   // '|'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(157);             // S^WS | '(:' | 'return' | 'select' | '|'
      if (l1 != 277)                // '|'
      {
        break;
      }
      shiftT(277);                  // '|'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(148);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    shift(243);                     // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(118);                     // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(148);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    shiftT(243);                    // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(118);                    // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(198);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'from' | 'group' | 'into' |
                                    // 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 87)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(198);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'from' | 'group' | 'into' |
                                    // 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 87)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(248);                     // 'try'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(248);                    // 'try'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    shiftT(280);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(87);                      // 'catch'
    lookahead1W(228);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(87);                     // 'catch'
    lookahead1W(228);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(280);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | '{' | '|'
      if (l1 != 277)                // '|'
      {
        break;
      }
      shift(277);                   // '|'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | '{' | '|'
      if (l1 != 277)                // '|'
      {
        break;
      }
      shiftT(277);                  // '|'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 197)                // 'or'
      {
        break;
      }
      shift(197);                   // 'or'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 197)                // 'or'
      {
        break;
      }
      shiftT(197);                  // 'or'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 71)                 // 'and'
      {
        break;
      }
      shift(71);                    // 'and'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 71)                 // 'and'
      {
        break;
      }
      shiftT(71);                   // 'and'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 51                    // '<'
     || l1 == 54                    // '<<'
     || l1 == 55                    // '<='
     || l1 == 57                    // '='
     || l1 == 58                    // '>'
     || l1 == 59                    // '>='
     || l1 == 60                    // '>>'
     || l1 == 124                   // 'eq'
     || l1 == 142                   // 'ge'
     || l1 == 146                   // 'gt'
     || l1 == 160                   // 'is'
     || l1 == 169                   // 'le'
     || l1 == 175                   // 'lt'
     || l1 == 183)                  // 'ne'
    {
      switch (l1)
      {
      case 124:                     // 'eq'
      case 142:                     // 'ge'
      case 146:                     // 'gt'
      case 169:                     // 'le'
      case 175:                     // 'lt'
      case 183:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 54:                      // '<<'
      case 60:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 51                    // '<'
     || l1 == 54                    // '<<'
     || l1 == 55                    // '<='
     || l1 == 57                    // '='
     || l1 == 58                    // '>'
     || l1 == 59                    // '>='
     || l1 == 60                    // '>>'
     || l1 == 124                   // 'eq'
     || l1 == 142                   // 'ge'
     || l1 == 146                   // 'gt'
     || l1 == 160                   // 'is'
     || l1 == 169                   // 'le'
     || l1 == 175                   // 'lt'
     || l1 == 183)                  // 'ne'
    {
      switch (l1)
      {
      case 124:                     // 'eq'
      case 142:                     // 'ge'
      case 146:                     // 'gt'
      case 169:                     // 'le'
      case 175:                     // 'lt'
      case 183:                     // 'ne'
        try_ValueComp();
        break;
      case 54:                      // '<<'
      case 60:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 95)                   // 'contains'
    {
      shift(95);                    // 'contains'
      lookahead1W(74);              // S^WS | '(:' | 'text'
      shift(242);                   // 'text'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 269)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 95)                   // 'contains'
    {
      shiftT(95);                   // 'contains'
      lookahead1W(74);              // S^WS | '(:' | 'text'
      shiftT(242);                  // 'text'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 269)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 278)                // '||'
      {
        break;
      }
      shift(278);                   // '||'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 278)                // '||'
      {
        break;
      }
      shiftT(278);                  // '||'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 246)                  // 'to'
    {
      shift(246);                   // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 246)                  // 'to'
    {
      shiftT(246);                  // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shift(41);                  // '+'
        break;
      default:
        shift(43);                  // '-'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shiftT(41);                 // '+'
        break;
      default:
        shiftT(43);                 // '-'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 114                 // 'div'
       && l1 != 147                 // 'idiv'
       && l1 != 177)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shift(39);                  // '*'
        break;
      case 114:                     // 'div'
        shift(114);                 // 'div'
        break;
      case 147:                     // 'idiv'
        shift(147);                 // 'idiv'
        break;
      default:
        shift(177);                 // 'mod'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 114                 // 'div'
       && l1 != 147                 // 'idiv'
       && l1 != 177)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shiftT(39);                 // '*'
        break;
      case 114:                     // 'div'
        shiftT(114);                // 'div'
        break;
      case 147:                     // 'idiv'
        shiftT(147);                // 'idiv'
        break;
      default:
        shiftT(177);                // 'mod'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 252                 // 'union'
       && l1 != 277)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 252:                     // 'union'
        shift(252);                 // 'union'
        break;
      default:
        shift(277);                 // '|'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 252                 // 'union'
       && l1 != 277)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 252:                     // 'union'
        shiftT(252);                // 'union'
        break;
      default:
        shiftT(277);                // '|'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(210);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 127                 // 'except'
       && l1 != 158)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 158:                     // 'intersect'
        shift(158);                 // 'intersect'
        break;
      default:
        shift(127);                 // 'except'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(210);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 127                 // 'except'
       && l1 != 158)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 158:                     // 'intersect'
        shiftT(158);                // 'intersect'
        break;
      default:
        shiftT(127);                // 'except'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(211);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 156)                  // 'instance'
    {
      shift(156);                   // 'instance'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shift(193);                   // 'of'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(211);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 156)                  // 'instance'
    {
      shiftT(156);                  // 'instance'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shiftT(193);                  // 'of'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 247)                  // 'treat'
    {
      shift(247);                   // 'treat'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 247)                  // 'treat'
    {
      shiftT(247);                  // 'treat'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 86)                   // 'castable'
    {
      shift(86);                    // 'castable'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 86)                   // 'castable'
    {
      shiftT(86);                   // 'castable'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 85)                   // 'cast'
    {
      shift(85);                    // 'cast'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 85)                   // 'cast'
    {
      shiftT(85);                   // 'cast'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shift(43);                  // '-'
        break;
      default:
        shift(41);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shiftT(43);                 // '-'
        break;
      default:
        shiftT(41);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 258:                       // 'validate'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 86274:                     // 'validate' 'lax'
    case 122114:                    // 'validate' 'strict'
    case 128258:                    // 'validate' 'type'
    case 140546:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 258:                       // 'validate'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 86274:                     // 'validate' 'lax'
    case 122114:                    // 'validate' 'strict'
    case 128258:                    // 'validate' 'type'
    case 140546:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      shift(27);                    // '!'
      lookahead1W(236);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      shiftT(27);                   // '!'
      lookahead1W(236);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 57:                        // '='
      shift(57);                    // '='
      break;
    case 28:                        // '!='
      shift(28);                    // '!='
      break;
    case 51:                        // '<'
      shift(51);                    // '<'
      break;
    case 55:                        // '<='
      shift(55);                    // '<='
      break;
    case 58:                        // '>'
      shift(58);                    // '>'
      break;
    default:
      shift(59);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 57:                        // '='
      shiftT(57);                   // '='
      break;
    case 28:                        // '!='
      shiftT(28);                   // '!='
      break;
    case 51:                        // '<'
      shiftT(51);                   // '<'
      break;
    case 55:                        // '<='
      shiftT(55);                   // '<='
      break;
    case 58:                        // '>'
      shiftT(58);                   // '>'
      break;
    default:
      shiftT(59);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 124:                       // 'eq'
      shift(124);                   // 'eq'
      break;
    case 183:                       // 'ne'
      shift(183);                   // 'ne'
      break;
    case 175:                       // 'lt'
      shift(175);                   // 'lt'
      break;
    case 169:                       // 'le'
      shift(169);                   // 'le'
      break;
    case 146:                       // 'gt'
      shift(146);                   // 'gt'
      break;
    default:
      shift(142);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 124:                       // 'eq'
      shiftT(124);                  // 'eq'
      break;
    case 183:                       // 'ne'
      shiftT(183);                  // 'ne'
      break;
    case 175:                       // 'lt'
      shiftT(175);                  // 'lt'
      break;
    case 169:                       // 'le'
      shiftT(169);                  // 'le'
      break;
    case 146:                       // 'gt'
      shiftT(146);                  // 'gt'
      break;
    default:
      shiftT(142);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      shift(160);                   // 'is'
      break;
    case 54:                        // '<<'
      shift(54);                    // '<<'
      break;
    default:
      shift(60);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      shiftT(160);                  // 'is'
      break;
    case 54:                        // '<<'
      shiftT(54);                   // '<<'
      break;
    default:
      shiftT(60);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(258);                     // 'validate'
    lookahead1W(168);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 274)                  // '{'
    {
      switch (l1)
      {
      case 250:                     // 'type'
        shift(250);                 // 'type'
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(258);                    // 'validate'
    lookahead1W(168);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 274)                  // '{'
    {
      switch (l1)
      {
      case 250:                     // 'type'
        shiftT(250);                // 'type'
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(280);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 168:                       // 'lax'
      shift(168);                   // 'lax'
      break;
    default:
      shift(238);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 168:                       // 'lax'
      shiftT(168);                  // 'lax'
      break;
    default:
      shiftT(238);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(98);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(274);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 280)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(280);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(98);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(274);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 280)                  // '}'
    {
      try_Expr();
    }
    shiftT(280);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(36);                      // '(#'
    lookahead1(222);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      shift(22);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      shift(22);                    // S
      lookahead1(0);                // PragmaContents
      shift(2);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(31);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(36);                     // '(#'
    lookahead1(222);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      shiftT(22);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      shiftT(22);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(2);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(31);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    parse_RelativePathExpr();
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    try_RelativePathExpr();
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    parse_PostfixExpr();
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    try_PostfixExpr();
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 6:                         // Wildcard
      shift(6);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 6:                         // Wildcard
      shiftT(6);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 64)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 64:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_ObjectLookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 64)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 64:                      // '['
        try_Predicate();
        break;
      case 35:                      // '('
        try_ArgumentList();
        break;
      default:
        try_ObjectLookup();
      }
    }
  }

  function parse_ObjectLookup()
  {
    eventHandler.startNonterminal("ObjectLookup", e0);
    shift(45);                      // '.'
    lookahead1W(226);               // StringLiteral | NCName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 12:                        // StringLiteral
      shift(12);                    // StringLiteral
      break;
    case 35:                        // '('
      whitespace();
      parse_ParenthesizedExpr();
      break;
    case 32:                        // '$'
      whitespace();
      parse_VarRef();
      break;
    default:
      whitespace();
      parse_NCName();
    }
    eventHandler.endNonterminal("ObjectLookup", e0);
  }

  function try_ObjectLookup()
  {
    shiftT(45);                     // '.'
    lookahead1W(226);               // StringLiteral | NCName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 12:                        // StringLiteral
      shiftT(12);                   // StringLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(35);                      // '('
    lookahead1W(247);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(241);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(35);                     // '('
    lookahead1W(247);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(241);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    shiftT(38);                     // ')'
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(64);                      // '['
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(65);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(64);                     // '['
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(65);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 12:                        // StringLiteral
      shift(12);                    // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 12:                        // StringLiteral
      shiftT(12);                   // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 9:                         // IntegerLiteral
      shift(9);                     // IntegerLiteral
      break;
    case 10:                        // DecimalLiteral
      shift(10);                    // DecimalLiteral
      break;
    default:
      shift(11);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 9:                         // IntegerLiteral
      shiftT(9);                    // IntegerLiteral
      break;
    case 10:                        // DecimalLiteral
      shiftT(10);                   // DecimalLiteral
      break;
    default:
      shiftT(11);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(35);                      // '('
    lookahead1W(240);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(35);                     // '('
    lookahead1W(240);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    shiftT(38);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(45);                      // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(45);                     // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(199);                     // 'ordered'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(199);                    // 'ordered'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(280);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(254);                     // 'unordered'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(254);                    // 'unordered'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(280);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 61:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 61:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(61);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(61);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 51:                        // '<'
      parse_DirElemConstructor();
      break;
    case 52:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 51:                        // '<'
      try_DirElemConstructor();
      break;
    case 52:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(51);                      // '<'
    lookahead1(4);                  // QName
    shift(21);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 46:                        // '/>'
      shift(46);                    // '/>'
      break;
    default:
      shift(58);                    // '>'
      for (;;)
      {
        lookahead1(185);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 53)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(53);                    // '</'
      lookahead1(4);                // QName
      shift(21);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 22)                 // S
      {
        shift(22);                  // S
      }
      lookahead1(8);                // '>'
      shift(58);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(51);                     // '<'
    lookahead1(4);                  // QName
    shiftT(21);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 46:                        // '/>'
      shiftT(46);                   // '/>'
      break;
    default:
      shiftT(58);                   // '>'
      for (;;)
      {
        lookahead1(185);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 53)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(53);                   // '</'
      lookahead1(4);                // QName
      shiftT(21);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 22)                 // S
      {
        shiftT(22);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(58);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      shift(22);                    // S
      lookahead1(90);               // QName | S | '/>' | '>'
      if (l1 == 21)                 // QName
      {
        shift(21);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 22)               // S
        {
          shift(22);                // S
        }
        lookahead1(7);              // '='
        shift(57);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          shift(22);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      shiftT(22);                   // S
      lookahead1(90);               // QName | S | '/>' | '>'
      if (l1 == 21)                 // QName
      {
        shiftT(21);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 22)               // S
        {
          shiftT(22);               // S
        }
        lookahead1(7);              // '='
        shiftT(57);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          shiftT(22);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      shift(29);                    // '"'
      for (;;)
      {
        lookahead1(178);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeQuot
          shift(14);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(29);                    // '"'
      break;
    default:
      shift(34);                    // "'"
      for (;;)
      {
        lookahead1(179);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 15:                    // EscapeApos
          shift(15);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(34);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      shiftT(29);                   // '"'
      for (;;)
      {
        lookahead1(178);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeQuot
          shiftT(14);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(29);                   // '"'
      break;
    default:
      shiftT(34);                   // "'"
      for (;;)
      {
        lookahead1(179);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 15:                    // EscapeApos
          shiftT(15);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(34);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // QuotAttrContentChar
      shift(17);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // QuotAttrContentChar
      shiftT(17);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 18:                        // AposAttrContentChar
      shift(18);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 18:                        // AposAttrContentChar
      shiftT(18);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      parse_DirectConstructor();
      break;
    case 5:                         // CDataSection
      shift(5);                     // CDataSection
      break;
    case 16:                        // ElementContentChar
      shift(16);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      try_DirectConstructor();
      break;
    case 5:                         // CDataSection
      shiftT(5);                    // CDataSection
      break;
    case 16:                        // ElementContentChar
      shiftT(16);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(52);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(3);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(44);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(52);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(3);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(44);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(56);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(19);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      shift(22);                    // S
      lookahead1(2);                // DirPIContents
      shift(4);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(62);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(56);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(19);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      shiftT(22);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(4);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(62);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 115:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 117:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 78:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 181:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 242:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 92:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 115:                       // 'document'
      try_CompDocConstructor();
      break;
    case 117:                       // 'element'
      try_CompElemConstructor();
      break;
    case 78:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 181:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 242:                       // 'text'
      try_CompTextConstructor();
      break;
    case 92:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(117);                     // 'element'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shift(274);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(280);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 280)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(280);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(117);                    // 'element'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shiftT(274);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(280);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 280)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(280);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(181);                     // 'namespace'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shift(274);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      shift(280);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(181);                    // 'namespace'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shiftT(274);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      shiftT(280);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    shiftT(280);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(30);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(9);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(30);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(9);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(95);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(141);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(93);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(109);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 75)                   // 'as'
    {
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(95);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(141);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(93);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      try_ParamList();
    }
    shiftT(38);                     // ')'
    lookahead1W(109);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 75)                   // 'as'
    {
      shiftT(75);                   // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 61)                   // '?'
    {
      shift(61);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 61)                   // '?'
    {
      shiftT(61);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(75);                      // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(75);                     // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 120:                       // 'empty-sequence'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18040:                     // 'empty-sequence' '('
      shift(120);                   // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 61:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 120:                       // 'empty-sequence'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18040:                     // 'empty-sequence' '('
      shiftT(120);                  // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 61:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 61:                        // '?'
      shift(61);                    // '?'
      break;
    case 40:                        // '*'
      shift(40);                    // '*'
      break;
    default:
      shift(41);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 61:                        // '?'
      shiftT(61);                   // '?'
      break;
    case 40:                        // '*'
      shiftT(40);                   // '*'
      break;
    default:
      shiftT(41);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 74:                        // 'array'
    case 78:                        // 'attribute'
    case 92:                        // 'comment'
    case 116:                       // 'document-node'
    case 117:                       // 'element'
    case 141:                       // 'function'
    case 161:                       // 'item'
    case 163:                       // 'json-item'
    case 182:                       // 'namespace-node'
    case 188:                       // 'node'
    case 191:                       // 'object'
    case 213:                       // 'processing-instruction'
    case 223:                       // 'schema-attribute'
    case 224:                       // 'schema-element'
    case 242:                       // 'text'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17994                 // 'array' '('
     || lk == 18083                 // 'json-item' '('
     || lk == 18111)                // 'object' '('
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 17998:                     // 'attribute' '('
    case 18012:                     // 'comment' '('
    case 18036:                     // 'document-node' '('
    case 18037:                     // 'element' '('
    case 18102:                     // 'namespace-node' '('
    case 18108:                     // 'node' '('
    case 18133:                     // 'processing-instruction' '('
    case 18143:                     // 'schema-attribute' '('
    case 18144:                     // 'schema-element' '('
    case 18162:                     // 'text' '('
      parse_KindTest();
      break;
    case 18081:                     // 'item' '('
      shift(161);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case -6:
      parse_JSONTest();
      break;
    case 240:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 74:                        // 'array'
    case 78:                        // 'attribute'
    case 92:                        // 'comment'
    case 116:                       // 'document-node'
    case 117:                       // 'element'
    case 141:                       // 'function'
    case 161:                       // 'item'
    case 163:                       // 'json-item'
    case 182:                       // 'namespace-node'
    case 188:                       // 'node'
    case 191:                       // 'object'
    case 213:                       // 'processing-instruction'
    case 223:                       // 'schema-attribute'
    case 224:                       // 'schema-element'
    case 242:                       // 'text'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17994                 // 'array' '('
     || lk == 18083                 // 'json-item' '('
     || lk == 18111)                // 'object' '('
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(2, e0A, -1);
          lk = -8;
        }
        catch (p1A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 17998:                     // 'attribute' '('
    case 18012:                     // 'comment' '('
    case 18036:                     // 'document-node' '('
    case 18037:                     // 'element' '('
    case 18102:                     // 'namespace-node' '('
    case 18108:                     // 'node' '('
    case 18133:                     // 'processing-instruction' '('
    case 18143:                     // 'schema-attribute' '('
    case 18144:                     // 'schema-element' '('
    case 18162:                     // 'text' '('
      try_KindTest();
      break;
    case 18081:                     // 'item' '('
      shiftT(161);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case -6:
      try_JSONTest();
      break;
    case 240:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 163:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 191:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 163:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 191:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(240);                     // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(240);                    // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(163);                     // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(163);                    // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(191);                     // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(191);                    // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(74);                      // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(74);                     // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 116:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 117:                       // 'element'
      parse_ElementTest();
      break;
    case 78:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 224:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 223:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 213:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 92:                        // 'comment'
      parse_CommentTest();
      break;
    case 242:                       // 'text'
      parse_TextTest();
      break;
    case 182:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    case 188:                       // 'node'
      parse_AnyKindTest();
      break;
    default:
      parse_JSONTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 116:                       // 'document-node'
      try_DocumentTest();
      break;
    case 117:                       // 'element'
      try_ElementTest();
      break;
    case 78:                        // 'attribute'
      try_AttributeTest();
      break;
    case 224:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 223:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 213:                       // 'processing-instruction'
      try_PITest();
      break;
    case 92:                        // 'comment'
      try_CommentTest();
      break;
    case 242:                       // 'text'
      try_TextTest();
      break;
    case 182:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    case 188:                       // 'node'
      try_AnyKindTest();
      break;
    default:
      try_JSONTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(188);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(188);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(116);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(147);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 117:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(116);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(147);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 117:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(242);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(242);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(92);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(92);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(182);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(182);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(213);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(223);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 12:                      // StringLiteral
        shift(12);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(213);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(223);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 12:                      // StringLiteral
        shiftT(12);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(78);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(99);              // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(78);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(99);              // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(223);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(223);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(117);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(99);              // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(100);           // S^WS | '(:' | ')' | '?'
        if (l1 == 61)               // '?'
        {
          shift(61);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(117);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(99);              // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(100);           // S^WS | '(:' | ')' | '?'
        if (l1 == 61)               // '?'
        {
          shiftT(61);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(224);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(224);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(95);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(3, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(95);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(3, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(141);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(39);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(141);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(39);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(141);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(235);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(233);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    shift(38);                      // ')'
    lookahead1W(29);                // S^WS | '(:' | 'as'
    shift(75);                      // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(141);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(235);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(233);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    shiftT(38);                     // ')'
    lookahead1W(29);                // S^WS | '(:' | 'as'
    shiftT(75);                     // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(35);                      // '('
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(35);                     // '('
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(70);                // S^WS | '(:' | 'revalidation'
    shift(219);                     // 'revalidation'
    lookahead1W(155);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 238:                       // 'strict'
      shift(238);                   // 'strict'
      break;
    case 168:                       // 'lax'
      shift(168);                   // 'lax'
      break;
    default:
      shift(231);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 66:                        // 'after'
      shift(66);                    // 'after'
      break;
    case 80:                        // 'before'
      shift(80);                    // 'before'
      break;
    default:
      if (l1 == 75)                 // 'as'
      {
        shift(75);                  // 'as'
        lookahead1W(117);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 130:                   // 'first'
          shift(130);               // 'first'
          break;
        default:
          shift(167);               // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      shift(159);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 66:                        // 'after'
      shiftT(66);                   // 'after'
      break;
    case 80:                        // 'before'
      shiftT(80);                   // 'before'
      break;
    default:
      if (l1 == 75)                 // 'as'
      {
        shiftT(75);                 // 'as'
        lookahead1W(117);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 130:                   // 'first'
          shiftT(130);              // 'first'
          break;
        default:
          shiftT(167);              // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      shiftT(159);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(155);                     // 'insert'
    lookahead1W(127);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 188:                       // 'node'
      shift(188);                   // 'node'
      break;
    default:
      shift(189);                   // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(155);                    // 'insert'
    lookahead1W(127);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 188:                       // 'node'
      shiftT(188);                  // 'node'
      break;
    default:
      shiftT(189);                  // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(106);                     // 'delete'
    lookahead1W(127);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 188:                       // 'node'
      shift(188);                   // 'node'
      break;
    default:
      shift(189);                   // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(106);                    // 'delete'
    lookahead1W(127);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 188:                       // 'node'
      shiftT(188);                  // 'node'
      break;
    default:
      shiftT(189);                  // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(216);                     // 'replace'
    lookahead1W(128);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 259)                  // 'value'
    {
      shift(259);                   // 'value'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shift(193);                   // 'of'
    }
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(188);                     // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(268);                     // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(216);                    // 'replace'
    lookahead1W(128);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 259)                  // 'value'
    {
      shiftT(259);                  // 'value'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shiftT(193);                  // 'of'
    }
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shiftT(188);                    // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    shiftT(268);                    // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(215);                     // 'rename'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(188);                     // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(75);                      // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(215);                    // 'rename'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shiftT(188);                    // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    shiftT(75);                     // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(99);                      // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shift(49);                      // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(26);              // S^WS | '(:' | ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(178);                     // 'modify'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(99);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shiftT(49);                     // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(26);              // S^WS | '(:' | ':='
      shiftT(49);                   // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(178);                    // 'modify'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      switch (l1)
      {
      case 77:                      // 'at'
        lookahead2W(154);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 111                 // 'different'
       && lk != 113                 // 'distance'
       && lk != 123                 // 'entire'
       && lk != 199                 // 'ordered'
       && lk != 220                 // 'same'
       && lk != 267                 // 'window'
       && lk != 62541               // 'at' 'end'
       && lk != 120397)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      switch (l1)
      {
      case 77:                      // 'at'
        lookahead2W(154);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 111                 // 'different'
       && lk != 113                 // 'distance'
       && lk != 123                 // 'entire'
       && lk != 199                 // 'ordered'
       && lk != 220                 // 'same'
       && lk != 267                 // 'window'
       && lk != 62541               // 'at' 'end'
       && lk != 120397)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(262);                     // 'weight'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shift(274);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(262);                    // 'weight'
    lookahead1W(85);                // S^WS | '(:' | '{'
    shiftT(274);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(280);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 140)                // 'ftor'
      {
        break;
      }
      shift(140);                   // 'ftor'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 140)                // 'ftor'
      {
        break;
      }
      shiftT(140);                  // 'ftor'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 138)                // 'ftand'
      {
        break;
      }
      shift(138);                   // 'ftand'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 138)                // 'ftand'
      {
        break;
      }
      shiftT(138);                  // 'ftand'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 190)                // 'not'
      {
        break;
      }
      shift(190);                   // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shift(150);                   // 'in'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 190)                // 'not'
      {
        break;
      }
      shiftT(190);                  // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shiftT(150);                  // 'in'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 139)                  // 'ftnot'
    {
      shift(139);                   // 'ftnot'
    }
    lookahead1W(160);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 139)                  // 'ftnot'
    {
      shiftT(139);                  // 'ftnot'
    }
    lookahead1W(160);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 257)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 262)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 257)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 262)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      shift(35);                    // '('
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(38);                    // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(204);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 192)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      shiftT(35);                   // '('
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(38);                   // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(204);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 192)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(209);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 67                    // 'all'
     || l1 == 72                    // 'any'
     || l1 == 207)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(209);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 67                    // 'all'
     || l1 == 72                    // 'any'
     || l1 == 207)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 12:                        // StringLiteral
      shift(12);                    // StringLiteral
      break;
    default:
      shift(274);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(280);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 12:                        // StringLiteral
      shiftT(12);                   // StringLiteral
      break;
    default:
      shiftT(274);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(280);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(98);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(274);                     // '{'
    lookahead1W(177);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 280)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(280);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(98);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(274);                    // '{'
    lookahead1W(177);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 280)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(280);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 72:                        // 'any'
      shift(72);                    // 'any'
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' | '|}' |
                                    // '}'
      if (l1 == 270)                // 'word'
      {
        shift(270);                 // 'word'
      }
      break;
    case 67:                        // 'all'
      shift(67);                    // 'all'
      lookahead1W(208);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|}' |
                                    // '}'
      if (l1 == 271)                // 'words'
      {
        shift(271);                 // 'words'
      }
      break;
    default:
      shift(207);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 72:                        // 'any'
      shiftT(72);                   // 'any'
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' | '|}' |
                                    // '}'
      if (l1 == 270)                // 'word'
      {
        shiftT(270);                // 'word'
      }
      break;
    case 67:                        // 'all'
      shiftT(67);                   // 'all'
      lookahead1W(208);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|}' |
                                    // '}'
      if (l1 == 271)                // 'words'
      {
        shiftT(271);                // 'words'
      }
      break;
    default:
      shiftT(207);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(192);                     // 'occurs'
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(245);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(192);                    // 'occurs'
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(245);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 126:                       // 'exactly'
      shift(126);                   // 'exactly'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(123);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 170:                     // 'least'
        shift(170);                 // 'least'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(180);                 // 'most'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(136);                   // 'from'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      shift(246);                   // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 126:                       // 'exactly'
      shiftT(126);                  // 'exactly'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(123);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 170:                     // 'least'
        shiftT(170);                // 'least'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        shiftT(180);                // 'most'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(136);                  // 'from'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      shiftT(246);                  // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 199:                       // 'ordered'
      parse_FTOrder();
      break;
    case 267:                       // 'window'
      parse_FTWindow();
      break;
    case 113:                       // 'distance'
      parse_FTDistance();
      break;
    case 111:                       // 'different'
    case 220:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 199:                       // 'ordered'
      try_FTOrder();
      break;
    case 267:                       // 'window'
      try_FTWindow();
      break;
    case 113:                       // 'distance'
      try_FTDistance();
      break;
    case 111:                       // 'different'
    case 220:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(199);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(199);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(267);                     // 'window'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(267);                    // 'window'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(113);                     // 'distance'
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(113);                    // 'distance'
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 271:                       // 'words'
      shift(271);                   // 'words'
      break;
    case 230:                       // 'sentences'
      shift(230);                   // 'sentences'
      break;
    default:
      shift(202);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 271:                       // 'words'
      shiftT(271);                  // 'words'
      break;
    case 230:                       // 'sentences'
      shiftT(230);                  // 'sentences'
      break;
    default:
      shiftT(202);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 220:                       // 'same'
      shift(220);                   // 'same'
      break;
    default:
      shift(111);                   // 'different'
    }
    lookahead1W(130);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 220:                       // 'same'
      shiftT(220);                  // 'same'
      break;
    default:
      shiftT(111);                  // 'different'
    }
    lookahead1W(130);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 229:                       // 'sentence'
      shift(229);                   // 'sentence'
      break;
    default:
      shift(201);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 229:                       // 'sentence'
      shiftT(229);                  // 'sentence'
      break;
    default:
      shiftT(201);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(115);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 235:                     // 'start'
        shift(235);                 // 'start'
        break;
      default:
        shift(122);                 // 'end'
      }
      break;
    default:
      shift(123);                   // 'entire'
      lookahead1W(41);              // S^WS | '(:' | 'content'
      shift(96);                    // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(115);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 235:                     // 'start'
        shiftT(235);                // 'start'
        break;
      default:
        shiftT(122);                // 'end'
      }
      break;
    default:
      shiftT(123);                  // 'entire'
      lookahead1W(41);              // S^WS | '(:' | 'content'
      shiftT(96);                   // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(257);                   // 'using'
      lookahead1W(192);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(202);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 257)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(257);                  // 'using'
      lookahead1W(192);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(202);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 257)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 185:                       // 'no'
      lookahead2W(169);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 166:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 266:                       // 'wildcards'
    case 136377:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 244:                       // 'thesaurus'
    case 125113:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 236:                       // 'stemming'
    case 121017:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 110:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 237:                       // 'stop'
    case 121529:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 196:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 185:                       // 'no'
      lookahead2W(169);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 166:                       // 'language'
      try_FTLanguageOption();
      break;
    case 266:                       // 'wildcards'
    case 136377:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 244:                       // 'thesaurus'
    case 125113:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 236:                       // 'stemming'
    case 121017:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 110:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 237:                       // 'stop'
    case 121529:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 196:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 84:                        // 'case'
      shift(84);                    // 'case'
      lookahead1W(122);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        shift(154);                 // 'insensitive'
        break;
      default:
        shift(228);                 // 'sensitive'
      }
      break;
    case 174:                       // 'lowercase'
      shift(174);                   // 'lowercase'
      break;
    default:
      shift(256);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 84:                        // 'case'
      shiftT(84);                   // 'case'
      lookahead1W(122);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        shiftT(154);                // 'insensitive'
        break;
      default:
        shiftT(228);                // 'sensitive'
      }
      break;
    case 174:                       // 'lowercase'
      shiftT(174);                  // 'lowercase'
      break;
    default:
      shiftT(256);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(110);                     // 'diacritics'
    lookahead1W(122);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      shift(154);                   // 'insensitive'
      break;
    default:
      shift(228);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(110);                    // 'diacritics'
    lookahead1W(122);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      shiftT(154);                  // 'insensitive'
      break;
    default:
      shiftT(228);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 236:                       // 'stemming'
      shift(236);                   // 'stemming'
      break;
    default:
      shift(185);                   // 'no'
      lookahead1W(72);              // S^WS | '(:' | 'stemming'
      shift(236);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 236:                       // 'stemming'
      shiftT(236);                  // 'stemming'
      break;
    default:
      shiftT(185);                  // 'no'
      lookahead1W(72);              // S^WS | '(:' | 'stemming'
      shiftT(236);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 244:                       // 'thesaurus'
      shift(244);                   // 'thesaurus'
      lookahead1W(145);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 77:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 105:                     // 'default'
        shift(105);                 // 'default'
        break;
      default:
        shift(35);                  // '('
        lookahead1W(110);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 77:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(105);               // 'default'
        }
        for (;;)
        {
          lookahead1W(99);          // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shift(42);                // ','
          lookahead1W(30);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(38);                  // ')'
      }
      break;
    default:
      shift(185);                   // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'thesaurus'
      shift(244);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 244:                       // 'thesaurus'
      shiftT(244);                  // 'thesaurus'
      lookahead1W(145);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 77:                      // 'at'
        try_FTThesaurusID();
        break;
      case 105:                     // 'default'
        shiftT(105);                // 'default'
        break;
      default:
        shiftT(35);                 // '('
        lookahead1W(110);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 77:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(105);              // 'default'
        }
        for (;;)
        {
          lookahead1W(99);          // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shiftT(42);               // ','
          lookahead1W(30);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(38);                 // ')'
      }
      break;
    default:
      shiftT(185);                  // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'thesaurus'
      shiftT(244);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(77);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(205);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 214)                  // 'relationship'
    {
      shift(214);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
    }
    lookahead1W(203);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(176);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    case 136:                       // 'from'
      lookahead2W(159);             // IntegerLiteral | S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk == 126                   // 'exactly'
     || lk == 4744                  // 'from' IntegerLiteral
     || lk == 87117                 // 'at' 'least'
     || lk == 92237)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(57);              // S^WS | '(:' | 'levels'
      shift(172);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(77);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(8);                      // URILiteral
    lookahead1W(205);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 214)                  // 'relationship'
    {
      shiftT(214);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(12);                   // StringLiteral
    }
    lookahead1W(203);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(176);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    case 136:                       // 'from'
      lookahead2W(159);             // IntegerLiteral | S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk == 126                   // 'exactly'
     || lk == 4744                  // 'from' IntegerLiteral
     || lk == 87117                 // 'at' 'least'
     || lk == 92237)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(57);              // S^WS | '(:' | 'levels'
      shiftT(172);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 126:                       // 'exactly'
      shift(126);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(9);                     // IntegerLiteral
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(123);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 170:                     // 'least'
        shift(170);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(9);                   // IntegerLiteral
        break;
      default:
        shift(180);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(9);                   // IntegerLiteral
      }
      break;
    default:
      shift(136);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(9);                     // IntegerLiteral
      lookahead1W(77);              // S^WS | '(:' | 'to'
      shift(246);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(9);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 126:                       // 'exactly'
      shiftT(126);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(9);                    // IntegerLiteral
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(123);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 170:                     // 'least'
        shiftT(170);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(9);                  // IntegerLiteral
        break;
      default:
        shiftT(180);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(9);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(136);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(9);                    // IntegerLiteral
      lookahead1W(77);              // S^WS | '(:' | 'to'
      shiftT(246);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(9);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 237:                       // 'stop'
      shift(237);                   // 'stop'
      lookahead1W(84);              // S^WS | '(:' | 'words'
      shift(271);                   // 'words'
      lookahead1W(145);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 105:                     // 'default'
        shift(105);                 // 'default'
        for (;;)
        {
          lookahead1W(206);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 127             // 'except'
           && l1 != 252)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(206);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 127             // 'except'
           && l1 != 252)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(185);                   // 'no'
      lookahead1W(73);              // S^WS | '(:' | 'stop'
      shift(237);                   // 'stop'
      lookahead1W(84);              // S^WS | '(:' | 'words'
      shift(271);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 237:                       // 'stop'
      shiftT(237);                  // 'stop'
      lookahead1W(84);              // S^WS | '(:' | 'words'
      shiftT(271);                  // 'words'
      lookahead1W(145);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 105:                     // 'default'
        shiftT(105);                // 'default'
        for (;;)
        {
          lookahead1W(206);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 127             // 'except'
           && l1 != 252)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(206);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 127             // 'except'
           && l1 != 252)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(185);                  // 'no'
      lookahead1W(73);              // S^WS | '(:' | 'stop'
      shiftT(237);                  // 'stop'
      lookahead1W(84);              // S^WS | '(:' | 'words'
      shiftT(271);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
      break;
    default:
      shift(35);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(12);                  // StringLiteral
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(8);                    // URILiteral
      break;
    default:
      shiftT(35);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(12);                   // StringLiteral
      for (;;)
      {
        lookahead1W(99);            // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(12);                 // StringLiteral
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 252:                       // 'union'
      shift(252);                   // 'union'
      break;
    default:
      shift(127);                   // 'except'
    }
    lookahead1W(97);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 252:                       // 'union'
      shiftT(252);                  // 'union'
      break;
    default:
      shiftT(127);                  // 'except'
    }
    lookahead1W(97);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(166);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(12);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(166);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(12);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 266:                       // 'wildcards'
      shift(266);                   // 'wildcards'
      break;
    default:
      shift(185);                   // 'no'
      lookahead1W(82);              // S^WS | '(:' | 'wildcards'
      shift(266);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 266:                       // 'wildcards'
      shiftT(266);                  // 'wildcards'
      break;
    default:
      shiftT(185);                  // 'no'
      lookahead1W(82);              // S^WS | '(:' | 'wildcards'
      shiftT(266);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(196);                     // 'option'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(12);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(196);                    // 'option'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(12);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(269);                     // 'without'
    lookahead1W(41);                // S^WS | '(:' | 'content'
    shift(96);                      // 'content'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(269);                    // 'without'
    lookahead1W(41);                // S^WS | '(:' | 'content'
    shiftT(96);                     // 'content'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(91);                      // 'collection'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(105);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(75);                      // 'as'
    lookahead1W(195);               // S^WS | '(:' | 'array' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'json-item' | 'namespace-node' | 'node' | 'object' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(164);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 50)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(149);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 90)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(75);                      // 'as'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(181);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 61)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(90);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(151);                     // 'index'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(64);                // S^WS | '(:' | 'on'
    shift(194);                     // 'on'
    lookahead1W(62);                // S^WS | '(:' | 'nodes'
    shift(189);                     // 'nodes'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    shift(83);                      // 'by'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(236);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(157);                     // 'integrity'
    lookahead1W(39);                // S^WS | '(:' | 'constraint'
    shift(93);                      // 'constraint'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(118);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 194:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(194);                     // 'on'
    lookahead1W(38);                // S^WS | '(:' | 'collection'
    shift(91);                      // 'collection'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(142);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 32:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 188:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(36);                // S^WS | '(:' | 'check'
    shift(88);                      // 'check'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(188);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(36);                // S^WS | '(:' | 'check'
    shift(88);                      // 'check'
    lookahead1W(78);                // S^WS | '(:' | 'unique'
    shift(253);                     // 'unique'
    lookahead1W(56);                // S^WS | '(:' | 'key'
    shift(165);                     // 'key'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(134);                     // 'foreach'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(188);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(36);                // S^WS | '(:' | 'check'
    shift(88);                      // 'check'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(135);                     // 'foreign'
    lookahead1W(56);                // S^WS | '(:' | 'key'
    shift(165);                     // 'key'
    lookahead1W(50);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(136);                     // 'from'
    lookahead1W(38);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(246);                     // 'to'
    lookahead1W(38);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(91);                      // 'collection'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(188);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(56);                // S^WS | '(:' | 'key'
    shift(165);                     // 'key'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(37);                     // '(:'
    for (;;)
    {
      lookahead1(87);               // CommentContents | '(:' | ':)'
      if (l1 == 48)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // CommentContents
        shiftT(25);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(48);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 23:                        // S^WS
      shiftT(23);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(220);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 78:                        // 'attribute'
      shift(78);                    // 'attribute'
      break;
    case 92:                        // 'comment'
      shift(92);                    // 'comment'
      break;
    case 116:                       // 'document-node'
      shift(116);                   // 'document-node'
      break;
    case 117:                       // 'element'
      shift(117);                   // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shift(120);                   // 'empty-sequence'
      break;
    case 141:                       // 'function'
      shift(141);                   // 'function'
      break;
    case 148:                       // 'if'
      shift(148);                   // 'if'
      break;
    case 161:                       // 'item'
      shift(161);                   // 'item'
      break;
    case 182:                       // 'namespace-node'
      shift(182);                   // 'namespace-node'
      break;
    case 188:                       // 'node'
      shift(188);                   // 'node'
      break;
    case 213:                       // 'processing-instruction'
      shift(213);                   // 'processing-instruction'
      break;
    case 223:                       // 'schema-attribute'
      shift(223);                   // 'schema-attribute'
      break;
    case 224:                       // 'schema-element'
      shift(224);                   // 'schema-element'
      break;
    case 241:                       // 'switch'
      shift(241);                   // 'switch'
      break;
    case 242:                       // 'text'
      shift(242);                   // 'text'
      break;
    case 251:                       // 'typeswitch'
      shift(251);                   // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(220);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 78:                        // 'attribute'
      shiftT(78);                   // 'attribute'
      break;
    case 92:                        // 'comment'
      shiftT(92);                   // 'comment'
      break;
    case 116:                       // 'document-node'
      shiftT(116);                  // 'document-node'
      break;
    case 117:                       // 'element'
      shiftT(117);                  // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shiftT(120);                  // 'empty-sequence'
      break;
    case 141:                       // 'function'
      shiftT(141);                  // 'function'
      break;
    case 148:                       // 'if'
      shiftT(148);                  // 'if'
      break;
    case 161:                       // 'item'
      shiftT(161);                  // 'item'
      break;
    case 182:                       // 'namespace-node'
      shiftT(182);                  // 'namespace-node'
      break;
    case 188:                       // 'node'
      shiftT(188);                  // 'node'
      break;
    case 213:                       // 'processing-instruction'
      shiftT(213);                  // 'processing-instruction'
      break;
    case 223:                       // 'schema-attribute'
      shiftT(223);                  // 'schema-attribute'
      break;
    case 224:                       // 'schema-element'
      shiftT(224);                  // 'schema-element'
      break;
    case 241:                       // 'switch'
      shiftT(241);                  // 'switch'
      break;
    case 242:                       // 'text'
      shiftT(242);                  // 'text'
      break;
    case 251:                       // 'typeswitch'
      shiftT(251);                  // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 7:                         // EQName^Token
      shift(7);                     // EQName^Token
      break;
    case 66:                        // 'after'
      shift(66);                    // 'after'
      break;
    case 69:                        // 'ancestor'
      shift(69);                    // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shift(70);                    // 'ancestor-or-self'
      break;
    case 71:                        // 'and'
      shift(71);                    // 'and'
      break;
    case 75:                        // 'as'
      shift(75);                    // 'as'
      break;
    case 76:                        // 'ascending'
      shift(76);                    // 'ascending'
      break;
    case 80:                        // 'before'
      shift(80);                    // 'before'
      break;
    case 84:                        // 'case'
      shift(84);                    // 'case'
      break;
    case 85:                        // 'cast'
      shift(85);                    // 'cast'
      break;
    case 86:                        // 'castable'
      shift(86);                    // 'castable'
      break;
    case 89:                        // 'child'
      shift(89);                    // 'child'
      break;
    case 90:                        // 'collation'
      shift(90);                    // 'collation'
      break;
    case 99:                        // 'copy'
      shift(99);                    // 'copy'
      break;
    case 101:                       // 'count'
      shift(101);                   // 'count'
      break;
    case 104:                       // 'declare'
      shift(104);                   // 'declare'
      break;
    case 105:                       // 'default'
      shift(105);                   // 'default'
      break;
    case 106:                       // 'delete'
      shift(106);                   // 'delete'
      break;
    case 107:                       // 'descendant'
      shift(107);                   // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shift(108);                   // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      shift(109);                   // 'descending'
      break;
    case 114:                       // 'div'
      shift(114);                   // 'div'
      break;
    case 115:                       // 'document'
      shift(115);                   // 'document'
      break;
    case 118:                       // 'else'
      shift(118);                   // 'else'
      break;
    case 119:                       // 'empty'
      shift(119);                   // 'empty'
      break;
    case 122:                       // 'end'
      shift(122);                   // 'end'
      break;
    case 124:                       // 'eq'
      shift(124);                   // 'eq'
      break;
    case 125:                       // 'every'
      shift(125);                   // 'every'
      break;
    case 127:                       // 'except'
      shift(127);                   // 'except'
      break;
    case 130:                       // 'first'
      shift(130);                   // 'first'
      break;
    case 131:                       // 'following'
      shift(131);                   // 'following'
      break;
    case 132:                       // 'following-sibling'
      shift(132);                   // 'following-sibling'
      break;
    case 133:                       // 'for'
      shift(133);                   // 'for'
      break;
    case 136:                       // 'from'
      shift(136);                   // 'from'
      break;
    case 142:                       // 'ge'
      shift(142);                   // 'ge'
      break;
    case 144:                       // 'group'
      shift(144);                   // 'group'
      break;
    case 146:                       // 'gt'
      shift(146);                   // 'gt'
      break;
    case 147:                       // 'idiv'
      shift(147);                   // 'idiv'
      break;
    case 149:                       // 'import'
      shift(149);                   // 'import'
      break;
    case 155:                       // 'insert'
      shift(155);                   // 'insert'
      break;
    case 156:                       // 'instance'
      shift(156);                   // 'instance'
      break;
    case 158:                       // 'intersect'
      shift(158);                   // 'intersect'
      break;
    case 159:                       // 'into'
      shift(159);                   // 'into'
      break;
    case 160:                       // 'is'
      shift(160);                   // 'is'
      break;
    case 167:                       // 'last'
      shift(167);                   // 'last'
      break;
    case 169:                       // 'le'
      shift(169);                   // 'le'
      break;
    case 171:                       // 'let'
      shift(171);                   // 'let'
      break;
    case 175:                       // 'lt'
      shift(175);                   // 'lt'
      break;
    case 177:                       // 'mod'
      shift(177);                   // 'mod'
      break;
    case 178:                       // 'modify'
      shift(178);                   // 'modify'
      break;
    case 179:                       // 'module'
      shift(179);                   // 'module'
      break;
    case 181:                       // 'namespace'
      shift(181);                   // 'namespace'
      break;
    case 183:                       // 'ne'
      shift(183);                   // 'ne'
      break;
    case 195:                       // 'only'
      shift(195);                   // 'only'
      break;
    case 197:                       // 'or'
      shift(197);                   // 'or'
      break;
    case 198:                       // 'order'
      shift(198);                   // 'order'
      break;
    case 199:                       // 'ordered'
      shift(199);                   // 'ordered'
      break;
    case 203:                       // 'parent'
      shift(203);                   // 'parent'
      break;
    case 209:                       // 'preceding'
      shift(209);                   // 'preceding'
      break;
    case 210:                       // 'preceding-sibling'
      shift(210);                   // 'preceding-sibling'
      break;
    case 215:                       // 'rename'
      shift(215);                   // 'rename'
      break;
    case 216:                       // 'replace'
      shift(216);                   // 'replace'
      break;
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    case 226:                       // 'select'
      shift(226);                   // 'select'
      break;
    case 221:                       // 'satisfies'
      shift(221);                   // 'satisfies'
      break;
    case 227:                       // 'self'
      shift(227);                   // 'self'
      break;
    case 233:                       // 'some'
      shift(233);                   // 'some'
      break;
    case 234:                       // 'stable'
      shift(234);                   // 'stable'
      break;
    case 235:                       // 'start'
      shift(235);                   // 'start'
      break;
    case 246:                       // 'to'
      shift(246);                   // 'to'
      break;
    case 247:                       // 'treat'
      shift(247);                   // 'treat'
      break;
    case 248:                       // 'try'
      shift(248);                   // 'try'
      break;
    case 252:                       // 'union'
      shift(252);                   // 'union'
      break;
    case 254:                       // 'unordered'
      shift(254);                   // 'unordered'
      break;
    case 258:                       // 'validate'
      shift(258);                   // 'validate'
      break;
    case 264:                       // 'where'
      shift(264);                   // 'where'
      break;
    case 268:                       // 'with'
      shift(268);                   // 'with'
      break;
    case 272:                       // 'xquery'
      shift(272);                   // 'xquery'
      break;
    case 68:                        // 'allowing'
      shift(68);                    // 'allowing'
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      break;
    case 79:                        // 'base-uri'
      shift(79);                    // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shift(81);                    // 'boundary-space'
      break;
    case 82:                        // 'break'
      shift(82);                    // 'break'
      break;
    case 87:                        // 'catch'
      shift(87);                    // 'catch'
      break;
    case 94:                        // 'construction'
      shift(94);                    // 'construction'
      break;
    case 97:                        // 'context'
      shift(97);                    // 'context'
      break;
    case 98:                        // 'continue'
      shift(98);                    // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shift(100);                   // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shift(102);                   // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shift(121);                   // 'encoding'
      break;
    case 128:                       // 'exit'
      shift(128);                   // 'exit'
      break;
    case 129:                       // 'external'
      shift(129);                   // 'external'
      break;
    case 137:                       // 'ft-option'
      shift(137);                   // 'ft-option'
      break;
    case 150:                       // 'in'
      shift(150);                   // 'in'
      break;
    case 151:                       // 'index'
      shift(151);                   // 'index'
      break;
    case 157:                       // 'integrity'
      shift(157);                   // 'integrity'
      break;
    case 168:                       // 'lax'
      shift(168);                   // 'lax'
      break;
    case 189:                       // 'nodes'
      shift(189);                   // 'nodes'
      break;
    case 196:                       // 'option'
      shift(196);                   // 'option'
      break;
    case 200:                       // 'ordering'
      shift(200);                   // 'ordering'
      break;
    case 219:                       // 'revalidation'
      shift(219);                   // 'revalidation'
      break;
    case 222:                       // 'schema'
      shift(222);                   // 'schema'
      break;
    case 225:                       // 'score'
      shift(225);                   // 'score'
      break;
    case 232:                       // 'sliding'
      shift(232);                   // 'sliding'
      break;
    case 238:                       // 'strict'
      shift(238);                   // 'strict'
      break;
    case 249:                       // 'tumbling'
      shift(249);                   // 'tumbling'
      break;
    case 250:                       // 'type'
      shift(250);                   // 'type'
      break;
    case 255:                       // 'updating'
      shift(255);                   // 'updating'
      break;
    case 259:                       // 'value'
      shift(259);                   // 'value'
      break;
    case 260:                       // 'variable'
      shift(260);                   // 'variable'
      break;
    case 261:                       // 'version'
      shift(261);                   // 'version'
      break;
    case 265:                       // 'while'
      shift(265);                   // 'while'
      break;
    case 93:                        // 'constraint'
      shift(93);                    // 'constraint'
      break;
    case 173:                       // 'loop'
      shift(173);                   // 'loop'
      break;
    case 218:                       // 'returning'
      shift(218);                   // 'returning'
      break;
    case 191:                       // 'object'
      shift(191);                   // 'object'
      break;
    case 163:                       // 'json-item'
      shift(163);                   // 'json-item'
      break;
    default:
      shift(74);                    // 'array'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 7:                         // EQName^Token
      shiftT(7);                    // EQName^Token
      break;
    case 66:                        // 'after'
      shiftT(66);                   // 'after'
      break;
    case 69:                        // 'ancestor'
      shiftT(69);                   // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shiftT(70);                   // 'ancestor-or-self'
      break;
    case 71:                        // 'and'
      shiftT(71);                   // 'and'
      break;
    case 75:                        // 'as'
      shiftT(75);                   // 'as'
      break;
    case 76:                        // 'ascending'
      shiftT(76);                   // 'ascending'
      break;
    case 80:                        // 'before'
      shiftT(80);                   // 'before'
      break;
    case 84:                        // 'case'
      shiftT(84);                   // 'case'
      break;
    case 85:                        // 'cast'
      shiftT(85);                   // 'cast'
      break;
    case 86:                        // 'castable'
      shiftT(86);                   // 'castable'
      break;
    case 89:                        // 'child'
      shiftT(89);                   // 'child'
      break;
    case 90:                        // 'collation'
      shiftT(90);                   // 'collation'
      break;
    case 99:                        // 'copy'
      shiftT(99);                   // 'copy'
      break;
    case 101:                       // 'count'
      shiftT(101);                  // 'count'
      break;
    case 104:                       // 'declare'
      shiftT(104);                  // 'declare'
      break;
    case 105:                       // 'default'
      shiftT(105);                  // 'default'
      break;
    case 106:                       // 'delete'
      shiftT(106);                  // 'delete'
      break;
    case 107:                       // 'descendant'
      shiftT(107);                  // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shiftT(108);                  // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      shiftT(109);                  // 'descending'
      break;
    case 114:                       // 'div'
      shiftT(114);                  // 'div'
      break;
    case 115:                       // 'document'
      shiftT(115);                  // 'document'
      break;
    case 118:                       // 'else'
      shiftT(118);                  // 'else'
      break;
    case 119:                       // 'empty'
      shiftT(119);                  // 'empty'
      break;
    case 122:                       // 'end'
      shiftT(122);                  // 'end'
      break;
    case 124:                       // 'eq'
      shiftT(124);                  // 'eq'
      break;
    case 125:                       // 'every'
      shiftT(125);                  // 'every'
      break;
    case 127:                       // 'except'
      shiftT(127);                  // 'except'
      break;
    case 130:                       // 'first'
      shiftT(130);                  // 'first'
      break;
    case 131:                       // 'following'
      shiftT(131);                  // 'following'
      break;
    case 132:                       // 'following-sibling'
      shiftT(132);                  // 'following-sibling'
      break;
    case 133:                       // 'for'
      shiftT(133);                  // 'for'
      break;
    case 136:                       // 'from'
      shiftT(136);                  // 'from'
      break;
    case 142:                       // 'ge'
      shiftT(142);                  // 'ge'
      break;
    case 144:                       // 'group'
      shiftT(144);                  // 'group'
      break;
    case 146:                       // 'gt'
      shiftT(146);                  // 'gt'
      break;
    case 147:                       // 'idiv'
      shiftT(147);                  // 'idiv'
      break;
    case 149:                       // 'import'
      shiftT(149);                  // 'import'
      break;
    case 155:                       // 'insert'
      shiftT(155);                  // 'insert'
      break;
    case 156:                       // 'instance'
      shiftT(156);                  // 'instance'
      break;
    case 158:                       // 'intersect'
      shiftT(158);                  // 'intersect'
      break;
    case 159:                       // 'into'
      shiftT(159);                  // 'into'
      break;
    case 160:                       // 'is'
      shiftT(160);                  // 'is'
      break;
    case 167:                       // 'last'
      shiftT(167);                  // 'last'
      break;
    case 169:                       // 'le'
      shiftT(169);                  // 'le'
      break;
    case 171:                       // 'let'
      shiftT(171);                  // 'let'
      break;
    case 175:                       // 'lt'
      shiftT(175);                  // 'lt'
      break;
    case 177:                       // 'mod'
      shiftT(177);                  // 'mod'
      break;
    case 178:                       // 'modify'
      shiftT(178);                  // 'modify'
      break;
    case 179:                       // 'module'
      shiftT(179);                  // 'module'
      break;
    case 181:                       // 'namespace'
      shiftT(181);                  // 'namespace'
      break;
    case 183:                       // 'ne'
      shiftT(183);                  // 'ne'
      break;
    case 195:                       // 'only'
      shiftT(195);                  // 'only'
      break;
    case 197:                       // 'or'
      shiftT(197);                  // 'or'
      break;
    case 198:                       // 'order'
      shiftT(198);                  // 'order'
      break;
    case 199:                       // 'ordered'
      shiftT(199);                  // 'ordered'
      break;
    case 203:                       // 'parent'
      shiftT(203);                  // 'parent'
      break;
    case 209:                       // 'preceding'
      shiftT(209);                  // 'preceding'
      break;
    case 210:                       // 'preceding-sibling'
      shiftT(210);                  // 'preceding-sibling'
      break;
    case 215:                       // 'rename'
      shiftT(215);                  // 'rename'
      break;
    case 216:                       // 'replace'
      shiftT(216);                  // 'replace'
      break;
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    case 226:                       // 'select'
      shiftT(226);                  // 'select'
      break;
    case 221:                       // 'satisfies'
      shiftT(221);                  // 'satisfies'
      break;
    case 227:                       // 'self'
      shiftT(227);                  // 'self'
      break;
    case 233:                       // 'some'
      shiftT(233);                  // 'some'
      break;
    case 234:                       // 'stable'
      shiftT(234);                  // 'stable'
      break;
    case 235:                       // 'start'
      shiftT(235);                  // 'start'
      break;
    case 246:                       // 'to'
      shiftT(246);                  // 'to'
      break;
    case 247:                       // 'treat'
      shiftT(247);                  // 'treat'
      break;
    case 248:                       // 'try'
      shiftT(248);                  // 'try'
      break;
    case 252:                       // 'union'
      shiftT(252);                  // 'union'
      break;
    case 254:                       // 'unordered'
      shiftT(254);                  // 'unordered'
      break;
    case 258:                       // 'validate'
      shiftT(258);                  // 'validate'
      break;
    case 264:                       // 'where'
      shiftT(264);                  // 'where'
      break;
    case 268:                       // 'with'
      shiftT(268);                  // 'with'
      break;
    case 272:                       // 'xquery'
      shiftT(272);                  // 'xquery'
      break;
    case 68:                        // 'allowing'
      shiftT(68);                   // 'allowing'
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      break;
    case 79:                        // 'base-uri'
      shiftT(79);                   // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shiftT(81);                   // 'boundary-space'
      break;
    case 82:                        // 'break'
      shiftT(82);                   // 'break'
      break;
    case 87:                        // 'catch'
      shiftT(87);                   // 'catch'
      break;
    case 94:                        // 'construction'
      shiftT(94);                   // 'construction'
      break;
    case 97:                        // 'context'
      shiftT(97);                   // 'context'
      break;
    case 98:                        // 'continue'
      shiftT(98);                   // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shiftT(100);                  // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shiftT(102);                  // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shiftT(121);                  // 'encoding'
      break;
    case 128:                       // 'exit'
      shiftT(128);                  // 'exit'
      break;
    case 129:                       // 'external'
      shiftT(129);                  // 'external'
      break;
    case 137:                       // 'ft-option'
      shiftT(137);                  // 'ft-option'
      break;
    case 150:                       // 'in'
      shiftT(150);                  // 'in'
      break;
    case 151:                       // 'index'
      shiftT(151);                  // 'index'
      break;
    case 157:                       // 'integrity'
      shiftT(157);                  // 'integrity'
      break;
    case 168:                       // 'lax'
      shiftT(168);                  // 'lax'
      break;
    case 189:                       // 'nodes'
      shiftT(189);                  // 'nodes'
      break;
    case 196:                       // 'option'
      shiftT(196);                  // 'option'
      break;
    case 200:                       // 'ordering'
      shiftT(200);                  // 'ordering'
      break;
    case 219:                       // 'revalidation'
      shiftT(219);                  // 'revalidation'
      break;
    case 222:                       // 'schema'
      shiftT(222);                  // 'schema'
      break;
    case 225:                       // 'score'
      shiftT(225);                  // 'score'
      break;
    case 232:                       // 'sliding'
      shiftT(232);                  // 'sliding'
      break;
    case 238:                       // 'strict'
      shiftT(238);                  // 'strict'
      break;
    case 249:                       // 'tumbling'
      shiftT(249);                  // 'tumbling'
      break;
    case 250:                       // 'type'
      shiftT(250);                  // 'type'
      break;
    case 255:                       // 'updating'
      shiftT(255);                  // 'updating'
      break;
    case 259:                       // 'value'
      shiftT(259);                  // 'value'
      break;
    case 260:                       // 'variable'
      shiftT(260);                  // 'variable'
      break;
    case 261:                       // 'version'
      shiftT(261);                  // 'version'
      break;
    case 265:                       // 'while'
      shiftT(265);                  // 'while'
      break;
    case 93:                        // 'constraint'
      shiftT(93);                   // 'constraint'
      break;
    case 173:                       // 'loop'
      shiftT(173);                  // 'loop'
      break;
    case 218:                       // 'returning'
      shiftT(218);                  // 'returning'
      break;
    case 191:                       // 'object'
      shiftT(191);                  // 'object'
      break;
    case 163:                       // 'json-item'
      shiftT(163);                  // 'json-item'
      break;
    default:
      shiftT(74);                   // 'array'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 20:                        // NCName^Token
      shift(20);                    // NCName^Token
      break;
    case 66:                        // 'after'
      shift(66);                    // 'after'
      break;
    case 71:                        // 'and'
      shift(71);                    // 'and'
      break;
    case 75:                        // 'as'
      shift(75);                    // 'as'
      break;
    case 76:                        // 'ascending'
      shift(76);                    // 'ascending'
      break;
    case 80:                        // 'before'
      shift(80);                    // 'before'
      break;
    case 84:                        // 'case'
      shift(84);                    // 'case'
      break;
    case 85:                        // 'cast'
      shift(85);                    // 'cast'
      break;
    case 86:                        // 'castable'
      shift(86);                    // 'castable'
      break;
    case 90:                        // 'collation'
      shift(90);                    // 'collation'
      break;
    case 101:                       // 'count'
      shift(101);                   // 'count'
      break;
    case 105:                       // 'default'
      shift(105);                   // 'default'
      break;
    case 109:                       // 'descending'
      shift(109);                   // 'descending'
      break;
    case 114:                       // 'div'
      shift(114);                   // 'div'
      break;
    case 118:                       // 'else'
      shift(118);                   // 'else'
      break;
    case 119:                       // 'empty'
      shift(119);                   // 'empty'
      break;
    case 122:                       // 'end'
      shift(122);                   // 'end'
      break;
    case 124:                       // 'eq'
      shift(124);                   // 'eq'
      break;
    case 127:                       // 'except'
      shift(127);                   // 'except'
      break;
    case 133:                       // 'for'
      shift(133);                   // 'for'
      break;
    case 136:                       // 'from'
      shift(136);                   // 'from'
      break;
    case 142:                       // 'ge'
      shift(142);                   // 'ge'
      break;
    case 144:                       // 'group'
      shift(144);                   // 'group'
      break;
    case 146:                       // 'gt'
      shift(146);                   // 'gt'
      break;
    case 147:                       // 'idiv'
      shift(147);                   // 'idiv'
      break;
    case 156:                       // 'instance'
      shift(156);                   // 'instance'
      break;
    case 158:                       // 'intersect'
      shift(158);                   // 'intersect'
      break;
    case 159:                       // 'into'
      shift(159);                   // 'into'
      break;
    case 160:                       // 'is'
      shift(160);                   // 'is'
      break;
    case 169:                       // 'le'
      shift(169);                   // 'le'
      break;
    case 171:                       // 'let'
      shift(171);                   // 'let'
      break;
    case 175:                       // 'lt'
      shift(175);                   // 'lt'
      break;
    case 177:                       // 'mod'
      shift(177);                   // 'mod'
      break;
    case 178:                       // 'modify'
      shift(178);                   // 'modify'
      break;
    case 183:                       // 'ne'
      shift(183);                   // 'ne'
      break;
    case 195:                       // 'only'
      shift(195);                   // 'only'
      break;
    case 197:                       // 'or'
      shift(197);                   // 'or'
      break;
    case 198:                       // 'order'
      shift(198);                   // 'order'
      break;
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    case 226:                       // 'select'
      shift(226);                   // 'select'
      break;
    case 221:                       // 'satisfies'
      shift(221);                   // 'satisfies'
      break;
    case 234:                       // 'stable'
      shift(234);                   // 'stable'
      break;
    case 235:                       // 'start'
      shift(235);                   // 'start'
      break;
    case 246:                       // 'to'
      shift(246);                   // 'to'
      break;
    case 247:                       // 'treat'
      shift(247);                   // 'treat'
      break;
    case 252:                       // 'union'
      shift(252);                   // 'union'
      break;
    case 264:                       // 'where'
      shift(264);                   // 'where'
      break;
    case 268:                       // 'with'
      shift(268);                   // 'with'
      break;
    case 69:                        // 'ancestor'
      shift(69);                    // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shift(70);                    // 'ancestor-or-self'
      break;
    case 78:                        // 'attribute'
      shift(78);                    // 'attribute'
      break;
    case 89:                        // 'child'
      shift(89);                    // 'child'
      break;
    case 92:                        // 'comment'
      shift(92);                    // 'comment'
      break;
    case 99:                        // 'copy'
      shift(99);                    // 'copy'
      break;
    case 104:                       // 'declare'
      shift(104);                   // 'declare'
      break;
    case 106:                       // 'delete'
      shift(106);                   // 'delete'
      break;
    case 107:                       // 'descendant'
      shift(107);                   // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shift(108);                   // 'descendant-or-self'
      break;
    case 115:                       // 'document'
      shift(115);                   // 'document'
      break;
    case 116:                       // 'document-node'
      shift(116);                   // 'document-node'
      break;
    case 117:                       // 'element'
      shift(117);                   // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shift(120);                   // 'empty-sequence'
      break;
    case 125:                       // 'every'
      shift(125);                   // 'every'
      break;
    case 130:                       // 'first'
      shift(130);                   // 'first'
      break;
    case 131:                       // 'following'
      shift(131);                   // 'following'
      break;
    case 132:                       // 'following-sibling'
      shift(132);                   // 'following-sibling'
      break;
    case 141:                       // 'function'
      shift(141);                   // 'function'
      break;
    case 148:                       // 'if'
      shift(148);                   // 'if'
      break;
    case 149:                       // 'import'
      shift(149);                   // 'import'
      break;
    case 155:                       // 'insert'
      shift(155);                   // 'insert'
      break;
    case 161:                       // 'item'
      shift(161);                   // 'item'
      break;
    case 167:                       // 'last'
      shift(167);                   // 'last'
      break;
    case 179:                       // 'module'
      shift(179);                   // 'module'
      break;
    case 181:                       // 'namespace'
      shift(181);                   // 'namespace'
      break;
    case 182:                       // 'namespace-node'
      shift(182);                   // 'namespace-node'
      break;
    case 188:                       // 'node'
      shift(188);                   // 'node'
      break;
    case 199:                       // 'ordered'
      shift(199);                   // 'ordered'
      break;
    case 203:                       // 'parent'
      shift(203);                   // 'parent'
      break;
    case 209:                       // 'preceding'
      shift(209);                   // 'preceding'
      break;
    case 210:                       // 'preceding-sibling'
      shift(210);                   // 'preceding-sibling'
      break;
    case 213:                       // 'processing-instruction'
      shift(213);                   // 'processing-instruction'
      break;
    case 215:                       // 'rename'
      shift(215);                   // 'rename'
      break;
    case 216:                       // 'replace'
      shift(216);                   // 'replace'
      break;
    case 223:                       // 'schema-attribute'
      shift(223);                   // 'schema-attribute'
      break;
    case 224:                       // 'schema-element'
      shift(224);                   // 'schema-element'
      break;
    case 227:                       // 'self'
      shift(227);                   // 'self'
      break;
    case 233:                       // 'some'
      shift(233);                   // 'some'
      break;
    case 241:                       // 'switch'
      shift(241);                   // 'switch'
      break;
    case 242:                       // 'text'
      shift(242);                   // 'text'
      break;
    case 248:                       // 'try'
      shift(248);                   // 'try'
      break;
    case 251:                       // 'typeswitch'
      shift(251);                   // 'typeswitch'
      break;
    case 254:                       // 'unordered'
      shift(254);                   // 'unordered'
      break;
    case 258:                       // 'validate'
      shift(258);                   // 'validate'
      break;
    case 260:                       // 'variable'
      shift(260);                   // 'variable'
      break;
    case 272:                       // 'xquery'
      shift(272);                   // 'xquery'
      break;
    case 68:                        // 'allowing'
      shift(68);                    // 'allowing'
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      break;
    case 79:                        // 'base-uri'
      shift(79);                    // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shift(81);                    // 'boundary-space'
      break;
    case 82:                        // 'break'
      shift(82);                    // 'break'
      break;
    case 87:                        // 'catch'
      shift(87);                    // 'catch'
      break;
    case 94:                        // 'construction'
      shift(94);                    // 'construction'
      break;
    case 97:                        // 'context'
      shift(97);                    // 'context'
      break;
    case 98:                        // 'continue'
      shift(98);                    // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shift(100);                   // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shift(102);                   // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shift(121);                   // 'encoding'
      break;
    case 128:                       // 'exit'
      shift(128);                   // 'exit'
      break;
    case 129:                       // 'external'
      shift(129);                   // 'external'
      break;
    case 137:                       // 'ft-option'
      shift(137);                   // 'ft-option'
      break;
    case 150:                       // 'in'
      shift(150);                   // 'in'
      break;
    case 151:                       // 'index'
      shift(151);                   // 'index'
      break;
    case 157:                       // 'integrity'
      shift(157);                   // 'integrity'
      break;
    case 168:                       // 'lax'
      shift(168);                   // 'lax'
      break;
    case 189:                       // 'nodes'
      shift(189);                   // 'nodes'
      break;
    case 196:                       // 'option'
      shift(196);                   // 'option'
      break;
    case 200:                       // 'ordering'
      shift(200);                   // 'ordering'
      break;
    case 219:                       // 'revalidation'
      shift(219);                   // 'revalidation'
      break;
    case 222:                       // 'schema'
      shift(222);                   // 'schema'
      break;
    case 225:                       // 'score'
      shift(225);                   // 'score'
      break;
    case 232:                       // 'sliding'
      shift(232);                   // 'sliding'
      break;
    case 238:                       // 'strict'
      shift(238);                   // 'strict'
      break;
    case 249:                       // 'tumbling'
      shift(249);                   // 'tumbling'
      break;
    case 250:                       // 'type'
      shift(250);                   // 'type'
      break;
    case 255:                       // 'updating'
      shift(255);                   // 'updating'
      break;
    case 259:                       // 'value'
      shift(259);                   // 'value'
      break;
    case 261:                       // 'version'
      shift(261);                   // 'version'
      break;
    case 265:                       // 'while'
      shift(265);                   // 'while'
      break;
    case 93:                        // 'constraint'
      shift(93);                    // 'constraint'
      break;
    case 173:                       // 'loop'
      shift(173);                   // 'loop'
      break;
    default:
      shift(218);                   // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 20:                        // NCName^Token
      shiftT(20);                   // NCName^Token
      break;
    case 66:                        // 'after'
      shiftT(66);                   // 'after'
      break;
    case 71:                        // 'and'
      shiftT(71);                   // 'and'
      break;
    case 75:                        // 'as'
      shiftT(75);                   // 'as'
      break;
    case 76:                        // 'ascending'
      shiftT(76);                   // 'ascending'
      break;
    case 80:                        // 'before'
      shiftT(80);                   // 'before'
      break;
    case 84:                        // 'case'
      shiftT(84);                   // 'case'
      break;
    case 85:                        // 'cast'
      shiftT(85);                   // 'cast'
      break;
    case 86:                        // 'castable'
      shiftT(86);                   // 'castable'
      break;
    case 90:                        // 'collation'
      shiftT(90);                   // 'collation'
      break;
    case 101:                       // 'count'
      shiftT(101);                  // 'count'
      break;
    case 105:                       // 'default'
      shiftT(105);                  // 'default'
      break;
    case 109:                       // 'descending'
      shiftT(109);                  // 'descending'
      break;
    case 114:                       // 'div'
      shiftT(114);                  // 'div'
      break;
    case 118:                       // 'else'
      shiftT(118);                  // 'else'
      break;
    case 119:                       // 'empty'
      shiftT(119);                  // 'empty'
      break;
    case 122:                       // 'end'
      shiftT(122);                  // 'end'
      break;
    case 124:                       // 'eq'
      shiftT(124);                  // 'eq'
      break;
    case 127:                       // 'except'
      shiftT(127);                  // 'except'
      break;
    case 133:                       // 'for'
      shiftT(133);                  // 'for'
      break;
    case 136:                       // 'from'
      shiftT(136);                  // 'from'
      break;
    case 142:                       // 'ge'
      shiftT(142);                  // 'ge'
      break;
    case 144:                       // 'group'
      shiftT(144);                  // 'group'
      break;
    case 146:                       // 'gt'
      shiftT(146);                  // 'gt'
      break;
    case 147:                       // 'idiv'
      shiftT(147);                  // 'idiv'
      break;
    case 156:                       // 'instance'
      shiftT(156);                  // 'instance'
      break;
    case 158:                       // 'intersect'
      shiftT(158);                  // 'intersect'
      break;
    case 159:                       // 'into'
      shiftT(159);                  // 'into'
      break;
    case 160:                       // 'is'
      shiftT(160);                  // 'is'
      break;
    case 169:                       // 'le'
      shiftT(169);                  // 'le'
      break;
    case 171:                       // 'let'
      shiftT(171);                  // 'let'
      break;
    case 175:                       // 'lt'
      shiftT(175);                  // 'lt'
      break;
    case 177:                       // 'mod'
      shiftT(177);                  // 'mod'
      break;
    case 178:                       // 'modify'
      shiftT(178);                  // 'modify'
      break;
    case 183:                       // 'ne'
      shiftT(183);                  // 'ne'
      break;
    case 195:                       // 'only'
      shiftT(195);                  // 'only'
      break;
    case 197:                       // 'or'
      shiftT(197);                  // 'or'
      break;
    case 198:                       // 'order'
      shiftT(198);                  // 'order'
      break;
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    case 226:                       // 'select'
      shiftT(226);                  // 'select'
      break;
    case 221:                       // 'satisfies'
      shiftT(221);                  // 'satisfies'
      break;
    case 234:                       // 'stable'
      shiftT(234);                  // 'stable'
      break;
    case 235:                       // 'start'
      shiftT(235);                  // 'start'
      break;
    case 246:                       // 'to'
      shiftT(246);                  // 'to'
      break;
    case 247:                       // 'treat'
      shiftT(247);                  // 'treat'
      break;
    case 252:                       // 'union'
      shiftT(252);                  // 'union'
      break;
    case 264:                       // 'where'
      shiftT(264);                  // 'where'
      break;
    case 268:                       // 'with'
      shiftT(268);                  // 'with'
      break;
    case 69:                        // 'ancestor'
      shiftT(69);                   // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shiftT(70);                   // 'ancestor-or-self'
      break;
    case 78:                        // 'attribute'
      shiftT(78);                   // 'attribute'
      break;
    case 89:                        // 'child'
      shiftT(89);                   // 'child'
      break;
    case 92:                        // 'comment'
      shiftT(92);                   // 'comment'
      break;
    case 99:                        // 'copy'
      shiftT(99);                   // 'copy'
      break;
    case 104:                       // 'declare'
      shiftT(104);                  // 'declare'
      break;
    case 106:                       // 'delete'
      shiftT(106);                  // 'delete'
      break;
    case 107:                       // 'descendant'
      shiftT(107);                  // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shiftT(108);                  // 'descendant-or-self'
      break;
    case 115:                       // 'document'
      shiftT(115);                  // 'document'
      break;
    case 116:                       // 'document-node'
      shiftT(116);                  // 'document-node'
      break;
    case 117:                       // 'element'
      shiftT(117);                  // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shiftT(120);                  // 'empty-sequence'
      break;
    case 125:                       // 'every'
      shiftT(125);                  // 'every'
      break;
    case 130:                       // 'first'
      shiftT(130);                  // 'first'
      break;
    case 131:                       // 'following'
      shiftT(131);                  // 'following'
      break;
    case 132:                       // 'following-sibling'
      shiftT(132);                  // 'following-sibling'
      break;
    case 141:                       // 'function'
      shiftT(141);                  // 'function'
      break;
    case 148:                       // 'if'
      shiftT(148);                  // 'if'
      break;
    case 149:                       // 'import'
      shiftT(149);                  // 'import'
      break;
    case 155:                       // 'insert'
      shiftT(155);                  // 'insert'
      break;
    case 161:                       // 'item'
      shiftT(161);                  // 'item'
      break;
    case 167:                       // 'last'
      shiftT(167);                  // 'last'
      break;
    case 179:                       // 'module'
      shiftT(179);                  // 'module'
      break;
    case 181:                       // 'namespace'
      shiftT(181);                  // 'namespace'
      break;
    case 182:                       // 'namespace-node'
      shiftT(182);                  // 'namespace-node'
      break;
    case 188:                       // 'node'
      shiftT(188);                  // 'node'
      break;
    case 199:                       // 'ordered'
      shiftT(199);                  // 'ordered'
      break;
    case 203:                       // 'parent'
      shiftT(203);                  // 'parent'
      break;
    case 209:                       // 'preceding'
      shiftT(209);                  // 'preceding'
      break;
    case 210:                       // 'preceding-sibling'
      shiftT(210);                  // 'preceding-sibling'
      break;
    case 213:                       // 'processing-instruction'
      shiftT(213);                  // 'processing-instruction'
      break;
    case 215:                       // 'rename'
      shiftT(215);                  // 'rename'
      break;
    case 216:                       // 'replace'
      shiftT(216);                  // 'replace'
      break;
    case 223:                       // 'schema-attribute'
      shiftT(223);                  // 'schema-attribute'
      break;
    case 224:                       // 'schema-element'
      shiftT(224);                  // 'schema-element'
      break;
    case 227:                       // 'self'
      shiftT(227);                  // 'self'
      break;
    case 233:                       // 'some'
      shiftT(233);                  // 'some'
      break;
    case 241:                       // 'switch'
      shiftT(241);                  // 'switch'
      break;
    case 242:                       // 'text'
      shiftT(242);                  // 'text'
      break;
    case 248:                       // 'try'
      shiftT(248);                  // 'try'
      break;
    case 251:                       // 'typeswitch'
      shiftT(251);                  // 'typeswitch'
      break;
    case 254:                       // 'unordered'
      shiftT(254);                  // 'unordered'
      break;
    case 258:                       // 'validate'
      shiftT(258);                  // 'validate'
      break;
    case 260:                       // 'variable'
      shiftT(260);                  // 'variable'
      break;
    case 272:                       // 'xquery'
      shiftT(272);                  // 'xquery'
      break;
    case 68:                        // 'allowing'
      shiftT(68);                   // 'allowing'
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      break;
    case 79:                        // 'base-uri'
      shiftT(79);                   // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shiftT(81);                   // 'boundary-space'
      break;
    case 82:                        // 'break'
      shiftT(82);                   // 'break'
      break;
    case 87:                        // 'catch'
      shiftT(87);                   // 'catch'
      break;
    case 94:                        // 'construction'
      shiftT(94);                   // 'construction'
      break;
    case 97:                        // 'context'
      shiftT(97);                   // 'context'
      break;
    case 98:                        // 'continue'
      shiftT(98);                   // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shiftT(100);                  // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shiftT(102);                  // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shiftT(121);                  // 'encoding'
      break;
    case 128:                       // 'exit'
      shiftT(128);                  // 'exit'
      break;
    case 129:                       // 'external'
      shiftT(129);                  // 'external'
      break;
    case 137:                       // 'ft-option'
      shiftT(137);                  // 'ft-option'
      break;
    case 150:                       // 'in'
      shiftT(150);                  // 'in'
      break;
    case 151:                       // 'index'
      shiftT(151);                  // 'index'
      break;
    case 157:                       // 'integrity'
      shiftT(157);                  // 'integrity'
      break;
    case 168:                       // 'lax'
      shiftT(168);                  // 'lax'
      break;
    case 189:                       // 'nodes'
      shiftT(189);                  // 'nodes'
      break;
    case 196:                       // 'option'
      shiftT(196);                  // 'option'
      break;
    case 200:                       // 'ordering'
      shiftT(200);                  // 'ordering'
      break;
    case 219:                       // 'revalidation'
      shiftT(219);                  // 'revalidation'
      break;
    case 222:                       // 'schema'
      shiftT(222);                  // 'schema'
      break;
    case 225:                       // 'score'
      shiftT(225);                  // 'score'
      break;
    case 232:                       // 'sliding'
      shiftT(232);                  // 'sliding'
      break;
    case 238:                       // 'strict'
      shiftT(238);                  // 'strict'
      break;
    case 249:                       // 'tumbling'
      shiftT(249);                  // 'tumbling'
      break;
    case 250:                       // 'type'
      shiftT(250);                  // 'type'
      break;
    case 255:                       // 'updating'
      shiftT(255);                  // 'updating'
      break;
    case 259:                       // 'value'
      shiftT(259);                  // 'value'
      break;
    case 261:                       // 'version'
      shiftT(261);                  // 'version'
      break;
    case 265:                       // 'while'
      shiftT(265);                  // 'while'
      break;
    case 93:                        // 'constraint'
      shiftT(93);                   // 'constraint'
      break;
    case 173:                       // 'loop'
      shiftT(173);                  // 'loop'
      break;
    default:
      shiftT(218);                  // 'returning'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(246);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(240);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(222);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 51:                      // '<'
        lookahead2(4);              // QName
        break;
      case 52:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 56:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '['
        lookahead2W(242);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 73:                      // 'append'
        lookahead2W(55);            // S^WS | '(:' | 'json'
        break;
      case 128:                     // 'exit'
        lookahead2W(140);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 171:                     // 'let'
        lookahead2W(161);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 181:                     // 'namespace'
        lookahead2W(227);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 213:                     // 'processing-instruction'
        lookahead2W(224);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 215:                     // 'rename'
        lookahead2W(162);           // S^WS | '#' | '(' | '(:' | 'json' | 'node'
        break;
      case 216:                     // 'replace'
        lookahead2W(173);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 258:                     // 'validate'
        lookahead2W(180);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 274:                     // '{'
        lookahead2W(244);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 276:                     // '{|'
        lookahead2W(243);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' |
                                    // '|}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 78:                      // 'attribute'
      case 117:                     // 'element'
        lookahead2W(230);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 82:                      // 'break'
      case 98:                      // 'continue'
        lookahead2W(138);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 92:                      // 'comment'
      case 242:                     // 'text'
        lookahead2W(92);            // S^WS | '#' | '(:' | '{'
        break;
      case 106:                     // 'delete'
      case 155:                     // 'insert'
        lookahead2W(172);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
        break;
      case 133:                     // 'for'
      case 136:                     // 'from'
        lookahead2W(171);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 99:                      // 'copy'
      case 125:                     // 'every'
      case 233:                     // 'some'
      case 260:                     // 'variable'
        lookahead2W(137);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 115:                     // 'document'
      case 199:                     // 'ordered'
      case 248:                     // 'try'
      case 254:                     // 'unordered'
        lookahead2W(141);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 9:                       // IntegerLiteral
      case 10:                      // DecimalLiteral
      case 11:                      // DoubleLiteral
      case 12:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 116:                     // 'document-node'
      case 120:                     // 'empty-sequence'
      case 161:                     // 'item'
      case 182:                     // 'namespace-node'
      case 188:                     // 'node'
      case 223:                     // 'schema-attribute'
      case 224:                     // 'schema-element'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 7:                       // EQName^Token
      case 66:                      // 'after'
      case 68:                      // 'allowing'
      case 69:                      // 'ancestor'
      case 70:                      // 'ancestor-or-self'
      case 71:                      // 'and'
      case 74:                      // 'array'
      case 75:                      // 'as'
      case 76:                      // 'ascending'
      case 77:                      // 'at'
      case 79:                      // 'base-uri'
      case 80:                      // 'before'
      case 81:                      // 'boundary-space'
      case 84:                      // 'case'
      case 85:                      // 'cast'
      case 86:                      // 'castable'
      case 87:                      // 'catch'
      case 89:                      // 'child'
      case 90:                      // 'collation'
      case 93:                      // 'constraint'
      case 94:                      // 'construction'
      case 97:                      // 'context'
      case 100:                     // 'copy-namespaces'
      case 101:                     // 'count'
      case 102:                     // 'decimal-format'
      case 104:                     // 'declare'
      case 105:                     // 'default'
      case 107:                     // 'descendant'
      case 108:                     // 'descendant-or-self'
      case 109:                     // 'descending'
      case 114:                     // 'div'
      case 118:                     // 'else'
      case 119:                     // 'empty'
      case 121:                     // 'encoding'
      case 122:                     // 'end'
      case 124:                     // 'eq'
      case 127:                     // 'except'
      case 129:                     // 'external'
      case 130:                     // 'first'
      case 131:                     // 'following'
      case 132:                     // 'following-sibling'
      case 137:                     // 'ft-option'
      case 141:                     // 'function'
      case 142:                     // 'ge'
      case 144:                     // 'group'
      case 146:                     // 'gt'
      case 147:                     // 'idiv'
      case 148:                     // 'if'
      case 149:                     // 'import'
      case 150:                     // 'in'
      case 151:                     // 'index'
      case 156:                     // 'instance'
      case 157:                     // 'integrity'
      case 158:                     // 'intersect'
      case 159:                     // 'into'
      case 160:                     // 'is'
      case 163:                     // 'json-item'
      case 167:                     // 'last'
      case 168:                     // 'lax'
      case 169:                     // 'le'
      case 173:                     // 'loop'
      case 175:                     // 'lt'
      case 177:                     // 'mod'
      case 178:                     // 'modify'
      case 179:                     // 'module'
      case 183:                     // 'ne'
      case 189:                     // 'nodes'
      case 191:                     // 'object'
      case 195:                     // 'only'
      case 196:                     // 'option'
      case 197:                     // 'or'
      case 198:                     // 'order'
      case 200:                     // 'ordering'
      case 203:                     // 'parent'
      case 209:                     // 'preceding'
      case 210:                     // 'preceding-sibling'
      case 217:                     // 'return'
      case 218:                     // 'returning'
      case 219:                     // 'revalidation'
      case 221:                     // 'satisfies'
      case 222:                     // 'schema'
      case 225:                     // 'score'
      case 226:                     // 'select'
      case 227:                     // 'self'
      case 232:                     // 'sliding'
      case 234:                     // 'stable'
      case 235:                     // 'start'
      case 238:                     // 'strict'
      case 241:                     // 'switch'
      case 246:                     // 'to'
      case 247:                     // 'treat'
      case 249:                     // 'tumbling'
      case 250:                     // 'type'
      case 251:                     // 'typeswitch'
      case 252:                     // 'union'
      case 255:                     // 'updating'
      case 259:                     // 'value'
      case 261:                     // 'version'
      case 264:                     // 'where'
      case 265:                     // 'while'
      case 268:                     // 'with'
      case 272:                     // 'xquery'
        lookahead2W(91);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 280                 // '}'
       && lk != 13321               // IntegerLiteral EOF
       && lk != 13322               // DecimalLiteral EOF
       && lk != 13323               // DoubleLiteral EOF
       && lk != 13324               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 16644               // 'variable' '$'
       && lk != 21513               // IntegerLiteral ','
       && lk != 21514               // DecimalLiteral ','
       && lk != 21515               // DoubleLiteral ','
       && lk != 21516               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88658               // 'break' 'loop'
       && lk != 88674               // 'continue' 'loop'
       && lk != 111744              // 'exit' 'returning'
       && lk != 143369              // IntegerLiteral '}'
       && lk != 143370              // DecimalLiteral '}'
       && lk != 143371              // DoubleLiteral '}'
       && lk != 143372              // StringLiteral '}'
       && lk != 143405)             // '.' '}'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16644               // 'variable' '$'
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88658               // 'break' 'loop'
       && lk != 88674               // 'continue' 'loop'
       && lk != 111744)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(246);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(240);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(222);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 51:                      // '<'
        lookahead2(4);              // QName
        break;
      case 52:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 56:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '['
        lookahead2W(242);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 73:                      // 'append'
        lookahead2W(55);            // S^WS | '(:' | 'json'
        break;
      case 128:                     // 'exit'
        lookahead2W(140);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 171:                     // 'let'
        lookahead2W(161);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 181:                     // 'namespace'
        lookahead2W(227);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 213:                     // 'processing-instruction'
        lookahead2W(224);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 215:                     // 'rename'
        lookahead2W(162);           // S^WS | '#' | '(' | '(:' | 'json' | 'node'
        break;
      case 216:                     // 'replace'
        lookahead2W(173);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 258:                     // 'validate'
        lookahead2W(180);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 274:                     // '{'
        lookahead2W(244);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 276:                     // '{|'
        lookahead2W(243);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' |
                                    // '|}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 78:                      // 'attribute'
      case 117:                     // 'element'
        lookahead2W(230);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 82:                      // 'break'
      case 98:                      // 'continue'
        lookahead2W(138);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 92:                      // 'comment'
      case 242:                     // 'text'
        lookahead2W(92);            // S^WS | '#' | '(:' | '{'
        break;
      case 106:                     // 'delete'
      case 155:                     // 'insert'
        lookahead2W(172);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
        break;
      case 133:                     // 'for'
      case 136:                     // 'from'
        lookahead2W(171);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 99:                      // 'copy'
      case 125:                     // 'every'
      case 233:                     // 'some'
      case 260:                     // 'variable'
        lookahead2W(137);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 115:                     // 'document'
      case 199:                     // 'ordered'
      case 248:                     // 'try'
      case 254:                     // 'unordered'
        lookahead2W(141);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 9:                       // IntegerLiteral
      case 10:                      // DecimalLiteral
      case 11:                      // DoubleLiteral
      case 12:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 116:                     // 'document-node'
      case 120:                     // 'empty-sequence'
      case 161:                     // 'item'
      case 182:                     // 'namespace-node'
      case 188:                     // 'node'
      case 223:                     // 'schema-attribute'
      case 224:                     // 'schema-element'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 7:                       // EQName^Token
      case 66:                      // 'after'
      case 68:                      // 'allowing'
      case 69:                      // 'ancestor'
      case 70:                      // 'ancestor-or-self'
      case 71:                      // 'and'
      case 74:                      // 'array'
      case 75:                      // 'as'
      case 76:                      // 'ascending'
      case 77:                      // 'at'
      case 79:                      // 'base-uri'
      case 80:                      // 'before'
      case 81:                      // 'boundary-space'
      case 84:                      // 'case'
      case 85:                      // 'cast'
      case 86:                      // 'castable'
      case 87:                      // 'catch'
      case 89:                      // 'child'
      case 90:                      // 'collation'
      case 93:                      // 'constraint'
      case 94:                      // 'construction'
      case 97:                      // 'context'
      case 100:                     // 'copy-namespaces'
      case 101:                     // 'count'
      case 102:                     // 'decimal-format'
      case 104:                     // 'declare'
      case 105:                     // 'default'
      case 107:                     // 'descendant'
      case 108:                     // 'descendant-or-self'
      case 109:                     // 'descending'
      case 114:                     // 'div'
      case 118:                     // 'else'
      case 119:                     // 'empty'
      case 121:                     // 'encoding'
      case 122:                     // 'end'
      case 124:                     // 'eq'
      case 127:                     // 'except'
      case 129:                     // 'external'
      case 130:                     // 'first'
      case 131:                     // 'following'
      case 132:                     // 'following-sibling'
      case 137:                     // 'ft-option'
      case 141:                     // 'function'
      case 142:                     // 'ge'
      case 144:                     // 'group'
      case 146:                     // 'gt'
      case 147:                     // 'idiv'
      case 148:                     // 'if'
      case 149:                     // 'import'
      case 150:                     // 'in'
      case 151:                     // 'index'
      case 156:                     // 'instance'
      case 157:                     // 'integrity'
      case 158:                     // 'intersect'
      case 159:                     // 'into'
      case 160:                     // 'is'
      case 163:                     // 'json-item'
      case 167:                     // 'last'
      case 168:                     // 'lax'
      case 169:                     // 'le'
      case 173:                     // 'loop'
      case 175:                     // 'lt'
      case 177:                     // 'mod'
      case 178:                     // 'modify'
      case 179:                     // 'module'
      case 183:                     // 'ne'
      case 189:                     // 'nodes'
      case 191:                     // 'object'
      case 195:                     // 'only'
      case 196:                     // 'option'
      case 197:                     // 'or'
      case 198:                     // 'order'
      case 200:                     // 'ordering'
      case 203:                     // 'parent'
      case 209:                     // 'preceding'
      case 210:                     // 'preceding-sibling'
      case 217:                     // 'return'
      case 218:                     // 'returning'
      case 219:                     // 'revalidation'
      case 221:                     // 'satisfies'
      case 222:                     // 'schema'
      case 225:                     // 'score'
      case 226:                     // 'select'
      case 227:                     // 'self'
      case 232:                     // 'sliding'
      case 234:                     // 'stable'
      case 235:                     // 'start'
      case 238:                     // 'strict'
      case 241:                     // 'switch'
      case 246:                     // 'to'
      case 247:                     // 'treat'
      case 249:                     // 'tumbling'
      case 250:                     // 'type'
      case 251:                     // 'typeswitch'
      case 252:                     // 'union'
      case 255:                     // 'updating'
      case 259:                     // 'value'
      case 261:                     // 'version'
      case 264:                     // 'where'
      case 265:                     // 'while'
      case 268:                     // 'with'
      case 272:                     // 'xquery'
        lookahead2W(91);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 280                 // '}'
       && lk != 13321               // IntegerLiteral EOF
       && lk != 13322               // DecimalLiteral EOF
       && lk != 13323               // DoubleLiteral EOF
       && lk != 13324               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 16644               // 'variable' '$'
       && lk != 21513               // IntegerLiteral ','
       && lk != 21514               // DecimalLiteral ','
       && lk != 21515               // DoubleLiteral ','
       && lk != 21516               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88658               // 'break' 'loop'
       && lk != 88674               // 'continue' 'loop'
       && lk != 111744              // 'exit' 'returning'
       && lk != 143369              // IntegerLiteral '}'
       && lk != 143370              // DecimalLiteral '}'
       && lk != 143371              // DoubleLiteral '}'
       && lk != 143372              // StringLiteral '}'
       && lk != 143405)             // '.' '}'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(4, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 16644               // 'variable' '$'
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88658               // 'break' 'loop'
       && lk != 88674               // 'continue' 'loop'
       && lk != 111744)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 26                    // EOF
     && l1 != 280)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 26                    // EOF
     && l1 != 280)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 128:                       // 'exit'
      lookahead2W(140);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 171:                       // 'let'
      lookahead2W(161);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 248:                       // 'try'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 260:                       // 'variable'
      lookahead2W(137);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 82:                        // 'break'
    case 98:                        // 'continue'
      lookahead2W(138);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 133:                       // 'for'
    case 136:                       // 'from'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 148:                       // 'if'
    case 241:                       // 'switch'
    case 251:                       // 'typeswitch'
    case 265:                       // 'while'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 7                     // EQName^Token
     && lk != 9                     // IntegerLiteral
     && lk != 10                    // DecimalLiteral
     && lk != 11                    // DoubleLiteral
     && lk != 12                    // StringLiteral
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 45                    // '.'
     && lk != 51                    // '<'
     && lk != 52                    // '<!--'
     && lk != 56                    // '<?'
     && lk != 64                    // '['
     && lk != 66                    // 'after'
     && lk != 68                    // 'allowing'
     && lk != 69                    // 'ancestor'
     && lk != 70                    // 'ancestor-or-self'
     && lk != 71                    // 'and'
     && lk != 73                    // 'append'
     && lk != 74                    // 'array'
     && lk != 75                    // 'as'
     && lk != 76                    // 'ascending'
     && lk != 77                    // 'at'
     && lk != 78                    // 'attribute'
     && lk != 79                    // 'base-uri'
     && lk != 80                    // 'before'
     && lk != 81                    // 'boundary-space'
     && lk != 84                    // 'case'
     && lk != 85                    // 'cast'
     && lk != 86                    // 'castable'
     && lk != 87                    // 'catch'
     && lk != 89                    // 'child'
     && lk != 90                    // 'collation'
     && lk != 92                    // 'comment'
     && lk != 93                    // 'constraint'
     && lk != 94                    // 'construction'
     && lk != 97                    // 'context'
     && lk != 99                    // 'copy'
     && lk != 100                   // 'copy-namespaces'
     && lk != 101                   // 'count'
     && lk != 102                   // 'decimal-format'
     && lk != 104                   // 'declare'
     && lk != 105                   // 'default'
     && lk != 106                   // 'delete'
     && lk != 107                   // 'descendant'
     && lk != 108                   // 'descendant-or-self'
     && lk != 109                   // 'descending'
     && lk != 114                   // 'div'
     && lk != 115                   // 'document'
     && lk != 116                   // 'document-node'
     && lk != 117                   // 'element'
     && lk != 118                   // 'else'
     && lk != 119                   // 'empty'
     && lk != 120                   // 'empty-sequence'
     && lk != 121                   // 'encoding'
     && lk != 122                   // 'end'
     && lk != 124                   // 'eq'
     && lk != 125                   // 'every'
     && lk != 127                   // 'except'
     && lk != 129                   // 'external'
     && lk != 130                   // 'first'
     && lk != 131                   // 'following'
     && lk != 132                   // 'following-sibling'
     && lk != 137                   // 'ft-option'
     && lk != 141                   // 'function'
     && lk != 142                   // 'ge'
     && lk != 144                   // 'group'
     && lk != 146                   // 'gt'
     && lk != 147                   // 'idiv'
     && lk != 149                   // 'import'
     && lk != 150                   // 'in'
     && lk != 151                   // 'index'
     && lk != 155                   // 'insert'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'integrity'
     && lk != 158                   // 'intersect'
     && lk != 159                   // 'into'
     && lk != 160                   // 'is'
     && lk != 161                   // 'item'
     && lk != 163                   // 'json-item'
     && lk != 167                   // 'last'
     && lk != 168                   // 'lax'
     && lk != 169                   // 'le'
     && lk != 173                   // 'loop'
     && lk != 175                   // 'lt'
     && lk != 177                   // 'mod'
     && lk != 178                   // 'modify'
     && lk != 179                   // 'module'
     && lk != 181                   // 'namespace'
     && lk != 182                   // 'namespace-node'
     && lk != 183                   // 'ne'
     && lk != 188                   // 'node'
     && lk != 189                   // 'nodes'
     && lk != 191                   // 'object'
     && lk != 195                   // 'only'
     && lk != 196                   // 'option'
     && lk != 197                   // 'or'
     && lk != 198                   // 'order'
     && lk != 199                   // 'ordered'
     && lk != 200                   // 'ordering'
     && lk != 203                   // 'parent'
     && lk != 209                   // 'preceding'
     && lk != 210                   // 'preceding-sibling'
     && lk != 213                   // 'processing-instruction'
     && lk != 215                   // 'rename'
     && lk != 216                   // 'replace'
     && lk != 217                   // 'return'
     && lk != 218                   // 'returning'
     && lk != 219                   // 'revalidation'
     && lk != 221                   // 'satisfies'
     && lk != 222                   // 'schema'
     && lk != 223                   // 'schema-attribute'
     && lk != 224                   // 'schema-element'
     && lk != 225                   // 'score'
     && lk != 226                   // 'select'
     && lk != 227                   // 'self'
     && lk != 232                   // 'sliding'
     && lk != 233                   // 'some'
     && lk != 234                   // 'stable'
     && lk != 235                   // 'start'
     && lk != 238                   // 'strict'
     && lk != 242                   // 'text'
     && lk != 246                   // 'to'
     && lk != 247                   // 'treat'
     && lk != 249                   // 'tumbling'
     && lk != 250                   // 'type'
     && lk != 252                   // 'union'
     && lk != 254                   // 'unordered'
     && lk != 255                   // 'updating'
     && lk != 258                   // 'validate'
     && lk != 259                   // 'value'
     && lk != 261                   // 'version'
     && lk != 264                   // 'where'
     && lk != 268                   // 'with'
     && lk != 272                   // 'xquery'
     && lk != 276                   // '{|'
     && lk != 15442                 // 'break' '#'
     && lk != 15458                 // 'continue' '#'
     && lk != 15488                 // 'exit' '#'
     && lk != 15493                 // 'for' '#'
     && lk != 15496                 // 'from' '#'
     && lk != 15508                 // 'if' '#'
     && lk != 15531                 // 'let' '#'
     && lk != 15601                 // 'switch' '#'
     && lk != 15608                 // 'try' '#'
     && lk != 15611                 // 'typeswitch' '#'
     && lk != 15620                 // 'variable' '#'
     && lk != 15625                 // 'while' '#'
     && lk != 16517                 // 'for' '$'
     && lk != 16520                 // 'from' '$'
     && lk != 16555                 // 'let' '$'
     && lk != 16644                 // 'variable' '$'
     && lk != 18002                 // 'break' '('
     && lk != 18018                 // 'continue' '('
     && lk != 18048                 // 'exit' '('
     && lk != 18053                 // 'for' '('
     && lk != 18056                 // 'from' '('
     && lk != 18068                 // 'if' '('
     && lk != 18091                 // 'let' '('
     && lk != 18161                 // 'switch' '('
     && lk != 18168                 // 'try' '('
     && lk != 18171                 // 'typeswitch' '('
     && lk != 18180                 // 'variable' '('
     && lk != 88658                 // 'break' 'loop'
     && lk != 88674                 // 'continue' 'loop'
     && lk != 111744                // 'exit' 'returning'
     && lk != 115371                // 'let' 'score'
     && lk != 118917                // 'for' 'sliding'
     && lk != 118920                // 'from' 'sliding'
     && lk != 127621                // 'for' 'tumbling'
     && lk != 127624                // 'from' 'tumbling'
     && lk != 140536)               // 'try' '{'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 88658:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 88674:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 111744:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16517:                     // 'for' '$'
    case 16520:                     // 'from' '$'
    case 16555:                     // 'let' '$'
    case 115371:                    // 'let' 'score'
    case 118917:                    // 'for' 'sliding'
    case 118920:                    // 'from' 'sliding'
    case 127621:                    // 'for' 'tumbling'
    case 127624:                    // 'from' 'tumbling'
      parse_FLWORStatement();
      break;
    case 18068:                     // 'if' '('
      parse_IfStatement();
      break;
    case 18161:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 140536:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 18171:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16644:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 128:                       // 'exit'
      lookahead2W(140);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 171:                       // 'let'
      lookahead2W(161);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 248:                       // 'try'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 260:                       // 'variable'
      lookahead2W(137);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 82:                        // 'break'
    case 98:                        // 'continue'
      lookahead2W(138);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 133:                       // 'for'
    case 136:                       // 'from'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 148:                       // 'if'
    case 241:                       // 'switch'
    case 251:                       // 'typeswitch'
    case 265:                       // 'while'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 7                     // EQName^Token
     && lk != 9                     // IntegerLiteral
     && lk != 10                    // DecimalLiteral
     && lk != 11                    // DoubleLiteral
     && lk != 12                    // StringLiteral
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 45                    // '.'
     && lk != 51                    // '<'
     && lk != 52                    // '<!--'
     && lk != 56                    // '<?'
     && lk != 64                    // '['
     && lk != 66                    // 'after'
     && lk != 68                    // 'allowing'
     && lk != 69                    // 'ancestor'
     && lk != 70                    // 'ancestor-or-self'
     && lk != 71                    // 'and'
     && lk != 73                    // 'append'
     && lk != 74                    // 'array'
     && lk != 75                    // 'as'
     && lk != 76                    // 'ascending'
     && lk != 77                    // 'at'
     && lk != 78                    // 'attribute'
     && lk != 79                    // 'base-uri'
     && lk != 80                    // 'before'
     && lk != 81                    // 'boundary-space'
     && lk != 84                    // 'case'
     && lk != 85                    // 'cast'
     && lk != 86                    // 'castable'
     && lk != 87                    // 'catch'
     && lk != 89                    // 'child'
     && lk != 90                    // 'collation'
     && lk != 92                    // 'comment'
     && lk != 93                    // 'constraint'
     && lk != 94                    // 'construction'
     && lk != 97                    // 'context'
     && lk != 99                    // 'copy'
     && lk != 100                   // 'copy-namespaces'
     && lk != 101                   // 'count'
     && lk != 102                   // 'decimal-format'
     && lk != 104                   // 'declare'
     && lk != 105                   // 'default'
     && lk != 106                   // 'delete'
     && lk != 107                   // 'descendant'
     && lk != 108                   // 'descendant-or-self'
     && lk != 109                   // 'descending'
     && lk != 114                   // 'div'
     && lk != 115                   // 'document'
     && lk != 116                   // 'document-node'
     && lk != 117                   // 'element'
     && lk != 118                   // 'else'
     && lk != 119                   // 'empty'
     && lk != 120                   // 'empty-sequence'
     && lk != 121                   // 'encoding'
     && lk != 122                   // 'end'
     && lk != 124                   // 'eq'
     && lk != 125                   // 'every'
     && lk != 127                   // 'except'
     && lk != 129                   // 'external'
     && lk != 130                   // 'first'
     && lk != 131                   // 'following'
     && lk != 132                   // 'following-sibling'
     && lk != 137                   // 'ft-option'
     && lk != 141                   // 'function'
     && lk != 142                   // 'ge'
     && lk != 144                   // 'group'
     && lk != 146                   // 'gt'
     && lk != 147                   // 'idiv'
     && lk != 149                   // 'import'
     && lk != 150                   // 'in'
     && lk != 151                   // 'index'
     && lk != 155                   // 'insert'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'integrity'
     && lk != 158                   // 'intersect'
     && lk != 159                   // 'into'
     && lk != 160                   // 'is'
     && lk != 161                   // 'item'
     && lk != 163                   // 'json-item'
     && lk != 167                   // 'last'
     && lk != 168                   // 'lax'
     && lk != 169                   // 'le'
     && lk != 173                   // 'loop'
     && lk != 175                   // 'lt'
     && lk != 177                   // 'mod'
     && lk != 178                   // 'modify'
     && lk != 179                   // 'module'
     && lk != 181                   // 'namespace'
     && lk != 182                   // 'namespace-node'
     && lk != 183                   // 'ne'
     && lk != 188                   // 'node'
     && lk != 189                   // 'nodes'
     && lk != 191                   // 'object'
     && lk != 195                   // 'only'
     && lk != 196                   // 'option'
     && lk != 197                   // 'or'
     && lk != 198                   // 'order'
     && lk != 199                   // 'ordered'
     && lk != 200                   // 'ordering'
     && lk != 203                   // 'parent'
     && lk != 209                   // 'preceding'
     && lk != 210                   // 'preceding-sibling'
     && lk != 213                   // 'processing-instruction'
     && lk != 215                   // 'rename'
     && lk != 216                   // 'replace'
     && lk != 217                   // 'return'
     && lk != 218                   // 'returning'
     && lk != 219                   // 'revalidation'
     && lk != 221                   // 'satisfies'
     && lk != 222                   // 'schema'
     && lk != 223                   // 'schema-attribute'
     && lk != 224                   // 'schema-element'
     && lk != 225                   // 'score'
     && lk != 226                   // 'select'
     && lk != 227                   // 'self'
     && lk != 232                   // 'sliding'
     && lk != 233                   // 'some'
     && lk != 234                   // 'stable'
     && lk != 235                   // 'start'
     && lk != 238                   // 'strict'
     && lk != 242                   // 'text'
     && lk != 246                   // 'to'
     && lk != 247                   // 'treat'
     && lk != 249                   // 'tumbling'
     && lk != 250                   // 'type'
     && lk != 252                   // 'union'
     && lk != 254                   // 'unordered'
     && lk != 255                   // 'updating'
     && lk != 258                   // 'validate'
     && lk != 259                   // 'value'
     && lk != 261                   // 'version'
     && lk != 264                   // 'where'
     && lk != 268                   // 'with'
     && lk != 272                   // 'xquery'
     && lk != 276                   // '{|'
     && lk != 15442                 // 'break' '#'
     && lk != 15458                 // 'continue' '#'
     && lk != 15488                 // 'exit' '#'
     && lk != 15493                 // 'for' '#'
     && lk != 15496                 // 'from' '#'
     && lk != 15508                 // 'if' '#'
     && lk != 15531                 // 'let' '#'
     && lk != 15601                 // 'switch' '#'
     && lk != 15608                 // 'try' '#'
     && lk != 15611                 // 'typeswitch' '#'
     && lk != 15620                 // 'variable' '#'
     && lk != 15625                 // 'while' '#'
     && lk != 16517                 // 'for' '$'
     && lk != 16520                 // 'from' '$'
     && lk != 16555                 // 'let' '$'
     && lk != 16644                 // 'variable' '$'
     && lk != 18002                 // 'break' '('
     && lk != 18018                 // 'continue' '('
     && lk != 18048                 // 'exit' '('
     && lk != 18053                 // 'for' '('
     && lk != 18056                 // 'from' '('
     && lk != 18068                 // 'if' '('
     && lk != 18091                 // 'let' '('
     && lk != 18161                 // 'switch' '('
     && lk != 18168                 // 'try' '('
     && lk != 18171                 // 'typeswitch' '('
     && lk != 18180                 // 'variable' '('
     && lk != 88658                 // 'break' 'loop'
     && lk != 88674                 // 'continue' 'loop'
     && lk != 111744                // 'exit' 'returning'
     && lk != 115371                // 'let' 'score'
     && lk != 118917                // 'for' 'sliding'
     && lk != 118920                // 'from' 'sliding'
     && lk != 127621                // 'for' 'tumbling'
     && lk != 127624                // 'from' 'tumbling'
     && lk != 140536)               // 'try' '{'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(5, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(5, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(5, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(5, e0A, -12);
                lk = -14;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(5, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 88658:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 88674:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 111744:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16517:                     // 'for' '$'
    case 16520:                     // 'from' '$'
    case 16555:                     // 'let' '$'
    case 115371:                    // 'let' 'score'
    case 118917:                    // 'for' 'sliding'
    case 118920:                    // 'from' 'sliding'
    case 127621:                    // 'for' 'tumbling'
    case 127624:                    // 'from' 'tumbling'
      try_FLWORStatement();
      break;
    case 18068:                     // 'if' '('
      try_IfStatement();
      break;
    case 18161:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 140536:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 18171:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16644:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(50);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(50);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shift(49);                      // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(50);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shiftT(49);                     // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(50);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(274);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    shift(280);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(274);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    shiftT(280);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(82);                      // 'break'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shift(173);                     // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shift(50);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(82);                     // 'break'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shiftT(173);                    // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shiftT(50);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(98);                      // 'continue'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shift(173);                     // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shift(50);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(98);                     // 'continue'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shiftT(173);                    // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shiftT(50);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(128);                     // 'exit'
    lookahead1W(69);                // S^WS | '(:' | 'returning'
    shift(218);                     // 'returning'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(50);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(128);                    // 'exit'
    lookahead1W(69);                // S^WS | '(:' | 'returning'
    shiftT(218);                    // 'returning'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(50);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 217                 // 'return'
       || l1 == 226)                // 'select'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 217                 // 'return'
       || l1 == 226)                // 'select'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(148);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    shift(243);                     // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    shift(118);                     // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(148);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(75);                // S^WS | '(:' | 'then'
    shiftT(243);                    // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    shiftT(118);                    // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(241);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(111);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(241);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(111);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(84);                    // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(84);                   // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(248);                     // 'try'
    lookahead1W(85);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      shift(87);                    // 'catch'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(246);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 87:                      // 'catch'
        lookahead2W(232);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 3159                // 'catch' Wildcard
       && lk != 3671                // 'catch' EQName^Token
       && lk != 33879               // 'catch' 'after'
       && lk != 34903               // 'catch' 'allowing'
       && lk != 35415               // 'catch' 'ancestor'
       && lk != 35927               // 'catch' 'ancestor-or-self'
       && lk != 36439               // 'catch' 'and'
       && lk != 37975               // 'catch' 'array'
       && lk != 38487               // 'catch' 'as'
       && lk != 38999               // 'catch' 'ascending'
       && lk != 39511               // 'catch' 'at'
       && lk != 40023               // 'catch' 'attribute'
       && lk != 40535               // 'catch' 'base-uri'
       && lk != 41047               // 'catch' 'before'
       && lk != 41559               // 'catch' 'boundary-space'
       && lk != 42071               // 'catch' 'break'
       && lk != 43095               // 'catch' 'case'
       && lk != 43607               // 'catch' 'cast'
       && lk != 44119               // 'catch' 'castable'
       && lk != 44631               // 'catch' 'catch'
       && lk != 45655               // 'catch' 'child'
       && lk != 46167               // 'catch' 'collation'
       && lk != 47191               // 'catch' 'comment'
       && lk != 47703               // 'catch' 'constraint'
       && lk != 48215               // 'catch' 'construction'
       && lk != 49751               // 'catch' 'context'
       && lk != 50263               // 'catch' 'continue'
       && lk != 50775               // 'catch' 'copy'
       && lk != 51287               // 'catch' 'copy-namespaces'
       && lk != 51799               // 'catch' 'count'
       && lk != 52311               // 'catch' 'decimal-format'
       && lk != 53335               // 'catch' 'declare'
       && lk != 53847               // 'catch' 'default'
       && lk != 54359               // 'catch' 'delete'
       && lk != 54871               // 'catch' 'descendant'
       && lk != 55383               // 'catch' 'descendant-or-self'
       && lk != 55895               // 'catch' 'descending'
       && lk != 58455               // 'catch' 'div'
       && lk != 58967               // 'catch' 'document'
       && lk != 59479               // 'catch' 'document-node'
       && lk != 59991               // 'catch' 'element'
       && lk != 60503               // 'catch' 'else'
       && lk != 61015               // 'catch' 'empty'
       && lk != 61527               // 'catch' 'empty-sequence'
       && lk != 62039               // 'catch' 'encoding'
       && lk != 62551               // 'catch' 'end'
       && lk != 63575               // 'catch' 'eq'
       && lk != 64087               // 'catch' 'every'
       && lk != 65111               // 'catch' 'except'
       && lk != 65623               // 'catch' 'exit'
       && lk != 66135               // 'catch' 'external'
       && lk != 66647               // 'catch' 'first'
       && lk != 67159               // 'catch' 'following'
       && lk != 67671               // 'catch' 'following-sibling'
       && lk != 68183               // 'catch' 'for'
       && lk != 69719               // 'catch' 'from'
       && lk != 70231               // 'catch' 'ft-option'
       && lk != 72279               // 'catch' 'function'
       && lk != 72791               // 'catch' 'ge'
       && lk != 73815               // 'catch' 'group'
       && lk != 74839               // 'catch' 'gt'
       && lk != 75351               // 'catch' 'idiv'
       && lk != 75863               // 'catch' 'if'
       && lk != 76375               // 'catch' 'import'
       && lk != 76887               // 'catch' 'in'
       && lk != 77399               // 'catch' 'index'
       && lk != 79447               // 'catch' 'insert'
       && lk != 79959               // 'catch' 'instance'
       && lk != 80471               // 'catch' 'integrity'
       && lk != 80983               // 'catch' 'intersect'
       && lk != 81495               // 'catch' 'into'
       && lk != 82007               // 'catch' 'is'
       && lk != 82519               // 'catch' 'item'
       && lk != 83543               // 'catch' 'json-item'
       && lk != 85591               // 'catch' 'last'
       && lk != 86103               // 'catch' 'lax'
       && lk != 86615               // 'catch' 'le'
       && lk != 87639               // 'catch' 'let'
       && lk != 88663               // 'catch' 'loop'
       && lk != 89687               // 'catch' 'lt'
       && lk != 90711               // 'catch' 'mod'
       && lk != 91223               // 'catch' 'modify'
       && lk != 91735               // 'catch' 'module'
       && lk != 92759               // 'catch' 'namespace'
       && lk != 93271               // 'catch' 'namespace-node'
       && lk != 93783               // 'catch' 'ne'
       && lk != 96343               // 'catch' 'node'
       && lk != 96855               // 'catch' 'nodes'
       && lk != 97879               // 'catch' 'object'
       && lk != 99927               // 'catch' 'only'
       && lk != 100439              // 'catch' 'option'
       && lk != 100951              // 'catch' 'or'
       && lk != 101463              // 'catch' 'order'
       && lk != 101975              // 'catch' 'ordered'
       && lk != 102487              // 'catch' 'ordering'
       && lk != 104023              // 'catch' 'parent'
       && lk != 107095              // 'catch' 'preceding'
       && lk != 107607              // 'catch' 'preceding-sibling'
       && lk != 109143              // 'catch' 'processing-instruction'
       && lk != 110167              // 'catch' 'rename'
       && lk != 110679              // 'catch' 'replace'
       && lk != 111191              // 'catch' 'return'
       && lk != 111703              // 'catch' 'returning'
       && lk != 112215              // 'catch' 'revalidation'
       && lk != 113239              // 'catch' 'satisfies'
       && lk != 113751              // 'catch' 'schema'
       && lk != 114263              // 'catch' 'schema-attribute'
       && lk != 114775              // 'catch' 'schema-element'
       && lk != 115287              // 'catch' 'score'
       && lk != 115799              // 'catch' 'select'
       && lk != 116311              // 'catch' 'self'
       && lk != 118871              // 'catch' 'sliding'
       && lk != 119383              // 'catch' 'some'
       && lk != 119895              // 'catch' 'stable'
       && lk != 120407              // 'catch' 'start'
       && lk != 121943              // 'catch' 'strict'
       && lk != 123479              // 'catch' 'switch'
       && lk != 123991              // 'catch' 'text'
       && lk != 126039              // 'catch' 'to'
       && lk != 126551              // 'catch' 'treat'
       && lk != 127063              // 'catch' 'try'
       && lk != 127575              // 'catch' 'tumbling'
       && lk != 128087              // 'catch' 'type'
       && lk != 128599              // 'catch' 'typeswitch'
       && lk != 129111              // 'catch' 'union'
       && lk != 130135              // 'catch' 'unordered'
       && lk != 130647              // 'catch' 'updating'
       && lk != 132183              // 'catch' 'validate'
       && lk != 132695              // 'catch' 'value'
       && lk != 133207              // 'catch' 'variable'
       && lk != 133719              // 'catch' 'version'
       && lk != 135255              // 'catch' 'where'
       && lk != 135767              // 'catch' 'while'
       && lk != 137303              // 'catch' 'with'
       && lk != 139351)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(248);                    // 'try'
    lookahead1W(85);                // S^WS | '(:' | '{'
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      shiftT(87);                   // 'catch'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
      lookahead1W(246);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 87:                      // 'catch'
        lookahead2W(232);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 3159                // 'catch' Wildcard
       && lk != 3671                // 'catch' EQName^Token
       && lk != 33879               // 'catch' 'after'
       && lk != 34903               // 'catch' 'allowing'
       && lk != 35415               // 'catch' 'ancestor'
       && lk != 35927               // 'catch' 'ancestor-or-self'
       && lk != 36439               // 'catch' 'and'
       && lk != 37975               // 'catch' 'array'
       && lk != 38487               // 'catch' 'as'
       && lk != 38999               // 'catch' 'ascending'
       && lk != 39511               // 'catch' 'at'
       && lk != 40023               // 'catch' 'attribute'
       && lk != 40535               // 'catch' 'base-uri'
       && lk != 41047               // 'catch' 'before'
       && lk != 41559               // 'catch' 'boundary-space'
       && lk != 42071               // 'catch' 'break'
       && lk != 43095               // 'catch' 'case'
       && lk != 43607               // 'catch' 'cast'
       && lk != 44119               // 'catch' 'castable'
       && lk != 44631               // 'catch' 'catch'
       && lk != 45655               // 'catch' 'child'
       && lk != 46167               // 'catch' 'collation'
       && lk != 47191               // 'catch' 'comment'
       && lk != 47703               // 'catch' 'constraint'
       && lk != 48215               // 'catch' 'construction'
       && lk != 49751               // 'catch' 'context'
       && lk != 50263               // 'catch' 'continue'
       && lk != 50775               // 'catch' 'copy'
       && lk != 51287               // 'catch' 'copy-namespaces'
       && lk != 51799               // 'catch' 'count'
       && lk != 52311               // 'catch' 'decimal-format'
       && lk != 53335               // 'catch' 'declare'
       && lk != 53847               // 'catch' 'default'
       && lk != 54359               // 'catch' 'delete'
       && lk != 54871               // 'catch' 'descendant'
       && lk != 55383               // 'catch' 'descendant-or-self'
       && lk != 55895               // 'catch' 'descending'
       && lk != 58455               // 'catch' 'div'
       && lk != 58967               // 'catch' 'document'
       && lk != 59479               // 'catch' 'document-node'
       && lk != 59991               // 'catch' 'element'
       && lk != 60503               // 'catch' 'else'
       && lk != 61015               // 'catch' 'empty'
       && lk != 61527               // 'catch' 'empty-sequence'
       && lk != 62039               // 'catch' 'encoding'
       && lk != 62551               // 'catch' 'end'
       && lk != 63575               // 'catch' 'eq'
       && lk != 64087               // 'catch' 'every'
       && lk != 65111               // 'catch' 'except'
       && lk != 65623               // 'catch' 'exit'
       && lk != 66135               // 'catch' 'external'
       && lk != 66647               // 'catch' 'first'
       && lk != 67159               // 'catch' 'following'
       && lk != 67671               // 'catch' 'following-sibling'
       && lk != 68183               // 'catch' 'for'
       && lk != 69719               // 'catch' 'from'
       && lk != 70231               // 'catch' 'ft-option'
       && lk != 72279               // 'catch' 'function'
       && lk != 72791               // 'catch' 'ge'
       && lk != 73815               // 'catch' 'group'
       && lk != 74839               // 'catch' 'gt'
       && lk != 75351               // 'catch' 'idiv'
       && lk != 75863               // 'catch' 'if'
       && lk != 76375               // 'catch' 'import'
       && lk != 76887               // 'catch' 'in'
       && lk != 77399               // 'catch' 'index'
       && lk != 79447               // 'catch' 'insert'
       && lk != 79959               // 'catch' 'instance'
       && lk != 80471               // 'catch' 'integrity'
       && lk != 80983               // 'catch' 'intersect'
       && lk != 81495               // 'catch' 'into'
       && lk != 82007               // 'catch' 'is'
       && lk != 82519               // 'catch' 'item'
       && lk != 83543               // 'catch' 'json-item'
       && lk != 85591               // 'catch' 'last'
       && lk != 86103               // 'catch' 'lax'
       && lk != 86615               // 'catch' 'le'
       && lk != 87639               // 'catch' 'let'
       && lk != 88663               // 'catch' 'loop'
       && lk != 89687               // 'catch' 'lt'
       && lk != 90711               // 'catch' 'mod'
       && lk != 91223               // 'catch' 'modify'
       && lk != 91735               // 'catch' 'module'
       && lk != 92759               // 'catch' 'namespace'
       && lk != 93271               // 'catch' 'namespace-node'
       && lk != 93783               // 'catch' 'ne'
       && lk != 96343               // 'catch' 'node'
       && lk != 96855               // 'catch' 'nodes'
       && lk != 97879               // 'catch' 'object'
       && lk != 99927               // 'catch' 'only'
       && lk != 100439              // 'catch' 'option'
       && lk != 100951              // 'catch' 'or'
       && lk != 101463              // 'catch' 'order'
       && lk != 101975              // 'catch' 'ordered'
       && lk != 102487              // 'catch' 'ordering'
       && lk != 104023              // 'catch' 'parent'
       && lk != 107095              // 'catch' 'preceding'
       && lk != 107607              // 'catch' 'preceding-sibling'
       && lk != 109143              // 'catch' 'processing-instruction'
       && lk != 110167              // 'catch' 'rename'
       && lk != 110679              // 'catch' 'replace'
       && lk != 111191              // 'catch' 'return'
       && lk != 111703              // 'catch' 'returning'
       && lk != 112215              // 'catch' 'revalidation'
       && lk != 113239              // 'catch' 'satisfies'
       && lk != 113751              // 'catch' 'schema'
       && lk != 114263              // 'catch' 'schema-attribute'
       && lk != 114775              // 'catch' 'schema-element'
       && lk != 115287              // 'catch' 'score'
       && lk != 115799              // 'catch' 'select'
       && lk != 116311              // 'catch' 'self'
       && lk != 118871              // 'catch' 'sliding'
       && lk != 119383              // 'catch' 'some'
       && lk != 119895              // 'catch' 'stable'
       && lk != 120407              // 'catch' 'start'
       && lk != 121943              // 'catch' 'strict'
       && lk != 123479              // 'catch' 'switch'
       && lk != 123991              // 'catch' 'text'
       && lk != 126039              // 'catch' 'to'
       && lk != 126551              // 'catch' 'treat'
       && lk != 127063              // 'catch' 'try'
       && lk != 127575              // 'catch' 'tumbling'
       && lk != 128087              // 'catch' 'type'
       && lk != 128599              // 'catch' 'typeswitch'
       && lk != 129111              // 'catch' 'union'
       && lk != 130135              // 'catch' 'unordered'
       && lk != 130647              // 'catch' 'updating'
       && lk != 132183              // 'catch' 'validate'
       && lk != 132695              // 'catch' 'value'
       && lk != 133207              // 'catch' 'variable'
       && lk != 133719              // 'catch' 'version'
       && lk != 135255              // 'catch' 'where'
       && lk != 135767              // 'catch' 'while'
       && lk != 137303              // 'catch' 'with'
       && lk != 139351)             // 'catch' 'xquery'
      {
        break;
      }
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(251);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(111);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(143);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(251);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(111);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(143);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(84);                      // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shift(217);                   // 'return'
      break;
    default:
      shift(226);                   // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(84);                     // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(132);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 217:                       // 'return'
      shiftT(217);                  // 'return'
      break;
    default:
      shiftT(226);                  // 'select'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(260);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(165);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 49)                   // ':='
    {
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(165);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(148);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shift(49);                  // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(50);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(260);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(165);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 49)                   // ':='
    {
      shiftT(49);                   // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(165);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(148);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shiftT(49);                 // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    shiftT(50);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(265);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(265);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 171:                       // 'let'
      lookahead2W(161);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 248:                       // 'try'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 133:                       // 'for'
    case 136:                       // 'from'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 148:                       // 'if'
    case 241:                       // 'switch'
    case 251:                       // 'typeswitch'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
    case 16520:                     // 'from' '$'
    case 16555:                     // 'let' '$'
    case 115371:                    // 'let' 'score'
    case 118917:                    // 'for' 'sliding'
    case 118920:                    // 'from' 'sliding'
    case 127621:                    // 'for' 'tumbling'
    case 127624:                    // 'from' 'tumbling'
      parse_FLWORExpr();
      break;
    case 18068:                     // 'if' '('
      parse_IfExpr();
      break;
    case 18161:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 140536:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 18171:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 171:                       // 'let'
      lookahead2W(161);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 248:                       // 'try'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 133:                       // 'for'
    case 136:                       // 'from'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 148:                       // 'if'
    case 241:                       // 'switch'
    case 251:                       // 'typeswitch'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
    case 16520:                     // 'from' '$'
    case 16555:                     // 'let' '$'
    case 115371:                    // 'let' 'score'
    case 118917:                    // 'for' 'sliding'
    case 118920:                    // 'from' 'sliding'
    case 127621:                    // 'for' 'tumbling'
    case 127624:                    // 'from' 'tumbling'
      try_FLWORExpr();
      break;
    case 18068:                     // 'if' '('
      try_IfExpr();
      break;
    case 18161:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 140536:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 18171:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 215:                       // 'rename'
      lookahead2W(162);             // S^WS | '#' | '(' | '(:' | 'json' | 'node'
      break;
    case 216:                       // 'replace'
      lookahead2W(173);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 106:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(172);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
      break;
    case 99:                        // 'copy'
    case 125:                       // 'every'
    case 233:                       // 'some'
      lookahead2W(137);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16509:                     // 'every' '$'
    case 16617:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 96411:                     // 'insert' 'node'
    case 96923:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 96362:                     // 'delete' 'node'
    case 96874:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 96471:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 96472:                     // 'replace' 'node'
    case 132824:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 16483:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 83050:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 83099:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 83159:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case 83160:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case 73:                        // 'append'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 215:                       // 'rename'
      lookahead2W(162);             // S^WS | '#' | '(' | '(:' | 'json' | 'node'
      break;
    case 216:                       // 'replace'
      lookahead2W(173);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 106:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(172);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
      break;
    case 99:                        // 'copy'
    case 125:                       // 'every'
    case 233:                       // 'some'
      lookahead2W(137);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16509:                     // 'every' '$'
    case 16617:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 96411:                     // 'insert' 'node'
    case 96923:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 96362:                     // 'delete' 'node'
    case 96874:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 96471:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 96472:                     // 'replace' 'node'
    case 132824:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 16483:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 83050:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 83099:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 83159:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case 83160:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case 73:                        // 'append'
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(106);                     // 'delete'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(106);                    // 'delete'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    shift(155);                     // 'insert'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(159);                     // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(68);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 106573)               // 'at' 'position'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(77);               // 'at'
          lookahead1W(68);          // S^WS | '(:' | 'position'
          shiftT(208);              // 'position'
          lookahead1W(238);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      shift(77);                    // 'at'
      lookahead1W(68);              // S^WS | '(:' | 'position'
      shift(208);                   // 'position'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    shiftT(155);                    // 'insert'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(159);                    // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(68);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 106573)               // 'at' 'position'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(77);               // 'at'
          lookahead1W(68);          // S^WS | '(:' | 'position'
          shiftT(208);              // 'position'
          lookahead1W(238);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
          memoize(6, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      shiftT(77);                   // 'at'
      lookahead1W(68);              // S^WS | '(:' | 'position'
      shiftT(208);                  // 'position'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(215);                     // 'rename'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(75);                      // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(215);                    // 'rename'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    shiftT(75);                     // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(216);                     // 'replace'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(80);                // S^WS | '(:' | 'value'
    shift(259);                     // 'value'
    lookahead1W(63);                // S^WS | '(:' | 'of'
    shift(193);                     // 'of'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(268);                     // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(216);                    // 'replace'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(80);                // S^WS | '(:' | 'value'
    shiftT(259);                    // 'value'
    lookahead1W(63);                // S^WS | '(:' | 'of'
    shiftT(193);                    // 'of'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    shiftT(268);                    // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(73);                      // 'append'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(159);                     // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(73);                     // 'append'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(159);                    // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 13:                        // PredefinedEntityRef
      shift(13);                    // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      shift(24);                    // CharRef
      break;
    case 275:                       // '{{'
      shift(275);                   // '{{'
      break;
    case 281:                       // '}}'
      shift(281);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 13:                        // PredefinedEntityRef
      shiftT(13);                   // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      shiftT(24);                   // CharRef
      break;
    case 275:                       // '{{'
      shiftT(275);                  // '{{'
      break;
    case 281:                       // '}}'
      shiftT(281);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(115);                     // 'document'
    lookahead1W(85);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(115);                    // 'document'
    lookahead1W(85);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(78);                      // 'attribute'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shift(274);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(280);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 143634)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(274);              // '{'
          lookahead1W(86);          // S^WS | '(:' | '}'
          shiftT(280);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(274);                   // '{'
      lookahead1W(86);              // S^WS | '(:' | '}'
      shift(280);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(78);                     // 'attribute'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shiftT(274);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(280);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 143634)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(274);              // '{'
          lookahead1W(86);          // S^WS | '(:' | '}'
          shiftT(280);              // '}'
          memoize(7, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(274);                  // '{'
      lookahead1W(86);              // S^WS | '(:' | '}'
      shiftT(280);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(213);                     // 'processing-instruction'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shift(274);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(280);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 143634)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(274);              // '{'
          lookahead1W(86);          // S^WS | '(:' | '}'
          shiftT(280);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(274);                   // '{'
      lookahead1W(86);              // S^WS | '(:' | '}'
      shift(280);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(213);                    // 'processing-instruction'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shiftT(274);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(280);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(85);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 143634)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(274);              // '{'
          lookahead1W(86);          // S^WS | '(:' | '}'
          shiftT(280);              // '}'
          memoize(8, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(274);                  // '{'
      lookahead1W(86);              // S^WS | '(:' | '}'
      shiftT(280);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(92);                      // 'comment'
    lookahead1W(85);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(92);                     // 'comment'
    lookahead1W(85);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(242);                     // 'text'
    lookahead1W(85);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(242);                    // 'text'
    lookahead1W(85);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 181:                       // 'namespace'
      lookahead2W(227);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 213:                       // 'processing-instruction'
      lookahead2W(224);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 78:                        // 'attribute'
    case 117:                       // 'element'
      lookahead2W(230);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 92:                        // 'comment'
    case 242:                       // 'text'
      lookahead2W(92);              // S^WS | '#' | '(:' | '{'
      break;
    case 115:                       // 'document'
    case 199:                       // 'ordered'
    case 254:                       // 'unordered'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 7:                         // EQName^Token
    case 66:                        // 'after'
    case 68:                        // 'allowing'
    case 69:                        // 'ancestor'
    case 70:                        // 'ancestor-or-self'
    case 71:                        // 'and'
    case 74:                        // 'array'
    case 75:                        // 'as'
    case 76:                        // 'ascending'
    case 77:                        // 'at'
    case 79:                        // 'base-uri'
    case 80:                        // 'before'
    case 81:                        // 'boundary-space'
    case 82:                        // 'break'
    case 84:                        // 'case'
    case 85:                        // 'cast'
    case 86:                        // 'castable'
    case 87:                        // 'catch'
    case 89:                        // 'child'
    case 90:                        // 'collation'
    case 93:                        // 'constraint'
    case 94:                        // 'construction'
    case 97:                        // 'context'
    case 98:                        // 'continue'
    case 99:                        // 'copy'
    case 100:                       // 'copy-namespaces'
    case 101:                       // 'count'
    case 102:                       // 'decimal-format'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 114:                       // 'div'
    case 118:                       // 'else'
    case 119:                       // 'empty'
    case 121:                       // 'encoding'
    case 122:                       // 'end'
    case 124:                       // 'eq'
    case 125:                       // 'every'
    case 127:                       // 'except'
    case 128:                       // 'exit'
    case 129:                       // 'external'
    case 130:                       // 'first'
    case 131:                       // 'following'
    case 132:                       // 'following-sibling'
    case 133:                       // 'for'
    case 136:                       // 'from'
    case 137:                       // 'ft-option'
    case 142:                       // 'ge'
    case 144:                       // 'group'
    case 146:                       // 'gt'
    case 147:                       // 'idiv'
    case 149:                       // 'import'
    case 150:                       // 'in'
    case 151:                       // 'index'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'integrity'
    case 158:                       // 'intersect'
    case 159:                       // 'into'
    case 160:                       // 'is'
    case 163:                       // 'json-item'
    case 167:                       // 'last'
    case 168:                       // 'lax'
    case 169:                       // 'le'
    case 171:                       // 'let'
    case 173:                       // 'loop'
    case 175:                       // 'lt'
    case 177:                       // 'mod'
    case 178:                       // 'modify'
    case 179:                       // 'module'
    case 183:                       // 'ne'
    case 189:                       // 'nodes'
    case 191:                       // 'object'
    case 195:                       // 'only'
    case 196:                       // 'option'
    case 197:                       // 'or'
    case 198:                       // 'order'
    case 200:                       // 'ordering'
    case 203:                       // 'parent'
    case 209:                       // 'preceding'
    case 210:                       // 'preceding-sibling'
    case 215:                       // 'rename'
    case 216:                       // 'replace'
    case 217:                       // 'return'
    case 218:                       // 'returning'
    case 219:                       // 'revalidation'
    case 221:                       // 'satisfies'
    case 222:                       // 'schema'
    case 225:                       // 'score'
    case 226:                       // 'select'
    case 227:                       // 'self'
    case 232:                       // 'sliding'
    case 233:                       // 'some'
    case 234:                       // 'stable'
    case 235:                       // 'start'
    case 238:                       // 'strict'
    case 246:                       // 'to'
    case 247:                       // 'treat'
    case 248:                       // 'try'
    case 249:                       // 'tumbling'
    case 250:                       // 'type'
    case 252:                       // 'union'
    case 255:                       // 'updating'
    case 258:                       // 'validate'
    case 259:                       // 'value'
    case 260:                       // 'variable'
    case 261:                       // 'version'
    case 264:                       // 'where'
    case 265:                       // 'while'
    case 268:                       // 'with'
    case 272:                       // 'xquery'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3858                  // '{' EQName^Token
     || lk == 4882                  // '{' IntegerLiteral
     || lk == 5394                  // '{' DecimalLiteral
     || lk == 5906                  // '{' DoubleLiteral
     || lk == 6418                  // '{' StringLiteral
     || lk == 16658                 // '{' '$'
     || lk == 17170                 // '{' '%'
     || lk == 18194                 // '{' '('
     || lk == 18706                 // '{' '(#'
     || lk == 21266                 // '{' '+'
     || lk == 22290                 // '{' '-'
     || lk == 23314                 // '{' '.'
     || lk == 26386                 // '{' '<'
     || lk == 26898                 // '{' '<!--'
     || lk == 28946                 // '{' '<?'
     || lk == 33042                 // '{' '['
     || lk == 34066                 // '{' 'after'
     || lk == 35090                 // '{' 'allowing'
     || lk == 35602                 // '{' 'ancestor'
     || lk == 36114                 // '{' 'ancestor-or-self'
     || lk == 36626                 // '{' 'and'
     || lk == 37650                 // '{' 'append'
     || lk == 38162                 // '{' 'array'
     || lk == 38674                 // '{' 'as'
     || lk == 39186                 // '{' 'ascending'
     || lk == 39698                 // '{' 'at'
     || lk == 40210                 // '{' 'attribute'
     || lk == 40722                 // '{' 'base-uri'
     || lk == 41234                 // '{' 'before'
     || lk == 41746                 // '{' 'boundary-space'
     || lk == 42258                 // '{' 'break'
     || lk == 43282                 // '{' 'case'
     || lk == 43794                 // '{' 'cast'
     || lk == 44306                 // '{' 'castable'
     || lk == 44818                 // '{' 'catch'
     || lk == 45842                 // '{' 'child'
     || lk == 46354                 // '{' 'collation'
     || lk == 47378                 // '{' 'comment'
     || lk == 47890                 // '{' 'constraint'
     || lk == 48402                 // '{' 'construction'
     || lk == 49938                 // '{' 'context'
     || lk == 50450                 // '{' 'continue'
     || lk == 50962                 // '{' 'copy'
     || lk == 51474                 // '{' 'copy-namespaces'
     || lk == 51986                 // '{' 'count'
     || lk == 52498                 // '{' 'decimal-format'
     || lk == 53522                 // '{' 'declare'
     || lk == 54034                 // '{' 'default'
     || lk == 54546                 // '{' 'delete'
     || lk == 55058                 // '{' 'descendant'
     || lk == 55570                 // '{' 'descendant-or-self'
     || lk == 56082                 // '{' 'descending'
     || lk == 58642                 // '{' 'div'
     || lk == 59154                 // '{' 'document'
     || lk == 59666                 // '{' 'document-node'
     || lk == 60178                 // '{' 'element'
     || lk == 60690                 // '{' 'else'
     || lk == 61202                 // '{' 'empty'
     || lk == 61714                 // '{' 'empty-sequence'
     || lk == 62226                 // '{' 'encoding'
     || lk == 62738                 // '{' 'end'
     || lk == 63762                 // '{' 'eq'
     || lk == 64274                 // '{' 'every'
     || lk == 65298                 // '{' 'except'
     || lk == 65810                 // '{' 'exit'
     || lk == 66322                 // '{' 'external'
     || lk == 66834                 // '{' 'first'
     || lk == 67346                 // '{' 'following'
     || lk == 67858                 // '{' 'following-sibling'
     || lk == 68370                 // '{' 'for'
     || lk == 69906                 // '{' 'from'
     || lk == 70418                 // '{' 'ft-option'
     || lk == 72466                 // '{' 'function'
     || lk == 72978                 // '{' 'ge'
     || lk == 74002                 // '{' 'group'
     || lk == 75026                 // '{' 'gt'
     || lk == 75538                 // '{' 'idiv'
     || lk == 76050                 // '{' 'if'
     || lk == 76562                 // '{' 'import'
     || lk == 77074                 // '{' 'in'
     || lk == 77586                 // '{' 'index'
     || lk == 79634                 // '{' 'insert'
     || lk == 80146                 // '{' 'instance'
     || lk == 80658                 // '{' 'integrity'
     || lk == 81170                 // '{' 'intersect'
     || lk == 81682                 // '{' 'into'
     || lk == 82194                 // '{' 'is'
     || lk == 82706                 // '{' 'item'
     || lk == 83730                 // '{' 'json-item'
     || lk == 85778                 // '{' 'last'
     || lk == 86290                 // '{' 'lax'
     || lk == 86802                 // '{' 'le'
     || lk == 87826                 // '{' 'let'
     || lk == 88850                 // '{' 'loop'
     || lk == 89874                 // '{' 'lt'
     || lk == 90898                 // '{' 'mod'
     || lk == 91410                 // '{' 'modify'
     || lk == 91922                 // '{' 'module'
     || lk == 92946                 // '{' 'namespace'
     || lk == 93458                 // '{' 'namespace-node'
     || lk == 93970                 // '{' 'ne'
     || lk == 96530                 // '{' 'node'
     || lk == 97042                 // '{' 'nodes'
     || lk == 98066                 // '{' 'object'
     || lk == 100114                // '{' 'only'
     || lk == 100626                // '{' 'option'
     || lk == 101138                // '{' 'or'
     || lk == 101650                // '{' 'order'
     || lk == 102162                // '{' 'ordered'
     || lk == 102674                // '{' 'ordering'
     || lk == 104210                // '{' 'parent'
     || lk == 107282                // '{' 'preceding'
     || lk == 107794                // '{' 'preceding-sibling'
     || lk == 109330                // '{' 'processing-instruction'
     || lk == 110354                // '{' 'rename'
     || lk == 110866                // '{' 'replace'
     || lk == 111378                // '{' 'return'
     || lk == 111890                // '{' 'returning'
     || lk == 112402                // '{' 'revalidation'
     || lk == 113426                // '{' 'satisfies'
     || lk == 113938                // '{' 'schema'
     || lk == 114450                // '{' 'schema-attribute'
     || lk == 114962                // '{' 'schema-element'
     || lk == 115474                // '{' 'score'
     || lk == 115986                // '{' 'select'
     || lk == 116498                // '{' 'self'
     || lk == 119058                // '{' 'sliding'
     || lk == 119570                // '{' 'some'
     || lk == 120082                // '{' 'stable'
     || lk == 120594                // '{' 'start'
     || lk == 122130                // '{' 'strict'
     || lk == 123666                // '{' 'switch'
     || lk == 124178                // '{' 'text'
     || lk == 126226                // '{' 'to'
     || lk == 126738                // '{' 'treat'
     || lk == 127250                // '{' 'try'
     || lk == 127762                // '{' 'tumbling'
     || lk == 128274                // '{' 'type'
     || lk == 128786                // '{' 'typeswitch'
     || lk == 129298                // '{' 'union'
     || lk == 130322                // '{' 'unordered'
     || lk == 130834                // '{' 'updating'
     || lk == 132370                // '{' 'validate'
     || lk == 132882                // '{' 'value'
     || lk == 133394                // '{' 'variable'
     || lk == 133906                // '{' 'version'
     || lk == 135442                // '{' 'where'
     || lk == 135954                // '{' 'while'
     || lk == 137490                // '{' 'with'
     || lk == 139538                // '{' 'xquery'
     || lk == 140562                // '{' '{'
     || lk == 141586                // '{' '{|'
     || lk == 143634)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 9:                         // IntegerLiteral
    case 10:                        // DecimalLiteral
    case 11:                        // DoubleLiteral
    case 12:                        // StringLiteral
      parse_Literal();
      break;
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17927:                     // EQName^Token '('
    case 17986:                     // 'after' '('
    case 17988:                     // 'allowing' '('
    case 17989:                     // 'ancestor' '('
    case 17990:                     // 'ancestor-or-self' '('
    case 17991:                     // 'and' '('
    case 17994:                     // 'array' '('
    case 17995:                     // 'as' '('
    case 17996:                     // 'ascending' '('
    case 17997:                     // 'at' '('
    case 17999:                     // 'base-uri' '('
    case 18000:                     // 'before' '('
    case 18001:                     // 'boundary-space' '('
    case 18002:                     // 'break' '('
    case 18004:                     // 'case' '('
    case 18005:                     // 'cast' '('
    case 18006:                     // 'castable' '('
    case 18007:                     // 'catch' '('
    case 18009:                     // 'child' '('
    case 18010:                     // 'collation' '('
    case 18013:                     // 'constraint' '('
    case 18014:                     // 'construction' '('
    case 18017:                     // 'context' '('
    case 18018:                     // 'continue' '('
    case 18019:                     // 'copy' '('
    case 18020:                     // 'copy-namespaces' '('
    case 18021:                     // 'count' '('
    case 18022:                     // 'decimal-format' '('
    case 18024:                     // 'declare' '('
    case 18025:                     // 'default' '('
    case 18026:                     // 'delete' '('
    case 18027:                     // 'descendant' '('
    case 18028:                     // 'descendant-or-self' '('
    case 18029:                     // 'descending' '('
    case 18034:                     // 'div' '('
    case 18035:                     // 'document' '('
    case 18038:                     // 'else' '('
    case 18039:                     // 'empty' '('
    case 18041:                     // 'encoding' '('
    case 18042:                     // 'end' '('
    case 18044:                     // 'eq' '('
    case 18045:                     // 'every' '('
    case 18047:                     // 'except' '('
    case 18048:                     // 'exit' '('
    case 18049:                     // 'external' '('
    case 18050:                     // 'first' '('
    case 18051:                     // 'following' '('
    case 18052:                     // 'following-sibling' '('
    case 18053:                     // 'for' '('
    case 18056:                     // 'from' '('
    case 18057:                     // 'ft-option' '('
    case 18062:                     // 'ge' '('
    case 18064:                     // 'group' '('
    case 18066:                     // 'gt' '('
    case 18067:                     // 'idiv' '('
    case 18069:                     // 'import' '('
    case 18070:                     // 'in' '('
    case 18071:                     // 'index' '('
    case 18075:                     // 'insert' '('
    case 18076:                     // 'instance' '('
    case 18077:                     // 'integrity' '('
    case 18078:                     // 'intersect' '('
    case 18079:                     // 'into' '('
    case 18080:                     // 'is' '('
    case 18083:                     // 'json-item' '('
    case 18087:                     // 'last' '('
    case 18088:                     // 'lax' '('
    case 18089:                     // 'le' '('
    case 18091:                     // 'let' '('
    case 18093:                     // 'loop' '('
    case 18095:                     // 'lt' '('
    case 18097:                     // 'mod' '('
    case 18098:                     // 'modify' '('
    case 18099:                     // 'module' '('
    case 18101:                     // 'namespace' '('
    case 18103:                     // 'ne' '('
    case 18109:                     // 'nodes' '('
    case 18111:                     // 'object' '('
    case 18115:                     // 'only' '('
    case 18116:                     // 'option' '('
    case 18117:                     // 'or' '('
    case 18118:                     // 'order' '('
    case 18119:                     // 'ordered' '('
    case 18120:                     // 'ordering' '('
    case 18123:                     // 'parent' '('
    case 18129:                     // 'preceding' '('
    case 18130:                     // 'preceding-sibling' '('
    case 18135:                     // 'rename' '('
    case 18136:                     // 'replace' '('
    case 18137:                     // 'return' '('
    case 18138:                     // 'returning' '('
    case 18139:                     // 'revalidation' '('
    case 18141:                     // 'satisfies' '('
    case 18142:                     // 'schema' '('
    case 18145:                     // 'score' '('
    case 18146:                     // 'select' '('
    case 18147:                     // 'self' '('
    case 18152:                     // 'sliding' '('
    case 18153:                     // 'some' '('
    case 18154:                     // 'stable' '('
    case 18155:                     // 'start' '('
    case 18158:                     // 'strict' '('
    case 18166:                     // 'to' '('
    case 18167:                     // 'treat' '('
    case 18168:                     // 'try' '('
    case 18169:                     // 'tumbling' '('
    case 18170:                     // 'type' '('
    case 18172:                     // 'union' '('
    case 18174:                     // 'unordered' '('
    case 18175:                     // 'updating' '('
    case 18178:                     // 'validate' '('
    case 18179:                     // 'value' '('
    case 18180:                     // 'variable' '('
    case 18181:                     // 'version' '('
    case 18184:                     // 'where' '('
    case 18185:                     // 'while' '('
    case 18188:                     // 'with' '('
    case 18192:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 140487:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 140542:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 116:                       // 'document-node'
    case 120:                       // 'empty-sequence'
    case 141:                       // 'function'
    case 148:                       // 'if'
    case 161:                       // 'item'
    case 182:                       // 'namespace-node'
    case 188:                       // 'node'
    case 223:                       // 'schema-attribute'
    case 224:                       // 'schema-element'
    case 241:                       // 'switch'
    case 251:                       // 'typeswitch'
    case 15367:                     // EQName^Token '#'
    case 15426:                     // 'after' '#'
    case 15428:                     // 'allowing' '#'
    case 15429:                     // 'ancestor' '#'
    case 15430:                     // 'ancestor-or-self' '#'
    case 15431:                     // 'and' '#'
    case 15434:                     // 'array' '#'
    case 15435:                     // 'as' '#'
    case 15436:                     // 'ascending' '#'
    case 15437:                     // 'at' '#'
    case 15438:                     // 'attribute' '#'
    case 15439:                     // 'base-uri' '#'
    case 15440:                     // 'before' '#'
    case 15441:                     // 'boundary-space' '#'
    case 15442:                     // 'break' '#'
    case 15444:                     // 'case' '#'
    case 15445:                     // 'cast' '#'
    case 15446:                     // 'castable' '#'
    case 15447:                     // 'catch' '#'
    case 15449:                     // 'child' '#'
    case 15450:                     // 'collation' '#'
    case 15452:                     // 'comment' '#'
    case 15453:                     // 'constraint' '#'
    case 15454:                     // 'construction' '#'
    case 15457:                     // 'context' '#'
    case 15458:                     // 'continue' '#'
    case 15459:                     // 'copy' '#'
    case 15460:                     // 'copy-namespaces' '#'
    case 15461:                     // 'count' '#'
    case 15462:                     // 'decimal-format' '#'
    case 15464:                     // 'declare' '#'
    case 15465:                     // 'default' '#'
    case 15466:                     // 'delete' '#'
    case 15467:                     // 'descendant' '#'
    case 15468:                     // 'descendant-or-self' '#'
    case 15469:                     // 'descending' '#'
    case 15474:                     // 'div' '#'
    case 15475:                     // 'document' '#'
    case 15477:                     // 'element' '#'
    case 15478:                     // 'else' '#'
    case 15479:                     // 'empty' '#'
    case 15481:                     // 'encoding' '#'
    case 15482:                     // 'end' '#'
    case 15484:                     // 'eq' '#'
    case 15485:                     // 'every' '#'
    case 15487:                     // 'except' '#'
    case 15488:                     // 'exit' '#'
    case 15489:                     // 'external' '#'
    case 15490:                     // 'first' '#'
    case 15491:                     // 'following' '#'
    case 15492:                     // 'following-sibling' '#'
    case 15493:                     // 'for' '#'
    case 15496:                     // 'from' '#'
    case 15497:                     // 'ft-option' '#'
    case 15502:                     // 'ge' '#'
    case 15504:                     // 'group' '#'
    case 15506:                     // 'gt' '#'
    case 15507:                     // 'idiv' '#'
    case 15509:                     // 'import' '#'
    case 15510:                     // 'in' '#'
    case 15511:                     // 'index' '#'
    case 15515:                     // 'insert' '#'
    case 15516:                     // 'instance' '#'
    case 15517:                     // 'integrity' '#'
    case 15518:                     // 'intersect' '#'
    case 15519:                     // 'into' '#'
    case 15520:                     // 'is' '#'
    case 15523:                     // 'json-item' '#'
    case 15527:                     // 'last' '#'
    case 15528:                     // 'lax' '#'
    case 15529:                     // 'le' '#'
    case 15531:                     // 'let' '#'
    case 15533:                     // 'loop' '#'
    case 15535:                     // 'lt' '#'
    case 15537:                     // 'mod' '#'
    case 15538:                     // 'modify' '#'
    case 15539:                     // 'module' '#'
    case 15541:                     // 'namespace' '#'
    case 15543:                     // 'ne' '#'
    case 15549:                     // 'nodes' '#'
    case 15551:                     // 'object' '#'
    case 15555:                     // 'only' '#'
    case 15556:                     // 'option' '#'
    case 15557:                     // 'or' '#'
    case 15558:                     // 'order' '#'
    case 15559:                     // 'ordered' '#'
    case 15560:                     // 'ordering' '#'
    case 15563:                     // 'parent' '#'
    case 15569:                     // 'preceding' '#'
    case 15570:                     // 'preceding-sibling' '#'
    case 15573:                     // 'processing-instruction' '#'
    case 15575:                     // 'rename' '#'
    case 15576:                     // 'replace' '#'
    case 15577:                     // 'return' '#'
    case 15578:                     // 'returning' '#'
    case 15579:                     // 'revalidation' '#'
    case 15581:                     // 'satisfies' '#'
    case 15582:                     // 'schema' '#'
    case 15585:                     // 'score' '#'
    case 15586:                     // 'select' '#'
    case 15587:                     // 'self' '#'
    case 15592:                     // 'sliding' '#'
    case 15593:                     // 'some' '#'
    case 15594:                     // 'stable' '#'
    case 15595:                     // 'start' '#'
    case 15598:                     // 'strict' '#'
    case 15602:                     // 'text' '#'
    case 15606:                     // 'to' '#'
    case 15607:                     // 'treat' '#'
    case 15608:                     // 'try' '#'
    case 15609:                     // 'tumbling' '#'
    case 15610:                     // 'type' '#'
    case 15612:                     // 'union' '#'
    case 15614:                     // 'unordered' '#'
    case 15615:                     // 'updating' '#'
    case 15618:                     // 'validate' '#'
    case 15619:                     // 'value' '#'
    case 15620:                     // 'variable' '#'
    case 15621:                     // 'version' '#'
    case 15624:                     // 'where' '#'
    case 15625:                     // 'while' '#'
    case 15628:                     // 'with' '#'
    case 15632:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 64:                        // '['
      parse_ArrayConstructor();
      break;
    case 276:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 181:                       // 'namespace'
      lookahead2W(227);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 213:                       // 'processing-instruction'
      lookahead2W(224);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 274:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 78:                        // 'attribute'
    case 117:                       // 'element'
      lookahead2W(230);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 92:                        // 'comment'
    case 242:                       // 'text'
      lookahead2W(92);              // S^WS | '#' | '(:' | '{'
      break;
    case 115:                       // 'document'
    case 199:                       // 'ordered'
    case 254:                       // 'unordered'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 7:                         // EQName^Token
    case 66:                        // 'after'
    case 68:                        // 'allowing'
    case 69:                        // 'ancestor'
    case 70:                        // 'ancestor-or-self'
    case 71:                        // 'and'
    case 74:                        // 'array'
    case 75:                        // 'as'
    case 76:                        // 'ascending'
    case 77:                        // 'at'
    case 79:                        // 'base-uri'
    case 80:                        // 'before'
    case 81:                        // 'boundary-space'
    case 82:                        // 'break'
    case 84:                        // 'case'
    case 85:                        // 'cast'
    case 86:                        // 'castable'
    case 87:                        // 'catch'
    case 89:                        // 'child'
    case 90:                        // 'collation'
    case 93:                        // 'constraint'
    case 94:                        // 'construction'
    case 97:                        // 'context'
    case 98:                        // 'continue'
    case 99:                        // 'copy'
    case 100:                       // 'copy-namespaces'
    case 101:                       // 'count'
    case 102:                       // 'decimal-format'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 114:                       // 'div'
    case 118:                       // 'else'
    case 119:                       // 'empty'
    case 121:                       // 'encoding'
    case 122:                       // 'end'
    case 124:                       // 'eq'
    case 125:                       // 'every'
    case 127:                       // 'except'
    case 128:                       // 'exit'
    case 129:                       // 'external'
    case 130:                       // 'first'
    case 131:                       // 'following'
    case 132:                       // 'following-sibling'
    case 133:                       // 'for'
    case 136:                       // 'from'
    case 137:                       // 'ft-option'
    case 142:                       // 'ge'
    case 144:                       // 'group'
    case 146:                       // 'gt'
    case 147:                       // 'idiv'
    case 149:                       // 'import'
    case 150:                       // 'in'
    case 151:                       // 'index'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'integrity'
    case 158:                       // 'intersect'
    case 159:                       // 'into'
    case 160:                       // 'is'
    case 163:                       // 'json-item'
    case 167:                       // 'last'
    case 168:                       // 'lax'
    case 169:                       // 'le'
    case 171:                       // 'let'
    case 173:                       // 'loop'
    case 175:                       // 'lt'
    case 177:                       // 'mod'
    case 178:                       // 'modify'
    case 179:                       // 'module'
    case 183:                       // 'ne'
    case 189:                       // 'nodes'
    case 191:                       // 'object'
    case 195:                       // 'only'
    case 196:                       // 'option'
    case 197:                       // 'or'
    case 198:                       // 'order'
    case 200:                       // 'ordering'
    case 203:                       // 'parent'
    case 209:                       // 'preceding'
    case 210:                       // 'preceding-sibling'
    case 215:                       // 'rename'
    case 216:                       // 'replace'
    case 217:                       // 'return'
    case 218:                       // 'returning'
    case 219:                       // 'revalidation'
    case 221:                       // 'satisfies'
    case 222:                       // 'schema'
    case 225:                       // 'score'
    case 226:                       // 'select'
    case 227:                       // 'self'
    case 232:                       // 'sliding'
    case 233:                       // 'some'
    case 234:                       // 'stable'
    case 235:                       // 'start'
    case 238:                       // 'strict'
    case 246:                       // 'to'
    case 247:                       // 'treat'
    case 248:                       // 'try'
    case 249:                       // 'tumbling'
    case 250:                       // 'type'
    case 252:                       // 'union'
    case 255:                       // 'updating'
    case 258:                       // 'validate'
    case 259:                       // 'value'
    case 260:                       // 'variable'
    case 261:                       // 'version'
    case 264:                       // 'where'
    case 265:                       // 'while'
    case 268:                       // 'with'
    case 272:                       // 'xquery'
      lookahead2W(91);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3858                  // '{' EQName^Token
     || lk == 4882                  // '{' IntegerLiteral
     || lk == 5394                  // '{' DecimalLiteral
     || lk == 5906                  // '{' DoubleLiteral
     || lk == 6418                  // '{' StringLiteral
     || lk == 16658                 // '{' '$'
     || lk == 17170                 // '{' '%'
     || lk == 18194                 // '{' '('
     || lk == 18706                 // '{' '(#'
     || lk == 21266                 // '{' '+'
     || lk == 22290                 // '{' '-'
     || lk == 23314                 // '{' '.'
     || lk == 26386                 // '{' '<'
     || lk == 26898                 // '{' '<!--'
     || lk == 28946                 // '{' '<?'
     || lk == 33042                 // '{' '['
     || lk == 34066                 // '{' 'after'
     || lk == 35090                 // '{' 'allowing'
     || lk == 35602                 // '{' 'ancestor'
     || lk == 36114                 // '{' 'ancestor-or-self'
     || lk == 36626                 // '{' 'and'
     || lk == 37650                 // '{' 'append'
     || lk == 38162                 // '{' 'array'
     || lk == 38674                 // '{' 'as'
     || lk == 39186                 // '{' 'ascending'
     || lk == 39698                 // '{' 'at'
     || lk == 40210                 // '{' 'attribute'
     || lk == 40722                 // '{' 'base-uri'
     || lk == 41234                 // '{' 'before'
     || lk == 41746                 // '{' 'boundary-space'
     || lk == 42258                 // '{' 'break'
     || lk == 43282                 // '{' 'case'
     || lk == 43794                 // '{' 'cast'
     || lk == 44306                 // '{' 'castable'
     || lk == 44818                 // '{' 'catch'
     || lk == 45842                 // '{' 'child'
     || lk == 46354                 // '{' 'collation'
     || lk == 47378                 // '{' 'comment'
     || lk == 47890                 // '{' 'constraint'
     || lk == 48402                 // '{' 'construction'
     || lk == 49938                 // '{' 'context'
     || lk == 50450                 // '{' 'continue'
     || lk == 50962                 // '{' 'copy'
     || lk == 51474                 // '{' 'copy-namespaces'
     || lk == 51986                 // '{' 'count'
     || lk == 52498                 // '{' 'decimal-format'
     || lk == 53522                 // '{' 'declare'
     || lk == 54034                 // '{' 'default'
     || lk == 54546                 // '{' 'delete'
     || lk == 55058                 // '{' 'descendant'
     || lk == 55570                 // '{' 'descendant-or-self'
     || lk == 56082                 // '{' 'descending'
     || lk == 58642                 // '{' 'div'
     || lk == 59154                 // '{' 'document'
     || lk == 59666                 // '{' 'document-node'
     || lk == 60178                 // '{' 'element'
     || lk == 60690                 // '{' 'else'
     || lk == 61202                 // '{' 'empty'
     || lk == 61714                 // '{' 'empty-sequence'
     || lk == 62226                 // '{' 'encoding'
     || lk == 62738                 // '{' 'end'
     || lk == 63762                 // '{' 'eq'
     || lk == 64274                 // '{' 'every'
     || lk == 65298                 // '{' 'except'
     || lk == 65810                 // '{' 'exit'
     || lk == 66322                 // '{' 'external'
     || lk == 66834                 // '{' 'first'
     || lk == 67346                 // '{' 'following'
     || lk == 67858                 // '{' 'following-sibling'
     || lk == 68370                 // '{' 'for'
     || lk == 69906                 // '{' 'from'
     || lk == 70418                 // '{' 'ft-option'
     || lk == 72466                 // '{' 'function'
     || lk == 72978                 // '{' 'ge'
     || lk == 74002                 // '{' 'group'
     || lk == 75026                 // '{' 'gt'
     || lk == 75538                 // '{' 'idiv'
     || lk == 76050                 // '{' 'if'
     || lk == 76562                 // '{' 'import'
     || lk == 77074                 // '{' 'in'
     || lk == 77586                 // '{' 'index'
     || lk == 79634                 // '{' 'insert'
     || lk == 80146                 // '{' 'instance'
     || lk == 80658                 // '{' 'integrity'
     || lk == 81170                 // '{' 'intersect'
     || lk == 81682                 // '{' 'into'
     || lk == 82194                 // '{' 'is'
     || lk == 82706                 // '{' 'item'
     || lk == 83730                 // '{' 'json-item'
     || lk == 85778                 // '{' 'last'
     || lk == 86290                 // '{' 'lax'
     || lk == 86802                 // '{' 'le'
     || lk == 87826                 // '{' 'let'
     || lk == 88850                 // '{' 'loop'
     || lk == 89874                 // '{' 'lt'
     || lk == 90898                 // '{' 'mod'
     || lk == 91410                 // '{' 'modify'
     || lk == 91922                 // '{' 'module'
     || lk == 92946                 // '{' 'namespace'
     || lk == 93458                 // '{' 'namespace-node'
     || lk == 93970                 // '{' 'ne'
     || lk == 96530                 // '{' 'node'
     || lk == 97042                 // '{' 'nodes'
     || lk == 98066                 // '{' 'object'
     || lk == 100114                // '{' 'only'
     || lk == 100626                // '{' 'option'
     || lk == 101138                // '{' 'or'
     || lk == 101650                // '{' 'order'
     || lk == 102162                // '{' 'ordered'
     || lk == 102674                // '{' 'ordering'
     || lk == 104210                // '{' 'parent'
     || lk == 107282                // '{' 'preceding'
     || lk == 107794                // '{' 'preceding-sibling'
     || lk == 109330                // '{' 'processing-instruction'
     || lk == 110354                // '{' 'rename'
     || lk == 110866                // '{' 'replace'
     || lk == 111378                // '{' 'return'
     || lk == 111890                // '{' 'returning'
     || lk == 112402                // '{' 'revalidation'
     || lk == 113426                // '{' 'satisfies'
     || lk == 113938                // '{' 'schema'
     || lk == 114450                // '{' 'schema-attribute'
     || lk == 114962                // '{' 'schema-element'
     || lk == 115474                // '{' 'score'
     || lk == 115986                // '{' 'select'
     || lk == 116498                // '{' 'self'
     || lk == 119058                // '{' 'sliding'
     || lk == 119570                // '{' 'some'
     || lk == 120082                // '{' 'stable'
     || lk == 120594                // '{' 'start'
     || lk == 122130                // '{' 'strict'
     || lk == 123666                // '{' 'switch'
     || lk == 124178                // '{' 'text'
     || lk == 126226                // '{' 'to'
     || lk == 126738                // '{' 'treat'
     || lk == 127250                // '{' 'try'
     || lk == 127762                // '{' 'tumbling'
     || lk == 128274                // '{' 'type'
     || lk == 128786                // '{' 'typeswitch'
     || lk == 129298                // '{' 'union'
     || lk == 130322                // '{' 'unordered'
     || lk == 130834                // '{' 'updating'
     || lk == 132370                // '{' 'validate'
     || lk == 132882                // '{' 'value'
     || lk == 133394                // '{' 'variable'
     || lk == 133906                // '{' 'version'
     || lk == 135442                // '{' 'where'
     || lk == 135954                // '{' 'while'
     || lk == 137490                // '{' 'with'
     || lk == 139538                // '{' 'xquery'
     || lk == 140562                // '{' '{'
     || lk == 141586                // '{' '{|'
     || lk == 143634)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(9, e0A, -10);
          lk = -14;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 9:                         // IntegerLiteral
    case 10:                        // DecimalLiteral
    case 11:                        // DoubleLiteral
    case 12:                        // StringLiteral
      try_Literal();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      try_ContextItemExpr();
      break;
    case 17927:                     // EQName^Token '('
    case 17986:                     // 'after' '('
    case 17988:                     // 'allowing' '('
    case 17989:                     // 'ancestor' '('
    case 17990:                     // 'ancestor-or-self' '('
    case 17991:                     // 'and' '('
    case 17994:                     // 'array' '('
    case 17995:                     // 'as' '('
    case 17996:                     // 'ascending' '('
    case 17997:                     // 'at' '('
    case 17999:                     // 'base-uri' '('
    case 18000:                     // 'before' '('
    case 18001:                     // 'boundary-space' '('
    case 18002:                     // 'break' '('
    case 18004:                     // 'case' '('
    case 18005:                     // 'cast' '('
    case 18006:                     // 'castable' '('
    case 18007:                     // 'catch' '('
    case 18009:                     // 'child' '('
    case 18010:                     // 'collation' '('
    case 18013:                     // 'constraint' '('
    case 18014:                     // 'construction' '('
    case 18017:                     // 'context' '('
    case 18018:                     // 'continue' '('
    case 18019:                     // 'copy' '('
    case 18020:                     // 'copy-namespaces' '('
    case 18021:                     // 'count' '('
    case 18022:                     // 'decimal-format' '('
    case 18024:                     // 'declare' '('
    case 18025:                     // 'default' '('
    case 18026:                     // 'delete' '('
    case 18027:                     // 'descendant' '('
    case 18028:                     // 'descendant-or-self' '('
    case 18029:                     // 'descending' '('
    case 18034:                     // 'div' '('
    case 18035:                     // 'document' '('
    case 18038:                     // 'else' '('
    case 18039:                     // 'empty' '('
    case 18041:                     // 'encoding' '('
    case 18042:                     // 'end' '('
    case 18044:                     // 'eq' '('
    case 18045:                     // 'every' '('
    case 18047:                     // 'except' '('
    case 18048:                     // 'exit' '('
    case 18049:                     // 'external' '('
    case 18050:                     // 'first' '('
    case 18051:                     // 'following' '('
    case 18052:                     // 'following-sibling' '('
    case 18053:                     // 'for' '('
    case 18056:                     // 'from' '('
    case 18057:                     // 'ft-option' '('
    case 18062:                     // 'ge' '('
    case 18064:                     // 'group' '('
    case 18066:                     // 'gt' '('
    case 18067:                     // 'idiv' '('
    case 18069:                     // 'import' '('
    case 18070:                     // 'in' '('
    case 18071:                     // 'index' '('
    case 18075:                     // 'insert' '('
    case 18076:                     // 'instance' '('
    case 18077:                     // 'integrity' '('
    case 18078:                     // 'intersect' '('
    case 18079:                     // 'into' '('
    case 18080:                     // 'is' '('
    case 18083:                     // 'json-item' '('
    case 18087:                     // 'last' '('
    case 18088:                     // 'lax' '('
    case 18089:                     // 'le' '('
    case 18091:                     // 'let' '('
    case 18093:                     // 'loop' '('
    case 18095:                     // 'lt' '('
    case 18097:                     // 'mod' '('
    case 18098:                     // 'modify' '('
    case 18099:                     // 'module' '('
    case 18101:                     // 'namespace' '('
    case 18103:                     // 'ne' '('
    case 18109:                     // 'nodes' '('
    case 18111:                     // 'object' '('
    case 18115:                     // 'only' '('
    case 18116:                     // 'option' '('
    case 18117:                     // 'or' '('
    case 18118:                     // 'order' '('
    case 18119:                     // 'ordered' '('
    case 18120:                     // 'ordering' '('
    case 18123:                     // 'parent' '('
    case 18129:                     // 'preceding' '('
    case 18130:                     // 'preceding-sibling' '('
    case 18135:                     // 'rename' '('
    case 18136:                     // 'replace' '('
    case 18137:                     // 'return' '('
    case 18138:                     // 'returning' '('
    case 18139:                     // 'revalidation' '('
    case 18141:                     // 'satisfies' '('
    case 18142:                     // 'schema' '('
    case 18145:                     // 'score' '('
    case 18146:                     // 'select' '('
    case 18147:                     // 'self' '('
    case 18152:                     // 'sliding' '('
    case 18153:                     // 'some' '('
    case 18154:                     // 'stable' '('
    case 18155:                     // 'start' '('
    case 18158:                     // 'strict' '('
    case 18166:                     // 'to' '('
    case 18167:                     // 'treat' '('
    case 18168:                     // 'try' '('
    case 18169:                     // 'tumbling' '('
    case 18170:                     // 'type' '('
    case 18172:                     // 'union' '('
    case 18174:                     // 'unordered' '('
    case 18175:                     // 'updating' '('
    case 18178:                     // 'validate' '('
    case 18179:                     // 'value' '('
    case 18180:                     // 'variable' '('
    case 18181:                     // 'version' '('
    case 18184:                     // 'where' '('
    case 18185:                     // 'while' '('
    case 18188:                     // 'with' '('
    case 18192:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 140487:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 140542:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 116:                       // 'document-node'
    case 120:                       // 'empty-sequence'
    case 141:                       // 'function'
    case 148:                       // 'if'
    case 161:                       // 'item'
    case 182:                       // 'namespace-node'
    case 188:                       // 'node'
    case 223:                       // 'schema-attribute'
    case 224:                       // 'schema-element'
    case 241:                       // 'switch'
    case 251:                       // 'typeswitch'
    case 15367:                     // EQName^Token '#'
    case 15426:                     // 'after' '#'
    case 15428:                     // 'allowing' '#'
    case 15429:                     // 'ancestor' '#'
    case 15430:                     // 'ancestor-or-self' '#'
    case 15431:                     // 'and' '#'
    case 15434:                     // 'array' '#'
    case 15435:                     // 'as' '#'
    case 15436:                     // 'ascending' '#'
    case 15437:                     // 'at' '#'
    case 15438:                     // 'attribute' '#'
    case 15439:                     // 'base-uri' '#'
    case 15440:                     // 'before' '#'
    case 15441:                     // 'boundary-space' '#'
    case 15442:                     // 'break' '#'
    case 15444:                     // 'case' '#'
    case 15445:                     // 'cast' '#'
    case 15446:                     // 'castable' '#'
    case 15447:                     // 'catch' '#'
    case 15449:                     // 'child' '#'
    case 15450:                     // 'collation' '#'
    case 15452:                     // 'comment' '#'
    case 15453:                     // 'constraint' '#'
    case 15454:                     // 'construction' '#'
    case 15457:                     // 'context' '#'
    case 15458:                     // 'continue' '#'
    case 15459:                     // 'copy' '#'
    case 15460:                     // 'copy-namespaces' '#'
    case 15461:                     // 'count' '#'
    case 15462:                     // 'decimal-format' '#'
    case 15464:                     // 'declare' '#'
    case 15465:                     // 'default' '#'
    case 15466:                     // 'delete' '#'
    case 15467:                     // 'descendant' '#'
    case 15468:                     // 'descendant-or-self' '#'
    case 15469:                     // 'descending' '#'
    case 15474:                     // 'div' '#'
    case 15475:                     // 'document' '#'
    case 15477:                     // 'element' '#'
    case 15478:                     // 'else' '#'
    case 15479:                     // 'empty' '#'
    case 15481:                     // 'encoding' '#'
    case 15482:                     // 'end' '#'
    case 15484:                     // 'eq' '#'
    case 15485:                     // 'every' '#'
    case 15487:                     // 'except' '#'
    case 15488:                     // 'exit' '#'
    case 15489:                     // 'external' '#'
    case 15490:                     // 'first' '#'
    case 15491:                     // 'following' '#'
    case 15492:                     // 'following-sibling' '#'
    case 15493:                     // 'for' '#'
    case 15496:                     // 'from' '#'
    case 15497:                     // 'ft-option' '#'
    case 15502:                     // 'ge' '#'
    case 15504:                     // 'group' '#'
    case 15506:                     // 'gt' '#'
    case 15507:                     // 'idiv' '#'
    case 15509:                     // 'import' '#'
    case 15510:                     // 'in' '#'
    case 15511:                     // 'index' '#'
    case 15515:                     // 'insert' '#'
    case 15516:                     // 'instance' '#'
    case 15517:                     // 'integrity' '#'
    case 15518:                     // 'intersect' '#'
    case 15519:                     // 'into' '#'
    case 15520:                     // 'is' '#'
    case 15523:                     // 'json-item' '#'
    case 15527:                     // 'last' '#'
    case 15528:                     // 'lax' '#'
    case 15529:                     // 'le' '#'
    case 15531:                     // 'let' '#'
    case 15533:                     // 'loop' '#'
    case 15535:                     // 'lt' '#'
    case 15537:                     // 'mod' '#'
    case 15538:                     // 'modify' '#'
    case 15539:                     // 'module' '#'
    case 15541:                     // 'namespace' '#'
    case 15543:                     // 'ne' '#'
    case 15549:                     // 'nodes' '#'
    case 15551:                     // 'object' '#'
    case 15555:                     // 'only' '#'
    case 15556:                     // 'option' '#'
    case 15557:                     // 'or' '#'
    case 15558:                     // 'order' '#'
    case 15559:                     // 'ordered' '#'
    case 15560:                     // 'ordering' '#'
    case 15563:                     // 'parent' '#'
    case 15569:                     // 'preceding' '#'
    case 15570:                     // 'preceding-sibling' '#'
    case 15573:                     // 'processing-instruction' '#'
    case 15575:                     // 'rename' '#'
    case 15576:                     // 'replace' '#'
    case 15577:                     // 'return' '#'
    case 15578:                     // 'returning' '#'
    case 15579:                     // 'revalidation' '#'
    case 15581:                     // 'satisfies' '#'
    case 15582:                     // 'schema' '#'
    case 15585:                     // 'score' '#'
    case 15586:                     // 'select' '#'
    case 15587:                     // 'self' '#'
    case 15592:                     // 'sliding' '#'
    case 15593:                     // 'some' '#'
    case 15594:                     // 'stable' '#'
    case 15595:                     // 'start' '#'
    case 15598:                     // 'strict' '#'
    case 15602:                     // 'text' '#'
    case 15606:                     // 'to' '#'
    case 15607:                     // 'treat' '#'
    case 15608:                     // 'try' '#'
    case 15609:                     // 'tumbling' '#'
    case 15610:                     // 'type' '#'
    case 15612:                     // 'union' '#'
    case 15614:                     // 'unordered' '#'
    case 15615:                     // 'updating' '#'
    case 15618:                     // 'validate' '#'
    case 15619:                     // 'value' '#'
    case 15620:                     // 'variable' '#'
    case 15621:                     // 'version' '#'
    case 15624:                     // 'where' '#'
    case 15625:                     // 'while' '#'
    case 15628:                     // 'with' '#'
    case 15632:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 64:                        // '['
      try_ArrayConstructor();
      break;
    case 276:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(276);                     // '{|'
    lookahead1W(243);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' |
                                    // '|}'
    if (l1 != 279)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(279);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(276);                    // '{|'
    lookahead1W(243);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' |
                                    // '|}'
    if (l1 != 279)                  // '|}'
    {
      try_Expr();
    }
    shiftT(279);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(274);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 280)                  // '}'
    {
      whitespace();
      parse_PairConstructor();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_PairConstructor();
      }
    }
    shift(280);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(274);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 280)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_PairConstructor();
      }
    }
    shiftT(280);                    // '}'
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    shift(47);                      // ':'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    shiftT(47);                     // ':'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(64);                      // '['
    lookahead1W(242);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 65)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(65);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(64);                     // '['
    lookahead1W(242);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 65)                   // ']'
    {
      try_Expr();
    }
    shiftT(65);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(274);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(280);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(274);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    shiftT(280);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(141);                     // 'function'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(93);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(151);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 75)                   // 'as'
    {
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(116);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 274:                       // '{'
      shift(274);                   // '{'
      lookahead1W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(280);                   // '}'
      break;
    default:
      shift(129);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(JSONiqParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 23)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = JSONiqParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = JSONiqParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = JSONiqParser.MAP1[(c0 & 15) + JSONiqParser.MAP1[(c1 & 31) + JSONiqParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (JSONiqParser.MAP2[m] > c0) hi = m - 1;
          else if (JSONiqParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = JSONiqParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = JSONiqParser.TRANSITION[(i0 & 15) + JSONiqParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

JSONiqParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 282; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3526 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = JSONiqParser.EXPECTED[(i0 & 1) + JSONiqParser.EXPECTED[(i1 & 3) + JSONiqParser.EXPECTED[(i2 & 3) + JSONiqParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(JSONiqParser.TOKEN[j]);
      }
    }
  }
  return set;
};

JSONiqParser.MAP0 =
[
  /*   0 */ 69, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 24, 38, 24, 30, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
  /* 118 */ 60, 61, 62, 63, 64, 65, 66, 67, 24, 24
];

JSONiqParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 69, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 24, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 24, 38, 24, 30,
  /* 371 */ 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
  /* 398 */ 65, 66, 67, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 30, 30, 24, 24, 24, 24, 24, 24, 24, 68, 24, 24,
  /* 425 */ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
  /* 452 */ 68, 68, 68, 68
];

JSONiqParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 24, 30, 24, 30, 30,
  /* 17 */ 24
];

JSONiqParser.INITIAL =
[
  /*   0 */ 1, 16386, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 8281, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
  /* 106 */ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  /* 127 */ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
  /* 148 */ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
  /* 169 */ 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
  /* 190 */ 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
  /* 211 */ 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
  /* 232 */ 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
];

JSONiqParser.TRANSITION =
[
  /*     0 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*    15 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*    30 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*    45 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*    60 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*    75 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*    90 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   105 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   120 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   135 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   150 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   165 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   180 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   195 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   210 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   225 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   240 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   255 */ 18204, 17920, 17961, 17981, 17981, 17981, 17945, 17981, 17981, 17981, 17981, 17981, 17935, 17981, 17965,
  /*   270 */ 17981, 17989, 18005, 18204, 18204, 18204, 34697, 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   285 */ 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204, 18204, 20849, 18204, 34227,
  /*   300 */ 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218,
  /*   315 */ 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265,
  /*   330 */ 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318,
  /*   345 */ 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925,
  /*   360 */ 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646,
  /*   375 */ 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049,
  /*   390 */ 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069,
  /*   405 */ 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241,
  /*   420 */ 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689,
  /*   435 */ 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013,
  /*   450 */ 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293,
  /*   465 */ 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204,
  /*   480 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   495 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   510 */ 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763, 18204, 18204, 18204, 18204, 18204, 20700, 30641,
  /*   525 */ 30649, 18204, 34566, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 28407, 18204, 18204, 18204, 18204,
  /*   540 */ 18204, 18204, 18417, 18474, 19462, 48429, 19153, 36419, 35435, 25682, 34686, 18204, 18204, 20849, 18204,
  /*   555 */ 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422,
  /*   570 */ 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194,
  /*   585 */ 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107,
  /*   600 */ 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911,
  /*   615 */ 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630,
  /*   630 */ 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941,
  /*   645 */ 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196,
  /*   660 */ 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557,
  /*   675 */ 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638,
  /*   690 */ 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993,
  /*   705 */ 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243,
  /*   720 */ 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204,
  /*   735 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   750 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*   765 */ 18204, 18204, 18204, 20771, 20787, 18204, 18204, 18204, 20710, 18204, 18204, 29303, 18206, 20806, 20830,
  /*   780 */ 18204, 18205, 20814, 20883, 20946, 18204, 18204, 18204, 34697, 18204, 25700, 43919, 18204, 18204, 18204,
  /*   795 */ 18204, 18204, 18204, 18417, 18474, 19462, 48429, 20073, 20971, 35435, 25682, 34686, 18204, 18204, 20849,
  /*   810 */ 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114,
  /*   825 */ 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270,
  /*   840 */ 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346,
  /*   855 */ 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407,
  /*   870 */ 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599,
  /*   885 */ 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515,
  /*   900 */ 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351,
  /*   915 */ 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285,
  /*   930 */ 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602,
  /*   945 */ 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113,
  /*   960 */ 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741,
  /*   975 */ 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204,
  /*   990 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1005 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1020 */ 18204, 18204, 18204, 18204, 20998, 41437, 18204, 18204, 18204, 37979, 18204, 18204, 21342, 18204, 21025,
  /*  1035 */ 21090, 41436, 18204, 21038, 27866, 20746, 18204, 18204, 18204, 21121, 18204, 25700, 21871, 18204, 18204,
  /*  1050 */ 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18681, 21155, 35435, 25682, 34686, 18204, 18204,
  /*  1065 */ 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181,
  /*  1080 */ 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204,
  /*  1095 */ 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 21190, 24342, 20103, 18314, 48430, 19182, 19460,
  /*  1110 */ 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391,
  /*  1125 */ 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569,
  /*  1140 */ 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897,
  /*  1155 */ 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065,
  /*  1170 */ 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268,
  /*  1185 */ 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515,
  /*  1200 */ 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953,
  /*  1215 */ 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213,
  /*  1230 */ 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656,
  /*  1245 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1260 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1275 */ 18204, 18204, 18204, 18204, 18204, 20681, 41770, 18204, 18204, 18204, 38219, 18204, 18204, 24552, 41775,
  /*  1290 */ 21212, 20700, 18204, 18204, 21224, 21236, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 18204, 18204,
  /*  1305 */ 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204,
  /*  1320 */ 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159,
  /*  1335 */ 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241,
  /*  1350 */ 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322,
  /*  1365 */ 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204,
  /*  1380 */ 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522,
  /*  1395 */ 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859,
  /*  1410 */ 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534,
  /*  1425 */ 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251,
  /*  1440 */ 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478,
  /*  1455 */ 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886,
  /*  1470 */ 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425,
  /*  1485 */ 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606,
  /*  1500 */ 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1515 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1530 */ 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 33958, 42136, 18204, 18204,
  /*  1545 */ 18204, 18204, 21252, 42131, 18204, 32115, 21288, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 18204,
  /*  1560 */ 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686,
  /*  1575 */ 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212,
  /*  1590 */ 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222,
  /*  1605 */ 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430,
  /*  1620 */ 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204,
  /*  1635 */ 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672,
  /*  1650 */ 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984,
  /*  1665 */ 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034,
  /*  1680 */ 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234,
  /*  1695 */ 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583,
  /*  1710 */ 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870,
  /*  1725 */ 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429,
  /*  1740 */ 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562,
  /*  1755 */ 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1770 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  1785 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763, 18204, 18204,
  /*  1800 */ 18204, 18204, 18204, 21324, 18204, 18204, 18204, 34566, 21358, 18204, 18204, 18204, 34697, 18204, 25700,
  /*  1815 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682,
  /*  1830 */ 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 20064,
  /*  1845 */ 19212, 18159, 18181, 20197, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782,
  /*  1860 */ 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314,
  /*  1875 */ 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078,
  /*  1890 */ 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646,
  /*  1905 */ 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819,
  /*  1920 */ 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012,
  /*  1935 */ 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198,
  /*  1950 */ 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515,
  /*  1965 */ 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854,
  /*  1980 */ 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419,
  /*  1995 */ 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531,
  /*  2010 */ 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2025 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2040 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 21392, 21408, 18204, 18204, 18204, 20720, 18204,
  /*  2055 */ 18204, 29108, 42138, 18013, 21427, 18204, 42137, 18021, 21453, 21490, 18204, 18204, 18204, 34697, 18204,
  /*  2070 */ 25700, 23955, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 21551, 35435,
  /*  2085 */ 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873,
  /*  2100 */ 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204,
  /*  2115 */ 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103,
  /*  2130 */ 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368,
  /*  2145 */ 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630,
  /*  2160 */ 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803,
  /*  2175 */ 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376,
  /*  2190 */ 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269,
  /*  2205 */ 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478,
  /*  2220 */ 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831,
  /*  2235 */ 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173,
  /*  2250 */ 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502,
  /*  2265 */ 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2280 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2295 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 21578, 21659, 21666, 21666, 21666, 21696,
  /*  2310 */ 21622, 21666, 21629, 21664, 21645, 21682, 21708, 21716, 21593, 21606, 20746, 18204, 18204, 18204, 39848,
  /*  2325 */ 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419,
  /*  2340 */ 35435, 25682, 39837, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132,
  /*  2355 */ 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204,
  /*  2370 */ 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342,
  /*  2385 */ 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278,
  /*  2400 */ 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599,
  /*  2415 */ 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720,
  /*  2430 */ 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990,
  /*  2445 */ 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252,
  /*  2460 */ 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583,
  /*  2475 */ 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442,
  /*  2490 */ 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123,
  /*  2505 */ 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187,
  /*  2520 */ 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2535 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2550 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 29182, 18204, 18204, 18204,
  /*  2565 */ 37531, 21732, 18204, 18204, 21733, 18204, 20700, 29564, 29572, 19926, 19937, 20746, 18204, 18204, 18204,
  /*  2580 */ 21749, 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506,
  /*  2595 */ 36419, 35435, 25682, 38756, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448,
  /*  2610 */ 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203,
  /*  2625 */ 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456,
  /*  2640 */ 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096,
  /*  2655 */ 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569,
  /*  2670 */ 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203,
  /*  2685 */ 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968,
  /*  2700 */ 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235,
  /*  2715 */ 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441,
  /*  2730 */ 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847,
  /*  2745 */ 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089,
  /*  2760 */ 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474,
  /*  2775 */ 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2790 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  2805 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 40805, 18204, 18204,
  /*  2820 */ 18204, 38763, 18204, 18204, 18204, 18204, 21771, 21792, 40806, 21826, 48596, 34566, 20746, 18204, 18204,
  /*  2835 */ 18204, 34697, 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429,
  /*  2850 */ 18506, 36419, 35435, 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116,
  /*  2865 */ 18448, 18132, 18873, 19416, 19212, 18159, 18181, 19766, 19422, 19218, 18165, 18187, 19541, 18204, 27034,
  /*  2880 */ 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294,
  /*  2895 */ 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338,
  /*  2910 */ 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522,
  /*  2925 */ 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296,
  /*  2940 */ 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043,
  /*  2955 */ 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169,
  /*  2970 */ 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401,
  /*  2985 */ 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824,
  /*  3000 */ 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100,
  /*  3015 */ 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458,
  /*  3030 */ 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3045 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3060 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204,
  /*  3075 */ 18204, 18204, 38763, 18204, 18204, 18204, 18204, 48095, 21861, 48092, 21895, 34320, 21930, 20746, 18204,
  /*  3090 */ 18204, 18204, 34697, 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462,
  /*  3105 */ 48429, 18506, 36419, 35435, 25682, 34686, 18204, 18204, 25357, 18204, 34227, 28025, 18037, 18053, 18075,
  /*  3120 */ 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204,
  /*  3135 */ 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880,
  /*  3150 */ 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397,
  /*  3165 */ 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497,
  /*  3180 */ 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773,
  /*  3195 */ 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018,
  /*  3210 */ 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129,
  /*  3225 */ 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143,
  /*  3240 */ 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435,
  /*  3255 */ 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049,
  /*  3270 */ 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421,
  /*  3285 */ 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3300 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3315 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 32139,
  /*  3330 */ 18204, 18204, 18204, 38763, 21999, 18204, 18204, 21966, 32143, 21988, 22021, 22027, 18204, 34566, 20746,
  /*  3345 */ 18204, 18204, 18204, 34697, 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474,
  /*  3360 */ 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053,
  /*  3375 */ 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541,
  /*  3390 */ 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088,
  /*  3405 */ 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204,
  /*  3420 */ 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464,
  /*  3435 */ 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757,
  /*  3450 */ 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382,
  /*  3465 */ 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227,
  /*  3480 */ 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059,
  /*  3495 */ 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782,
  /*  3510 */ 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033,
  /*  3525 */ 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405,
  /*  3540 */ 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3555 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3570 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 22043,
  /*  3585 */ 18204, 18204, 18204, 18204, 38763, 18204, 18204, 18204, 18204, 18204, 20700, 47705, 22066, 35065, 22101,
  /*  3600 */ 20746, 18204, 18204, 18204, 34697, 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979,
  /*  3615 */ 31166, 26641, 29082, 31215, 18204, 41904, 18204, 30265, 42620, 22117, 25357, 22497, 18204, 18204, 18204,
  /*  3630 */ 18204, 36477, 26175, 30024, 26175, 26175, 27563, 40139, 22155, 22155, 37619, 29082, 38720, 29082, 29082,
  /*  3645 */ 45316, 18204, 18204, 18204, 18204, 18204, 18204, 22137, 20684, 18204, 18204, 18204, 36481, 26175, 26175,
  /*  3660 */ 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 26834,
  /*  3675 */ 18204, 22172, 18204, 18204, 18204, 18204, 18204, 28967, 31330, 18204, 36478, 22210, 26175, 26175, 26175,
  /*  3690 */ 26175, 28587, 27983, 22155, 30673, 22155, 22155, 32803, 37351, 29082, 35628, 29082, 29082, 44072, 18204,
  /*  3705 */ 18204, 18204, 18204, 18204, 22240, 18204, 36476, 26175, 25842, 26175, 26175, 27080, 22154, 47387, 22155,
  /*  3720 */ 22155, 22155, 34158, 29082, 22259, 29082, 29082, 26835, 18204, 18204, 31432, 18204, 21174, 36476, 26175,
  /*  3735 */ 26175, 45177, 30551, 22155, 22155, 40517, 28645, 29082, 29082, 34182, 22262, 21508, 18204, 18204, 22278,
  /*  3750 */ 18204, 42004, 26175, 26176, 45029, 22155, 22156, 43015, 29082, 29083, 22299, 18204, 26095, 22317, 35909,
  /*  3765 */ 22335, 39173, 46192, 22155, 36907, 22353, 34201, 18204, 42065, 36480, 32274, 31168, 22372, 27271, 22397,
  /*  3780 */ 44170, 22420, 22467, 39668, 22483, 44754, 43348, 46835, 34201, 36479, 35937, 31148, 22555, 31412, 22519,
  /*  3795 */ 22552, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204,
  /*  3810 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3825 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3840 */ 20681, 18204, 18204, 18204, 18204, 38763, 18204, 18204, 18204, 35175, 18204, 20700, 22834, 22833, 43788,
  /*  3855 */ 22571, 20746, 18204, 18204, 18204, 34697, 18204, 26999, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  3870 */ 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025,
  /*  3885 */ 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165,
  /*  3900 */ 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881,
  /*  3915 */ 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754,
  /*  3930 */ 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435,
  /*  3945 */ 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697,
  /*  3960 */ 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974,
  /*  3975 */ 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086,
  /*  3990 */ 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366,
  /*  4005 */ 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449,
  /*  4020 */ 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997,
  /*  4035 */ 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372,
  /*  4050 */ 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204,
  /*  4065 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4080 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4095 */ 18204, 20681, 22607, 18204, 18204, 18204, 46696, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 18204,
  /*  4110 */ 18204, 34566, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 22319, 18204, 18204, 18204, 18204, 18204,
  /*  4125 */ 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204, 18204, 20849, 18204, 34227,
  /*  4140 */ 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218,
  /*  4155 */ 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265,
  /*  4170 */ 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318,
  /*  4185 */ 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925,
  /*  4200 */ 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646,
  /*  4215 */ 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049,
  /*  4230 */ 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069,
  /*  4245 */ 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241,
  /*  4260 */ 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689,
  /*  4275 */ 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013,
  /*  4290 */ 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293,
  /*  4305 */ 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204,
  /*  4320 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4335 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4350 */ 18204, 18204, 20681, 22627, 18204, 18204, 18204, 38763, 18204, 18204, 18204, 35551, 18204, 20700, 18204,
  /*  4365 */ 18204, 39383, 22644, 22680, 18204, 18204, 18204, 34697, 18204, 38095, 18204, 18204, 18204, 18204, 18204,
  /*  4380 */ 18204, 18204, 26979, 31166, 26641, 29082, 31215, 18204, 18204, 18204, 30265, 18204, 18204, 42274, 18204,
  /*  4395 */ 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 27563, 22155, 22155, 22155, 37619, 29082,
  /*  4410 */ 29082, 29082, 29082, 39808, 22714, 18204, 18204, 18204, 18204, 18204, 22736, 18204, 18204, 18204, 18204,
  /*  4425 */ 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082,
  /*  4440 */ 29082, 29082, 45676, 22760, 18204, 18204, 18204, 18204, 18204, 30498, 18204, 18204, 18204, 36478, 26175,
  /*  4455 */ 26175, 26175, 26175, 26175, 44356, 22155, 22155, 22155, 22155, 22155, 45001, 29082, 29082, 29082, 29082,
  /*  4470 */ 29082, 33151, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 30306,
  /*  4485 */ 22154, 22155, 22155, 22155, 22155, 22801, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204,
  /*  4500 */ 18204, 36476, 26175, 26175, 26175, 33559, 22155, 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204,
  /*  4515 */ 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204,
  /*  4530 */ 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168,
  /*  4545 */ 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148,
  /*  4560 */ 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204,
  /*  4575 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4590 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4605 */ 18204, 18204, 18204, 20681, 46759, 18204, 18204, 18204, 21131, 40796, 18204, 18204, 47295, 46764, 20700,
  /*  4620 */ 48494, 48502, 18204, 21810, 22824, 18204, 18204, 18204, 38587, 18204, 25700, 18204, 18204, 18204, 18204,
  /*  4635 */ 18204, 18204, 18204, 18417, 20382, 23758, 22928, 23116, 36419, 35435, 25682, 38575, 18204, 18204, 20849,
  /*  4650 */ 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19968, 23048, 22850, 23650, 19499,
  /*  4665 */ 22890, 22910, 23680, 23106, 23858, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241, 18204, 34270,
  /*  4680 */ 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19493, 19977, 23751, 23200, 23207, 20389, 22926, 23846,
  /*  4695 */ 22944, 22960, 22965, 22874, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204, 18391, 18407,
  /*  4710 */ 18911, 18925, 18435, 18614, 18464, 22981, 23146, 23314, 23006, 23022, 23038, 22865, 23834, 23590, 23064,
  /*  4725 */ 23080, 23096, 24597, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897, 20515,
  /*  4740 */ 18941, 23132, 19808, 25123, 23186, 23223, 23285, 23239, 23576, 23250, 23820, 23276, 26534, 19065, 38351,
  /*  4755 */ 47196, 37069, 19086, 48652, 20227, 19129, 23301, 23457, 23500, 23330, 23346, 23604, 23694, 23376, 23392,
  /*  4770 */ 44557, 28241, 19366, 37904, 18059, 18143, 19401, 23442, 22990, 23472, 23531, 23260, 23561, 23516, 19602,
  /*  4785 */ 19638, 19689, 42449, 19728, 19782, 25108, 23620, 23636, 23666, 23546, 23170, 19870, 19886, 19953, 19113,
  /*  4800 */ 23741, 23487, 23774, 23790, 20033, 20049, 18278, 23806, 23884, 20173, 18298, 25131, 22894, 20213, 19795,
  /*  4815 */ 23158, 23706, 20372, 24583, 23360, 20421, 23920, 23936, 20620, 23971, 24019, 24056, 24092, 20634, 18204,
  /*  4830 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4845 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  4860 */ 18204, 18204, 18204, 18204, 20681, 45698, 18204, 18204, 18204, 38763, 24162, 18204, 18204, 24130, 24130,
  /*  4875 */ 24152, 38540, 38546, 18204, 34566, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 18204, 18204, 18204,
  /*  4890 */ 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204, 18204,
  /*  4905 */ 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159, 18181,
  /*  4920 */ 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 24178, 18241, 18204,
  /*  4935 */ 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322, 19460,
  /*  4950 */ 24346, 20107, 18318, 19754, 20255, 24213, 24225, 18338, 37096, 28278, 18368, 46397, 18204, 18204, 18391,
  /*  4965 */ 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522, 18569,
  /*  4980 */ 18599, 18630, 18646, 24247, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859, 18897,
  /*  4995 */ 20515, 24313, 19049, 18974, 18996, 24382, 19018, 19530, 18968, 18990, 24376, 19012, 19034, 26534, 19065,
  /*  5010 */ 38351, 47196, 37069, 19086, 48652, 20227, 19129, 24329, 19235, 19252, 19269, 24362, 19234, 19251, 19268,
  /*  5025 */ 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478, 19515,
  /*  5040 */ 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886, 19953,
  /*  5055 */ 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425, 20213,
  /*  5070 */ 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606, 20656,
  /*  5085 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5100 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5115 */ 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763, 18204, 18204, 18204, 18204,
  /*  5130 */ 18204, 44709, 32758, 32765, 26361, 24398, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 18204, 18204,
  /*  5145 */ 18204, 40458, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686, 18204,
  /*  5160 */ 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212, 18159,
  /*  5175 */ 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241,
  /*  5190 */ 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322,
  /*  5205 */ 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204,
  /*  5220 */ 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522,
  /*  5235 */ 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859,
  /*  5250 */ 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534,
  /*  5265 */ 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251,
  /*  5280 */ 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478,
  /*  5295 */ 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886,
  /*  5310 */ 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425,
  /*  5325 */ 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606,
  /*  5340 */ 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5355 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5370 */ 18204, 18204, 18204, 18204, 18204, 18204, 24434, 25061, 18204, 18204, 18204, 38763, 18204, 18204, 18204,
  /*  5385 */ 18204, 18204, 20700, 33244, 33251, 18204, 34566, 24469, 18204, 18204, 18204, 34697, 18204, 25700, 18204,
  /*  5400 */ 18204, 18204, 22698, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682, 34686,
  /*  5415 */ 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212,
  /*  5430 */ 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222,
  /*  5445 */ 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430,
  /*  5460 */ 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204,
  /*  5475 */ 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672,
  /*  5490 */ 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984,
  /*  5505 */ 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034,
  /*  5520 */ 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234,
  /*  5535 */ 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583,
  /*  5550 */ 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870,
  /*  5565 */ 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429,
  /*  5580 */ 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562,
  /*  5595 */ 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5610 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5625 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24505, 24514, 18204, 18204, 18204, 45088, 18204, 18204,
  /*  5640 */ 18204, 18204, 18204, 20700, 33602, 33609, 18204, 48384, 24534, 18204, 18204, 18204, 34697, 18204, 25700,
  /*  5655 */ 18204, 18204, 18204, 35651, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 24003, 36419, 35435, 25682,
  /*  5670 */ 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416,
  /*  5685 */ 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782,
  /*  5700 */ 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314,
  /*  5715 */ 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078,
  /*  5730 */ 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646,
  /*  5745 */ 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819,
  /*  5760 */ 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012,
  /*  5775 */ 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198,
  /*  5790 */ 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515,
  /*  5805 */ 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854,
  /*  5820 */ 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 24568, 18419,
  /*  5835 */ 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531,
  /*  5850 */ 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5865 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  5880 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24621, 18204, 18204, 18204, 18204, 38763, 24657,
  /*  5895 */ 18204, 18204, 18204, 24657, 24678, 18204, 30630, 18204, 24712, 20746, 18204, 18204, 18204, 34697, 18204,
  /*  5910 */ 25700, 25332, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18656, 36419, 35435,
  /*  5925 */ 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873,
  /*  5940 */ 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204,
  /*  5955 */ 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103,
  /*  5970 */ 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368,
  /*  5985 */ 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630,
  /*  6000 */ 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803,
  /*  6015 */ 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376,
  /*  6030 */ 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269,
  /*  6045 */ 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478,
  /*  6060 */ 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831,
  /*  6075 */ 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173,
  /*  6090 */ 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502,
  /*  6105 */ 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6120 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6135 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763,
  /*  6150 */ 18204, 18204, 18204, 18204, 18204, 20700, 18204, 18204, 18204, 34566, 20746, 18204, 18204, 18204, 34697,
  /*  6165 */ 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419,
  /*  6180 */ 35435, 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132,
  /*  6195 */ 18873, 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204,
  /*  6210 */ 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342,
  /*  6225 */ 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278,
  /*  6240 */ 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599,
  /*  6255 */ 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720,
  /*  6270 */ 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990,
  /*  6285 */ 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252,
  /*  6300 */ 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583,
  /*  6315 */ 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442,
  /*  6330 */ 19831, 19854, 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123,
  /*  6345 */ 20173, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187,
  /*  6360 */ 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6375 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6390 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204,
  /*  6405 */ 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204,
  /*  6420 */ 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045,
  /*  6435 */ 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175,
  /*  6450 */ 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204,
  /*  6465 */ 18204, 18204, 18204, 30502, 18204, 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153,
  /*  6480 */ 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 43617, 24788, 18204, 18204, 18204,
  /*  6495 */ 18204, 18204, 30498, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155,
  /*  6510 */ 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 33151, 18204, 18204, 18204, 18204, 44080,
  /*  6525 */ 18204, 18204, 36476, 26175, 26175, 26175, 26175, 36824, 22154, 22155, 22155, 22155, 22155, 32084, 29082,
  /*  6540 */ 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 33559, 22155,
  /*  6555 */ 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 47265, 18204, 18204, 26175, 26175, 26176,
  /*  6570 */ 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155,
  /*  6585 */ 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146,
  /*  6600 */ 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203,
  /*  6615 */ 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6630 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6645 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204,
  /*  6660 */ 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571, 27608, 20267, 18204, 18204,
  /*  6675 */ 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082,
  /*  6690 */ 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175,
  /*  6705 */ 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204,
  /*  6720 */ 18204, 18204, 18204, 18204, 30502, 18204, 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175,
  /*  6735 */ 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 43617, 24788, 18204, 18204,
  /*  6750 */ 18204, 18204, 18204, 30498, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155,
  /*  6765 */ 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 33151, 18204, 18204, 18204, 18204,
  /*  6780 */ 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 36824, 22154, 22155, 22155, 22155, 22155, 32084,
  /*  6795 */ 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 33559,
  /*  6810 */ 22155, 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175,
  /*  6825 */ 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155,
  /*  6840 */ 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938,
  /*  6855 */ 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143,
  /*  6870 */ 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6885 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  6900 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204,
  /*  6915 */ 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571, 27608, 20267, 18204,
  /*  6930 */ 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979, 31166, 26641,
  /*  6945 */ 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477,
  /*  6960 */ 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204,
  /*  6975 */ 18204, 18204, 18204, 18204, 18204, 30502, 24824, 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175,
  /*  6990 */ 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 43617, 24788, 18204,
  /*  7005 */ 18204, 18204, 18204, 18204, 30498, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434,
  /*  7020 */ 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 33151, 18204, 18204, 18204,
  /*  7035 */ 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 36824, 22154, 22155, 22155, 22155, 22155,
  /*  7050 */ 32084, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175,
  /*  7065 */ 33559, 22155, 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175,
  /*  7080 */ 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937,
  /*  7095 */ 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508,
  /*  7110 */ 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509,
  /*  7125 */ 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7140 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7155 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204,
  /*  7170 */ 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571, 27608, 20267,
  /*  7185 */ 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979, 31166,
  /*  7200 */ 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7215 */ 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857,
  /*  7230 */ 18204, 18204, 18204, 18204, 18204, 18204, 30502, 18204, 18204, 18204, 18204, 36481, 26175, 26175, 26175,
  /*  7245 */ 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 43617, 24788,
  /*  7260 */ 18204, 18204, 18204, 18204, 18204, 30498, 24841, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175,
  /*  7275 */ 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 33151, 18204, 18204,
  /*  7290 */ 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 36824, 22154, 22155, 22155, 22155,
  /*  7305 */ 22155, 32084, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175,
  /*  7320 */ 26175, 33559, 22155, 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204,
  /*  7335 */ 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175,
  /*  7350 */ 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170,
  /*  7365 */ 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202,
  /*  7380 */ 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7395 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7410 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748,
  /*  7425 */ 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571, 27608,
  /*  7440 */ 20267, 18204, 18204, 18204, 34697, 18204, 28295, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979,
  /*  7455 */ 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 29368, 18204, 18204, 18204, 18204,
  /*  7470 */ 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082,
  /*  7485 */ 27857, 18204, 18204, 18204, 18204, 18204, 18204, 30502, 18204, 18204, 18204, 18204, 36481, 26175, 26175,
  /*  7500 */ 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 43617,
  /*  7515 */ 24788, 18204, 18204, 18204, 18204, 18204, 30498, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175,
  /*  7530 */ 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 33151, 18204,
  /*  7545 */ 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 36824, 22154, 22155, 22155,
  /*  7560 */ 22155, 22155, 32084, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175,
  /*  7575 */ 26175, 26175, 33559, 22155, 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204,
  /*  7590 */ 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979,
  /*  7605 */ 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200,
  /*  7620 */ 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567,
  /*  7635 */ 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204,
  /*  7650 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7665 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7680 */ 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571,
  /*  7695 */ 27608, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7710 */ 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7725 */ 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082,
  /*  7740 */ 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36481, 26175,
  /*  7755 */ 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082,
  /*  7770 */ 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36478, 26175, 26175, 26175,
  /*  7785 */ 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 31756,
  /*  7800 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 27080, 22154, 22155,
  /*  7815 */ 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476,
  /*  7830 */ 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204, 18204, 18204,
  /*  7845 */ 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204,
  /*  7860 */ 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081,
  /*  7875 */ 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977,
  /*  7890 */ 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204,
  /*  7905 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7920 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7935 */ 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854,
  /*  7950 */ 43571, 27608, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  7965 */ 18204, 26979, 31166, 26641, 29082, 22404, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204,
  /*  7980 */ 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082,
  /*  7995 */ 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36481,
  /*  8010 */ 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082,
  /*  8025 */ 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36478, 26175, 26175,
  /*  8040 */ 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082,
  /*  8055 */ 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 27080, 22154,
  /*  8070 */ 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204, 18204,
  /*  8085 */ 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204, 18204,
  /*  8100 */ 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204,
  /*  8115 */ 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155,
  /*  8130 */ 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555,
  /*  8145 */ 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204,
  /*  8160 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8175 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8190 */ 18204, 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204,
  /*  8205 */ 39854, 43571, 29712, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8220 */ 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204,
  /*  8235 */ 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082,
  /*  8250 */ 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8265 */ 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082,
  /*  8280 */ 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36478, 26175,
  /*  8295 */ 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082,
  /*  8310 */ 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 27080,
  /*  8325 */ 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204,
  /*  8340 */ 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204,
  /*  8355 */ 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204,
  /*  8370 */ 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168,
  /*  8385 */ 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148,
  /*  8400 */ 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204,
  /*  8415 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8430 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8445 */ 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 24858,
  /*  8460 */ 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8475 */ 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204,
  /*  8490 */ 48174, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548,
  /*  8505 */ 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8520 */ 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082,
  /*  8535 */ 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36478,
  /*  8550 */ 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082,
  /*  8565 */ 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175,
  /*  8580 */ 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204,
  /*  8595 */ 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262,
  /*  8610 */ 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204,
  /*  8625 */ 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175,
  /*  8640 */ 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937,
  /*  8655 */ 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204,
  /*  8670 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8685 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8700 */ 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204,
  /*  8715 */ 20700, 18204, 21755, 24874, 24883, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204,
  /*  8730 */ 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204,
  /*  8745 */ 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155,
  /*  8760 */ 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8775 */ 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082,
  /*  8790 */ 29082, 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8805 */ 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082,
  /*  8820 */ 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175,
  /*  8835 */ 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204,
  /*  8850 */ 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082,
  /*  8865 */ 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083,
  /*  8880 */ 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480,
  /*  8895 */ 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479,
  /*  8910 */ 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853,
  /*  8925 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8940 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  8955 */ 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204,
  /*  8970 */ 18204, 20700, 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204,
  /*  8985 */ 18204, 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204,
  /*  9000 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155,
  /*  9015 */ 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9030 */ 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845,
  /*  9045 */ 29082, 29082, 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9060 */ 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082,
  /*  9075 */ 29082, 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175,
  /*  9090 */ 26175, 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204,
  /*  9105 */ 18204, 18204, 43179, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082,
  /*  9120 */ 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082,
  /*  9135 */ 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620,
  /*  9150 */ 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201,
  /*  9165 */ 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841,
  /*  9180 */ 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9195 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9210 */ 18204, 18204, 18204, 18204, 18204, 18204, 24899, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204,
  /*  9225 */ 18204, 18204, 20700, 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204,
  /*  9240 */ 18204, 18204, 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265,
  /*  9255 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155,
  /*  9270 */ 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9285 */ 18204, 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155,
  /*  9300 */ 36845, 29082, 29082, 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9315 */ 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703,
  /*  9330 */ 29082, 29082, 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175,
  /*  9345 */ 26175, 26175, 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835,
  /*  9360 */ 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082,
  /*  9375 */ 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082,
  /*  9390 */ 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204,
  /*  9405 */ 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568,
  /*  9420 */ 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306,
  /*  9435 */ 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9450 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9465 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 20840, 18204, 18204,
  /*  9480 */ 18204, 18204, 18204, 20700, 23868, 23867, 34703, 24920, 20746, 18204, 18204, 18204, 34697, 18204, 25700,
  /*  9495 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682,
  /*  9510 */ 34686, 18204, 18204, 20849, 22585, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416,
  /*  9525 */ 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782,
  /*  9540 */ 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314,
  /*  9555 */ 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078,
  /*  9570 */ 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646,
  /*  9585 */ 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819,
  /*  9600 */ 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012,
  /*  9615 */ 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198,
  /*  9630 */ 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515,
  /*  9645 */ 18583, 19478, 19515, 19602, 19638, 24969, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854,
  /*  9660 */ 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419,
  /*  9675 */ 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531,
  /*  9690 */ 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9705 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9720 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763, 18204,
  /*  9735 */ 18204, 18204, 18204, 18204, 20700, 32414, 32422, 18204, 25005, 20746, 18204, 18204, 18204, 34697, 18204,
  /*  9750 */ 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419, 35435,
  /*  9765 */ 25682, 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873,
  /*  9780 */ 19416, 19212, 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204,
  /*  9795 */ 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103,
  /*  9810 */ 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368,
  /*  9825 */ 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630,
  /*  9840 */ 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803,
  /*  9855 */ 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376,
  /*  9870 */ 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269,
  /*  9885 */ 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478,
  /*  9900 */ 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831,
  /*  9915 */ 19854, 19870, 25041, 19953, 19113, 19993, 20013, 19997, 20017, 25077, 20049, 18100, 20089, 20123, 25093,
  /*  9930 */ 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502,
  /*  9945 */ 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9960 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /*  9975 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 34366, 18204, 18204, 18204, 26273,
  /*  9990 */ 25147, 18204, 18204, 25183, 40066, 20700, 25210, 25225, 25238, 25254, 25291, 25330, 31337, 36658, 25348,
  /* 10005 */ 25373, 24136, 38597, 26560, 28149, 25389, 25447, 25442, 20577, 25463, 25479, 25524, 25555, 25596, 25612,
  /* 10020 */ 18204, 18204, 30265, 30811, 18204, 25633, 24040, 48457, 46367, 18204, 19550, 36477, 26175, 26175, 26175,
  /* 10035 */ 25653, 24769, 22155, 22155, 41965, 41548, 29082, 29082, 29082, 40168, 25673, 18204, 46409, 22283, 18204,
  /* 10050 */ 25162, 25698, 26122, 18204, 27380, 18204, 25716, 25752, 25773, 26175, 26175, 25809, 25833, 25885, 44457,
  /* 10065 */ 22155, 22155, 25927, 26001, 26038, 26063, 29082, 32385, 38727, 26082, 24788, 20311, 18204, 25275, 30435,
  /* 10080 */ 18204, 26118, 18204, 18204, 26138, 22664, 33331, 26174, 46612, 25851, 43201, 28434, 26193, 22155, 37613,
  /* 10095 */ 34069, 31729, 31703, 26237, 29082, 30143, 34140, 33483, 33151, 26289, 31124, 26324, 18204, 26341, 21056,
  /* 10110 */ 26377, 36476, 27788, 26397, 26175, 34832, 26415, 28442, 45597, 22155, 47733, 30927, 37330, 41986, 29082,
  /* 10125 */ 29082, 26475, 26494, 26550, 21166, 42353, 18204, 26576, 34493, 28726, 32847, 26599, 33559, 27247, 26617,
  /* 10140 */ 26639, 47941, 41290, 30754, 26657, 22262, 18204, 26676, 18204, 18204, 26693, 26175, 26712, 26730, 22155,
  /* 10155 */ 26754, 26771, 29082, 26810, 26827, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079,
  /* 10170 */ 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 26066,
  /* 10185 */ 26851, 26888, 26904, 26941, 26959, 34044, 37467, 32212, 26977, 32567, 34202, 26975, 31143, 34203, 36895,
  /* 10200 */ 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10215 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10230 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 22628, 26997, 18204, 18204,
  /* 10245 */ 26273, 18204, 18204, 18204, 18204, 18204, 27015, 43955, 43963, 27050, 27059, 20267, 18204, 18204, 18204,
  /* 10260 */ 34697, 18204, 18204, 18204, 18204, 18553, 18204, 18204, 18204, 18204, 26979, 31166, 45258, 26478, 44045,
  /* 10275 */ 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175,
  /* 10290 */ 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204,
  /* 10305 */ 18204, 18204, 43448, 30502, 24983, 18204, 24983, 18204, 36481, 26175, 26175, 26175, 26399, 27075, 22153,
  /* 10320 */ 22155, 22155, 22155, 35272, 27096, 29082, 29082, 29082, 29082, 45303, 43617, 24788, 18204, 18204, 18204,
  /* 10335 */ 18204, 18204, 30498, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155,
  /* 10350 */ 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 33151, 18204, 18204, 32359, 18204, 18204,
  /* 10365 */ 24808, 31455, 36476, 27133, 26175, 26175, 26175, 37140, 27157, 22155, 22155, 22155, 47901, 26208, 27194,
  /* 10380 */ 29082, 29082, 29082, 27212, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 33559, 22155,
  /* 10395 */ 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176,
  /* 10410 */ 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155,
  /* 10425 */ 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146,
  /* 10440 */ 34200, 44173, 26177, 32568, 34201, 22085, 27237, 27263, 27287, 26977, 32567, 34202, 32509, 31143, 34203,
  /* 10455 */ 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10470 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10485 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 27330, 18204,
  /* 10500 */ 18204, 26273, 24825, 18204, 18204, 40917, 18204, 27365, 27401, 27415, 27428, 27437, 20267, 18204, 18204,
  /* 10515 */ 46665, 27453, 18204, 24297, 18204, 18204, 48464, 18204, 18204, 47490, 18204, 27476, 27494, 22381, 29082,
  /* 10530 */ 27512, 18204, 21266, 18204, 30265, 24034, 36803, 18204, 43060, 39033, 38245, 23898, 37695, 32310, 27548,
  /* 10545 */ 27582, 26175, 26175, 27600, 27624, 22155, 22155, 41086, 27685, 27701, 29082, 29082, 27857, 19070, 18204,
  /* 10560 */ 18204, 33812, 18204, 43184, 30502, 20790, 27720, 27755, 18204, 36481, 27773, 33358, 26175, 27810, 26175,
  /* 10575 */ 27830, 42522, 41622, 36768, 22155, 36845, 33466, 27882, 26919, 40888, 29082, 43617, 24788, 18204, 18204,
  /* 10590 */ 43131, 18204, 26381, 26440, 18204, 20347, 18204, 36478, 26175, 26175, 26175, 27584, 27903, 28434, 22155,
  /* 10605 */ 22155, 22155, 27925, 27977, 31703, 29082, 29082, 29082, 27999, 28049, 31368, 32304, 18204, 18204, 46966,
  /* 10620 */ 18204, 22744, 18204, 36476, 26175, 26175, 26175, 28071, 36824, 22154, 22155, 22155, 42513, 22155, 32084,
  /* 10635 */ 29082, 29082, 40340, 29082, 26835, 18204, 18204, 37689, 18204, 18204, 28090, 26175, 43274, 26175, 33559,
  /* 10650 */ 22155, 34620, 22155, 47941, 29082, 47859, 29082, 22262, 43906, 18204, 18204, 18204, 28139, 46816, 45812,
  /* 10665 */ 26176, 42818, 31080, 22156, 37643, 30149, 29083, 18204, 18204, 19622, 18204, 26979, 26175, 45485, 22155,
  /* 10680 */ 41251, 29079, 29082, 31019, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938,
  /* 10695 */ 31146, 34200, 44173, 26177, 32568, 30404, 21972, 28173, 28203, 28232, 26977, 32567, 34202, 32509, 31143,
  /* 10710 */ 34203, 36895, 43637, 45493, 28257, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10725 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10740 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 36458,
  /* 10755 */ 18204, 18204, 26273, 27757, 28294, 29294, 28311, 18204, 28329, 28345, 28359, 28372, 28381, 20267, 18204,
  /* 10770 */ 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 28406, 18204, 28397, 28423, 31166, 28458,
  /* 10785 */ 42602, 44045, 18204, 26583, 23407, 30265, 18204, 21467, 18204, 28495, 18204, 23904, 28530, 28515, 28560,
  /* 10800 */ 26981, 28074, 28576, 37213, 28603, 38642, 28625, 28641, 28661, 26811, 27196, 38942, 33169, 27857, 18204,
  /* 10815 */ 18204, 18204, 42646, 18204, 24446, 30502, 18204, 18204, 18204, 21411, 36481, 26175, 26175, 26175, 34803,
  /* 10830 */ 26175, 22153, 22155, 22155, 22155, 30698, 36845, 29082, 29082, 29082, 29082, 28677, 43617, 24788, 29399,
  /* 10845 */ 18204, 18204, 24946, 20320, 30498, 18204, 18204, 18204, 28698, 28717, 25985, 26175, 26175, 27909, 28434,
  /* 10860 */ 28742, 35243, 22155, 22155, 38648, 31703, 28765, 26015, 29082, 29082, 41311, 33151, 18204, 18204, 18204,
  /* 10875 */ 18204, 18204, 35324, 33806, 36476, 28788, 26175, 46781, 26175, 36824, 28806, 22155, 22155, 45770, 22155,
  /* 10890 */ 27845, 29082, 29082, 45643, 29082, 34149, 28831, 18204, 28828, 18204, 19673, 36476, 26175, 28847, 28864,
  /* 10905 */ 33559, 34095, 22155, 28910, 47941, 29082, 28946, 36326, 22262, 18204, 28963, 18204, 18204, 18204, 26175,
  /* 10920 */ 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 46565, 18204, 18204, 26979, 26175, 42704,
  /* 10935 */ 22155, 34383, 29079, 29082, 37954, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 45922, 44170, 32508,
  /* 10950 */ 35938, 31146, 34200, 25402, 28983, 29006, 29032, 24480, 29052, 29073, 29099, 26977, 32567, 34202, 32509,
  /* 10965 */ 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10980 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 10995 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204,
  /* 11010 */ 28313, 29132, 18204, 26273, 47536, 29150, 18204, 29171, 18204, 29206, 29232, 29247, 29260, 29269, 20267,
  /* 11025 */ 22050, 44162, 29285, 32449, 29327, 29361, 18204, 19901, 29616, 29434, 29384, 29420, 20897, 29450, 29480,
  /* 11040 */ 29496, 29535, 29551, 45380, 42656, 18204, 29588, 40923, 24071, 36507, 48115, 18204, 18204, 18204, 29615,
  /* 11055 */ 36477, 29940, 29632, 27814, 35576, 29648, 29704, 37003, 34614, 29728, 35762, 29765, 29783, 39713, 29799,
  /* 11070 */ 20157, 19568, 29829, 22611, 29878, 24934, 26509, 18204, 29894, 21950, 25268, 29910, 29926, 29976, 30010,
  /* 11085 */ 30046, 35681, 30082, 41233, 30112, 43500, 44960, 30128, 30165, 30191, 32958, 30207, 30233, 41648, 24788,
  /* 11100 */ 18249, 30263, 25637, 30281, 19915, 30498, 38527, 34473, 38051, 29190, 30574, 30300, 26175, 44283, 28790,
  /* 11115 */ 30322, 30707, 30346, 22155, 38628, 37713, 30366, 31613, 30400, 29082, 30958, 37485, 30420, 18204, 30456,
  /* 11130 */ 29155, 30492, 31981, 26696, 29855, 30518, 30546, 30567, 27141, 30590, 30617, 30330, 35123, 40322, 30665,
  /* 11145 */ 30689, 25942, 40261, 30723, 30740, 30247, 26835, 18204, 31058, 26158, 18204, 18204, 30777, 44894, 34023,
  /* 11160 */ 35098, 33559, 48135, 43293, 35716, 47941, 42042, 41145, 48295, 22262, 18204, 39743, 30801, 43456, 30827,
  /* 11175 */ 36132, 30843, 43557, 30870, 30907, 30943, 38679, 31006, 40853, 39436, 21517, 36187, 31054, 41007, 30066,
  /* 11190 */ 37427, 31074, 31096, 29016, 44623, 27887, 18204, 31117, 36480, 26175, 31140, 41566, 29081, 26022, 26428,
  /* 11205 */ 32508, 31164, 31184, 31208, 40738, 46949, 36750, 28479, 37153, 31231, 31250, 25508, 31266, 31302, 31318,
  /* 11220 */ 32509, 31143, 34203, 31353, 31404, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11235 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11250 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748,
  /* 11265 */ 18204, 18204, 31428, 18204, 41191, 18204, 31448, 31999, 36531, 43926, 31471, 31521, 31535, 31548, 31557,
  /* 11280 */ 20267, 18204, 43422, 18204, 34697, 18204, 18204, 18204, 18204, 39051, 18204, 21914, 39053, 39051, 25415,
  /* 11295 */ 28990, 31573, 31604, 30217, 18204, 32730, 18204, 30265, 32731, 18204, 18204, 18204, 31629, 44253, 18204,
  /* 11310 */ 31647, 36477, 31666, 26175, 26175, 26175, 31692, 31728, 22155, 22155, 41548, 31745, 29082, 29082, 29082,
  /* 11325 */ 27857, 18204, 18204, 18204, 18204, 18204, 18204, 30502, 18204, 18204, 18204, 31780, 36481, 26175, 26175,
  /* 11340 */ 26175, 47445, 26175, 22153, 22155, 22155, 22155, 39089, 36845, 29082, 29082, 29082, 29082, 31799, 43617,
  /* 11355 */ 24788, 18204, 18204, 18204, 18204, 18204, 30498, 18204, 44726, 18204, 36478, 26175, 26175, 41456, 26175,
  /* 11370 */ 26175, 28434, 22155, 22155, 47150, 22155, 22155, 31703, 29082, 29082, 43313, 29082, 29082, 33151, 18204,
  /* 11385 */ 18204, 18204, 18204, 18204, 18204, 21139, 36476, 26175, 26175, 26175, 36250, 36824, 22154, 22155, 22155,
  /* 11400 */ 45776, 22155, 32084, 29082, 29082, 29082, 31819, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175,
  /* 11415 */ 26175, 26175, 33559, 22155, 22155, 22155, 47941, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204,
  /* 11430 */ 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 22077, 18204, 18204, 18204, 33101,
  /* 11445 */ 26175, 35937, 30920, 22155, 39676, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200,
  /* 11460 */ 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567,
  /* 11475 */ 34202, 32509, 31143, 34203, 31837, 43637, 45493, 31853, 37841, 37853, 18204, 18204, 18204, 18204, 18204,
  /* 11490 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11505 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11520 */ 24748, 18204, 18204, 18204, 18204, 26273, 18204, 21334, 18204, 18204, 18204, 31911, 31927, 31935, 31951,
  /* 11535 */ 31960, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 24544, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11550 */ 26979, 31166, 26641, 29082, 30175, 31976, 18204, 18204, 30265, 18204, 18204, 18204, 38844, 18204, 18204,
  /* 11565 */ 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082,
  /* 11580 */ 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 31997, 18204, 24418, 36481, 26175,
  /* 11595 */ 26175, 26175, 26175, 26175, 32015, 22155, 22155, 22155, 22155, 40119, 29082, 29082, 29082, 29082, 29082,
  /* 11610 */ 26834, 18204, 18204, 18204, 27385, 18204, 29311, 22243, 18204, 18204, 18204, 20755, 26175, 26175, 38897,
  /* 11625 */ 26175, 26175, 28434, 22155, 22155, 35709, 22155, 22155, 31703, 29082, 29082, 27110, 29082, 29082, 31756,
  /* 11640 */ 18204, 18204, 38322, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 27080, 22154, 22155,
  /* 11655 */ 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 21367, 47004, 18204, 36476,
  /* 11670 */ 26175, 26175, 47839, 30551, 22155, 22155, 22155, 32033, 29082, 29082, 29082, 32070, 33302, 32107, 39016,
  /* 11685 */ 32131, 18204, 32159, 39885, 31895, 22155, 32176, 37759, 29082, 32192, 33890, 18741, 18204, 21526, 26151,
  /* 11700 */ 35410, 44395, 46349, 45622, 33657, 22530, 36390, 32208, 18204, 39620, 32228, 32248, 27496, 44488, 39796,
  /* 11715 */ 44038, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977,
  /* 11730 */ 32567, 34202, 32509, 31143, 34203, 36895, 42568, 32290, 39306, 37841, 37853, 18204, 18204, 18204, 18204,
  /* 11745 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11760 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 11775 */ 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854,
  /* 11790 */ 43571, 27608, 20267, 32326, 18204, 40957, 34697, 18204, 18204, 18204, 25194, 18204, 25194, 18204, 32345,
  /* 11805 */ 25193, 36578, 28104, 35880, 32381, 32401, 18204, 18204, 18204, 32438, 47248, 18204, 32465, 18204, 18204,
  /* 11820 */ 24803, 18204, 18204, 36477, 26175, 26175, 28848, 26175, 24769, 22155, 22155, 27660, 41548, 29082, 29082,
  /* 11835 */ 29082, 32484, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 27342, 44701, 36481,
  /* 11850 */ 26175, 26175, 26175, 26175, 26601, 22153, 22155, 22155, 22155, 22155, 37285, 29082, 29082, 29082, 29082,
  /* 11865 */ 29082, 48081, 18204, 27732, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 32503, 44818, 26175,
  /* 11880 */ 26175, 26175, 26175, 28434, 32885, 22155, 22155, 22155, 22155, 31703, 28473, 29082, 29082, 29082, 29082,
  /* 11895 */ 31756, 18204, 18204, 46930, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 43475, 27080, 22154,
  /* 11910 */ 22155, 22155, 22155, 32525, 34158, 29082, 29082, 29082, 43237, 26835, 18204, 18204, 33979, 18204, 18204,
  /* 11925 */ 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204, 18204,
  /* 11940 */ 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 40479, 18204,
  /* 11955 */ 18204, 32545, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 24189, 26175, 32563, 35733,
  /* 11970 */ 29081, 28055, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555,
  /* 11985 */ 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204,
  /* 12000 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12015 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12030 */ 18204, 18204, 24748, 18204, 18204, 48558, 18204, 26273, 38071, 29345, 39454, 38074, 38077, 32584, 43817,
  /* 12045 */ 32600, 32613, 32622, 20267, 18204, 18204, 18204, 32638, 18204, 18204, 18204, 19385, 18204, 47229, 46416,
  /* 12060 */ 32654, 47694, 31877, 29464, 37263, 32670, 32693, 18204, 18204, 18204, 29216, 18204, 47822, 21944, 18204,
  /* 12075 */ 18204, 18204, 20858, 32747, 36477, 35090, 32781, 26175, 32819, 32870, 27633, 32907, 42765, 32925, 29519,
  /* 12090 */ 32974, 29082, 33002, 33032, 18204, 24412, 40708, 24662, 40450, 33057, 18204, 19586, 18204, 33073, 31383,
  /* 12105 */ 33094, 41945, 26175, 46987, 38013, 45213, 22153, 42759, 22155, 47084, 33117, 27940, 29082, 33167, 29082,
  /* 12120 */ 33185, 33209, 33233, 18204, 18204, 18204, 18204, 48528, 33267, 36430, 18204, 33298, 18204, 36478, 33318,
  /* 12135 */ 26175, 26175, 26175, 33357, 33374, 44930, 22155, 22155, 22155, 33413, 33430, 34165, 29082, 29082, 29082,
  /* 12150 */ 33482, 33499, 18204, 42254, 38512, 24076, 40587, 33523, 37387, 24605, 26175, 46620, 33539, 33575, 33591,
  /* 12165 */ 33625, 39344, 33644, 33682, 46174, 30981, 29082, 33709, 33736, 33762, 45010, 36036, 30284, 18204, 33778,
  /* 12180 */ 27349, 36476, 33828, 36942, 34763, 33851, 46524, 25898, 44970, 33867, 33906, 26221, 27178, 33016, 33929,
  /* 12195 */ 18204, 18204, 33949, 33974, 33995, 34021, 34039, 34060, 34094, 34111, 34131, 34181, 34198, 18204, 42441,
  /* 12210 */ 44115, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 34219, 39620, 36480, 34243, 29057,
  /* 12225 */ 32891, 43609, 32938, 44170, 40675, 35938, 31146, 34200, 46256, 43991, 41115, 46866, 36479, 35937, 31148,
  /* 12240 */ 22555, 26977, 32567, 34202, 32232, 35296, 34259, 36895, 43637, 45493, 39306, 34286, 37853, 18204, 18204,
  /* 12255 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12270 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12285 */ 18204, 18204, 18204, 24748, 18204, 18204, 29808, 18204, 26273, 18204, 18204, 18204, 18204, 29813, 20700,
  /* 12300 */ 34316, 22005, 34336, 34347, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12315 */ 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204, 18204,
  /* 12330 */ 18204, 18204, 34363, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 34382, 41548,
  /* 12345 */ 29082, 29082, 34642, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12360 */ 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082,
  /* 12375 */ 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36478,
  /* 12390 */ 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082,
  /* 12405 */ 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175,
  /* 12420 */ 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 18204,
  /* 12435 */ 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262,
  /* 12450 */ 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204,
  /* 12465 */ 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175,
  /* 12480 */ 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937,
  /* 12495 */ 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204,
  /* 12510 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12525 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12540 */ 18204, 18204, 18204, 18204, 24748, 18204, 18204, 45957, 18204, 26273, 18204, 18204, 18204, 18204, 18204,
  /* 12555 */ 20700, 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204, 34697, 18204, 40499, 18204, 18204, 18204,
  /* 12570 */ 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204,
  /* 12585 */ 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155,
  /* 12600 */ 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12615 */ 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082,
  /* 12630 */ 29082, 29082, 29082, 29082, 26834, 18204, 48376, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12645 */ 36478, 34399, 26175, 26175, 26175, 26175, 28434, 34420, 22155, 22155, 22155, 22155, 31703, 34439, 29082,
  /* 12660 */ 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175,
  /* 12675 */ 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204,
  /* 12690 */ 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082,
  /* 12705 */ 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083,
  /* 12720 */ 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480,
  /* 12735 */ 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479,
  /* 12750 */ 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853,
  /* 12765 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12780 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 12795 */ 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 36640, 18204, 26273, 18204, 42242, 24641, 20662,
  /* 12810 */ 20665, 34458, 34509, 34517, 34533, 34542, 20267, 39905, 18204, 18204, 34697, 18204, 19668, 34558, 18204,
  /* 12825 */ 18204, 34582, 22720, 44232, 34584, 26864, 34600, 43580, 34636, 34658, 34719, 18204, 18204, 26308, 18204,
  /* 12840 */ 44793, 47497, 47796, 24989, 20911, 18204, 48155, 34735, 47058, 34799, 44875, 34819, 34855, 34871, 22155,
  /* 12855 */ 34898, 37243, 32677, 34932, 34937, 34953, 27857, 47463, 18204, 18204, 18204, 18204, 19577, 18204, 18204,
  /* 12870 */ 18204, 18204, 18204, 36481, 32262, 46143, 26175, 33553, 40536, 34969, 34985, 44425, 22155, 35007, 36977,
  /* 12885 */ 36866, 35025, 35043, 35841, 29082, 28014, 18204, 18204, 18705, 34488, 18204, 43254, 18204, 35061, 18204,
  /* 12900 */ 18204, 36478, 26175, 26175, 27478, 40682, 35081, 28434, 22155, 22155, 35822, 28749, 35114, 31703, 29082,
  /* 12915 */ 29082, 41667, 32091, 35139, 31756, 42358, 18204, 18204, 18204, 35173, 18204, 18204, 36476, 26175, 35191,
  /* 12930 */ 26175, 26175, 27080, 22154, 45150, 22155, 22155, 22155, 34158, 41884, 29082, 29082, 29082, 26835, 35211,
  /* 12945 */ 36180, 18204, 38281, 31505, 36476, 37127, 26175, 26175, 37171, 35231, 22155, 22155, 45158, 35520, 29082,
  /* 12960 */ 29082, 30761, 18204, 38395, 18204, 40009, 18204, 26175, 42094, 26176, 22155, 35266, 22156, 29082, 39707,
  /* 12975 */ 29083, 18204, 48234, 18204, 18204, 26979, 26175, 35288, 22155, 31101, 29079, 29082, 42562, 18204, 39620,
  /* 12990 */ 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201,
  /* 13005 */ 36479, 35937, 31148, 22555, 25757, 43114, 35312, 27525, 35347, 34203, 36895, 35980, 35384, 39306, 37841,
  /* 13020 */ 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13035 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13050 */ 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 43403, 18204, 26273, 18204, 47202, 18204,
  /* 13065 */ 18204, 35431, 35451, 41354, 35467, 35480, 35489, 20267, 45418, 18204, 18204, 34697, 18204, 21802, 18204,
  /* 13080 */ 18204, 18204, 45415, 20640, 45409, 45417, 37929, 31234, 35505, 41281, 44045, 18204, 18204, 21302, 30265,
  /* 13095 */ 18204, 42891, 38827, 18204, 43078, 35549, 18204, 23948, 38464, 42171, 26175, 30060, 35567, 35592, 22155,
  /* 13110 */ 33628, 45603, 35608, 33913, 29082, 45668, 26252, 38691, 35644, 22785, 47667, 18204, 18204, 18204, 18204,
  /* 13125 */ 18204, 27027, 18204, 18204, 36481, 41481, 35667, 29953, 26175, 26175, 22153, 35697, 42810, 35732, 22155,
  /* 13140 */ 36845, 32487, 45533, 35749, 29082, 29082, 26834, 18204, 24732, 18204, 28271, 18204, 18204, 35778, 29843,
  /* 13155 */ 26523, 18204, 36478, 39114, 35798, 26175, 33341, 26175, 42504, 34423, 35819, 22155, 36694, 22155, 27169,
  /* 13170 */ 39363, 35838, 29082, 41716, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175,
  /* 13185 */ 26175, 26175, 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835,
  /* 13200 */ 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082,
  /* 13215 */ 29082, 29082, 22262, 21837, 18204, 18204, 18204, 18204, 45739, 26175, 26176, 48334, 22155, 22156, 47921,
  /* 13230 */ 29082, 29083, 18204, 18204, 18204, 35857, 26979, 26175, 35937, 22155, 35876, 29079, 48217, 34201, 18204,
  /* 13245 */ 39620, 36480, 26175, 31168, 22155, 29081, 34200, 45325, 32508, 43106, 37582, 22536, 35896, 35933, 35954,
  /* 13260 */ 35974, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 27117, 36895, 43637, 45493, 39306,
  /* 13275 */ 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13290 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13305 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 38783, 18204, 20730, 18204, 38300,
  /* 13320 */ 35996, 38864, 36008, 36024, 36052, 36066, 36079, 36088, 20267, 26325, 36104, 39941, 38810, 19653, 18204,
  /* 13335 */ 24231, 47302, 18204, 36168, 36203, 20137, 36219, 36235, 36272, 36311, 36376, 36406, 18204, 36454, 18204,
  /* 13350 */ 44135, 36474, 36497, 47976, 22187, 36523, 22658, 36547, 29337, 36567, 29994, 46809, 39325, 26175, 36600,
  /* 13365 */ 24772, 22155, 22444, 41548, 32054, 25500, 29082, 36616, 27857, 24453, 40376, 18204, 36633, 18204, 18204,
  /* 13380 */ 18204, 36656, 27305, 18204, 20302, 36481, 36674, 26175, 26175, 26175, 26175, 36710, 36745, 22155, 36766,
  /* 13395 */ 22155, 36845, 45895, 36784, 34442, 29082, 29082, 45541, 18204, 18204, 18204, 18204, 43148, 36802, 18204,
  /* 13410 */ 20338, 30440, 29862, 39474, 26175, 26175, 26175, 36819, 42101, 30601, 22155, 22155, 22155, 36840, 35250,
  /* 13425 */ 33693, 29082, 29082, 29082, 36861, 40175, 45949, 20955, 38210, 38293, 44568, 18204, 33792, 20982, 36882,
  /* 13440 */ 36256, 32834, 34750, 36932, 27080, 44364, 36958, 36993, 37026, 22155, 34158, 31588, 37042, 35157, 35362,
  /* 13455 */ 26835, 25736, 37058, 31764, 37085, 43870, 37112, 26175, 37187, 37208, 37229, 22155, 37259, 37279, 37301,
  /* 13470 */ 29082, 37346, 32047, 37316, 31783, 45356, 18204, 18204, 37367, 37403, 28876, 37422, 37443, 29661, 37461,
  /* 13485 */ 37483, 33881, 37501, 37522, 18204, 18204, 47528, 24489, 37547, 35937, 37598, 34908, 37783, 37635, 37659,
  /* 13500 */ 18204, 37675, 36480, 46343, 31168, 37711, 41127, 34200, 44170, 37729, 37750, 37775, 38988, 37799, 37829,
  /* 13515 */ 37875, 37891, 37920, 22434, 37945, 37970, 26977, 32567, 34202, 32509, 31143, 34203, 37813, 37995, 45493,
  /* 13530 */ 39306, 38029, 38045, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13545 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13560 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 24842, 38067, 26273, 18204,
  /* 13575 */ 40950, 38093, 18204, 18204, 38111, 38142, 38157, 38170, 38179, 38195, 38235, 24696, 38269, 38316, 38338,
  /* 13590 */ 41740, 40359, 38367, 38383, 38418, 38454, 38497, 38562, 30530, 38613, 38664, 38707, 38743, 18204, 32365,
  /* 13605 */ 38779, 38799, 38826, 39446, 41924, 45111, 38843, 38860, 18204, 19559, 36477, 26175, 38880, 38913, 41063,
  /* 13620 */ 24769, 48274, 45454, 36286, 38929, 29082, 25957, 38958, 38974, 26264, 18204, 21776, 18204, 48052, 18204,
  /* 13635 */ 38438, 39004, 40613, 18204, 39032, 39049, 39069, 39113, 39130, 39167, 26175, 31279, 39189, 35009, 42531,
  /* 13650 */ 22155, 22155, 39216, 39556, 42854, 39232, 29082, 35045, 33193, 34673, 39260, 41208, 18204, 39279, 18204,
  /* 13665 */ 18204, 18204, 18204, 18204, 39296, 26175, 26714, 26175, 39322, 26175, 28434, 22155, 45996, 22155, 39341,
  /* 13680 */ 22155, 31703, 29082, 40556, 29082, 39360, 29082, 31756, 18204, 18204, 21047, 18204, 39379, 18204, 18204,
  /* 13695 */ 36476, 26175, 26175, 26175, 26175, 31676, 32016, 22155, 22155, 22155, 42975, 31031, 29082, 29082, 29082,
  /* 13710 */ 29082, 39399, 33078, 37381, 18204, 18204, 18204, 27739, 26175, 44826, 26175, 35415, 22155, 29670, 22155,
  /* 13725 */ 30350, 29082, 44604, 29082, 22262, 39424, 18204, 18204, 18204, 18204, 47050, 31886, 26176, 28923, 46184,
  /* 13740 */ 22156, 27954, 29741, 29083, 39470, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082,
  /* 13755 */ 34201, 39490, 39620, 38402, 39510, 39529, 22155, 39579, 34200, 39613, 39639, 39655, 39692, 39729, 46724,
  /* 13770 */ 39759, 39784, 39824, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 37506, 36895, 25967,
  /* 13785 */ 45493, 39306, 39870, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13800 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 13815 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18736, 26273,
  /* 13830 */ 18204, 31631, 39901, 47881, 21437, 39921, 39937, 39957, 39970, 39979, 20267, 18204, 26677, 18204, 34697,
  /* 13845 */ 18204, 18204, 41374, 18204, 39995, 18204, 18204, 18204, 18204, 37734, 40031, 28187, 26660, 40053, 18204,
  /* 13860 */ 22775, 18204, 30265, 18204, 18204, 40082, 21105, 21474, 21104, 18204, 18204, 36477, 28894, 25657, 39513,
  /* 13875 */ 44326, 40098, 40114, 40135, 41541, 40155, 39563, 27704, 29082, 40191, 39244, 40220, 18204, 40243, 18204,
  /* 13890 */ 24753, 18225, 47367, 18204, 18204, 18204, 18204, 36481, 26175, 26175, 34839, 26175, 26175, 22153, 22155,
  /* 13905 */ 22155, 44924, 22155, 36845, 29082, 29082, 29082, 40259, 29082, 33217, 44651, 18204, 25730, 18204, 18204,
  /* 13920 */ 21308, 18204, 40277, 18204, 30470, 36478, 26175, 33835, 40301, 26175, 26175, 45445, 22155, 33666, 40320,
  /* 13935 */ 22155, 22155, 30882, 29082, 30990, 40338, 29082, 29082, 31756, 18204, 40356, 18204, 18204, 18204, 18204,
  /* 13950 */ 40375, 36476, 26175, 26175, 27532, 26175, 34404, 22154, 22155, 33414, 22155, 22155, 32951, 29082, 29082,
  /* 13965 */ 33460, 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155,
  /* 13980 */ 22155, 28645, 29082, 29082, 29082, 22262, 18204, 18204, 40392, 18204, 32468, 26175, 26175, 26176, 22155,
  /* 13995 */ 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079,
  /* 14010 */ 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 22356, 40412, 40746, 34783, 34115, 34200,
  /* 14025 */ 20590, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895,
  /* 14040 */ 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14055 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14070 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204,
  /* 14085 */ 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204,
  /* 14100 */ 34697, 18204, 18204, 24688, 18204, 18204, 19712, 22591, 19703, 19711, 42163, 45840, 27566, 42848, 25539,
  /* 14115 */ 40474, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175,
  /* 14130 */ 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204,
  /* 14145 */ 40495, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 40515,
  /* 14160 */ 22155, 22155, 22155, 22155, 42996, 29082, 29082, 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204,
  /* 14175 */ 18204, 18204, 18204, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155,
  /* 14190 */ 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204,
  /* 14205 */ 18204, 18204, 36476, 26175, 26175, 26175, 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082,
  /* 14220 */ 29082, 29082, 29082, 26047, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155,
  /* 14235 */ 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176,
  /* 14250 */ 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 40533, 35937, 22451, 22155,
  /* 14265 */ 29079, 40552, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146,
  /* 14280 */ 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203,
  /* 14295 */ 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14310 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14325 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204,
  /* 14340 */ 24290, 26273, 18204, 18204, 19300, 39263, 18204, 40572, 19314, 19328, 19341, 19350, 20267, 18204, 40612,
  /* 14355 */ 40629, 34697, 40647, 45048, 18204, 40698, 40724, 19617, 20546, 40762, 40785, 41823, 40822, 30096, 40838,
  /* 14370 */ 40904, 18204, 18204, 18204, 47130, 40939, 44675, 40973, 46493, 24277, 18204, 18204, 48253, 40996, 26175,
  /* 14385 */ 41023, 37192, 41043, 41079, 36729, 22155, 41102, 39543, 41143, 41161, 31821, 40204, 41182, 18204, 18204,
  /* 14400 */ 18204, 24953, 24731, 41207, 18204, 26301, 25019, 24726, 28033, 28701, 26175, 25786, 26175, 32854, 25314,
  /* 14415 */ 41224, 22155, 41249, 22155, 33129, 41267, 41306, 31803, 29082, 29082, 41327, 41343, 18204, 18204, 18204,
  /* 14430 */ 41370, 28544, 31486, 41390, 39623, 41408, 20356, 36119, 41453, 35195, 41472, 41505, 26175, 41531, 41564,
  /* 14445 */ 44464, 41582, 41605, 22155, 41638, 41664, 22808, 41683, 41706, 29082, 41732, 42266, 18204, 18204, 41756,
  /* 14460 */ 19377, 41791, 18204, 41811, 41027, 41839, 34776, 26175, 27080, 22154, 41858, 37010, 22155, 22155, 34158,
  /* 14475 */ 36340, 29082, 41881, 29082, 31712, 18204, 41900, 41920, 18204, 18204, 36476, 41940, 26175, 26175, 37562,
  /* 14490 */ 41961, 22155, 22155, 25911, 41981, 29082, 29082, 28216, 18204, 43875, 18204, 18204, 18204, 42002, 26175,
  /* 14505 */ 26176, 42020, 22155, 22156, 42039, 29082, 36617, 18204, 38253, 18204, 18204, 26979, 26175, 35937, 22155,
  /* 14520 */ 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 42058, 42081, 22224,
  /* 14535 */ 36295, 42117, 44173, 26177, 32568, 34201, 42154, 42187, 35958, 29036, 26977, 32567, 34202, 32509, 31143,
  /* 14550 */ 26943, 34300, 42203, 42712, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14565 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14580 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204, 18204,
  /* 14595 */ 18204, 33041, 46106, 18204, 42229, 42290, 42306, 42322, 42338, 42374, 42388, 42401, 42413, 42429, 18204,
  /* 14610 */ 46559, 44773, 34697, 18204, 18204, 44109, 18204, 46913, 18204, 42465, 40227, 42477, 42493, 26738, 42547,
  /* 14625 */ 42584, 33746, 43695, 46081, 47023, 30265, 26459, 42618, 18204, 18204, 18204, 40980, 42636, 42672, 20867,
  /* 14640 */ 42691, 37406, 42728, 26175, 42745, 42781, 42801, 22155, 41548, 42834, 29767, 42870, 29082, 27857, 18204,
  /* 14655 */ 42889, 18204, 42907, 42923, 18204, 18204, 18204, 48314, 18204, 18204, 36481, 38481, 39151, 26175, 26175,
  /* 14670 */ 30030, 22153, 42972, 42991, 22155, 22155, 45566, 35027, 29082, 43012, 29082, 29082, 43031, 18204, 18204,
  /* 14685 */ 25167, 18204, 43058, 26452, 47363, 21879, 18545, 43076, 18952, 26175, 26175, 42729, 43094, 25817, 25426,
  /* 14700 */ 22155, 22155, 37445, 28609, 39097, 39200, 29082, 29082, 36786, 41166, 36360, 33720, 18204, 43130, 18204,
  /* 14715 */ 43147, 18204, 18204, 43164, 21074, 26175, 26175, 29986, 43200, 27080, 22154, 22155, 28812, 36722, 22155,
  /* 14730 */ 34158, 29082, 29082, 43217, 29082, 26835, 18204, 30476, 43253, 28157, 21499, 36476, 26175, 43270, 28886,
  /* 14745 */ 35803, 22155, 43290, 29679, 32529, 29082, 43309, 48197, 22262, 18204, 18204, 25025, 47803, 21906, 26175,
  /* 14760 */ 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 47424, 43329, 40440, 21535, 43346, 26175, 43364,
  /* 14775 */ 22155, 28930, 29079, 29082, 43383, 43419, 43438, 48605, 43472, 39768, 22155, 26785, 34200, 44170, 32508,
  /* 14790 */ 43491, 43516, 44543, 44173, 26177, 32568, 34201, 48034, 25793, 33397, 22555, 43542, 47612, 26794, 30785,
  /* 14805 */ 43596, 43633, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14820 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 14835 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748, 18204,
  /* 14850 */ 18204, 18204, 18375, 26273, 18204, 18204, 43762, 43767, 40285, 43653, 43687, 43711, 43724, 43733, 43749,
  /* 14865 */ 18204, 43783, 46073, 29599, 18204, 43804, 43833, 48028, 43855, 18352, 43891, 43942, 18787, 43979, 44007,
  /* 14880 */ 44023, 44061, 44096, 41795, 41392, 27460, 30265, 44131, 46671, 18204, 44151, 44189, 20486, 46886, 44219,
  /* 14895 */ 44269, 44319, 44342, 44380, 32160, 44411, 27642, 44447, 44480, 27669, 44504, 44528, 44584, 44620, 44639,
  /* 14910 */ 44667, 44691, 18204, 44725, 44742, 44770, 18204, 24518, 22121, 27314, 44789, 25305, 44809, 44842, 44867,
  /* 14925 */ 26175, 44891, 44910, 44946, 44986, 45026, 42785, 36845, 31038, 27961, 46228, 29082, 30384, 26834, 18204,
  /* 14940 */ 35331, 18204, 45045, 45064, 18204, 33282, 45104, 18204, 29116, 31867, 27794, 45127, 45174, 26175, 45193,
  /* 14955 */ 39080, 47999, 45229, 22155, 22155, 45245, 25491, 41690, 45274, 29082, 29082, 45290, 31756, 38126, 18204,
  /* 14970 */ 18204, 45341, 45377, 18204, 45396, 21009, 45434, 36584, 45470, 25869, 27080, 45509, 32017, 45557, 45582,
  /* 14985 */ 45619, 39408, 45638, 33445, 25580, 45659, 46312, 45692, 31388, 18204, 21376, 45714, 21562, 34005, 45736,
  /* 15000 */ 26175, 41515, 46024, 45755, 22155, 29688, 47111, 45792, 29082, 45903, 18204, 48565, 33933, 45361, 18204,
  /* 15015 */ 45808, 45828, 26872, 45856, 45875, 34916, 45919, 45938, 29749, 40426, 18204, 18204, 40661, 24197, 31286,
  /* 15030 */ 45973, 45992, 46012, 31192, 26925, 46040, 46062, 46097, 46122, 46138, 46159, 45859, 46301, 44512, 44170,
  /* 15045 */ 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 30891, 38473, 46208, 46244,
  /* 15060 */ 46272, 46288, 35533, 36895, 43637, 45493, 42213, 46328, 37853, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15075 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15090 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 24748,
  /* 15105 */ 18204, 18204, 18204, 29134, 26273, 18204, 18204, 46365, 18204, 18204, 46383, 46432, 46447, 46460, 46469,
  /* 15120 */ 20267, 18204, 18204, 18204, 46485, 18204, 46753, 18204, 18204, 40396, 18204, 18204, 18204, 18204, 37162,
  /* 15135 */ 46509, 41589, 35621, 46546, 40769, 18204, 18204, 30265, 18204, 18204, 18204, 46581, 21272, 18204, 18204,
  /* 15150 */ 18204, 46587, 46603, 26175, 26175, 26175, 46636, 22155, 22155, 22155, 28123, 25570, 29082, 29082, 29082,
  /* 15165 */ 46652, 46687, 18204, 46712, 24635, 18204, 26356, 18204, 46740, 43663, 18204, 25617, 36481, 26175, 46780,
  /* 15180 */ 46797, 36145, 35917, 22153, 46530, 34991, 28116, 46832, 40868, 29082, 36353, 43230, 46851, 29082, 46902,
  /* 15195 */ 18204, 18204, 46929, 40015, 18204, 18204, 18204, 43330, 18204, 18204, 36478, 26175, 46946, 26175, 26175,
  /* 15210 */ 26175, 36685, 26755, 22155, 22155, 22155, 22155, 45886, 30724, 29082, 29082, 29082, 29082, 31756, 46965,
  /* 15225 */ 29404, 18204, 18204, 18204, 18204, 18204, 35398, 46982, 26175, 26175, 26175, 27080, 37574, 22155, 22155,
  /* 15240 */ 22155, 22155, 27221, 29082, 29082, 29082, 29082, 36916, 18204, 18204, 18204, 47003, 47020, 36476, 47039,
  /* 15255 */ 26175, 26175, 30551, 47074, 22155, 22155, 28645, 47100, 29082, 29082, 42873, 18204, 47127, 18204, 18204,
  /* 15270 */ 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979,
  /* 15285 */ 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 45206, 31168, 47146, 43526, 34200,
  /* 15300 */ 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 47166, 40037,
  /* 15315 */ 39597, 32509, 31143, 34203, 36895, 46046, 47182, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204,
  /* 15330 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15345 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15360 */ 24748, 18204, 18204, 18204, 18204, 47218, 31504, 47245, 47264, 18204, 35860, 47281, 31499, 22503, 47318,
  /* 15375 */ 47327, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15390 */ 38005, 43367, 26641, 46222, 44045, 18204, 18204, 47343, 30265, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15405 */ 47359, 18204, 36477, 44303, 26175, 40304, 26175, 24769, 47383, 22155, 41615, 41548, 28682, 29082, 29082,
  /* 15420 */ 47403, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 47423, 18204, 18204, 24904, 18204, 36481, 26175,
  /* 15435 */ 26175, 47440, 26175, 26175, 22153, 22155, 26623, 22155, 22155, 36845, 29082, 29082, 39589, 29082, 29082,
  /* 15450 */ 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36478, 26175, 26175, 26175,
  /* 15465 */ 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082, 29082, 29082, 29082, 31756,
  /* 15480 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 26175, 27080, 22154, 22155,
  /* 15495 */ 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204, 47461, 18204, 18204, 36476,
  /* 15510 */ 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204, 32329, 18204,
  /* 15525 */ 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204,
  /* 15540 */ 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 43839, 39620, 36480, 26175, 31168, 22155, 29081,
  /* 15555 */ 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977,
  /* 15570 */ 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204,
  /* 15585 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15600 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15615 */ 18204, 24748, 18204, 18204, 18204, 18204, 47479, 18204, 36550, 18204, 36551, 40596, 47513, 47552, 47568,
  /* 15630 */ 47581, 47590, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15645 */ 18204, 26979, 47606, 34078, 29082, 47628, 18204, 18204, 18204, 30265, 18204, 18204, 18204, 18204, 43671,
  /* 15660 */ 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155, 41548, 29082, 29082,
  /* 15675 */ 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36481,
  /* 15690 */ 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082, 29082,
  /* 15705 */ 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 20329, 18204, 18204, 18204, 39494, 26175, 26175,
  /* 15720 */ 26175, 26175, 26175, 32792, 22155, 22155, 22155, 22155, 22155, 33140, 29082, 29082, 29082, 29082, 29082,
  /* 15735 */ 31756, 18204, 18204, 47665, 18204, 18204, 18204, 18204, 36476, 26175, 32547, 26175, 26175, 47683, 22154,
  /* 15750 */ 22155, 47729, 22155, 36970, 34158, 29082, 35148, 29082, 47407, 26835, 18204, 18204, 18204, 18204, 18204,
  /* 15765 */ 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204, 18204,
  /* 15780 */ 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204, 18204,
  /* 15795 */ 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168, 22155,
  /* 15810 */ 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148, 22555,
  /* 15825 */ 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204, 18204,
  /* 15840 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15855 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15870 */ 18204, 18204, 24899, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700, 18204,
  /* 15885 */ 37859, 47749, 47758, 20267, 18204, 18204, 18204, 47785, 18204, 26102, 18204, 18204, 18204, 40631, 18204,
  /* 15900 */ 47641, 47649, 25977, 45976, 26641, 40882, 44045, 18204, 18204, 18204, 47774, 18204, 47819, 24262, 18204,
  /* 15915 */ 18204, 18204, 18204, 18204, 36477, 26175, 26175, 47838, 44297, 24769, 22155, 27651, 32909, 41548, 29082,
  /* 15930 */ 29082, 47855, 30375, 32986, 47875, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 15945 */ 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082, 29082, 29082,
  /* 15960 */ 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 28499, 18204, 18204, 18204, 36478, 26175,
  /* 15975 */ 26175, 41057, 26175, 26175, 45141, 22155, 22155, 47897, 22155, 22155, 45524, 29082, 29082, 47917, 29082,
  /* 15990 */ 29082, 31756, 47713, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 41842, 26175, 26175, 26175, 27080,
  /* 16005 */ 22154, 47937, 22155, 22155, 22155, 34158, 42594, 29082, 29082, 29082, 26835, 18204, 18204, 18204, 18204,
  /* 16020 */ 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262, 18204,
  /* 16035 */ 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083, 18204, 18204,
  /* 16050 */ 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480, 26175, 31168,
  /* 16065 */ 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937, 31148,
  /* 16080 */ 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204, 18204,
  /* 16095 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16110 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16125 */ 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204, 20700,
  /* 16140 */ 18204, 39854, 43571, 27608, 47957, 18204, 18204, 18204, 34697, 18204, 18204, 47973, 18204, 18204, 18204,
  /* 16155 */ 18204, 18204, 42675, 26979, 47992, 41865, 29082, 48015, 18204, 18204, 48050, 30265, 18204, 18204, 18204,
  /* 16170 */ 18204, 18204, 18204, 18204, 39280, 36477, 26175, 26175, 26175, 38889, 24769, 22155, 22155, 22155, 48068,
  /* 16185 */ 29082, 29082, 29082, 35368, 27857, 18204, 25056, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 48111,
  /* 16200 */ 18204, 36481, 36152, 26175, 22337, 26175, 26175, 22153, 48131, 22155, 44431, 22155, 36845, 28947, 29082,
  /* 16215 */ 29082, 44597, 29082, 26834, 18204, 18204, 48151, 18204, 18204, 18204, 18204, 18204, 48171, 18204, 36478,
  /* 16230 */ 26175, 44851, 26175, 26175, 26175, 30854, 22155, 33389, 22155, 22155, 22155, 34882, 29082, 29511, 29082,
  /* 16245 */ 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 21065, 36476, 26175, 26175, 25860, 26175,
  /* 16260 */ 29960, 22154, 22155, 42023, 22155, 22155, 48190, 29082, 29082, 48213, 29082, 30972, 18204, 18204, 31650,
  /* 16275 */ 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082, 22262,
  /* 16290 */ 48233, 18204, 18204, 48250, 18204, 39145, 26175, 26176, 48269, 22155, 22156, 48290, 29082, 29083, 18204,
  /* 16305 */ 18204, 48311, 18204, 26979, 41489, 35937, 22155, 48330, 29079, 28772, 34201, 18204, 39620, 36480, 26175,
  /* 16320 */ 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479, 35937,
  /* 16335 */ 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853, 18204,
  /* 16350 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16365 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16380 */ 18204, 18204, 18204, 18204, 24748, 18204, 18204, 18204, 18204, 26273, 18204, 18204, 18204, 18204, 18204,
  /* 16395 */ 48350, 18204, 39854, 43571, 27608, 20267, 18204, 18204, 18204, 34697, 18204, 18204, 18204, 18204, 18204,
  /* 16410 */ 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 44045, 18204, 18204, 18204, 30265, 18204, 18204,
  /* 16425 */ 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175, 24769, 22155, 22155, 22155,
  /* 16440 */ 41548, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16455 */ 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155, 22155, 22155, 36845, 29082,
  /* 16470 */ 29082, 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16485 */ 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155, 22155, 31703, 29082, 29082,
  /* 16500 */ 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175,
  /* 16515 */ 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082, 29082, 26835, 18204, 18204,
  /* 16530 */ 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155, 28645, 29082, 29082, 29082,
  /* 16545 */ 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155, 22156, 29082, 29082, 29083,
  /* 16560 */ 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082, 34201, 18204, 39620, 36480,
  /* 16575 */ 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173, 26177, 32568, 34201, 36479,
  /* 16590 */ 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637, 45493, 39306, 37841, 37853,
  /* 16605 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16620 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16635 */ 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 42937, 42947, 42956, 32706, 42953,
  /* 16650 */ 32719, 48366, 18204, 36438, 48400, 48412, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 23715, 18204,
  /* 16665 */ 18204, 18204, 18204, 18204, 18204, 18417, 23994, 19462, 48428, 18506, 36419, 35435, 25682, 34686, 18204,
  /* 16680 */ 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 18834, 19212, 18159,
  /* 16695 */ 18181, 21196, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222, 18241,
  /* 16710 */ 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430, 18322,
  /* 16725 */ 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204, 18204,
  /* 16740 */ 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672, 18522,
  /* 16755 */ 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984, 18859,
  /* 16770 */ 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034, 26534,
  /* 16785 */ 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234, 19251,
  /* 16800 */ 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583, 19478,
  /* 16815 */ 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870, 19886,
  /* 16830 */ 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429, 19425,
  /* 16845 */ 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562, 20606,
  /* 16860 */ 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16875 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 16890 */ 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763, 18204, 18204, 46879,
  /* 16905 */ 35215, 18204, 20700, 43042, 48446, 18204, 48480, 20746, 18204, 18204, 18204, 34697, 18204, 25700, 18204,
  /* 16920 */ 18204, 18204, 18204, 23725, 18204, 23724, 18417, 18474, 19462, 48429, 18843, 36419, 35435, 25682, 34686,
  /* 16935 */ 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19416, 19212,
  /* 16950 */ 18159, 18181, 24114, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782, 18222,
  /* 16965 */ 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314, 48430,
  /* 16980 */ 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078, 18204,
  /* 16995 */ 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646, 18672,
  /* 17010 */ 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819, 23984,
  /* 17025 */ 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012, 19034,
  /* 17040 */ 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198, 19234,
  /* 17055 */ 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515, 18583,
  /* 17070 */ 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854, 19870,
  /* 17085 */ 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419, 48429,
  /* 17100 */ 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531, 20562,
  /* 17115 */ 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17130 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17145 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 44245, 18204, 18204,
  /* 17160 */ 18204, 18204, 18204, 48518, 20924, 20930, 18204, 48544, 20746, 18204, 18204, 18204, 34697, 18204, 25700,
  /* 17175 */ 33507, 18204, 18204, 20277, 18204, 18204, 20276, 18417, 18474, 19462, 48429, 18506, 36419, 35435, 25682,
  /* 17190 */ 34686, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132, 18873, 19144,
  /* 17205 */ 19212, 18159, 18181, 18481, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204, 18204, 35782,
  /* 17220 */ 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342, 20103, 18314,
  /* 17235 */ 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278, 18368, 45078,
  /* 17250 */ 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599, 18630, 18646,
  /* 17265 */ 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720, 18803, 18819,
  /* 17280 */ 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990, 24376, 19012,
  /* 17295 */ 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252, 19269, 19198,
  /* 17310 */ 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583, 19478, 19515,
  /* 17325 */ 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442, 19831, 19854,
  /* 17340 */ 19870, 19886, 19953, 19113, 19993, 20013, 19997, 20017, 20033, 20049, 18100, 20089, 20123, 20173, 18419,
  /* 17355 */ 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187, 20502, 20531,
  /* 17370 */ 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17385 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17400 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 20681, 18204, 18204, 18204, 18204, 38763, 18204,
  /* 17415 */ 18204, 18204, 18204, 18204, 20700, 18204, 18204, 18204, 21845, 20267, 18204, 18204, 18204, 34697, 18204,
  /* 17430 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 26979, 31166, 26641, 29082, 31215, 18204, 18204,
  /* 17445 */ 18204, 30265, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 36477, 26175, 26175, 26175, 26175,
  /* 17460 */ 27563, 22155, 22155, 22155, 37619, 29082, 29082, 29082, 29082, 27857, 18204, 18204, 18204, 18204, 18204,
  /* 17475 */ 18204, 18204, 18204, 18204, 18204, 18204, 36481, 26175, 26175, 26175, 26175, 26175, 22153, 22155, 22155,
  /* 17490 */ 22155, 22155, 36845, 29082, 29082, 29082, 29082, 29082, 26834, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17505 */ 18204, 18204, 18204, 18204, 36478, 26175, 26175, 26175, 26175, 26175, 28434, 22155, 22155, 22155, 22155,
  /* 17520 */ 22155, 31703, 29082, 29082, 29082, 29082, 29082, 31756, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17535 */ 36476, 26175, 26175, 26175, 26175, 27080, 22154, 22155, 22155, 22155, 22155, 34158, 29082, 29082, 29082,
  /* 17550 */ 29082, 26835, 18204, 18204, 18204, 18204, 18204, 36476, 26175, 26175, 26175, 30551, 22155, 22155, 22155,
  /* 17565 */ 28645, 29082, 29082, 29082, 22262, 18204, 18204, 18204, 18204, 18204, 26175, 26175, 26176, 22155, 22155,
  /* 17580 */ 22156, 29082, 29082, 29083, 18204, 18204, 18204, 18204, 26979, 26175, 35937, 22155, 22155, 29079, 29082,
  /* 17595 */ 34201, 18204, 39620, 36480, 26175, 31168, 22155, 29081, 34200, 44170, 32508, 35938, 31146, 34200, 44173,
  /* 17610 */ 26177, 32568, 34201, 36479, 35937, 31148, 22555, 26977, 32567, 34202, 32509, 31143, 34203, 36895, 43637,
  /* 17625 */ 45493, 39306, 37841, 37853, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17640 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17655 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17670 */ 18204, 18204, 22689, 18204, 18204, 18204, 23420, 23426, 22301, 41422, 20150, 18204, 18204, 18204, 18204,
  /* 17685 */ 18204, 25700, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18417, 18474, 19462, 48429, 18506, 36419,
  /* 17700 */ 35435, 25682, 38431, 18204, 18204, 20849, 18204, 34227, 28025, 18037, 18053, 18075, 18116, 18448, 18132,
  /* 17715 */ 18873, 18834, 19212, 18159, 18181, 21196, 19422, 19218, 18165, 18187, 19541, 18204, 27034, 18203, 18204,
  /* 17730 */ 18204, 35782, 18222, 18241, 18204, 34270, 22194, 18265, 18881, 19100, 18088, 18880, 18294, 19456, 24342,
  /* 17745 */ 20103, 18314, 48430, 18322, 19460, 24346, 20107, 18318, 19754, 18534, 18204, 43397, 18338, 37096, 28278,
  /* 17760 */ 18368, 45078, 18204, 18204, 18391, 18407, 18911, 18925, 18435, 18614, 18464, 18497, 18522, 18569, 18599,
  /* 17775 */ 18630, 18646, 18672, 18522, 18569, 18599, 18630, 18646, 18697, 18721, 18757, 18773, 27296, 44203, 45720,
  /* 17790 */ 18803, 18819, 23984, 18859, 18897, 20515, 18941, 19049, 18974, 18996, 24382, 19018, 19043, 18968, 18990,
  /* 17805 */ 24376, 19012, 19034, 26534, 19065, 38351, 47196, 37069, 19086, 48652, 20227, 19129, 19169, 19235, 19252,
  /* 17820 */ 19269, 19198, 19234, 19251, 19268, 19285, 44557, 28241, 19366, 37904, 18059, 18143, 19401, 19441, 18583,
  /* 17835 */ 19478, 19515, 18583, 19478, 19515, 19602, 19638, 19689, 42449, 19728, 19782, 20435, 19824, 19847, 20442,
  /* 17850 */ 19831, 19854, 19870, 48581, 19953, 19113, 19993, 20013, 19997, 20017, 48621, 20049, 18100, 20089, 20123,
  /* 17865 */ 48637, 18419, 48429, 19425, 20213, 19741, 20243, 20293, 20372, 24107, 20405, 20421, 20458, 20474, 20187,
  /* 17880 */ 20502, 20531, 20562, 20606, 20656, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17895 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204,
  /* 17910 */ 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 18204, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0,
  /* 17930 */ 94466, 94466, 94466, 94466, 0, 98563, 98563, 73728, 77824, 98563, 98563, 98563, 98563, 98563, 69632,
  /* 17945 */ 98563, 98563, 98563, 98563, 98563, 98563, 98563, 324, 98563, 98563, 94466, 98563, 98563, 98563, 98563,
  /* 17960 */ 98563, 98563, 98563, 94466, 94466, 98563, 98563, 98563, 98563, 98563, 98563, 98563, 98563, 98563, 98563,
  /* 17975 */ 98563, 98563, 0, 98563, 94466, 98563, 98563, 98563, 98563, 98563, 98563, 98563, 98563, 98563, 98563,
  /* 17990 */ 98563, 98563, 98563, 98563, 98563, 98563, 98563, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 94466, 98563, 260,
  /* 18009 */ 261, 0, 2138112, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 265, 265, 265,
  /* 18037 */ 0, 0, 0, 0, 2609152, 0, 2682880, 2699264, 0, 0, 2756608, 2793472, 2818048, 0, 2850816, 2908160, 0, 0, 0,
  /* 18056 */ 0, 2793472, 2908160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3203072, 0, 0, 0, 0, 0, 0, 0, 2908160, 0, 0, 0,
  /* 18083 */ 0, 0, 0, 0, 2715648, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2789376,
  /* 18097 */ 2801664, 2183168, 2826240, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18108 */ 3129344, 2129920, 2129920, 2482176, 2129920, 2129920, 2129920, 2539520, 2408448, 2416640, 2183168,
  /* 18119 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18130 */ 2183168, 2609152, 2183168, 2793472, 2183168, 2818048, 2183168, 2183168, 2850816, 2183168, 2183168,
  /* 18141 */ 2183168, 2908160, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2478080,
  /* 18152 */ 2183168, 2183168, 2498560, 2183168, 2183168, 2183168, 2527232, 2699264, 2129920, 2707456, 2129920,
  /* 18163 */ 2715648, 2756608, 2129920, 2129920, 2129920, 2793472, 2129920, 2818048, 2129920, 2129920, 2850816,
  /* 18174 */ 2129920, 2129920, 2129920, 2129920, 2908160, 2129920, 2129920, 2129920, 2129920, 2129920, 2908160,
  /* 18185 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18196 */ 3108864, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2777088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18215 */ 0, 0, 0, 0, 0, 264, 0, 0, 0, 2146304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1558, 0, 0, 0, 2646016, 0,
  /* 18245 */ 2801664, 0, 0, 2359296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1926, 0, 0, 1929, 1930, 0, 0, 2396160, 0, 0, 2826240,
  /* 18269 */ 0, 0, 0, 0, 0, 2183168, 2183168, 2183168, 2392064, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18284 */ 2183168, 2183168, 3129344, 2130754, 2130754, 2483010, 2130754, 2130754, 2130754, 2540354, 2183168,
  /* 18295 */ 2183168, 2183168, 3117056, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18306 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2130754, 2130754, 2129920, 2129920, 2129920,
  /* 18317 */ 2789376, 2801664, 2129920, 2826240, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18328 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 2129920, 0, 0, 2584576, 0, 2658304,
  /* 18343 */ 0, 2752512, 2760704, 2764800, 0, 2809856, 0, 0, 2871296, 0, 0, 0, 0, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18367 */ 728, 0, 0, 2838528, 2854912, 0, 0, 2871296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 314, 315, 316, 0, 0,
  /* 18391 */ 2899968, 0, 3198976, 2449408, 0, 0, 2703360, 0, 0, 0, 0, 0, 0, 0, 0, 3002368, 3198976, 0, 2674688, 0, 0,
  /* 18412 */ 0, 3207168, 0, 0, 0, 0, 0, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18427 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 2129920, 2183168, 2183168, 2183168,
  /* 18438 */ 2703360, 2183168, 2183168, 2183168, 2183168, 2183168, 2752512, 2760704, 2785280, 2809856, 2183168,
  /* 18449 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2682880, 2183168, 2699264, 2183168, 2707456,
  /* 18460 */ 2183168, 2715648, 2756608, 2183168, 2183168, 3055616, 2183168, 2183168, 2183168, 2183168, 3092480,
  /* 18471 */ 2183168, 2183168, 3125248, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920,
  /* 18482 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 908, 2129920,
  /* 18495 */ 2129920, 2129920, 2183168, 2183168, 2183168, 3198976, 2183168, 0, 0, 0, 0, 2129920, 2129920, 2129920,
  /* 18509 */ 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 2129920, 0, 0, 0, 0, 0, 2129920, 2129920, 2129920,
  /* 18525 */ 2445312, 2449408, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2506752, 2129920, 2129920,
  /* 18536 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 0, 0, 0, 0, 0,
  /* 18552 */ 2017, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 0, 0, 2129920, 2129920, 2129920, 2129920, 2584576,
  /* 18574 */ 2129920, 2129920, 2129920, 2129920, 2625536, 2129920, 2129920, 2129920, 2658304, 2129920, 2129920,
  /* 18585 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2478080, 2129920, 2129920, 2498560, 2129920, 2129920,
  /* 18596 */ 2129920, 2527232, 2531328, 2129920, 2703360, 2129920, 2129920, 2129920, 2129920, 2129920, 2752512,
  /* 18607 */ 2760704, 2129920, 2785280, 2809856, 2129920, 2129920, 2129920, 2871296, 2899968, 2183168, 2183168,
  /* 18618 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18629 */ 3031040, 2129920, 2899968, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18640 */ 2129920, 2129920, 2129920, 2129920, 2129920, 3031040, 2129920, 3055616, 2129920, 2129920, 2129920,
  /* 18651 */ 2129920, 3092480, 2129920, 2129920, 3125248, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18662 */ 2129920, 233472, 0, 2129920, 2129920, 0, 0, 0, 0, 0, 2129920, 2129920, 2129920, 3198976, 2129920, 0, 0, 0,
  /* 18680 */ 0, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 2129920, 0, 0, 0, 0, 986,
  /* 18697 */ 2129920, 2129920, 2129920, 3198976, 2129920, 2129920, 2129920, 2129920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1937,
  /* 18715 */ 0, 1938, 0, 0, 0, 0, 0, 0, 2457600, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2588672, 0, 0, 0, 0, 307, 0, 0,
  /* 18743 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3015, 0, 0, 0, 0, 0, 0, 2875392, 0, 2912256, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18771 */ 3153920, 3162112, 0, 0, 3211264, 3022848, 0, 0, 0, 0, 0, 3063808, 2633728, 0, 0, 2797568, 0, 0, 0, 0, 0,
  /* 18792 */ 719, 0, 0, 0, 0, 0, 0, 0, 0, 568, 0, 0, 0, 0, 0, 2371584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3112960, 3133440,
  /* 18820 */ 0, 0, 0, 2912256, 0, 2666496, 0, 0, 0, 0, 0, 0, 3104768, 2371584, 2183168, 0, 0, 2129920, 2129920,
  /* 18839 */ 2129920, 2129920, 2408448, 2416640, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0,
  /* 18851 */ 1134592, 2129920, 2129920, 0, 0, 0, 0, 0, 2514944, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18866 */ 2183168, 2588672, 2183168, 2613248, 2183168, 2183168, 2633728, 2183168, 2183168, 2183168, 2183168,
  /* 18877 */ 2183168, 2183168, 3108864, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18888 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2568192, 2183168, 2691072,
  /* 18899 */ 2183168, 2719744, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2875392, 2183168,
  /* 18910 */ 2912256, 2183168, 2183168, 2183168, 2183168, 2183168, 2445312, 2449408, 2183168, 2183168, 2183168,
  /* 18921 */ 2183168, 2183168, 2183168, 2506752, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2584576,
  /* 18932 */ 2183168, 2183168, 2183168, 2183168, 2625536, 2183168, 2183168, 2183168, 2658304, 2183168, 3133440,
  /* 18943 */ 2183168, 2183168, 2183168, 3162112, 2183168, 2183168, 3182592, 3186688, 2183168, 0, 0, 0, 0, 0, 0, 0,
  /* 18959 */ 2043, 0, 0, 2046, 0, 483, 483, 2049, 483, 2437120, 2129920, 2457600, 2465792, 2129920, 2129920, 2129920,
  /* 18975 */ 2129920, 2129920, 2129920, 2514944, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18986 */ 2588672, 2129920, 2613248, 2129920, 2129920, 2129920, 2588672, 2129920, 2613248, 2129920, 2129920,
  /* 18997 */ 2633728, 2129920, 2129920, 2129920, 2691072, 2129920, 2719744, 2129920, 2129920, 2129920, 2129920,
  /* 19008 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3022848, 2129920, 2129920, 2129920,
  /* 19019 */ 3063808, 2129920, 2129920, 3112960, 2129920, 2129920, 3133440, 2129920, 2129920, 2129920, 3162112,
  /* 19030 */ 2129920, 2129920, 3182592, 3186688, 2129920, 3162112, 2129920, 2129920, 3182592, 3186688, 2129920,
  /* 19041 */ 2129920, 2129920, 2129920, 0, 0, 0, 0, 0, 0, 2371584, 2129920, 2129920, 2404352, 2129920, 2129920,
  /* 19056 */ 2129920, 2129920, 2129920, 2437120, 2129920, 2457600, 2465792, 2129920, 2129920, 0, 0, 3137536, 0,
  /* 19069 */ 3194880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1479, 1480, 0, 0, 0, 2621440, 0, 0, 0, 0, 2605056, 0,
  /* 19094 */ 3174400, 2887680, 0, 2949120, 0, 0, 2183168, 2183168, 2183168, 2183168, 2183168, 2600960, 2183168,
  /* 19107 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2646016, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 19118 */ 2183168, 2183168, 2637824, 2662400, 2744320, 2748416, 2842624, 2957312, 2183168, 2994176, 2183168,
  /* 19129 */ 2834432, 2183168, 2904064, 2183168, 2183168, 2932736, 2183168, 2183168, 2981888, 2183168, 2990080,
  /* 19140 */ 2183168, 2183168, 3010560, 3026944, 2183168, 0, 834, 2129920, 2129920, 2129920, 2129920, 2408448, 2416640,
  /* 19153 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 982, 0, 2129920, 2129920, 0, 0, 0, 0, 0,
  /* 19169 */ 3059712, 3076096, 3088384, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3215360, 0, 0,
  /* 19182 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19193 */ 2129920, 0, 1814, 2129920, 2129920, 2129920, 3059712, 3076096, 3088384, 2129920, 2129920, 2129920,
  /* 19205 */ 2129920, 2129920, 2129920, 2129920, 3215360, 0, 0, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19218 */ 2609152, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2682880, 2129920, 2699264,
  /* 19229 */ 2129920, 2707456, 2129920, 2715648, 2756608, 2129920, 2129920, 2129920, 2428928, 2129920, 2129920,
  /* 19240 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2535424, 2129920,
  /* 19251 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2621440, 2129920, 2129920, 2129920, 2129920, 2711552,
  /* 19262 */ 2736128, 2129920, 2129920, 2129920, 2129920, 2830336, 2830336, 2834432, 2129920, 2883584, 2904064,
  /* 19273 */ 2129920, 2129920, 2932736, 2129920, 2129920, 2981888, 2129920, 2990080, 2129920, 2129920, 3010560,
  /* 19284 */ 3026944, 3026944, 2129920, 3059712, 3076096, 3088384, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19295 */ 2129920, 2129920, 3215360, 2129920, 2400256, 0, 0, 0, 0, 355, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 355, 355, 0,
  /* 19318 */ 355, 309, 355, 0, 355, 355, 355, 355, 355, 456, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
  /* 19339 */ 497, 520, 497, 520, 497, 497, 544, 520, 520, 520, 544, 520, 520, 520, 520, 520, 520, 520, 520, 1, 16386,
  /* 19360 */ 3, 82172, 82172, 254, 0, 0, 0, 2916352, 0, 0, 0, 3051520, 0, 2527232, 2650112, 0, 2617344, 0, 0, 0, 0, 0,
  /* 19382 */ 0, 0, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 691, 0, 0, 695, 0, 2531328, 2183168, 2183168, 2580480,
  /* 19405 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2916352,
  /* 19416 */ 2183168, 0, 835, 2129920, 2129920, 2129920, 2129920, 2408448, 2416640, 2129920, 2129920, 2129920, 2129920,
  /* 19429 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 2486272, 0, 2183168,
  /* 19442 */ 2183168, 2985984, 2183168, 2183168, 2183168, 2183168, 3051520, 2183168, 2183168, 2183168, 2183168,
  /* 19453 */ 2183168, 2183168, 3170304, 2129920, 0, 2129920, 2129920, 2129920, 2392064, 2129920, 2129920, 2129920,
  /* 19465 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0,
  /* 19477 */ 2129920, 2129920, 2129920, 2580480, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19488 */ 2129920, 2129920, 2129920, 2129920, 2916352, 2129920, 0, 2130754, 2130754, 2130754, 2392898, 2130754,
  /* 19500 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 0, 0, 909, 2130828,
  /* 19513 */ 2130828, 2130828, 2129920, 2129920, 2985984, 2129920, 2129920, 2129920, 2129920, 3051520, 2129920,
  /* 19524 */ 2129920, 2129920, 2129920, 2129920, 2129920, 3170304, 2129920, 909, 0, 0, 0, 909, 0, 2371584, 2129920,
  /* 19539 */ 2129920, 2404352, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 2129920, 2129920, 2187264, 0, 0, 0, 0,
  /* 19554 */ 0, 0, 0, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19585 */ 1553, 0, 0, 0, 0, 0, 0, 0, 0, 1574, 1575, 0, 1577, 0, 0, 0, 0, 2424832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19612 */ 2920448, 2953216, 0, 0, 3067904, 0, 0, 0, 0, 604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3034, 0, 0, 0, 0,
  /* 19639 */ 2678784, 3166208, 2629632, 2596864, 2686976, 0, 0, 0, 0, 2965504, 0, 0, 3039232, 3121152, 0, 0, 0, 0, 638,
  /* 19658 */ 0, 640, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2661, 0, 0, 0,
  /* 19689 */ 2969600, 2379776, 0, 3145728, 0, 0, 0, 2723840, 0, 0, 0, 0, 0, 2781184, 0, 0, 0, 0, 0, 725, 0, 0, 725, 0,
  /* 19713 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 2379776, 2383872, 2183168, 2183168, 2424832, 2183168,
  /* 19736 */ 2453504, 2183168, 2183168, 2183168, 2502656, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 19747 */ 2183168, 2998272, 2183168, 2183168, 2129920, 2129920, 2486272, 2129920, 2129920, 2129920, 2129920,
  /* 19758 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3117056, 2129920, 2129920, 2129920,
  /* 19769 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 28672, 909, 2129920, 2129920, 2129920,
  /* 19782 */ 2183168, 2572288, 2183168, 2596864, 2629632, 2183168, 2183168, 2678784, 2740224, 2183168, 2183168,
  /* 19793 */ 2183168, 2920448, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2998272, 2183168,
  /* 19804 */ 2183168, 2130754, 2130754, 2487106, 2130754, 2130754, 2130754, 2130754, 2515778, 2130754, 2130754,
  /* 19815 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2589506, 2130754, 2614082, 2130754, 2453504, 2129920,
  /* 19826 */ 2129920, 2129920, 2502656, 2129920, 2129920, 2129920, 2129920, 2572288, 2129920, 2596864, 2629632,
  /* 19837 */ 2129920, 2129920, 2678784, 2740224, 2129920, 2129920, 2129920, 2129920, 2920448, 2129920, 2740224,
  /* 19848 */ 2129920, 2129920, 2129920, 2129920, 2920448, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19859 */ 2129920, 3121152, 2129920, 2129920, 3145728, 3158016, 3166208, 2129920, 0, 2469888, 0, 0, 0, 0, 0,
  /* 19874 */ 2662400, 2842624, 2994176, 0, 3100672, 3190784, 0, 0, 3035136, 0, 3141632, 2924544, 0, 2744320, 3027, 0,
  /* 19890 */ 0, 0, 0, 2940928, 0, 0, 2813952, 3149824, 2420736, 0, 2768896, 0, 0, 0, 0, 683, 653, 0, 0, 687, 0, 0, 0,
  /* 19913 */ 693, 694, 0, 0, 0, 0, 0, 1972, 0, 0, 0, 0, 1976, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 159744, 0, 0, 0, 0,
  /* 19942 */ 0, 0, 159744, 0, 16386, 3, 0, 0, 2187264, 131072, 0, 0, 0, 2412544, 0, 3006464, 2748416, 2555904, 0, 0,
  /* 19962 */ 3043328, 2183168, 2412544, 2420736, 2183168, 2469888, 2183168, 0, 835, 2130754, 2130754, 2130754, 2130754,
  /* 19975 */ 2409282, 2417474, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 19986 */ 2569026, 2130754, 2130754, 2130754, 2130754, 2130754, 2601794, 3006464, 2183168, 2183168, 2183168,
  /* 19997 */ 3141632, 2129920, 2412544, 2420736, 2129920, 2469888, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 20008 */ 2129920, 2129920, 2129920, 2637824, 2662400, 2129920, 2129920, 2637824, 2662400, 2744320, 2748416,
  /* 20019 */ 2768896, 2842624, 2957312, 2129920, 2994176, 2129920, 3006464, 2129920, 2129920, 2129920, 3141632,
  /* 20030 */ 2129920, 0, 2473984, 2482176, 0, 0, 0, 0, 2863104, 0, 0, 0, 3027, 0, 0, 2822144, 0, 3219456, 2551808, 0,
  /* 20050 */ 0, 0, 0, 2547712, 0, 2928640, 2183168, 2183168, 2482176, 2183168, 2183168, 2183168, 2539520, 2547712,
  /* 20064 */ 2183168, 0, 1266, 2129920, 2129920, 2129920, 2129920, 2408448, 2416640, 2129920, 2129920, 2129920,
  /* 20076 */ 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 2129920, 0, 0, 0, 260, 0, 2547712, 2129920, 2129920,
  /* 20092 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3129344, 2129920, 2129920, 2482176,
  /* 20103 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2646016, 2129920, 2129920, 2129920, 2129920,
  /* 20114 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2789376, 2129920, 2539520,
  /* 20125 */ 2547712, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3129344,
  /* 20136 */ 2129920, 0, 0, 0, 0, 0, 740, 717, 0, 740, 738, 0, 0, 752, 0, 0, 0, 0, 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 0,
  /* 20164 */ 0, 0, 1476, 0, 1478, 0, 0, 0, 0, 0, 0, 0, 2732032, 2867200, 0, 3027, 0, 0, 0, 0, 0, 0, 0, 0, 2183168,
  /* 20189 */ 2510848, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 2510848, 2129920, 2129920, 2129920,
  /* 20200 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 1358, 2129920, 2129920, 2129920, 0,
  /* 20214 */ 2998272, 0, 0, 0, 0, 0, 0, 0, 0, 2977792, 2183168, 2183168, 2486272, 2183168, 2183168, 2183168, 2183168,
  /* 20231 */ 2183168, 2621440, 2183168, 2183168, 2183168, 2183168, 2711552, 2736128, 2183168, 2183168, 2183168,
  /* 20242 */ 2830336, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2998272, 2129920, 2129920, 2129920,
  /* 20253 */ 2129920, 2486272, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 20264 */ 2129920, 2129920, 260, 0, 0, 0, 260, 261, 0, 0, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 1146880, 0, 0, 0, 0, 0,
  /* 20290 */ 0, 0, 0, 2129920, 2129920, 2129920, 2129920, 2129920, 2998272, 2129920, 2129920, 2129920, 0, 0, 0, 0, 0,
  /* 20307 */ 0, 0, 0, 1618, 0, 0, 0, 0, 0, 0, 0, 0, 1925, 0, 0, 0, 0, 0, 0, 0, 0, 1974, 0, 0, 0, 0, 0, 0, 0, 0, 1989,
  /* 20338 */ 0, 0, 0, 0, 0, 0, 0, 0, 2002, 0, 0, 0, 0, 0, 0, 0, 0, 2018, 0, 0, 0, 0, 0, 0, 0, 0, 2031, 0, 0, 0, 0,
  /* 20369 */ 2036, 2037, 0, 2576384, 0, 0, 0, 2183168, 2183168, 2183168, 2183168, 2183168, 2576384, 2183168, 2183168,
  /* 20384 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 20395 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 0, 0, 2130828, 2130828, 2129920, 2129920, 2129920,
  /* 20408 */ 2576384, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2433024, 0, 2519040,
  /* 20420 */ 3018752, 0, 0, 0, 2846720, 0, 0, 2183168, 2433024, 2183168, 2519040, 2183168, 2592768, 2183168, 2846720,
  /* 20435 */ 2183168, 2183168, 2183168, 2183168, 3121152, 2183168, 2183168, 3145728, 3158016, 3166208, 2379776,
  /* 20446 */ 2383872, 2129920, 2129920, 2424832, 2129920, 2453504, 2129920, 2129920, 2129920, 2502656, 2129920,
  /* 20457 */ 2129920, 2183168, 3018752, 2129920, 2433024, 2129920, 2519040, 2129920, 2592768, 2129920, 2846720,
  /* 20468 */ 2129920, 2129920, 2129920, 3018752, 2129920, 2433024, 2129920, 2519040, 2129920, 2592768, 2129920,
  /* 20479 */ 2846720, 2129920, 2129920, 2129920, 3018752, 2129920, 2510848, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 1005, 0, 0,
  /* 20498 */ 0, 1141, 0, 1143, 2510848, 2129920, 2129920, 2129920, 2129920, 2129920, 3084288, 0, 0, 0, 0, 3014656,
  /* 20514 */ 2387968, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3022848, 2183168, 2183168,
  /* 20525 */ 2183168, 3063808, 2183168, 2183168, 3112960, 2183168, 2183168, 3014656, 2387968, 2129920, 2129920,
  /* 20536 */ 2129920, 2129920, 3014656, 2387968, 2129920, 2129920, 2129920, 2129920, 3014656, 2523136, 0, 0, 0, 0, 736,
  /* 20551 */ 737, 0, 0, 0, 0, 0, 0, 682, 0, 0, 742, 2936832, 0, 2183168, 2641920, 2961408, 2183168, 2129920, 2641920,
  /* 20570 */ 2961408, 2129920, 2129920, 2641920, 2961408, 2129920, 2695168, 0, 0, 0, 0, 758, 718, 0, 0, 0, 0, 0, 762,
  /* 20589 */ 763, 0, 0, 0, 0, 0, 0, 3027, 0, 3285, 0, 0, 0, 0, 0, 3291, 483, 2543616, 2183168, 2543616, 2129920,
  /* 20610 */ 2543616, 2129920, 0, 2183168, 2129920, 2129920, 0, 2183168, 2129920, 2129920, 0, 2183168, 2510848,
  /* 20623 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2130754, 2511682, 2130754, 2130754, 2130754, 2130754,
  /* 20634 */ 2130754, 2130828, 2973696, 2973696, 2974530, 2974604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 586, 0, 0, 0, 0,
  /* 20656 */ 2129920, 2129920, 2973696, 2973696, 2973696, 2973696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0,
  /* 20679 */ 0, 0, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1580, 0, 0, 0, 73728, 77824, 0, 0, 0, 0, 0,
  /* 20709 */ 69632, 0, 0, 0, 0, 0, 0, 0, 324, 0, 260, 0, 0, 0, 0, 0, 0, 0, 324, 0, 261, 0, 0, 0, 0, 0, 0, 0, 324, 0,
  /* 20739 */ 299, 254, 0, 0, 0, 0, 0, 0, 0, 0, 260, 261, 0, 2138112, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0,
  /* 20767 */ 483, 483, 483, 483, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 260, 0, 264, 122880, 0, 0, 0, 0,
  /* 20794 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1581, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20826 */ 264, 264, 264, 264, 0, 264, 123255, 77824, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 324, 266240, 0, 0,
  /* 20851 */ 0, 0, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 1176, 1177, 0,
  /* 20879 */ 1150, 483, 483, 483, 264, 264, 264, 264, 264, 264, 264, 264, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0,
  /* 20902 */ 759, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 1008, 0, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 0, 0, 0, 1150976,
  /* 20931 */ 1150976, 1150976, 1150976, 1150976, 1150976, 1150976, 1150976, 1150976, 1150976, 1150976, 0, 0, 0, 0, 0,
  /* 20946 */ 0, 0, 0, 37423, 261, 0, 2138112, 53811, 265, 0, 0, 0, 0, 0, 0, 0, 0, 2305, 0, 2307, 0, 0, 2310, 0, 0, 0,
  /* 20972 */ 0, 264, 0, 0, 0, 2408448, 2416640, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 2381, 0, 0, 0, 0, 0, 2387, 0, 0,
  /* 20998 */ 2109689, 16386, 3, 0, 0, 255, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 2393, 0, 0, 0, 0, 0, 0, 483, 483, 0,
  /* 21026 */ 126976, 126976, 126976, 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 126976, 0, 0, 126976, 0, 0, 126976, 0,
  /* 21046 */ 126976, 0, 0, 0, 0, 0, 0, 0, 0, 2330, 0, 0, 0, 0, 0, 0, 0, 0, 2368, 0, 0, 0, 0, 0, 0, 0, 0, 2382, 0, 0, 0,
  /* 21077 */ 0, 0, 0, 0, 0, 2394, 0, 0, 0, 0, 0, 483, 483, 0, 0, 73728, 77824, 126976, 0, 0, 0, 0, 69632, 0, 0, 0,
  /* 21103 */ 126976, 0, 0, 0, 0, 0, 1013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 151552, 0,
  /* 21132 */ 0, 0, 0, 0, 0, 0, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2383, 0, 0, 0, 0, 0, 0, 990, 0, 0, 994, 998, 0, 2408448,
  /* 21162 */ 2416640, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 2615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2659, 0, 0, 0, 0, 0, 0,
  /* 21190 */ 2129920, 1718, 2129920, 2129920, 2129920, 2392064, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 21202 */ 2129920, 2129920, 2129920, 2129920, 0, 0, 0, 2129920, 2129920, 2129920, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21222 */ 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 135168, 135168, 135168, 135168, 135168,
  /* 21242 */ 135168, 135168, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 73728, 77824, 0, 0, 139264, 139264, 0, 69632,
  /* 21262 */ 139264, 0, 0, 139264, 0, 0, 0, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 0, 0, 139264,
  /* 21289 */ 139264, 139264, 139264, 139264, 139264, 139264, 139264, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1029,
  /* 21308 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1977, 0, 0, 0, 0, 0, 0, 376, 376, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
  /* 21340 */ 0, 339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 126976, 126976, 126976, 0, 0, 0, 0, 0, 560, 561, 0,
  /* 21364 */ 2138112, 564, 565, 0, 0, 0, 0, 0, 0, 0, 0, 2630, 0, 0, 0, 0, 0, 0, 0, 0, 2643, 0, 0, 0, 2647, 0, 2649, 0,
  /* 21392 */ 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143360, 261, 0, 265, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21421 */ 0, 0, 0, 0, 1623, 0, 0, 265, 73728, 143739, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0,
  /* 21450 */ 0, 366, 0, 265, 265, 265, 265, 265, 265, 265, 265, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1071, 1072,
  /* 21474 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1124, 0, 0, 0, 0, 0, 0, 0, 0, 260, 37426, 0, 2138112, 264, 53814, 0, 0, 0,
  /* 21502 */ 0, 0, 0, 0, 0, 2658, 0, 0, 0, 0, 0, 0, 0, 0, 2824, 0, 0, 0, 0, 0, 0, 0, 0, 3021, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21534 */ 3030, 0, 0, 0, 0, 0, 0, 0, 0, 3045, 0, 0, 0, 0, 0, 0, 3048, 0, 261, 0, 0, 0, 265, 2408448, 2416640, 0, 0,
  /* 21561 */ 2441216, 0, 0, 0, 0, 0, 0, 0, 2669, 0, 0, 0, 0, 0, 0, 483, 483, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21591 */ 0, 0, 262, 262, 147718, 147718, 262, 262, 262, 262, 147718, 147718, 147718, 147718, 147718, 147786,
  /* 21607 */ 147786, 147786, 147786, 147786, 147786, 147786, 147786, 1, 16386, 3, 0, 0, 2187264, 0, 0, 262, 147718,
  /* 21624 */ 330, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 147718, 147718, 147718, 147718,
  /* 21642 */ 147718, 262, 262, 147786, 147718, 147718, 147718, 262, 262, 262, 262, 262, 262, 147786, 147718, 147718,
  /* 21658 */ 147718, 262, 262, 0, 0, 262, 262, 147718, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
  /* 21679 */ 262, 262, 262, 262, 147786, 73728, 77824, 147718, 262, 262, 147718, 262, 69632, 262, 262, 262, 147718,
  /* 21696 */ 262, 262, 262, 262, 262, 262, 262, 325, 262, 262, 0, 147718, 262, 262, 262, 262, 262, 147718, 262, 147718,
  /* 21716 */ 262, 262, 262, 262, 262, 262, 262, 262, 147718, 262, 147718, 262, 0, 262, 0, 262, 0, 0, 0, 159744, 159744,
  /* 21737 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 505,
  /* 21768 */ 483, 505, 483, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1494, 1495, 0, 0, 0, 0, 73728,
  /* 21795 */ 77824, 0, 167936, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16386, 3, 0, 0,
  /* 21823 */ 2187821, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 167936, 167936, 0, 0, 0, 0,
  /* 21841 */ 0, 0, 0, 2823, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 73728, 77824, 0,
  /* 21866 */ 172032, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2003, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21897 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 2875, 0, 0,
  /* 21916 */ 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 21937 */ 172032, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0,
  /* 21964 */ 1609, 0, 0, 0, 176128, 0, 176128, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 3350, 483, 3351, 483, 0,
  /* 21989 */ 0, 73728, 77824, 0, 176128, 0, 0, 0, 69632, 0, 0, 0, 0, 176128, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22015 */ 0, 483, 514, 483, 514, 483, 0, 176128, 176128, 0, 176128, 0, 176128, 176128, 176128, 176128, 176128,
  /* 22032 */ 176128, 176128, 176128, 176128, 176128, 176128, 0, 0, 0, 0, 0, 1, 250, 3, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
  /* 22056 */ 0, 0, 0, 0, 582, 583, 0, 0, 0, 0, 0, 0, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224,
  /* 22076 */ 180224, 0, 0, 0, 0, 0, 0, 0, 3012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3348, 0, 483, 483, 483, 483, 483, 180224,
  /* 22102 */ 180224, 180224, 180224, 180224, 180224, 180224, 180224, 1, 0, 3, 82172, 82172, 254, 0, 558, 0, 0, 0, 1069,
  /* 22121 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1486, 0, 0, 0, 0, 2146304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22152 */ 217088, 1265, 0, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 528, 0,
  /* 22173 */ 0, 0, 1921, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1931, 0, 0, 0, 0, 1010, 0, 1012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22204 */ 2879488, 0, 0, 0, 0, 2375680, 483, 2052, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2064, 483,
  /* 22225 */ 483, 483, 483, 483, 483, 3245, 483, 483, 3247, 504, 504, 504, 504, 3251, 504, 0, 0, 2362, 0, 0, 0, 0, 0,
  /* 22248 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1992, 0, 528, 528, 2548, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 22273 */ 528, 528, 504, 504, 0, 2854, 0, 0, 0, 2858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1509, 0, 0, 0, 0, 3006, 0,
  /* 22302 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 3038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22334 */ 221184, 483, 3062, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1682, 483, 528,
  /* 22354 */ 528, 3117, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 3215, 0, 504, 504, 3188,
  /* 22375 */ 504, 504, 504, 504, 3189, 3190, 504, 504, 504, 504, 504, 504, 504, 504, 889, 504, 504, 504, 504, 504, 0,
  /* 22396 */ 528, 528, 528, 528, 3207, 3208, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 504, 504, 252, 985, 0,
  /* 22418 */ 0, 0, 0, 0, 3229, 0, 0, 0, 0, 483, 483, 483, 483, 483, 483, 3237, 483, 483, 483, 483, 483, 483, 3359, 483,
  /* 22442 */ 483, 3361, 504, 504, 504, 504, 504, 504, 1329, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3090,
  /* 22462 */ 504, 504, 504, 504, 504, 483, 483, 483, 483, 3243, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 3252,
  /* 22483 */ 528, 3267, 528, 528, 528, 528, 528, 528, 3273, 528, 528, 528, 528, 3277, 0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
  /* 22507 */ 0, 0, 0, 0, 0, 0, 0, 501, 524, 501, 524, 501, 483, 504, 504, 504, 504, 3415, 504, 504, 504, 504, 504, 504,
  /* 22531 */ 504, 504, 528, 528, 3107, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3276, 528, 504, 0, 0,
  /* 22552 */ 528, 528, 3427, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 0, 0, 188783, 188783, 188783,
  /* 22574 */ 188783, 188783, 188783, 188783, 188783, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
  /* 22597 */ 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1526, 0, 0, 263, 0,
  /* 22629 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 368, 368, 368, 368, 368, 368, 368, 368, 1, 16386, 3, 82172,
  /* 22656 */ 82172, 254, 0, 0, 0, 0, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2027, 483, 483, 483, 483, 0, 0, 0, 260,
  /* 22684 */ 261, 0, 263, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 229376, 245760, 0,
  /* 22710 */ 0, 0, 0, 0, 0, 1464, 0, 0, 0, 1470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 585, 0, 0, 0, 0, 0, 1091, 1091, 0, 0,
  /* 22741 */ 0, 1095, 1564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2369, 2370, 0, 0, 0, 0, 0, 0, 1458, 1915, 0, 0, 0, 0, 1464,
  /* 22768 */ 1917, 0, 0, 0, 0, 1470, 1919, 0, 0, 0, 0, 1013, 0, 0, 0, 0, 1018, 0, 0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
  /* 22796 */ 1493, 0, 0, 1496, 0, 504, 2210, 2525, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2247,
  /* 22819 */ 528, 528, 528, 528, 528, 0, 0, 0, 260, 261, 155648, 2138112, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 188416, 0,
  /* 22843 */ 0, 0, 0, 0, 0, 0, 0, 2700098, 2130754, 2708290, 2130754, 2716482, 2757442, 2130754, 2130754, 2130754,
  /* 22859 */ 2794306, 2130754, 2818882, 2130754, 2130754, 2851650, 2130754, 2130754, 2130754, 3199810, 2130754, 0, 0,
  /* 22872 */ 0, 0, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130754, 2130754, 2130754,
  /* 22885 */ 0, 0, 0, 0, 0, 2130828, 2409356, 2417548, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 22900 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130754, 0, 2486272, 0, 2610060, 2130828, 2130828,
  /* 22913 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2683788, 2130828, 2700172, 2130828, 2708364, 2130828,
  /* 22924 */ 2716556, 2757516, 2130828, 2392972, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 22935 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 22946 */ 2646924, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 22957 */ 2130828, 2130828, 2790284, 2802572, 2130828, 2827148, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 22968 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 3117964, 2130828, 2130828,
  /* 22979 */ 2130828, 2130828, 2183168, 2183168, 2183168, 3198976, 2183168, 0, 0, 0, 0, 2130754, 2130754, 2130754,
  /* 22993 */ 2130754, 2130754, 2130754, 2130754, 2478914, 2130754, 2130754, 2499394, 2130754, 2130754, 2130754,
  /* 23004 */ 2528066, 2532162, 2130754, 2704194, 2130754, 2130754, 2130754, 2130754, 2130754, 2753346, 2761538,
  /* 23015 */ 2130754, 2786114, 2810690, 2130754, 2130754, 2130754, 2872130, 2130754, 2900802, 2130754, 2130754,
  /* 23026 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23037 */ 3031874, 2130754, 3056450, 2130754, 2130754, 2130754, 2130754, 3093314, 2130754, 2130754, 3126082,
  /* 23048 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2609986, 2130754, 2130754, 2130754, 2130754,
  /* 23059 */ 2130754, 2130754, 2130754, 2683714, 2130754, 2130828, 2704268, 2130828, 2130828, 2130828, 2130828,
  /* 23070 */ 2130828, 2753420, 2761612, 2130828, 2786188, 2810764, 2130828, 2130828, 2130828, 2872204, 2130828,
  /* 23081 */ 2900876, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 23092 */ 2130828, 2130828, 2130828, 3031948, 2130828, 3056524, 2130828, 2130828, 2130828, 2130828, 3093388,
  /* 23103 */ 2130828, 2130828, 3126156, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 23114 */ 2130828, 3109772, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130754, 0, 0, 2130754, 2130754,
  /* 23127 */ 0, 0, 0, 0, 0, 0, 2372418, 2130754, 2130754, 2405186, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23142 */ 2437954, 2130754, 2458434, 2466626, 2130754, 2130754, 2130754, 2446146, 2450242, 2130754, 2130754,
  /* 23153 */ 2130754, 2130754, 2130754, 2130754, 2507586, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23164 */ 2999106, 2130754, 2130754, 2130828, 2130828, 2487180, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 23175 */ 2130828, 3122060, 2130828, 2130828, 3146636, 3158924, 3167116, 2130754, 0, 2469888, 0, 2876226, 2130754,
  /* 23188 */ 2130754, 2913090, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23199 */ 3023682, 2130754, 2130754, 2130754, 2790210, 2802498, 2130754, 2827074, 2130754, 2130754, 2130754,
  /* 23210 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23221 */ 2130754, 3117890, 2130754, 3064642, 2130754, 2130754, 3113794, 2130754, 2130754, 3134274, 2130754,
  /* 23232 */ 2130754, 2130754, 3162946, 2130754, 2130754, 3183426, 3187522, 2438028, 2130828, 2458508, 2466700,
  /* 23243 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2515852, 2130828, 2130828, 2130828, 2130828,
  /* 23254 */ 2130828, 2130828, 2876300, 2130828, 2130828, 2913164, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 23265 */ 2130828, 2130828, 2478988, 2130828, 2130828, 2499468, 2130828, 2130828, 2130828, 2528140, 2532236,
  /* 23276 */ 2130828, 3163020, 2130828, 2130828, 3183500, 3187596, 2130828, 2130754, 2130754, 2130754, 0, 0, 0, 0, 0,
  /* 23291 */ 0, 2372492, 2130828, 2130828, 2405260, 2130828, 2130828, 2130828, 2130828, 2130828, 3059712, 3076096,
  /* 23303 */ 3088384, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3215360, 0, 0, 2130754, 2130754,
  /* 23316 */ 2130754, 2130754, 2585410, 2130754, 2130754, 2130754, 2130754, 2626370, 2130754, 2130754, 2130754,
  /* 23327 */ 2659138, 2130754, 2130754, 2835266, 2130754, 2884418, 2904898, 2130754, 2130754, 2933570, 2130754,
  /* 23338 */ 2130754, 2982722, 2130754, 2990914, 2130754, 2130754, 3011394, 3027778, 2130754, 3060546, 3076930,
  /* 23349 */ 3089218, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 3216194, 0, 0, 2130828, 2130828,
  /* 23362 */ 2130828, 2577292, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130754, 2433024, 0,
  /* 23374 */ 2519040, 3018752, 2831244, 2835340, 2130828, 2884492, 2904972, 2130828, 2130828, 2933644, 2130828,
  /* 23385 */ 2130828, 2982796, 2130828, 2990988, 2130828, 2130828, 3011468, 3027852, 2130828, 3060620, 3077004,
  /* 23396 */ 3089292, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 3216268, 2130754, 2401090, 0, 0,
  /* 23409 */ 0, 0, 1028, 0, 1030, 1031, 0, 0, 0, 1033, 1034, 0, 0, 0, 0, 0, 0, 110592, 110592, 110592, 110592, 110592,
  /* 23431 */ 110592, 110592, 110592, 110592, 110592, 110592, 0, 0, 0, 0, 0, 2183168, 2183168, 2985984, 2183168,
  /* 23446 */ 2183168, 2183168, 2183168, 3051520, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3170304,
  /* 23457 */ 2130754, 2130754, 2429762, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23468 */ 2130754, 2130754, 2130754, 2536258, 2130754, 2130754, 2581314, 2130754, 2130754, 2130754, 2130754,
  /* 23479 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2917186, 2130754, 2130754, 2638658,
  /* 23490 */ 2663234, 2745154, 2749250, 2769730, 2843458, 2958146, 2130754, 2995010, 2130754, 3007298, 2130754,
  /* 23501 */ 2130754, 2130754, 2130754, 2622274, 2130754, 2130754, 2130754, 2130754, 2712386, 2736962, 2130754,
  /* 23512 */ 2130754, 2130754, 2130754, 2831170, 2130828, 2130828, 2986892, 2130828, 2130828, 2130828, 2130828,
  /* 23523 */ 3052428, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 3171212, 2130754, 2130754, 2986818,
  /* 23534 */ 2130754, 2130754, 2130754, 2130754, 3052354, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23545 */ 3171138, 2130828, 2130828, 2573196, 2130828, 2597772, 2630540, 2130828, 2130828, 2679692, 2741132,
  /* 23556 */ 2130828, 2130828, 2130828, 2130828, 2921356, 2130828, 2130828, 2581388, 2130828, 2130828, 2130828,
  /* 23567 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2917260, 2130828, 2130828,
  /* 23578 */ 2589580, 2130828, 2614156, 2130828, 2130828, 2634636, 2130828, 2130828, 2130828, 2691980, 2130828,
  /* 23589 */ 2720652, 2130828, 2130828, 2130828, 2130828, 2585484, 2130828, 2130828, 2130828, 2130828, 2626444,
  /* 23600 */ 2130828, 2130828, 2130828, 2659212, 2130828, 2130828, 2130828, 2429836, 2130828, 2130828, 2130828,
  /* 23611 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2536332, 2454338, 2130754,
  /* 23622 */ 2130754, 2130754, 2503490, 2130754, 2130754, 2130754, 2130754, 2573122, 2130754, 2597698, 2630466,
  /* 23633 */ 2130754, 2130754, 2679618, 2741058, 2130754, 2130754, 2130754, 2130754, 2921282, 2130754, 2130754,
  /* 23644 */ 2130754, 2130754, 2130754, 2130754, 2130754, 3121986, 2130754, 2130754, 2130754, 2908994, 2130754,
  /* 23655 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 3109698,
  /* 23666 */ 3146562, 3158850, 3167042, 2380684, 2384780, 2130828, 2130828, 2425740, 2130828, 2454412, 2130828,
  /* 23677 */ 2130828, 2130828, 2503564, 2130828, 2130828, 2130828, 2794380, 2130828, 2818956, 2130828, 2130828,
  /* 23688 */ 2851724, 2130828, 2130828, 2130828, 2130828, 2909068, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 23699 */ 2622348, 2130828, 2130828, 2130828, 2130828, 2712460, 2737036, 2130828, 2130828, 2130828, 2130828,
  /* 23710 */ 2130828, 2999180, 2130828, 2130828, 2130754, 0, 0, 0, 0, 0, 0, 0, 0, 1130496, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23732 */ 1142784, 0, 0, 0, 0, 0, 0, 0, 0, 3006464, 2183168, 2183168, 2183168, 3141632, 2130754, 2413378, 2421570,
  /* 23749 */ 2130754, 2470722, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2646850, 2130754, 2130754,
  /* 23760 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 23771 */ 2130754, 907, 2130828, 3142466, 2130828, 2413452, 2421644, 2130828, 2470796, 2130828, 2130828, 2130828,
  /* 23783 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2638732, 2663308, 2745228, 2749324, 2769804, 2843532,
  /* 23794 */ 2958220, 2130828, 2995084, 2130828, 3007372, 2130828, 2130828, 2130828, 3142540, 2130754, 0, 2473984,
  /* 23806 */ 2548546, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 3130178,
  /* 23817 */ 2130828, 2130828, 2483084, 2130828, 2130828, 2130828, 3023756, 2130828, 2130828, 2130828, 3064716,
  /* 23828 */ 2130828, 2130828, 3113868, 2130828, 2130828, 3134348, 2130828, 2130828, 2130828, 2446220, 2450316,
  /* 23839 */ 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2507660, 2130828, 2130828, 2130828, 2130828,
  /* 23850 */ 2130828, 2569100, 2130828, 2130828, 2130828, 2130828, 2130828, 2601868, 2130828, 2130828, 2130828,
  /* 23861 */ 2130828, 2130754, 0, 2130754, 2130754, 2187264, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23884 */ 2130828, 2540428, 2548620, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828, 2130828,
  /* 23895 */ 2130828, 3130252, 2130754, 0, 0, 0, 0, 0, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
  /* 23920 */ 2183168, 3018752, 2130754, 2433858, 2130754, 2519874, 2130754, 2593602, 2130754, 2847554, 2130754,
  /* 23931 */ 2130754, 2130754, 3019586, 2130828, 2433932, 2130828, 2519948, 2130828, 2593676, 2130828, 2847628,
  /* 23942 */ 2130828, 2130828, 2130828, 3019660, 2130754, 2510848, 0, 0, 0, 0, 0, 0, 1159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23964 */ 0, 65536, 0, 0, 0, 0, 0, 2511756, 2130828, 2130828, 2130828, 2130828, 2130828, 3085122, 0, 0, 0, 0,
  /* 23982 */ 3014656, 2387968, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2437120, 2183168, 2457600,
  /* 23993 */ 2465792, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 2130755, 2129920,
  /* 24004 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 2129920, 0, 0, 184320, 0, 0, 2183168,
  /* 24020 */ 3014656, 2388802, 2130754, 2130754, 2130754, 2130754, 3015490, 2388876, 2130828, 2130828, 2130828,
  /* 24031 */ 2130828, 3015564, 2523136, 0, 0, 0, 0, 1055, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
  /* 24056 */ 2936832, 0, 2183168, 2641920, 2961408, 2183168, 2130754, 2642754, 2962242, 2130754, 2130828, 2642828,
  /* 24068 */ 2962316, 2130828, 2695168, 0, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2346, 0, 0, 0, 2543616,
  /* 24093 */ 2183168, 2544450, 2130754, 2544524, 2130828, 0, 2183168, 2130754, 2130828, 0, 2183168, 2130754, 2130828,
  /* 24106 */ 0, 2183168, 2129920, 2129920, 2129920, 2129920, 2129920, 2576384, 2129920, 2129920, 2129920, 2129920,
  /* 24118 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 909, 2129920, 2129920, 2129920, 0, 0, 0, 0,
  /* 24134 */ 208896, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 0, 73728, 77824, 0, 208896, 0, 0, 0,
  /* 24161 */ 69632, 0, 0, 0, 0, 0, 208896, 208896, 0, 0, 208896, 208896, 208896, 0, 0, 0, 0, 0, 0, 2146304, 0, 0, 0,
  /* 24184 */ 102400, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 24208 */ 3057, 483, 483, 483, 483, 0, 261, 0, 0, 0, 261, 0, 264, 0, 0, 0, 264, 0, 265, 0, 0, 0, 2445312, 0, 0, 0,
  /* 24234 */ 0, 0, 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 2129920, 2129920, 2129920, 3198976, 2129920, 2129920, 2129920,
  /* 24254 */ 2129920, 260, 0, 261, 0, 264, 0, 265, 0, 0, 0, 0, 1086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 1119,
  /* 24282 */ 1120, 0, 0, 0, 0, 0, 0, 1125, 0, 0, 0, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0,
  /* 24313 */ 2183168, 3133440, 2183168, 2183168, 2183168, 3162112, 2183168, 2183168, 3182592, 3186688, 2183168, 835, 0,
  /* 24326 */ 0, 0, 835, 3059712, 3076096, 3088384, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 24339 */ 3215360, 835, 0, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2568192,
  /* 24352 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2600960, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 24363 */ 3059712, 3076096, 3088384, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3215360, 909, 0,
  /* 24376 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2875392, 2129920, 2129920, 2912256, 2129920,
  /* 24387 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3022848, 2129920, 2129920, 213544,
  /* 24399 */ 213544, 213544, 213544, 213544, 213544, 213544, 213544, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1488,
  /* 24418 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1620, 0, 0, 0, 0, 1, 16386, 3, 0, 0, 0, 0, 237568, 0, 0, 0, 237568, 0, 0,
  /* 24448 */ 0, 0, 0, 0, 1551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1477, 0, 0, 0, 0, 0, 0, 0, 0, 260, 261, 0, 2138112, 264,
  /* 24477 */ 265, 0, 204800, 0, 0, 0, 0, 0, 0, 0, 3346, 0, 0, 0, 483, 483, 483, 483, 483, 483, 483, 3055, 3056, 483,
  /* 24501 */ 483, 483, 483, 3060, 1, 16386, 3, 0, 0, 0, 0, 0, 241664, 0, 0, 0, 241664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24529 */ 0, 0, 1579, 0, 0, 258048, 0, 0, 260, 261, 0, 2138112, 264, 265, 192512, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0,
  /* 24555 */ 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 2732032, 2867200, 0, 24576, 0, 0, 0, 0, 0,
  /* 24580 */ 0, 0, 0, 2183168, 2130754, 2130754, 2130754, 2130754, 2130754, 2577218, 2130754, 2130754, 2130754,
  /* 24593 */ 2130754, 2130754, 2130754, 2130754, 2130828, 2130828, 2130828, 3199884, 2130828, 2130754, 2130754,
  /* 24604 */ 2130754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 483, 2399, 1, 16386, 2117883, 0, 0, 0, 0, 0, 0, 257,
  /* 24631 */ 0, 0, 0, 257, 0, 0, 0, 0, 0, 1518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253952,
  /* 24662 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1525, 0, 0, 0, 0, 0, 73728, 77824, 0, 253952, 0, 0, 0, 69632, 0, 0, 0,
  /* 24691 */ 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 596, 597, 0, 599, 600, 0, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 253952,
  /* 24720 */ 1, 16386, 2117883, 0, 0, 2187264, 0, 0, 0, 0, 0, 1529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1932,
  /* 24748 */ 1, 16386, 3, 82172, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1541, 0, 0, 0, 483, 1265, 835, 504, 504, 504,
  /* 24775 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1306, 504, 504, 0, 0, 1915, 0, 0, 0, 0, 0, 1917, 0, 0,
  /* 24799 */ 0, 0, 0, 1919, 0, 0, 0, 0, 1133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2371, 0, 0, 0, 1569, 0, 0, 0, 0, 0,
  /* 24830 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 273, 1994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 73728,
  /* 24861 */ 77824, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 392, 483, 505, 483, 483, 529, 505, 505, 505, 529, 505, 505,
  /* 24885 */ 505, 505, 505, 505, 505, 505, 1, 16386, 3, 82172, 82172, 254, 0, 0, 1, 16386, 3, 82173, 254, 0, 0, 0, 0,
  /* 24908 */ 0, 0, 0, 0, 0, 0, 0, 0, 1607, 0, 0, 0, 266240, 266240, 266240, 266240, 266240, 266240, 266240, 266240, 1,
  /* 24929 */ 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1550, 0, 0, 0, 0, 1555, 1556, 0, 0, 0, 0, 0, 0, 1960, 0, 0, 0, 0,
  /* 24957 */ 0, 0, 0, 0, 0, 0, 1523, 0, 0, 0, 0, 0, 2969600, 2379776, 0, 3145728, 3027, 0, 0, 2723840, 0, 0, 0, 0, 0,
  /* 24982 */ 2781184, 0, 0, 0, 0, 0, 1572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1007, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0,
  /* 25012 */ 0, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2849, 0, 0, 0, 0, 0,
  /* 25042 */ 2744320, 3146, 0, 0, 0, 0, 2940928, 0, 0, 2813952, 3149824, 2420736, 0, 2768896, 0, 0, 0, 0, 1487, 0, 0,
  /* 25063 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 2482176, 0, 0, 0, 0, 2863104, 0, 0, 0, 3223, 0, 0, 2822144,
  /* 25090 */ 0, 3219456, 2551808, 0, 0, 0, 2732032, 2867200, 0, 3223, 0, 0, 0, 0, 0, 0, 0, 0, 2183168, 2183168,
  /* 25110 */ 2183168, 2183168, 3121152, 2183168, 2183168, 3145728, 3158016, 3166208, 2380610, 2384706, 2130754,
  /* 25121 */ 2130754, 2425666, 2130754, 2634562, 2130754, 2130754, 2130754, 2691906, 2130754, 2720578, 2130754,
  /* 25132 */ 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754, 2130754,
  /* 25143 */ 2130754, 2130828, 2130828, 2130828, 0, 269, 0, 0, 0, 0, 0, 268, 0, 268, 269, 0, 268, 268, 269, 0, 0, 0, 0,
  /* 25166 */ 1533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1939, 0, 1940, 0, 0, 269, 268, 0, 0, 0, 268, 268, 269, 269, 0,
  /* 25194 */ 0, 0, 0, 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 404, 268, 0, 415, 428, 441, 441, 441, 441, 441,
  /* 25223 */ 441, 441, 441, 461, 441, 441, 441, 441, 441, 441, 441, 479, 479, 484, 506, 484, 506, 484, 484, 530, 506,
  /* 25244 */ 506, 506, 530, 506, 506, 506, 506, 506, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1, 16386, 3,
  /* 25265 */ 82172, 82172, 254, 0, 0, 0, 0, 0, 1615, 1616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1949, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25294 */ 260, 261, 0, 0, 264, 265, 0, 0, 0, 0, 569, 0, 0, 0, 0, 0, 1626, 0, 1628, 1604, 483, 483, 483, 483, 483,
  /* 25319 */ 483, 483, 1708, 483, 483, 483, 483, 1714, 483, 483, 483, 572, 573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25345 */ 0, 0, 233472, 0, 0, 0, 324, 324, 324, 0, 0, 627, 0, 0, 0, 0, 0, 0, 0, 0, 2142208, 1090, 0, 0, 0, 0, 0, 0,
  /* 25373 */ 634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 649, 714, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
  /* 25405 */ 0, 0, 0, 3027, 0, 0, 0, 3287, 0, 0, 0, 0, 483, 766, 483, 483, 483, 483, 483, 483, 796, 483, 483, 483, 483,
  /* 25430 */ 483, 0, 0, 0, 0, 504, 504, 2132, 504, 504, 504, 504, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 572, 0,
  /* 25458 */ 0, 0, 0, 0, 0, 0, 718, 483, 483, 771, 775, 483, 483, 483, 483, 483, 801, 483, 806, 483, 812, 483, 815,
  /* 25481 */ 483, 483, 829, 483, 483, 504, 504, 504, 842, 846, 504, 504, 504, 504, 504, 0, 0, 2214, 0, 528, 528, 528,
  /* 25503 */ 528, 528, 528, 528, 1398, 528, 528, 528, 528, 528, 528, 528, 528, 504, 3389, 3390, 0, 0, 0, 0, 0, 504,
  /* 25525 */ 504, 873, 504, 878, 504, 885, 504, 888, 504, 504, 902, 504, 504, 0, 528, 528, 528, 528, 528, 980, 504, 0,
  /* 25547 */ 0, 504, 504, 82172, 985, 0, 0, 989, 528, 528, 916, 920, 528, 528, 528, 528, 528, 528, 947, 528, 952, 528,
  /* 25569 */ 959, 528, 528, 528, 528, 528, 1368, 528, 528, 528, 1377, 528, 528, 528, 528, 528, 528, 528, 2564, 528,
  /* 25589 */ 528, 2568, 528, 528, 528, 528, 528, 962, 528, 528, 976, 528, 528, 888, 0, 0, 504, 504, 82172, 985, 0, 0,
  /* 25611 */ 987, 991, 0, 0, 995, 999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1621, 0, 0, 0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
  /* 25642 */ 0, 0, 0, 0, 0, 0, 0, 0, 1952, 0, 0, 483, 483, 483, 1247, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 25667 */ 483, 483, 1219, 483, 483, 483, 528, 528, 528, 528, 1339, 0, 504, 504, 985, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25690 */ 2891776, 2895872, 0, 0, 0, 0, 0, 0, 0, 1546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 1610,
  /* 25717 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1622, 0, 0, 0, 0, 0, 1936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2606, 0,
  /* 25749 */ 0, 0, 0, 0, 1624, 0, 0, 1625, 0, 0, 0, 0, 483, 483, 483, 483, 483, 483, 483, 3405, 483, 3407, 483, 483,
  /* 25773 */ 483, 483, 1637, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1650, 483, 483, 483, 483, 483, 483, 1658,
  /* 25793 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 3362, 504, 504, 504, 504, 504, 483, 483, 483, 483, 1688,
  /* 25814 */ 483, 483, 1691, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2113, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 25835 */ 1704, 483, 483, 483, 483, 483, 1709, 483, 483, 483, 483, 483, 483, 483, 483, 2420, 483, 483, 483, 483,
  /* 25855 */ 483, 483, 483, 483, 2099, 483, 483, 483, 483, 483, 483, 483, 483, 2432, 483, 483, 483, 483, 483, 483, 483,
  /* 25876 */ 483, 2447, 483, 483, 483, 2450, 483, 483, 483, 1265, 1719, 504, 504, 504, 504, 1725, 504, 504, 504, 504,
  /* 25896 */ 504, 1731, 504, 504, 504, 504, 504, 504, 2743, 2744, 504, 504, 504, 504, 2747, 504, 504, 504, 504, 504,
  /* 25916 */ 504, 2763, 504, 504, 504, 504, 504, 0, 0, 528, 528, 1784, 504, 504, 1787, 504, 504, 504, 504, 504, 504,
  /* 25937 */ 504, 504, 504, 504, 1800, 504, 0, 2525, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 2532, 528, 528,
  /* 25959 */ 528, 528, 528, 1396, 528, 528, 528, 1399, 528, 528, 528, 528, 528, 528, 504, 0, 3488, 0, 0, 0, 483, 483,
  /* 25981 */ 483, 483, 483, 786, 483, 483, 483, 483, 483, 483, 483, 483, 2074, 483, 483, 483, 483, 483, 483, 483, 504,
  /* 26002 */ 504, 504, 504, 1805, 504, 504, 504, 504, 504, 504, 504, 30029, 1815, 528, 528, 528, 528, 528, 528, 2244,
  /* 26022 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3212, 528, 528, 504, 0, 0, 528, 528, 1821, 528, 528,
  /* 26043 */ 528, 528, 528, 1827, 528, 528, 528, 528, 528, 528, 528, 504, 504, 676344, 0, 0, 0, 0, 0, 0, 528, 528,
  /* 26065 */ 1840, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 3278, 0, 1901, 528, 528, 528,
  /* 26086 */ 528, 528, 528, 528, 504, 504, 504, 0, 1913, 0, 0, 0, 0, 0, 0, 3029, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 660, 0,
  /* 26114 */ 0, 0, 0, 0, 1982, 0, 1984, 0, 0, 0, 0, 0, 0, 0, 0, 1564, 0, 0, 0, 0, 0, 0, 1568, 0, 0, 0, 0, 2027, 2028,
  /* 26143 */ 0, 0, 2030, 0, 0, 0, 0, 2035, 0, 0, 0, 0, 0, 0, 3043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2632, 0, 0, 0, 0, 0,
  /* 26174 */ 2067, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 504, 504, 504, 504,
  /* 26195 */ 504, 504, 2140, 504, 504, 2143, 504, 504, 504, 504, 504, 504, 2151, 504, 0, 2525, 0, 0, 0, 0, 528, 528,
  /* 26217 */ 528, 528, 528, 2530, 528, 528, 528, 528, 528, 528, 528, 2791, 2792, 528, 528, 528, 528, 2795, 528, 528,
  /* 26237 */ 528, 528, 528, 528, 2226, 528, 528, 2229, 528, 528, 528, 528, 528, 528, 2237, 528, 528, 528, 528, 528,
  /* 26257 */ 1430, 528, 528, 528, 528, 528, 1437, 528, 528, 528, 528, 504, 0, 504, 1451, 985, 0, 0, 0, 0, 0, 0, 0, 324,
  /* 26281 */ 0, 0, 254, 0, 0, 0, 0, 0, 0, 2300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2308, 0, 0, 0, 0, 0, 0, 1573, 0, 0, 0, 0, 0,
  /* 26313 */ 0, 0, 0, 0, 1046, 0, 1048, 0, 0, 324, 324, 2324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 587, 2350,
  /* 26342 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359, 0, 0, 0, 0, 1549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213544,
  /* 26374 */ 213544, 213544, 213544, 0, 0, 0, 2378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1979, 0, 0, 483, 2413, 483,
  /* 26400 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1699, 483, 483, 483, 483, 483, 2456, 483,
  /* 26421 */ 483, 483, 483, 483, 483, 0, 2460, 0, 0, 0, 0, 0, 0, 3220, 3221, 0, 3027, 0, 3225, 0, 0, 0, 0, 0, 0, 1987,
  /* 26447 */ 0, 0, 0, 0, 1564, 0, 0, 0, 0, 0, 0, 1940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1059, 0, 0, 0, 0, 0, 1065, 528, 528,
  /* 26477 */ 2576, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 955, 528, 528, 2586, 528, 528, 528,
  /* 26498 */ 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 2596, 0, 0, 0, 0, 1562, 0, 0, 1564, 0, 0, 0, 0, 1566, 1567, 0,
  /* 26524 */ 0, 0, 0, 0, 2015, 0, 0, 0, 0, 2020, 0, 0, 0, 0, 0, 0, 0, 2805760, 2834432, 0, 2904064, 0, 0, 0, 0,
  /* 26549 */ 3010560, 0, 0, 2600, 0, 0, 0, 0, 0, 0, 2605, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 692, 0, 0, 696, 2651,
  /* 26577 */ 2652, 0, 0, 0, 0, 2657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019, 0, 0, 0, 0, 0, 483, 2702, 483, 483, 483, 483,
  /* 26605 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1716, 483, 504, 504, 504, 504, 504, 2742, 504, 504, 504,
  /* 26626 */ 504, 504, 504, 504, 504, 504, 504, 504, 1762, 504, 504, 504, 504, 504, 2750, 504, 504, 504, 504, 504, 504,
  /* 26647 */ 504, 504, 504, 504, 504, 504, 504, 504, 0, 528, 528, 528, 2798, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 26668 */ 528, 528, 528, 528, 528, 957, 528, 528, 2830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
  /* 26695 */ 2870, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2373, 0, 483, 2896, 483, 483, 483, 483, 483, 483, 483,
  /* 26721 */ 483, 483, 483, 483, 483, 483, 483, 2079, 483, 483, 483, 483, 483, 2913, 483, 2915, 483, 483, 483, 483,
  /* 26741 */ 483, 483, 483, 483, 504, 504, 840, 504, 504, 504, 504, 504, 504, 2936, 504, 504, 504, 504, 504, 504, 504,
  /* 26762 */ 504, 504, 504, 504, 504, 504, 504, 504, 2152, 504, 504, 504, 504, 2954, 504, 2956, 504, 504, 504, 504,
  /* 26782 */ 504, 504, 504, 504, 528, 528, 528, 3197, 528, 528, 528, 3200, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 26802 */ 3432, 528, 528, 504, 0, 3436, 0, 0, 2977, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 26824 */ 528, 528, 1388, 528, 528, 528, 528, 2995, 528, 2997, 528, 528, 528, 528, 528, 528, 528, 528, 504, 504,
  /* 26844 */ 504, 0, 0, 0, 0, 0, 0, 3280, 0, 0, 0, 0, 0, 3027, 3284, 0, 3286, 0, 0, 0, 0, 0, 483, 767, 483, 483, 483,
  /* 26871 */ 781, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2918, 483, 483, 483, 483, 483, 504, 3293, 483, 3295,
  /* 26891 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 504, 3308, 504, 3310, 504, 504, 504, 504, 504, 504,
  /* 26912 */ 504, 504, 504, 504, 504, 528, 3323, 528, 528, 528, 528, 528, 1856, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 26933 */ 528, 528, 528, 3122, 528, 528, 528, 528, 3325, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504,
  /* 26954 */ 0, 0, 0, 0, 3467, 3340, 0, 0, 0, 3343, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483, 3352, 0, 3438, 0, 0, 0, 0,
  /* 26981 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1206, 483, 271, 272, 0, 0, 0, 0, 0,
  /* 27004 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138777, 0, 0, 73728, 77824, 0, 0, 0, 0, 382, 69632, 0, 382, 0, 0, 0, 0, 0,
  /* 27032 */ 0, 1589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 485, 507, 485, 485, 531, 507, 507, 507,
  /* 27058 */ 531, 507, 507, 507, 507, 507, 507, 507, 507, 1, 16386, 3, 82172, 82172, 254, 0, 0, 483, 483, 483, 483,
  /* 27079 */ 1705, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 0, 0, 0, 0, 0, 1801, 504, 504, 504, 504, 504,
  /* 27102 */ 504, 504, 504, 504, 504, 504, 30029, 0, 528, 528, 528, 528, 528, 528, 2257, 528, 528, 528, 528, 528, 528,
  /* 27123 */ 528, 528, 528, 528, 3463, 0, 0, 0, 0, 0, 483, 483, 2402, 483, 483, 483, 483, 2406, 483, 483, 483, 483,
  /* 27145 */ 483, 483, 483, 483, 483, 2433, 483, 483, 483, 2436, 483, 483, 0, 504, 504, 504, 504, 504, 2465, 504, 504,
  /* 27166 */ 504, 504, 2469, 504, 504, 504, 504, 504, 0, 2212, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 2801, 528,
  /* 27188 */ 528, 528, 2804, 528, 2806, 528, 528, 2534, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 27208 */ 528, 528, 1402, 528, 528, 528, 2587, 528, 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0, 0, 528, 528, 528,
  /* 27231 */ 528, 528, 528, 2531, 528, 528, 483, 483, 483, 3356, 483, 3358, 483, 483, 3360, 483, 504, 504, 504, 504,
  /* 27251 */ 504, 504, 504, 2729, 504, 504, 2733, 504, 504, 504, 504, 504, 504, 504, 3369, 504, 3371, 504, 504, 3373,
  /* 27271 */ 504, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3206, 528, 528, 3382, 528, 3384,
  /* 27291 */ 528, 528, 3386, 528, 504, 0, 0, 0, 0, 0, 0, 0, 0, 3080192, 0, 0, 0, 0, 0, 0, 0, 0, 1591, 0, 0, 0, 0, 0, 0,
  /* 27320 */ 0, 0, 1604, 1605, 0, 0, 0, 1608, 0, 0, 0, 0, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 0, 0, 0, 0,
  /* 27346 */ 0, 0, 1603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2660, 0, 0, 0, 2662, 0, 0, 0, 73728, 77824, 0, 276, 277, 277,
  /* 27373 */ 383, 69632, 385, 383, 386, 385, 386, 0, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1951, 0, 0, 0,
  /* 27401 */ 273, 403, 403, 405, 403, 412, 417, 429, 442, 442, 442, 442, 442, 442, 442, 442, 463, 463, 463, 476, 476,
  /* 27422 */ 477, 477, 463, 463, 486, 508, 486, 508, 486, 486, 532, 508, 508, 508, 532, 508, 508, 508, 508, 508, 508,
  /* 27443 */ 508, 508, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 0, 324, 324, 324, 625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27470 */ 1032, 0, 0, 0, 1036, 0, 0, 625, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 27492 */ 2090, 483, 483, 816, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3185, 963,
  /* 27513 */ 528, 528, 528, 528, 528, 889, 0, 0, 504, 504, 82172, 985, 0, 0, 0, 0, 0, 0, 3442, 483, 483, 483, 483, 483,
  /* 27537 */ 483, 483, 483, 483, 483, 2434, 483, 483, 483, 483, 483, 1182, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 27557 */ 1196, 483, 1201, 483, 483, 1205, 483, 0, 835, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 27578 */ 504, 906, 0, 528, 483, 1208, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2105,
  /* 27599 */ 483, 483, 1265, 835, 504, 504, 1269, 504, 1272, 504, 504, 504, 504, 504, 504, 504, 504, 1, 16386, 3,
  /* 27619 */ 82172, 82172, 254, 0, 0, 1286, 504, 1291, 504, 504, 1295, 504, 504, 1298, 504, 504, 504, 504, 504, 504,
  /* 27639 */ 504, 504, 1299, 504, 504, 504, 504, 504, 504, 504, 504, 1300, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 27659 */ 1316, 504, 504, 504, 504, 504, 504, 504, 504, 1334, 504, 504, 504, 504, 504, 504, 504, 504, 1355, 504,
  /* 27679 */ 30029, 1265, 909, 1359, 528, 528, 528, 1364, 528, 528, 528, 528, 528, 528, 528, 528, 1378, 528, 1383, 528,
  /* 27699 */ 528, 1387, 528, 528, 1390, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1401, 528,
  /* 27719 */ 528, 1583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1594, 0, 0, 0, 0, 0, 0, 1923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2670,
  /* 27750 */ 0, 0, 0, 483, 2674, 0, 1599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 284, 483, 483, 483, 483, 1640,
  /* 27778 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 1652, 483, 483, 483, 483, 483, 2405, 483, 483, 483, 483, 483,
  /* 27799 */ 483, 483, 483, 483, 483, 483, 2061, 483, 483, 2065, 483, 483, 483, 1686, 1687, 483, 483, 483, 483, 483,
  /* 27819 */ 483, 483, 483, 483, 483, 483, 483, 1235, 483, 483, 483, 1265, 0, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 27840 */ 504, 504, 504, 504, 1734, 504, 0, 2525, 0, 0, 0, 0, 528, 528, 528, 528, 2529, 528, 528, 528, 528, 504, 0,
  /* 27863 */ 504, 504, 985, 0, 0, 0, 0, 0, 0, 0, 0, 2109689, 16386, 3, 0, 0, 2187264, 0, 0, 528, 528, 528, 528, 1842,
  /* 27887 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3134, 0, 0, 0, 483, 483, 483, 483, 2109, 2110,
  /* 27909 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2115, 483, 2117, 483, 483, 2178, 504, 504, 504,
  /* 27929 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2191, 504, 504, 504, 504, 504, 1806, 1808, 504, 504,
  /* 27949 */ 504, 504, 504, 30029, 0, 528, 528, 528, 528, 528, 528, 2971, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 27970 */ 1846, 528, 528, 528, 528, 1850, 528, 504, 504, 504, 504, 2195, 2196, 504, 504, 504, 504, 504, 504, 504,
  /* 27990 */ 504, 504, 504, 504, 2148, 504, 504, 504, 504, 2264, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 28011 */ 528, 528, 2277, 528, 528, 528, 528, 528, 1907, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0, 0, 0, 2408448, 0,
  /* 28034 */ 0, 0, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 2281, 2282, 528, 528, 528, 528, 528,
  /* 28060 */ 528, 528, 528, 528, 528, 528, 3213, 528, 504, 0, 0, 483, 483, 2442, 483, 483, 483, 483, 483, 483, 483,
  /* 28081 */ 483, 483, 483, 483, 483, 483, 1220, 483, 483, 0, 0, 2665, 0, 0, 2668, 0, 0, 0, 0, 0, 0, 0, 2672, 483, 483,
  /* 28106 */ 483, 483, 483, 831, 483, 504, 504, 504, 504, 847, 504, 504, 504, 504, 504, 504, 1774, 504, 504, 504, 504,
  /* 28127 */ 504, 504, 504, 504, 504, 1356, 30029, 1265, 909, 528, 528, 528, 2868, 0, 0, 0, 0, 0, 0, 0, 0, 2877, 0, 0,
  /* 28151 */ 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2644, 0, 0, 0, 0, 0, 0, 483, 483, 3355, 483, 483, 483, 483,
  /* 28180 */ 483, 483, 483, 504, 3363, 504, 3364, 504, 504, 504, 504, 504, 883, 504, 504, 504, 504, 901, 504, 504, 504,
  /* 28201 */ 0, 528, 504, 3368, 504, 504, 504, 504, 504, 504, 504, 528, 3376, 528, 3377, 528, 528, 528, 528, 528, 528,
  /* 28222 */ 528, 2811, 528, 528, 528, 528, 528, 504, 504, 0, 3381, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0,
  /* 28245 */ 0, 0, 0, 0, 3170304, 2654208, 0, 2727936, 0, 0, 0, 0, 0, 3504, 483, 483, 483, 3506, 504, 504, 504, 3508,
  /* 28267 */ 528, 528, 528, 3510, 0, 0, 0, 0, 0, 1947, 1948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2785280, 0, 0, 0, 0, 0, 333,
  /* 28295 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
  /* 28328 */ 286, 0, 0, 73728, 77824, 0, 0, 0, 0, 333, 69632, 0, 333, 0, 0, 0, 393, 399, 0, 0, 406, 0, 333, 418, 430,
  /* 28353 */ 443, 443, 443, 443, 443, 443, 443, 443, 464, 464, 464, 464, 464, 464, 464, 464, 464, 487, 509, 487, 509,
  /* 28374 */ 487, 487, 533, 509, 509, 509, 533, 509, 509, 509, 509, 509, 509, 509, 509, 1, 16386, 3, 82172, 82172, 254,
  /* 28395 */ 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 729, 0, 483,
  /* 28426 */ 483, 483, 483, 483, 483, 483, 483, 795, 483, 483, 483, 483, 483, 0, 0, 0, 0, 504, 504, 504, 504, 504, 504,
  /* 28449 */ 504, 504, 2468, 504, 504, 504, 504, 504, 504, 866, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 28470 */ 504, 504, 0, 528, 528, 528, 528, 528, 2227, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3336,
  /* 28491 */ 504, 0, 0, 0, 0, 0, 1101, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1991, 0, 0, 0, 0, 0, 1019, 0, 1158,
  /* 28521 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 1959, 0, 0, 0,
  /* 28553 */ 0, 0, 0, 0, 0, 1967, 0, 0, 0, 0, 1172, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 1181, 483, 483, 483, 483,
  /* 28580 */ 1228, 483, 483, 1230, 483, 483, 1233, 483, 483, 483, 483, 483, 0, 0, 0, 0, 504, 504, 504, 504, 504, 504,
  /* 28602 */ 2136, 483, 1265, 835, 504, 504, 1270, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2188, 504,
  /* 28622 */ 504, 504, 504, 504, 504, 504, 504, 1310, 504, 504, 504, 504, 504, 504, 504, 1319, 504, 504, 1321, 504,
  /* 28642 */ 504, 504, 1325, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0, 0, 528, 528, 504, 504, 504,
  /* 28664 */ 504, 1349, 504, 504, 504, 504, 504, 30029, 1265, 909, 528, 528, 1362, 528, 528, 528, 528, 1889, 528, 528,
  /* 28684 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 1382, 528, 528, 528, 528, 0, 2039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28709 */ 0, 483, 483, 483, 483, 483, 1633, 483, 483, 483, 483, 2054, 483, 483, 483, 483, 2058, 483, 483, 483, 483,
  /* 28730 */ 483, 483, 483, 483, 2682, 483, 483, 2686, 483, 483, 483, 483, 504, 2138, 504, 504, 504, 504, 2142, 504,
  /* 28750 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 2187, 504, 504, 504, 504, 504, 528, 2224, 528, 528, 528, 528,
  /* 28771 */ 2228, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3121, 528, 528, 528, 528, 528, 483, 2401, 483,
  /* 28791 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2118, 483, 0, 504, 504, 504, 504, 2464,
  /* 28812 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2494, 504, 504, 504, 504, 0, 0, 2626, 0, 0, 0, 0,
  /* 28835 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2609, 0, 2690, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 28860 */ 483, 483, 483, 1242, 483, 483, 483, 2703, 483, 483, 483, 483, 483, 483, 483, 2709, 483, 483, 483, 483,
  /* 28880 */ 483, 483, 483, 2902, 483, 2904, 483, 483, 483, 483, 483, 483, 483, 2706, 483, 483, 483, 483, 483, 483,
  /* 28900 */ 483, 483, 1194, 483, 483, 483, 483, 1204, 483, 483, 504, 504, 504, 504, 2751, 504, 504, 504, 504, 504,
  /* 28920 */ 504, 504, 2757, 504, 504, 504, 504, 504, 504, 2930, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 28940 */ 3101, 504, 504, 504, 504, 504, 2785, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 28961 */ 528, 1836, 0, 0, 0, 2833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2007, 0, 0, 483, 483, 483, 483, 483,
  /* 28988 */ 3298, 483, 483, 483, 483, 483, 483, 483, 483, 504, 504, 836, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 29009 */ 504, 3313, 504, 504, 504, 504, 504, 504, 504, 504, 528, 528, 528, 3108, 528, 528, 528, 528, 528, 528, 528,
  /* 29030 */ 3113, 528, 528, 528, 528, 3328, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 3394, 0, 483,
  /* 29053 */ 483, 483, 483, 3357, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 3181, 504, 504, 504, 504, 504,
  /* 29074 */ 504, 504, 3370, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 29095 */ 528, 528, 528, 504, 528, 528, 3383, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 0, 0, 261, 0, 0, 0, 0, 0,
  /* 29121 */ 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 0, 287, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 318, 0, 285,
  /* 29152 */ 332, 288, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2332, 0, 0, 0, 0, 0, 0, 285, 0, 0, 331, 331, 363, 0,
  /* 29181 */ 288, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2045, 0, 0, 483, 483, 483, 483, 288, 0,
  /* 29208 */ 73728, 77824, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 1044, 1045, 0, 0, 0, 0, 0, 324, 324, 0, 0, 287,
  /* 29235 */ 285, 0, 0, 419, 431, 444, 444, 444, 454, 444, 454, 457, 444, 444, 465, 465, 465, 465, 465, 465, 465, 480,
  /* 29257 */ 480, 488, 510, 488, 510, 488, 488, 534, 510, 510, 510, 534, 510, 510, 510, 510, 510, 510, 510, 510, 1,
  /* 29278 */ 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 0, 607, 608, 0, 0, 0, 612, 0, 0, 0, 0, 0, 0, 0, 284, 359, 0, 0,
  /* 29305 */ 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 637, 0, 0, 0, 641, 0, 643,
  /* 29337 */ 0, 0, 0, 0, 0, 0, 0, 1049, 0, 0, 0, 0, 0, 0, 0, 0, 291, 341, 343, 0, 0, 0, 0, 0, 650, 0, 652, 653, 0, 0,
  /* 29367 */ 656, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 735, 0, 0, 0, 0, 0, 0, 715, 0, 727, 0,
  /* 29398 */ 741, 0, 0, 0, 0, 1922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2322, 0, 0, 0, 653, 0, 0, 735, 747, 0, 0, 749,
  /* 29428 */ 0, 0, 747, 747, 0, 0, 0, 715, 0, 0, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 727, 0, 759, 483, 483, 772, 483,
  /* 29456 */ 778, 483, 483, 792, 483, 802, 483, 807, 483, 483, 483, 483, 483, 832, 483, 504, 504, 504, 504, 504, 850,
  /* 29477 */ 504, 858, 504, 814, 817, 822, 483, 830, 483, 483, 504, 504, 504, 843, 504, 849, 504, 504, 863, 504, 504,
  /* 29498 */ 874, 504, 879, 504, 504, 887, 890, 895, 504, 903, 504, 504, 0, 528, 528, 528, 528, 528, 2243, 528, 2245,
  /* 29519 */ 528, 528, 528, 528, 528, 528, 528, 528, 1372, 528, 528, 528, 528, 528, 528, 528, 528, 528, 917, 528, 923,
  /* 29540 */ 528, 528, 937, 528, 528, 948, 528, 953, 528, 528, 961, 964, 969, 528, 977, 528, 528, 890, 0, 0, 504, 504,
  /* 29562 */ 82172, 985, 0, 0, 0, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 29580 */ 159744, 159744, 159744, 0, 0, 0, 0, 159744, 0, 1039, 0, 0, 1042, 1043, 0, 0, 0, 0, 1047, 0, 0, 0, 324,
  /* 29603 */ 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 632, 0, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 1207,
  /* 29633 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1223, 483, 1265, 835, 504, 504, 504,
  /* 29654 */ 504, 504, 504, 504, 504, 504, 1277, 504, 504, 504, 504, 504, 504, 2942, 504, 2944, 504, 504, 504, 504,
  /* 29674 */ 504, 504, 504, 504, 2745, 504, 504, 504, 504, 504, 504, 504, 504, 2754, 504, 504, 504, 504, 504, 504, 504,
  /* 29695 */ 504, 2765, 504, 504, 504, 0, 0, 528, 528, 504, 504, 504, 1292, 504, 504, 504, 1297, 504, 504, 504, 504,
  /* 29716 */ 504, 504, 504, 504, 1, 16386, 3, 82172, 82476, 254, 0, 0, 1343, 504, 504, 504, 504, 504, 504, 1353, 504,
  /* 29737 */ 504, 30029, 1265, 909, 528, 528, 528, 528, 528, 528, 528, 2984, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 29757 */ 528, 3000, 528, 528, 528, 528, 528, 504, 528, 1389, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 29778 */ 528, 528, 528, 1403, 528, 1405, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 29798 */ 1419, 528, 1445, 528, 528, 504, 0, 504, 504, 985, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29825 */ 294, 294, 0, 0, 0, 1498, 0, 0, 1501, 1502, 1503, 0, 1505, 1506, 0, 0, 0, 1510, 0, 0, 0, 0, 0, 1999, 0, 0,
  /* 29851 */ 0, 0, 0, 2005, 0, 0, 0, 0, 0, 0, 2380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2033, 0, 0, 0, 0, 0, 0, 0, 0, 1532,
  /* 29882 */ 0, 0, 1535, 0, 1537, 0, 0, 0, 0, 0, 1543, 1544, 0, 0, 1585, 1586, 0, 0, 0, 0, 0, 1592, 1593, 0, 1595, 0,
  /* 29908 */ 1596, 1597, 0, 0, 1609, 0, 0, 0, 1627, 1478, 1478, 1629, 483, 1631, 483, 1632, 483, 1634, 483, 483, 483,
  /* 29929 */ 1638, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1651, 483, 483, 483, 483, 483, 1187, 483, 483, 483,
  /* 29949 */ 483, 483, 483, 1202, 483, 483, 483, 483, 483, 483, 1675, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 29970 */ 2459, 0, 0, 0, 0, 0, 483, 483, 1655, 483, 483, 483, 483, 1659, 483, 1661, 483, 483, 483, 483, 483, 483,
  /* 29992 */ 483, 2431, 483, 483, 483, 483, 483, 483, 483, 483, 1193, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 30013 */ 1670, 1671, 1673, 483, 483, 483, 483, 483, 483, 1680, 1681, 483, 483, 483, 483, 483, 1215, 483, 483, 483,
  /* 30033 */ 483, 483, 483, 483, 483, 483, 483, 483, 1713, 483, 483, 483, 483, 1684, 1685, 483, 483, 483, 483, 483,
  /* 30053 */ 483, 483, 1693, 483, 1695, 483, 1698, 483, 483, 483, 483, 483, 1229, 483, 483, 483, 483, 483, 483, 483,
  /* 30073 */ 483, 483, 483, 483, 3068, 483, 483, 483, 483, 1265, 0, 1722, 504, 1724, 504, 504, 1726, 504, 1728, 504,
  /* 30093 */ 504, 504, 1732, 504, 504, 504, 504, 504, 884, 886, 504, 504, 897, 504, 504, 504, 504, 0, 528, 504, 1753,
  /* 30114 */ 504, 1755, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1764, 1765, 1767, 504, 1802, 504, 504, 504, 504,
  /* 30134 */ 504, 504, 504, 504, 504, 1813, 30029, 0, 1818, 528, 528, 528, 528, 528, 2256, 528, 528, 528, 528, 528,
  /* 30154 */ 528, 528, 528, 528, 528, 528, 2988, 528, 2990, 528, 528, 1820, 528, 528, 1822, 528, 1824, 528, 528, 528,
  /* 30174 */ 1828, 528, 528, 528, 528, 528, 528, 504, 0, 0, 504, 504, 82172, 985, 0, 0, 988, 528, 528, 528, 1841, 528,
  /* 30196 */ 528, 528, 528, 1845, 528, 528, 528, 528, 1849, 528, 1851, 528, 528, 528, 1871, 1872, 1873, 528, 528, 1876,
  /* 30216 */ 1877, 528, 528, 528, 528, 528, 528, 504, 0, 0, 836, 504, 82172, 985, 0, 0, 0, 528, 1885, 528, 1887, 528,
  /* 30238 */ 1890, 528, 528, 528, 528, 528, 528, 528, 1898, 528, 528, 528, 528, 528, 528, 2579, 528, 528, 528, 528,
  /* 30258 */ 528, 528, 528, 2584, 528, 0, 1934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 0, 0, 1956, 0, 0,
  /* 30286 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2622, 2623, 483, 483, 483, 2070, 483, 2072, 483, 483, 483, 483, 483,
  /* 30311 */ 483, 483, 483, 483, 483, 483, 2124, 2460, 0, 0, 0, 483, 2121, 2122, 483, 483, 0, 0, 0, 0, 504, 504, 504,
  /* 30334 */ 504, 504, 504, 504, 2467, 504, 504, 504, 504, 504, 504, 504, 504, 2154, 504, 2156, 504, 504, 504, 504,
  /* 30354 */ 504, 504, 504, 504, 504, 504, 504, 504, 0, 0, 528, 2769, 504, 2207, 2208, 504, 504, 0, 0, 0, 0, 528, 528,
  /* 30377 */ 528, 528, 528, 528, 528, 528, 1434, 528, 528, 528, 528, 528, 528, 528, 528, 1894, 1895, 528, 528, 528,
  /* 30397 */ 528, 528, 528, 528, 2240, 528, 2242, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504,
  /* 30417 */ 3338, 0, 3339, 528, 2293, 2294, 528, 528, 504, 504, 504, 1913, 0, 1915, 0, 1917, 0, 1919, 0, 0, 0, 0,
  /* 30439 */ 1958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2022, 0, 0, 0, 0, 2313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2323,
  /* 30470 */ 0, 0, 0, 0, 0, 2029, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2619, 0, 0, 0, 0, 0, 0, 2337, 0, 2339, 2340, 0, 0,
  /* 30500 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2391, 2339, 0, 0, 0, 0, 0, 2396, 0, 0,
  /* 30531 */ 0, 483, 483, 773, 777, 780, 483, 788, 483, 483, 803, 805, 808, 483, 483, 483, 483, 483, 483, 2404, 483,
  /* 30552 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 0, 0, 504, 504, 504, 483, 483, 483, 483, 2416, 483,
  /* 30573 */ 2418, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2060, 483, 2062, 483, 483, 483, 483, 2441, 483,
  /* 30593 */ 483, 483, 483, 483, 483, 483, 483, 2449, 483, 483, 483, 483, 483, 0, 0, 0, 0, 504, 504, 504, 504, 2134,
  /* 30615 */ 504, 504, 483, 483, 2454, 483, 483, 483, 483, 483, 483, 483, 483, 0, 2460, 0, 0, 0, 0, 0, 0, 253952, 0, 0,
  /* 30639 */ 253952, 253952, 0, 0, 0, 0, 0, 0, 0, 115113, 425, 425, 425, 425, 425, 425, 425, 425, 115113, 425, 425, 0,
  /* 30661 */ 0, 0, 0, 0, 504, 504, 504, 2501, 504, 504, 504, 2506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2173,
  /* 30683 */ 504, 504, 504, 504, 504, 504, 2514, 504, 504, 504, 504, 504, 504, 504, 2519, 504, 504, 504, 504, 504, 504,
  /* 30704 */ 504, 504, 1793, 504, 504, 504, 504, 504, 504, 504, 504, 2144, 504, 2146, 504, 504, 504, 504, 504, 2546,
  /* 30724 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2238, 528, 528, 528, 528, 2562,
  /* 30745 */ 528, 528, 528, 528, 2566, 528, 528, 528, 2571, 528, 528, 528, 528, 528, 528, 2790, 528, 528, 528, 528,
  /* 30765 */ 528, 528, 528, 528, 528, 528, 2814, 528, 528, 504, 504, 0, 0, 0, 0, 2666, 2667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30791 */ 483, 483, 3443, 483, 3444, 483, 483, 483, 483, 483, 2843, 0, 2844, 0, 2846, 0, 0, 0, 0, 2848, 0, 0, 0, 0,
  /* 30815 */ 0, 0, 0, 1057, 0, 0, 0, 0, 1062, 0, 0, 0, 0, 0, 2848, 0, 0, 2873, 2874, 0, 2876, 0, 0, 2879, 0, 0, 0,
  /* 30842 */ 2882, 483, 483, 483, 483, 2899, 483, 483, 483, 483, 483, 2905, 483, 483, 483, 483, 483, 0, 0, 0, 0, 504,
  /* 30864 */ 504, 504, 2133, 504, 504, 504, 504, 504, 504, 504, 504, 2929, 504, 504, 504, 504, 504, 2933, 504, 504,
  /* 30884 */ 504, 504, 504, 0, 2213, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 3388, 0, 0, 3391, 3392, 0, 0, 0,
  /* 30907 */ 504, 504, 504, 2939, 504, 504, 504, 504, 504, 2945, 504, 504, 2948, 504, 504, 504, 504, 504, 504, 3086,
  /* 30927 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2521, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 30948 */ 2955, 2957, 504, 504, 504, 2960, 504, 2962, 2963, 504, 528, 528, 528, 528, 528, 2268, 2269, 528, 528, 528,
  /* 30968 */ 528, 528, 528, 2276, 528, 528, 528, 528, 528, 528, 2589, 504, 504, 504, 0, 0, 0, 0, 0, 0, 528, 2527, 528,
  /* 30991 */ 528, 528, 528, 528, 528, 528, 528, 2246, 528, 528, 528, 528, 528, 2250, 528, 528, 528, 528, 2980, 528,
  /* 31011 */ 528, 528, 528, 528, 2986, 528, 528, 2989, 528, 528, 528, 528, 528, 528, 528, 3132, 528, 528, 528, 528,
  /* 31031 */ 504, 0, 0, 0, 2526, 0, 1816, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1829, 528, 528, 528, 528, 1835,
  /* 31053 */ 528, 3037, 0, 0, 3040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2621, 0, 0, 504, 504, 504, 504, 504, 3085,
  /* 31080 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2947, 504, 2949, 504, 504, 504, 504, 504, 504,
  /* 31100 */ 3096, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3103, 504, 504, 504, 3145, 0, 3027,
  /* 31120 */ 3147, 0, 0, 3150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2320, 0, 0, 0, 0, 0, 483, 483, 3176, 483, 483, 504, 504,
  /* 31147 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 528, 3239, 483, 483, 483,
  /* 31168 */ 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3254, 504, 504,
  /* 31189 */ 504, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3112, 528, 528, 528, 528, 528,
  /* 31210 */ 528, 528, 3269, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 504, 504, 82172, 0, 0, 0, 0, 483, 3354,
  /* 31233 */ 483, 483, 483, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 853, 504, 504, 3367, 504, 504, 504,
  /* 31254 */ 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 3380, 0, 3396, 0, 0, 3399, 3400, 3401, 483, 483,
  /* 31275 */ 483, 3404, 483, 3406, 483, 483, 483, 483, 483, 483, 1707, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 31295 */ 483, 3067, 483, 483, 483, 483, 483, 483, 3411, 3412, 3413, 504, 504, 504, 3416, 504, 3418, 504, 504, 504,
  /* 31315 */ 504, 3423, 3424, 3425, 528, 528, 528, 3428, 528, 3430, 528, 528, 528, 528, 3435, 0, 0, 0, 0, 0, 0, 2016,
  /* 31337 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598, 0, 0, 0, 0, 0, 3468, 483, 483, 3470, 483, 483, 483, 3474, 504, 504,
  /* 31363 */ 3476, 504, 504, 504, 3480, 528, 528, 528, 528, 528, 2296, 504, 504, 1913, 0, 1915, 0, 1917, 0, 1919, 0, 0,
  /* 31385 */ 0, 0, 1614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2620, 0, 0, 0, 528, 3482, 528, 528, 528, 3486, 504, 0, 0,
  /* 31413 */ 0, 0, 0, 483, 483, 483, 483, 3403, 483, 483, 483, 483, 483, 483, 483, 0, 0, 289, 290, 0, 0, 0, 0, 0, 0, 0,
  /* 31439 */ 0, 0, 0, 0, 0, 0, 2634, 0, 0, 0, 328, 0, 0, 0, 336, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2384, 0, 0, 0, 0,
  /* 31470 */ 0, 0, 373, 73728, 77824, 0, 0, 328, 328, 0, 69632, 328, 290, 387, 328, 387, 0, 0, 0, 0, 1971, 0, 0, 1973,
  /* 31494 */ 0, 0, 0, 0, 1978, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2663, 0, 387, 387, 0,
  /* 31525 */ 387, 413, 387, 0, 387, 451, 451, 451, 451, 451, 451, 451, 387, 387, 387, 387, 387, 387, 387, 387, 387,
  /* 31546 */ 489, 511, 489, 511, 489, 489, 535, 511, 511, 511, 535, 511, 511, 511, 511, 511, 511, 511, 511, 1, 16386,
  /* 31567 */ 3, 82172, 82172, 254, 0, 0, 867, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0, 528,
  /* 31589 */ 528, 528, 528, 528, 2536, 528, 528, 2539, 2540, 528, 528, 528, 528, 528, 2545, 528, 910, 528, 528, 528,
  /* 31609 */ 528, 528, 528, 941, 528, 528, 528, 528, 528, 528, 528, 528, 2230, 528, 2232, 528, 528, 528, 528, 528, 0,
  /* 31630 */ 1116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31663 */ 0, 2635, 0, 483, 483, 483, 1185, 483, 483, 483, 483, 483, 1197, 483, 483, 483, 483, 483, 483, 483, 2458,
  /* 31684 */ 483, 483, 483, 0, 0, 0, 2461, 0, 483, 1265, 835, 504, 504, 504, 504, 504, 504, 504, 1275, 504, 504, 504,
  /* 31706 */ 504, 504, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 504, 504, 504, 2592, 2593, 0, 0, 0, 0, 1287, 504,
  /* 31730 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2205, 528, 528, 528, 528, 1367, 528,
  /* 31751 */ 528, 528, 528, 528, 1379, 528, 528, 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2631, 0, 0,
  /* 31776 */ 0, 0, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 2829, 528, 528, 528, 1888, 528,
  /* 31804 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1848, 528, 528, 528, 528, 2575, 528, 528, 528, 528,
  /* 31825 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1418, 528, 0, 3469, 483, 483, 483, 483, 483, 483, 3475,
  /* 31846 */ 504, 504, 504, 504, 504, 504, 3481, 0, 0, 3505, 483, 483, 483, 3507, 504, 504, 504, 3509, 528, 528, 528,
  /* 31867 */ 0, 0, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483, 779, 483, 787, 483, 483, 483, 483, 483, 483,
  /* 31892 */ 483, 483, 2903, 483, 483, 483, 483, 483, 483, 483, 483, 2917, 483, 483, 2920, 483, 483, 483, 2923, 0, 0,
  /* 31913 */ 73728, 77824, 0, 0, 0, 0, 0, 69632, 0, 0, 388, 0, 388, 394, 0, 388, 388, 0, 388, 0, 388, 432, 445, 445,
  /* 31937 */ 445, 445, 445, 445, 445, 445, 445, 445, 445, 490, 512, 490, 512, 490, 490, 512, 490, 490, 536, 512, 512,
  /* 31958 */ 512, 536, 512, 512, 512, 512, 512, 512, 512, 512, 1, 16386, 3, 82172, 82172, 254, 0, 0, 992, 0, 0, 996,
  /* 31980 */ 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2358, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32012 */ 0, 361, 0, 1265, 1720, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2485,
  /* 32033 */ 2760, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0, 0, 528, 528, 528, 528, 528, 528, 2800,
  /* 32054 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 1375, 528, 528, 528, 528, 528, 528, 528, 2808, 528, 528, 528,
  /* 32075 */ 528, 528, 528, 528, 528, 528, 528, 528, 504, 504, 0, 2525, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528,
  /* 32098 */ 528, 528, 528, 2273, 528, 528, 528, 528, 528, 0, 2831, 0, 0, 0, 0, 0, 2837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32124 */ 139264, 139264, 139264, 139264, 139264, 139264, 139264, 0, 2855, 0, 0, 0, 0, 0, 2860, 0, 0, 0, 0, 0, 0, 0,
  /* 32146 */ 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2883, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 32171 */ 483, 483, 483, 483, 1263, 504, 504, 504, 504, 2940, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 32191 */ 2950, 528, 528, 528, 528, 2981, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2991, 528, 3127, 528,
  /* 32211 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 3393, 0, 3395, 3155, 0, 0, 3157, 0, 0, 0, 0,
  /* 32236 */ 0, 0, 483, 483, 483, 483, 483, 483, 3445, 483, 3446, 483, 483, 483, 483, 483, 3167, 483, 483, 483, 483,
  /* 32257 */ 483, 483, 483, 483, 3173, 483, 483, 483, 483, 483, 1641, 1642, 483, 483, 483, 483, 1649, 483, 483, 483,
  /* 32277 */ 483, 483, 483, 483, 3170, 483, 483, 483, 3171, 3172, 483, 483, 483, 483, 483, 504, 504, 3496, 3497, 504,
  /* 32297 */ 504, 528, 528, 3500, 3501, 528, 528, 0, 0, 0, 0, 0, 2302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1148, 0, 483,
  /* 32324 */ 483, 1180, 0, 0, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2841, 0, 0, 685, 0, 0, 685, 0, 0, 0, 0, 0,
  /* 32355 */ 685, 685, 0, 753, 0, 0, 0, 0, 0, 2327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1020, 0, 0, 0, 0, 528, 528, 528,
  /* 32384 */ 921, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1880, 528, 528, 1883, 528, 528, 528, 528,
  /* 32405 */ 978, 528, 504, 0, 0, 504, 504, 82172, 985, 0, 0, 0, 0, 0, 0, 270336, 0, 270336, 270336, 270336, 270336,
  /* 32426 */ 270336, 270336, 270336, 270336, 270336, 270336, 270336, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32449 */ 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 0, 0, 630, 631, 0, 0, 0, 0, 1084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32480 */ 0, 0, 2881, 0, 528, 528, 1426, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1833, 528,
  /* 32502 */ 528, 0, 0, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 504, 504,
  /* 32527 */ 504, 2516, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0, 2214, 528, 528, 3049, 0, 483,
  /* 32548 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2424, 483, 483, 483, 483, 3177, 483, 504,
  /* 32569 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 528, 528, 528, 0, 0, 73728, 77824, 0, 0, 380,
  /* 32591 */ 380, 0, 69632, 380, 0, 0, 380, 0, 395, 446, 446, 466, 474, 474, 474, 474, 474, 474, 481, 481, 491, 513,
  /* 32613 */ 491, 513, 491, 491, 537, 513, 513, 513, 537, 513, 513, 513, 513, 513, 513, 513, 513, 1, 16386, 3, 82172,
  /* 32634 */ 82172, 254, 0, 0, 620, 621, 0, 324, 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 633, 0, 744, 0, 0, 744, 0, 0, 0,
  /* 32662 */ 0, 0, 744, 744, 0, 0, 0, 724, 528, 528, 528, 528, 924, 528, 932, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 32685 */ 528, 1373, 1380, 528, 528, 528, 528, 528, 528, 528, 528, 528, 979, 528, 504, 0, 0, 504, 504, 82172, 985,
  /* 32706 */ 0, 0, 0, 0, 0, 0, 1126400, 0, 0, 0, 0, 0, 0, 1126400, 0, 0, 0, 0, 0, 0, 0, 1126400, 0, 1126400, 0, 0, 0,
  /* 32733 */ 0, 0, 0, 1015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 0, 1164, 0, 0, 0, 0, 0, 0, 0,
  /* 32765 */ 213418, 213418, 213418, 213418, 213418, 213418, 213418, 213418, 213418, 213418, 213418, 0, 0, 0, 0, 0,
  /* 32781 */ 483, 1209, 483, 483, 483, 483, 483, 483, 483, 483, 1218, 483, 483, 483, 483, 483, 0, 0, 0, 0, 504, 2131,
  /* 32803 */ 504, 504, 504, 504, 504, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 2222, 483, 1245, 483, 483, 1249, 483,
  /* 32825 */ 483, 483, 483, 483, 1255, 483, 483, 483, 1262, 483, 483, 483, 483, 483, 2417, 483, 2419, 483, 483, 483,
  /* 32845 */ 483, 2423, 483, 483, 483, 483, 483, 483, 2695, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1694,
  /* 32865 */ 483, 483, 483, 1700, 483, 483, 1265, 835, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1280,
  /* 32885 */ 504, 504, 504, 504, 504, 2141, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3192, 504, 504, 504,
  /* 32906 */ 504, 504, 1308, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1342, 504, 504, 504,
  /* 32927 */ 504, 1347, 504, 504, 504, 1354, 504, 504, 30029, 1265, 909, 528, 528, 528, 528, 528, 528, 528, 3210, 528,
  /* 32947 */ 528, 528, 528, 528, 504, 0, 0, 2214, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1860, 1861,
  /* 32969 */ 1863, 528, 528, 528, 528, 528, 528, 1391, 528, 528, 528, 528, 528, 528, 528, 528, 1400, 528, 528, 528,
  /* 32989 */ 528, 504, 0, 504, 504, 985, 1453, 0, 0, 0, 1459, 0, 0, 528, 528, 528, 528, 1429, 528, 528, 1433, 528, 528,
  /* 33012 */ 528, 528, 528, 1439, 528, 528, 528, 528, 528, 528, 2810, 528, 528, 528, 528, 528, 528, 504, 504, 2817,
  /* 33032 */ 528, 1446, 528, 528, 504, 0, 504, 504, 985, 0, 0, 0, 0, 0, 0, 0, 310, 311, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33060 */ 1548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1559, 0, 0, 1600, 0, 1602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33090 */ 2607, 0, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 0, 0, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 33115 */ 3059, 483, 504, 504, 504, 504, 1788, 504, 504, 504, 504, 504, 504, 1797, 504, 504, 504, 504, 504, 504,
  /* 33135 */ 1790, 504, 504, 504, 1796, 504, 504, 504, 504, 504, 0, 0, 0, 0, 528, 2217, 528, 528, 528, 528, 528, 504,
  /* 33157 */ 504, 504, 1913, 0, 1915, 0, 1917, 0, 1919, 0, 528, 1838, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 33179 */ 528, 528, 528, 528, 1441, 528, 528, 528, 1869, 528, 528, 528, 528, 1875, 528, 528, 528, 528, 528, 528,
  /* 33199 */ 528, 528, 504, 504, 504, 0, 0, 0, 1914, 0, 1884, 528, 528, 528, 528, 528, 528, 1893, 528, 528, 528, 528,
  /* 33221 */ 528, 528, 528, 528, 504, 504, 504, 0, 0, 1456, 0, 0, 528, 1902, 1904, 528, 528, 528, 528, 528, 1797, 504,
  /* 33243 */ 504, 0, 0, 0, 0, 0, 0, 0, 237568, 237568, 237568, 237568, 237568, 237568, 237568, 237568, 237568, 237568,
  /* 33261 */ 237568, 0, 0, 0, 0, 0, 0, 1970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1980, 0, 0, 0, 0, 1986, 0, 0, 0, 0, 0,
  /* 33292 */ 1990, 0, 0, 0, 0, 1993, 0, 0, 0, 2013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2827, 0, 0, 2051, 483, 483,
  /* 33321 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 2063, 483, 483, 483, 483, 483, 483, 2056, 483, 483, 2059,
  /* 33341 */ 483, 483, 483, 483, 483, 483, 483, 2098, 483, 483, 483, 483, 2103, 483, 483, 483, 2106, 483, 483, 483,
  /* 33361 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1666, 2120, 483, 483, 483, 483, 0, 0, 0, 0,
  /* 33383 */ 504, 504, 504, 504, 504, 2135, 504, 504, 504, 504, 504, 2157, 504, 2159, 504, 504, 504, 504, 504, 504,
  /* 33403 */ 504, 504, 504, 3375, 528, 528, 528, 528, 528, 528, 2192, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 33424 */ 504, 504, 504, 504, 504, 2498, 2206, 504, 504, 504, 504, 0, 0, 0, 0, 528, 528, 528, 528, 528, 2221, 528,
  /* 33446 */ 528, 528, 528, 528, 2550, 528, 528, 528, 2553, 528, 528, 2555, 528, 2556, 528, 528, 528, 528, 528, 2563,
  /* 33466 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1830, 528, 528, 528, 528, 528, 2278, 528, 528, 528, 528,
  /* 33487 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2291, 2292, 528, 528, 528, 528, 504, 504, 2298, 0,
  /* 33508 */ 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 0, 0, 0, 2360, 2361, 0, 0, 2364, 0, 0, 2367, 0, 0, 0, 0, 0, 0,
  /* 33537 */ 0, 2374, 2426, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2437, 483, 483, 483, 483, 483,
  /* 33558 */ 1689, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2460, 0, 504, 504, 504, 483, 483, 483, 483,
  /* 33579 */ 2444, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2452, 483, 483, 483, 2455, 483, 483, 483, 483,
  /* 33599 */ 483, 483, 483, 0, 0, 0, 0, 0, 0, 0, 242091, 242091, 242091, 242091, 242091, 242091, 242091, 242091,
  /* 33617 */ 242091, 242091, 242091, 0, 0, 0, 0, 0, 0, 504, 2462, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 33638 */ 504, 504, 504, 1320, 504, 504, 504, 504, 504, 504, 2489, 504, 504, 504, 504, 504, 504, 504, 2495, 504,
  /* 33658 */ 504, 504, 504, 504, 504, 3097, 504, 3099, 504, 504, 504, 504, 504, 504, 504, 504, 2160, 504, 504, 504,
  /* 33678 */ 504, 504, 2164, 504, 504, 504, 504, 2502, 504, 504, 504, 504, 504, 504, 2509, 504, 504, 504, 504, 504, 0,
  /* 33699 */ 0, 0, 0, 528, 528, 528, 528, 2220, 528, 528, 528, 528, 528, 2549, 528, 528, 528, 528, 528, 528, 2554, 528,
  /* 33721 */ 528, 528, 528, 528, 504, 504, 504, 0, 1456, 0, 1462, 0, 1468, 0, 1474, 528, 528, 2560, 528, 528, 528, 528,
  /* 33743 */ 528, 528, 2567, 528, 528, 528, 528, 528, 528, 504, 0, 0, 840, 984, 82172, 985, 0, 0, 0, 2574, 528, 528,
  /* 33765 */ 528, 528, 528, 528, 528, 528, 528, 528, 2582, 528, 528, 528, 2585, 0, 0, 2638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33790 */ 0, 2648, 0, 0, 0, 0, 0, 2365, 0, 0, 0, 0, 0, 0, 0, 2372, 0, 0, 0, 0, 0, 2379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33821 */ 0, 0, 1524, 0, 0, 0, 0, 2675, 483, 483, 483, 483, 483, 2680, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 33844 */ 483, 2076, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2714, 483, 483, 483, 483, 483, 483, 0, 0, 504,
  /* 33865 */ 504, 2722, 504, 504, 504, 504, 504, 2762, 504, 504, 504, 504, 504, 504, 0, 0, 528, 528, 528, 528, 528,
  /* 33886 */ 528, 2983, 528, 2985, 528, 528, 528, 528, 528, 528, 528, 528, 2999, 528, 528, 3002, 528, 528, 528, 504,
  /* 33906 */ 2770, 528, 528, 528, 528, 528, 2775, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1374, 528, 528, 528,
  /* 33926 */ 528, 528, 528, 0, 0, 2820, 2821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2851, 0, 0, 0, 0, 0, 2857, 0, 0,
  /* 33955 */ 0, 0, 2861, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 139264, 0, 2869, 0, 0, 2872, 0, 0, 0, 0, 0, 0,
  /* 33985 */ 0, 0, 0, 0, 0, 0, 2633, 0, 0, 0, 483, 483, 483, 483, 2887, 483, 483, 483, 483, 2891, 483, 483, 483, 483,
  /* 34009 */ 483, 483, 483, 2681, 483, 2684, 483, 483, 483, 483, 2689, 483, 483, 2897, 483, 483, 483, 483, 483, 483,
  /* 34029 */ 483, 483, 483, 483, 483, 483, 483, 483, 2701, 483, 483, 2911, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 34050 */ 483, 483, 483, 483, 504, 504, 504, 504, 3365, 504, 504, 504, 504, 2927, 504, 504, 504, 504, 2931, 504,
  /* 34070 */ 504, 504, 504, 504, 504, 504, 504, 2185, 504, 504, 504, 504, 504, 504, 504, 504, 894, 504, 504, 504, 504,
  /* 34091 */ 504, 0, 528, 2937, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2737, 504,
  /* 34112 */ 2952, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 528, 3263, 528, 528, 3265, 528,
  /* 34132 */ 528, 528, 2968, 528, 528, 528, 528, 2972, 528, 528, 528, 528, 528, 528, 528, 528, 2271, 528, 528, 528,
  /* 34152 */ 528, 528, 528, 528, 504, 2591, 504, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 34175 */ 2233, 528, 528, 528, 528, 528, 2978, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 34196 */ 528, 2807, 528, 2993, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0,
  /* 34219 */ 0, 3138, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2859008, 0, 0, 0, 0, 0, 0, 3163, 483, 483, 483,
  /* 34247 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 3174, 528, 528, 528, 528, 3459, 528, 3460, 528,
  /* 34267 */ 528, 528, 504, 0, 0, 0, 0, 0, 0, 0, 2392064, 0, 0, 2568192, 0, 0, 0, 0, 2826240, 483, 483, 504, 504, 528,
  /* 34291 */ 528, 3515, 3516, 3517, 3518, 0, 483, 504, 528, 0, 483, 483, 483, 483, 483, 3473, 483, 504, 504, 504, 504,
  /* 34312 */ 504, 3479, 504, 528, 0, 0, 0, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 483,
  /* 34337 */ 514, 483, 483, 538, 514, 514, 514, 538, 514, 514, 514, 514, 514, 514, 514, 555, 514, 514, 1, 16386, 3,
  /* 34358 */ 82172, 82172, 254, 0, 0, 0, 0, 1131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 269, 0, 1322, 504, 504,
  /* 34385 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3105, 483, 483, 483, 483, 2055, 483, 483,
  /* 34406 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 0, 0, 2128, 0, 0, 504, 504, 2139, 504, 504, 504, 504, 504,
  /* 34428 */ 504, 504, 504, 504, 504, 504, 504, 504, 2150, 504, 504, 528, 528, 2225, 528, 528, 528, 528, 528, 528, 528,
  /* 34449 */ 528, 528, 528, 528, 528, 528, 1866, 528, 528, 340, 0, 73728, 77824, 364, 0, 0, 0, 0, 69632, 0, 0, 389, 0,
  /* 34472 */ 389, 0, 0, 0, 0, 2014, 0, 0, 0, 0, 2019, 0, 0, 0, 0, 2024, 0, 0, 0, 0, 1946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34503 */ 0, 0, 2671, 0, 483, 483, 400, 389, 389, 0, 389, 0, 389, 434, 447, 447, 447, 447, 447, 447, 447, 447, 447,
  /* 34526 */ 447, 447, 492, 515, 492, 515, 492, 492, 515, 492, 492, 539, 515, 515, 515, 539, 515, 515, 515, 515, 515,
  /* 34547 */ 515, 515, 515, 1, 16386, 3, 82172, 82172, 254, 0, 0, 667, 0, 0, 0, 0, 667, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34574 */ 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 667, 585, 483, 818,
  /* 34602 */ 483, 483, 483, 483, 483, 504, 504, 837, 504, 504, 504, 852, 504, 504, 504, 504, 504, 1327, 504, 504, 504,
  /* 34623 */ 504, 504, 504, 504, 504, 504, 504, 504, 2746, 504, 504, 504, 504, 528, 911, 528, 528, 528, 926, 528, 528,
  /* 34644 */ 528, 528, 528, 528, 528, 528, 528, 528, 1414, 528, 528, 528, 528, 528, 965, 528, 528, 528, 528, 528, 891,
  /* 34665 */ 0, 0, 837, 504, 252, 985, 0, 0, 988, 0, 0, 0, 1916, 0, 992, 0, 0, 0, 1918, 0, 996, 0, 0, 0, 0, 0, 0,
  /* 34692 */ 3108864, 0, 0, 0, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 266240, 266240,
  /* 34718 */ 266240, 992, 0, 0, 996, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1007, 1008, 0, 1007, 0, 0, 0, 0, 1078, 0, 0, 0,
  /* 34745 */ 0, 0, 0, 483, 1179, 483, 483, 483, 483, 483, 2429, 483, 483, 483, 483, 483, 483, 2435, 483, 483, 483, 483,
  /* 34767 */ 483, 483, 2705, 483, 483, 483, 2708, 483, 2710, 483, 483, 483, 483, 483, 483, 2430, 483, 483, 483, 483,
  /* 34787 */ 483, 483, 483, 483, 483, 504, 3248, 504, 504, 3250, 504, 504, 483, 483, 483, 1212, 483, 483, 483, 483,
  /* 34807 */ 483, 483, 483, 483, 483, 483, 483, 483, 1697, 483, 483, 483, 1244, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 34828 */ 483, 483, 483, 1258, 483, 483, 483, 483, 483, 483, 2446, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 34849 */ 1677, 483, 483, 483, 483, 483, 483, 1265, 835, 504, 1268, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 34869 */ 504, 1281, 1288, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1302, 504, 504, 504, 504, 504, 0, 0, 0, 0,
  /* 34891 */ 528, 528, 528, 2219, 528, 528, 528, 504, 1323, 504, 504, 504, 504, 504, 504, 504, 1336, 504, 504, 504,
  /* 34911 */ 504, 504, 504, 504, 3098, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2959, 504, 504, 504, 504, 504, 528,
  /* 34932 */ 528, 528, 528, 528, 1394, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1415, 528, 528, 528, 528,
  /* 34953 */ 528, 528, 528, 1428, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1442, 1265, 1720, 504, 504,
  /* 34973 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1735, 1736, 504, 504, 504, 504, 1743, 504, 504,
  /* 34993 */ 504, 504, 504, 504, 504, 504, 504, 504, 1761, 504, 504, 504, 504, 504, 504, 1785, 504, 504, 504, 504, 504,
  /* 35014 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 1751, 504, 528, 1839, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 35035 */ 528, 528, 528, 528, 528, 528, 1834, 528, 528, 1853, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 35056 */ 528, 528, 528, 1899, 528, 0, 0, 0, 1997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180224, 180224, 180224,
  /* 35081 */ 483, 483, 2107, 483, 483, 483, 483, 483, 2112, 483, 483, 483, 483, 483, 483, 483, 1190, 483, 483, 483,
  /* 35101 */ 483, 483, 483, 483, 483, 483, 2707, 483, 483, 483, 483, 483, 483, 504, 504, 2193, 504, 504, 504, 504, 504,
  /* 35122 */ 2198, 504, 504, 504, 504, 504, 504, 504, 504, 2479, 504, 2481, 504, 504, 504, 504, 504, 528, 528, 2279,
  /* 35142 */ 528, 528, 528, 528, 528, 2284, 528, 528, 528, 528, 528, 528, 528, 528, 2552, 528, 528, 528, 528, 528, 528,
  /* 35163 */ 528, 528, 2565, 528, 528, 528, 528, 528, 528, 2573, 0, 2351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35189 */ 367, 0, 483, 483, 483, 2415, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2077, 483, 483,
  /* 35210 */ 483, 0, 0, 0, 2601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 504, 504, 504, 504, 2726, 504,
  /* 35237 */ 504, 504, 504, 504, 504, 2734, 504, 504, 504, 504, 504, 504, 2158, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 35258 */ 504, 504, 2200, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2941, 504, 504, 504, 504, 504, 504, 504,
  /* 35279 */ 504, 504, 504, 1795, 504, 504, 504, 504, 504, 483, 483, 483, 3075, 483, 483, 483, 483, 483, 483, 504, 504,
  /* 35300 */ 504, 504, 504, 504, 3452, 504, 3453, 504, 504, 504, 528, 528, 528, 528, 528, 528, 528, 3429, 528, 3431,
  /* 35320 */ 528, 528, 528, 504, 0, 0, 0, 0, 0, 0, 2366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1927, 1928, 0, 0, 0, 0, 483,
  /* 35348 */ 483, 3449, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3456, 528, 528, 528, 528, 528, 2578,
  /* 35368 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1436, 528, 528, 528, 528, 528, 483, 483, 504, 3495, 504,
  /* 35389 */ 504, 504, 504, 528, 3499, 528, 528, 528, 528, 0, 0, 0, 0, 0, 2392, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 3052,
  /* 35415 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 0, 0, 504, 2721, 504, 0, 0, 0, 298, 0, 0, 0, 0, 0,
  /* 35440 */ 0, 0, 0, 0, 0, 0, 0, 0, 2715648, 0, 0, 345, 0, 73728, 77824, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 396,
  /* 35467 */ 420, 420, 467, 467, 467, 467, 467, 467, 467, 467, 467, 493, 516, 493, 516, 493, 493, 540, 516, 516, 516,
  /* 35488 */ 540, 516, 516, 516, 516, 516, 516, 516, 516, 1, 16386, 3, 82172, 82476, 254, 0, 0, 868, 504, 504, 504,
  /* 35509 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0, 528, 528, 528, 528, 528, 2774, 528, 528, 528, 528,
  /* 35530 */ 528, 528, 2782, 528, 528, 528, 528, 528, 528, 528, 3461, 3462, 528, 504, 0, 0, 3465, 0, 0, 0, 1130, 0, 0,
  /* 35553 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 263, 483, 483, 1246, 483, 483, 483, 483, 483, 1253, 483, 483,
  /* 35578 */ 483, 483, 483, 483, 483, 1251, 483, 483, 483, 483, 483, 483, 1261, 483, 483, 1265, 835, 504, 504, 504,
  /* 35598 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 1282, 504, 1345, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 35618 */ 30029, 1265, 909, 528, 528, 528, 528, 528, 528, 936, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2259,
  /* 35638 */ 528, 528, 528, 528, 528, 528, 0, 0, 1466, 0, 0, 0, 1472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0,
  /* 35666 */ 0, 483, 1654, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1664, 483, 483, 483, 483, 483, 1706,
  /* 35687 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 1717, 504, 1737, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 35708 */ 1748, 504, 504, 504, 504, 504, 504, 2171, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2755, 504,
  /* 35728 */ 504, 504, 504, 504, 1769, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3195,
  /* 35749 */ 528, 528, 528, 1854, 528, 528, 528, 528, 528, 528, 528, 528, 1865, 528, 528, 528, 528, 528, 528, 1369,
  /* 35769 */ 528, 528, 528, 528, 528, 528, 1384, 528, 528, 0, 0, 0, 1985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35795 */ 2789376, 0, 0, 483, 483, 483, 483, 2071, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 0, 2128,
  /* 35816 */ 504, 504, 504, 504, 504, 2155, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2175, 504,
  /* 35837 */ 504, 528, 528, 2241, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1881, 528, 528, 0,
  /* 35858 */ 0, 3039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 504, 504, 504, 3095, 504, 504, 504, 504, 504,
  /* 35885 */ 504, 504, 504, 504, 504, 504, 504, 904, 504, 0, 528, 0, 3281, 0, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35911 */ 483, 3051, 483, 483, 483, 3054, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1711, 483, 483, 483, 483,
  /* 35931 */ 483, 483, 483, 483, 483, 3296, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504,
  /* 35952 */ 504, 504, 504, 504, 3311, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 3379,
  /* 35973 */ 528, 528, 3326, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 483, 3491, 483, 483,
  /* 35996 */ 300, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 299, 0, 0, 300, 0, 0, 0, 0, 346, 0, 0, 0, 0, 349, 300, 346, 0, 0, 0,
  /* 36026 */ 73728, 77824, 0, 0, 0, 0, 0, 69632, 0, 299, 0, 0, 0, 0, 0, 0, 2604, 0, 0, 0, 0, 0, 0, 2608, 0, 0, 401, 0,
  /* 36054 */ 0, 408, 0, 299, 0, 436, 436, 452, 452, 452, 452, 452, 452, 452, 436, 436, 436, 436, 436, 436, 436, 436,
  /* 36076 */ 436, 494, 517, 494, 517, 494, 494, 541, 517, 517, 517, 541, 517, 517, 517, 517, 517, 517, 517, 517, 1,
  /* 36097 */ 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 590, 591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602, 0, 0, 0, 0, 2041, 0,
  /* 36125 */ 0, 0, 0, 0, 0, 0, 2047, 483, 483, 483, 483, 483, 483, 2889, 483, 483, 483, 483, 483, 2893, 483, 483, 483,
  /* 36148 */ 483, 483, 483, 1690, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1646, 483, 483, 483, 483, 483, 483, 0,
  /* 36169 */ 0, 587, 0, 717, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0, 0, 0, 0, 2614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3032, 0, 0,
  /* 36200 */ 0, 3035, 3036, 730, 0, 0, 0, 0, 0, 738, 0, 721, 0, 0, 740, 0, 591, 0, 717, 587, 755, 0, 717, 0, 0, 0, 0,
  /* 36227 */ 0, 761, 0, 0, 0, 0, 721, 587, 765, 0, 483, 768, 483, 483, 483, 783, 483, 483, 798, 483, 483, 483, 809,
  /* 36250 */ 483, 483, 483, 483, 483, 2445, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2408, 483, 483,
  /* 36270 */ 2411, 2412, 483, 483, 483, 827, 483, 483, 483, 504, 504, 838, 504, 504, 504, 854, 504, 504, 504, 504, 504,
  /* 36291 */ 1328, 504, 504, 1335, 504, 504, 504, 504, 504, 504, 504, 504, 3260, 504, 504, 3262, 528, 528, 528, 528,
  /* 36311 */ 869, 504, 504, 504, 504, 882, 504, 504, 504, 504, 900, 504, 504, 504, 0, 528, 528, 528, 528, 528, 2799,
  /* 36332 */ 528, 528, 528, 528, 528, 528, 528, 2805, 528, 528, 528, 528, 528, 528, 2537, 528, 528, 528, 528, 528,
  /* 36352 */ 2542, 528, 528, 528, 528, 528, 528, 1843, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2285, 528, 528,
  /* 36372 */ 528, 528, 528, 528, 528, 912, 528, 528, 528, 928, 528, 528, 943, 528, 528, 528, 528, 956, 528, 528, 528,
  /* 36393 */ 528, 528, 528, 3119, 528, 528, 528, 528, 528, 528, 528, 528, 3125, 528, 528, 974, 528, 528, 528, 504, 0,
  /* 36414 */ 0, 838, 504, 82172, 985, 0, 0, 0, 0, 0, 0, 2408448, 2416640, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 1988, 0,
  /* 36439 */ 0, 0, 0, 0, 0, 0, 0, 0, 1126400, 1126400, 0, 0, 1126400, 0, 0, 1009, 1010, 1011, 1012, 0, 0, 0, 0, 0, 0,
  /* 36464 */ 0, 0, 0, 0, 0, 0, 283, 284, 0, 0, 0, 1052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483,
  /* 36494 */ 483, 483, 483, 1066, 0, 0, 0, 0, 0, 0, 0, 0, 1075, 0, 0, 0, 0, 0, 0, 0, 1089, 666, 0, 0, 0, 1039, 0, 0, 0,
  /* 36523 */ 0, 0, 1117, 0, 0, 0, 0, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0,
  /* 36555 */ 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 483, 483, 483, 776,
  /* 36584 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2422, 483, 483, 483, 2425, 483, 1265, 835, 504,
  /* 36604 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1283, 1421, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 36625 */ 528, 528, 528, 528, 528, 528, 528, 3005, 0, 1514, 0, 0, 1517, 0, 1519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
  /* 36650 */ 297, 0, 0, 0, 0, 0, 0, 1570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 483, 1636, 483, 483, 483,
  /* 36679 */ 483, 483, 483, 483, 483, 1647, 483, 483, 483, 483, 483, 0, 0, 0, 2129, 504, 504, 504, 504, 504, 504, 504,
  /* 36701 */ 2184, 504, 504, 504, 504, 2189, 504, 504, 504, 1265, 0, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1730,
  /* 36722 */ 504, 504, 504, 504, 504, 504, 2505, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1301, 1303, 504, 504,
  /* 36742 */ 504, 504, 504, 504, 504, 504, 504, 1741, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3321,
  /* 36763 */ 528, 528, 528, 504, 1770, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1782,
  /* 36783 */ 1783, 1837, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2262, 2263, 1969,
  /* 36803 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1081, 483, 483, 483, 483, 2095, 483, 483, 483, 483, 483, 483,
  /* 36830 */ 483, 483, 483, 483, 483, 0, 2460, 0, 0, 0, 504, 504, 504, 504, 2181, 504, 504, 504, 504, 504, 504, 504,
  /* 36852 */ 504, 504, 504, 504, 504, 30029, 0, 528, 528, 528, 528, 528, 528, 2267, 528, 528, 528, 528, 528, 528, 528,
  /* 36873 */ 528, 528, 528, 528, 1831, 1832, 528, 528, 528, 0, 0, 2390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2398, 0, 483, 483,
  /* 36898 */ 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 528, 3106, 528, 528, 528, 3109, 528, 528, 528,
  /* 36919 */ 528, 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0, 2597, 483, 483, 483, 2443, 483, 483, 483, 483, 483,
  /* 36941 */ 2448, 483, 483, 483, 483, 483, 483, 483, 2696, 2697, 483, 483, 483, 483, 2700, 483, 483, 504, 504, 2474,
  /* 36961 */ 2475, 504, 504, 504, 504, 504, 2480, 504, 2482, 504, 504, 504, 504, 504, 504, 2518, 504, 504, 504, 504,
  /* 36981 */ 504, 504, 504, 504, 504, 1811, 504, 504, 30029, 1816, 528, 528, 2486, 504, 504, 504, 504, 504, 504, 504,
  /* 37001 */ 504, 2492, 504, 504, 504, 504, 504, 504, 1313, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2493,
  /* 37021 */ 504, 504, 504, 504, 504, 504, 504, 2500, 504, 504, 504, 504, 504, 504, 2508, 504, 504, 504, 504, 504,
  /* 37041 */ 2513, 528, 2547, 528, 528, 528, 528, 2551, 528, 528, 528, 528, 528, 528, 528, 528, 2557, 2610, 0, 0, 0, 0,
  /* 37063 */ 0, 0, 0, 2616, 2617, 2618, 0, 0, 0, 0, 0, 0, 0, 2883584, 0, 0, 0, 2428928, 0, 2830336, 0, 0, 0, 2637, 0,
  /* 37088 */ 2639, 0, 0, 0, 2642, 0, 0, 2645, 0, 0, 0, 0, 0, 0, 0, 3072000, 3092480, 3096576, 0, 0, 0, 0, 3178496, 0,
  /* 37112 */ 2664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2673, 483, 483, 483, 483, 483, 2679, 483, 483, 483, 483, 483,
  /* 37138 */ 483, 2687, 483, 483, 483, 483, 483, 483, 2457, 483, 483, 483, 483, 0, 2460, 0, 0, 0, 0, 0, 0, 3345, 0, 0,
  /* 37162 */ 0, 0, 483, 483, 483, 483, 483, 483, 791, 483, 483, 483, 483, 483, 483, 483, 483, 2718, 483, 483, 0, 0,
  /* 37184 */ 504, 504, 504, 483, 2691, 483, 483, 2694, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1234,
  /* 37204 */ 483, 483, 483, 483, 483, 483, 483, 483, 2704, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1257,
  /* 37225 */ 483, 483, 483, 483, 483, 483, 483, 2713, 483, 483, 2716, 483, 483, 2719, 483, 0, 0, 2720, 504, 504, 504,
  /* 37246 */ 504, 504, 1350, 504, 504, 504, 504, 30029, 1265, 909, 528, 1360, 528, 2738, 504, 504, 2741, 504, 504, 504,
  /* 37266 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 905, 504, 0, 528, 504, 504, 504, 504, 504, 2752, 504, 504,
  /* 37287 */ 504, 504, 504, 504, 504, 504, 504, 504, 1812, 504, 30029, 0, 528, 528, 504, 504, 504, 504, 2761, 504, 504,
  /* 37308 */ 2764, 504, 504, 2767, 504, 0, 0, 2768, 528, 528, 528, 528, 528, 2809, 528, 528, 2812, 528, 528, 2815, 528,
  /* 37329 */ 504, 504, 0, 2525, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 2533, 528, 2786, 528, 528, 2789,
  /* 37351 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2234, 528, 528, 528, 528, 0, 0, 0, 2871, 0, 0, 0,
  /* 37374 */ 0, 0, 0, 2878, 0, 0, 2880, 0, 0, 0, 0, 0, 2613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2385, 0, 0, 0, 0, 483,
  /* 37404 */ 483, 2885, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1221, 483, 483, 2910, 483,
  /* 37424 */ 483, 2912, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 504, 504, 504, 3080, 504, 504, 504,
  /* 37444 */ 2925, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2176, 2177, 2951, 504, 504,
  /* 37464 */ 2953, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 528, 528, 528, 528, 3378, 528, 528, 528,
  /* 37484 */ 2966, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2290, 528, 2992, 528, 528,
  /* 37504 */ 2994, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 3464, 0, 3466, 0, 0, 0, 3007, 0,
  /* 37526 */ 3009, 0, 0, 0, 3013, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 159744, 0, 0, 3061, 483, 483, 483, 483, 483,
  /* 37553 */ 3065, 483, 483, 483, 483, 483, 483, 483, 3070, 483, 483, 483, 483, 483, 2715, 483, 483, 483, 483, 483, 0,
  /* 37574 */ 0, 504, 504, 504, 504, 504, 504, 2466, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3261, 504, 528, 528,
  /* 37595 */ 528, 528, 528, 504, 3082, 3083, 504, 504, 504, 504, 3087, 3088, 504, 504, 504, 504, 504, 3092, 504, 504,
  /* 37615 */ 504, 504, 504, 2170, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0, 0, 909, 528, 528, 528, 3115,
  /* 37636 */ 3116, 528, 528, 528, 528, 528, 3120, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2973, 528, 528, 528,
  /* 37656 */ 528, 528, 528, 3126, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 3136, 0, 0, 3027,
  /* 37678 */ 0, 0, 3149, 0, 0, 0, 0, 0, 0, 0, 3153, 0, 0, 0, 0, 0, 2629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1165, 0, 0,
  /* 37709 */ 0, 0, 3186, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2204, 504, 0, 3228,
  /* 37731 */ 0, 0, 0, 0, 0, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 810, 483, 483, 483, 3241, 483,
  /* 37754 */ 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 504, 2958, 504, 504, 2961, 504, 504, 504,
  /* 37774 */ 2964, 504, 504, 504, 504, 3256, 504, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 528, 3110,
  /* 37794 */ 3111, 528, 528, 528, 528, 0, 0, 3282, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 3471, 3472,
  /* 37819 */ 483, 483, 504, 504, 504, 3477, 3478, 504, 504, 528, 483, 3294, 483, 483, 483, 483, 3299, 483, 483, 483,
  /* 37839 */ 483, 3304, 483, 483, 504, 504, 528, 528, 0, 483, 504, 528, 0, 483, 504, 528, 0, 483, 504, 528, 0, 0, 0, 0,
  /* 37863 */ 0, 0, 0, 0, 0, 0, 0, 503, 526, 503, 526, 503, 3309, 504, 504, 504, 504, 3314, 504, 504, 504, 504, 3319,
  /* 37886 */ 504, 504, 528, 528, 3324, 528, 528, 528, 528, 3329, 528, 528, 528, 528, 3334, 528, 528, 504, 0, 0, 0, 0,
  /* 37908 */ 0, 0, 2945024, 0, 0, 0, 0, 0, 0, 2478080, 0, 0, 0, 0, 3341, 0, 0, 0, 0, 0, 3347, 0, 0, 483, 483, 483, 483,
  /* 37935 */ 483, 782, 483, 483, 797, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 3372, 504, 504, 3374, 528, 528,
  /* 37956 */ 528, 528, 528, 528, 528, 528, 3133, 528, 528, 528, 504, 0, 0, 0, 528, 528, 528, 528, 3385, 528, 528, 3387,
  /* 37978 */ 504, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 126976, 126976, 0, 0, 0, 528, 528, 3483, 3484, 528, 528, 504, 0,
  /* 38003 */ 0, 0, 0, 0, 483, 483, 483, 483, 483, 785, 483, 483, 483, 483, 483, 483, 483, 483, 1692, 483, 483, 483,
  /* 38025 */ 483, 483, 483, 1701, 483, 483, 504, 504, 528, 528, 0, 483, 504, 528, 0, 483, 504, 528, 3523, 3524, 3525,
  /* 38046 */ 3526, 0, 483, 504, 528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2034, 0, 0, 0, 0, 303, 304, 305, 306, 0, 0, 0, 0,
  /* 38075 */ 0, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 291, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38108 */ 0, 665, 368, 0, 0, 73728, 77824, 0, 0, 0, 0, 306, 69632, 304, 306, 305, 304, 305, 0, 0, 0, 0, 2301, 0, 0,
  /* 38133 */ 0, 0, 0, 0, 0, 0, 0, 0, 2311, 304, 305, 305, 409, 305, 414, 421, 437, 448, 448, 448, 448, 455, 448, 448,
  /* 38157 */ 455, 455, 468, 468, 468, 468, 468, 468, 468, 468, 468, 495, 518, 495, 518, 495, 495, 542, 518, 518, 518,
  /* 38178 */ 542, 518, 518, 518, 518, 518, 518, 518, 518, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 0, 260, 261, 0,
  /* 38201 */ 0, 264, 265, 0, 0, 0, 0, 0, 570, 0, 0, 0, 0, 2315, 0, 0, 0, 2318, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0,
  /* 38232 */ 135168, 135168, 0, 0, 0, 0, 575, 576, 577, 578, 579, 580, 581, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
  /* 38258 */ 0, 0, 0, 0, 3022, 0, 0, 0, 0, 0, 0, 0, 0, 606, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 0, 0, 0, 0, 0, 2641, 0, 0,
  /* 38290 */ 0, 0, 2646, 0, 0, 0, 0, 0, 0, 2328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 346, 347, 349, 0, 0, 622,
  /* 38319 */ 324, 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2331, 0, 0, 0, 0, 0, 635, 0, 0, 0, 639, 0, 0, 642, 0, 644,
  /* 38349 */ 0, 646, 0, 0, 0, 0, 0, 0, 2990080, 3026944, 0, 0, 0, 2711552, 0, 0, 0, 3076096, 679, 680, 681, 0, 0, 0, 0,
  /* 38374 */ 0, 0, 0, 0, 0, 0, 0, 0, 697, 698, 0, 700, 0, 703, 704, 0, 599, 0, 0, 0, 710, 0, 0, 0, 0, 0, 0, 2836, 0, 0,
  /* 38404 */ 0, 0, 0, 0, 0, 0, 0, 0, 3160, 483, 483, 483, 483, 483, 700, 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
  /* 38433 */ 0, 0, 0, 0, 3108864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1554, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 615, 0, 0, 0,
  /* 38463 */ 700, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 0, 483, 483, 483, 3402, 483, 483, 483, 483, 483, 483, 483,
  /* 38488 */ 483, 1644, 483, 483, 483, 483, 483, 483, 483, 0, 0, 681, 746, 0, 0, 0, 0, 0, 0, 750, 622, 0, 0, 754, 0, 0,
  /* 38514 */ 0, 0, 2326, 0, 0, 2329, 0, 0, 0, 0, 0, 0, 2333, 0, 0, 0, 0, 1998, 0, 0, 0, 0, 0, 2004, 0, 2006, 0, 0, 0,
  /* 38543 */ 0, 0, 0, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 0, 0, 0,
  /* 38560 */ 0, 0, 0, 0, 756, 0, 0, 0, 615, 622, 0, 0, 615, 754, 754, 0, 0, 0, 0, 0, 0, 3108864, 0, 0, 0, 0, 0, 0, 0,
  /* 38589 */ 0, 2204272, 155648, 2204272, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 569, 0, 0, 483,
  /* 38614 */ 819, 823, 483, 483, 483, 483, 504, 504, 504, 844, 848, 851, 504, 859, 504, 504, 504, 504, 504, 2182, 2183,
  /* 38635 */ 504, 504, 504, 504, 504, 504, 2190, 504, 504, 504, 504, 504, 1296, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 38656 */ 504, 504, 504, 2201, 504, 2203, 504, 504, 504, 504, 875, 877, 880, 504, 504, 504, 892, 896, 504, 504, 504,
  /* 38677 */ 504, 0, 528, 528, 528, 528, 528, 2970, 528, 528, 528, 528, 528, 2974, 528, 528, 528, 528, 504, 0, 504,
  /* 38698 */ 504, 985, 0, 1454, 0, 0, 0, 1460, 0, 528, 528, 918, 922, 925, 528, 933, 528, 528, 528, 949, 951, 954, 528,
  /* 38721 */ 528, 528, 528, 528, 528, 1397, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1896, 528, 528, 528, 528,
  /* 38742 */ 528, 966, 970, 528, 528, 528, 528, 892, 0, 0, 504, 504, 82172, 985, 0, 0, 0, 0, 0, 0, 3108864, 0, 0, 0, 0,
  /* 38767 */ 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 1027, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 300, 301,
  /* 38798 */ 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 0, 629, 0, 0, 0, 0, 1051, 0, 0,
  /* 38829 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097, 1115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
  /* 38860 */ 1129, 0, 0, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 483, 483, 483, 483, 1214, 483, 483,
  /* 38887 */ 483, 1217, 483, 483, 483, 483, 483, 483, 483, 1252, 483, 483, 483, 483, 483, 483, 483, 483, 2087, 483,
  /* 38907 */ 483, 483, 483, 483, 483, 483, 483, 483, 1227, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1236, 483, 483,
  /* 38928 */ 1243, 504, 504, 504, 1348, 504, 504, 504, 504, 504, 504, 30029, 1265, 909, 528, 528, 528, 528, 528, 528,
  /* 38948 */ 1411, 528, 528, 1413, 528, 528, 528, 1417, 528, 528, 528, 1406, 528, 528, 1410, 528, 528, 528, 528, 528,
  /* 38968 */ 528, 528, 528, 528, 528, 1420, 528, 528, 1427, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1440,
  /* 38988 */ 528, 528, 528, 528, 528, 528, 3271, 528, 528, 528, 528, 528, 528, 504, 0, 3279, 0, 0, 0, 1561, 0, 1563, 0,
  /* 39011 */ 0, 0, 1565, 0, 673, 0, 0, 0, 0, 0, 0, 2847, 0, 0, 0, 0, 0, 2850, 0, 2852, 0, 1598, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39041 */ 0, 0, 0, 0, 0, 0, 0, 1128, 0, 1611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 1495, 0,
  /* 39073 */ 0, 0, 0, 0, 0, 483, 1630, 483, 483, 483, 483, 483, 0, 0, 2128, 0, 504, 504, 504, 504, 504, 504, 504, 1792,
  /* 39097 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 2199, 504, 504, 504, 504, 504, 504, 1635, 483, 483, 483, 483,
  /* 39118 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2066, 483, 483, 483, 483, 1657, 483, 483, 483, 483,
  /* 39139 */ 483, 483, 483, 483, 483, 1665, 483, 483, 483, 483, 483, 2888, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 39160 */ 483, 1662, 483, 483, 483, 483, 483, 483, 483, 1669, 483, 483, 1674, 483, 483, 483, 483, 483, 483, 483,
  /* 39180 */ 483, 483, 483, 504, 3078, 504, 504, 504, 3081, 1265, 0, 504, 1723, 504, 504, 504, 504, 504, 504, 1729,
  /* 39200 */ 504, 504, 504, 504, 504, 0, 0, 0, 0, 528, 528, 2218, 528, 528, 528, 528, 504, 504, 1803, 504, 504, 504,
  /* 39222 */ 504, 504, 504, 504, 504, 504, 30029, 0, 528, 1819, 528, 528, 528, 528, 1855, 528, 528, 528, 1859, 528,
  /* 39242 */ 528, 1864, 528, 528, 528, 528, 504, 0, 1450, 504, 985, 0, 1455, 0, 0, 0, 1461, 0, 1920, 0, 1000, 0, 0, 0,
  /* 39266 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 0, 0, 1954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 2038, 0,
  /* 39298 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483, 504, 504, 504, 504, 528, 528, 528, 528, 0, 0, 483, 483,
  /* 39324 */ 2093, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1237, 483, 483, 504, 504, 2179,
  /* 39344 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2484, 504, 504, 528, 528, 2265, 528, 528,
  /* 39365 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2236, 528, 528, 0, 0, 0, 2353, 0, 0, 0, 0, 0, 0, 0,
  /* 39390 */ 0, 0, 0, 0, 0, 368, 368, 368, 368, 528, 528, 528, 2588, 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0, 0,
  /* 39415 */ 528, 528, 2528, 528, 528, 528, 528, 528, 528, 0, 2819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2825, 0, 0, 0, 0, 0, 0,
  /* 39442 */ 3011, 0, 0, 3014, 0, 0, 0, 0, 0, 0, 0, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39473 */ 3008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 2050, 0, 0, 0, 3140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39503 */ 0, 0, 0, 483, 2048, 483, 483, 483, 483, 3165, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 39525 */ 483, 1238, 483, 483, 483, 483, 483, 483, 483, 3178, 504, 504, 504, 504, 504, 504, 504, 3183, 504, 504,
  /* 39545 */ 504, 504, 504, 1351, 1352, 504, 504, 504, 30029, 1265, 909, 528, 528, 528, 528, 528, 528, 1825, 528, 528,
  /* 39565 */ 528, 528, 528, 528, 528, 528, 528, 1376, 528, 528, 528, 528, 1386, 528, 504, 3196, 528, 528, 528, 528,
  /* 39585 */ 528, 528, 528, 3201, 528, 528, 528, 528, 528, 528, 528, 1858, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 39606 */ 3433, 528, 504, 0, 0, 0, 0, 0, 3216, 0, 0, 3219, 0, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39636 */ 0, 2008, 0, 3227, 0, 0, 0, 0, 0, 0, 483, 483, 483, 3234, 483, 483, 483, 483, 3238, 483, 483, 483, 483,
  /* 39659 */ 483, 3244, 483, 483, 483, 504, 504, 504, 3249, 504, 504, 504, 504, 504, 504, 3258, 504, 504, 504, 504,
  /* 39679 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3114, 504, 3253, 504, 504, 504, 504, 504,
  /* 39699 */ 3259, 504, 504, 504, 528, 528, 528, 3264, 528, 528, 528, 528, 528, 2982, 528, 528, 528, 528, 528, 528,
  /* 39719 */ 528, 528, 528, 528, 1435, 528, 528, 528, 528, 528, 528, 528, 528, 3268, 528, 528, 528, 528, 528, 3274,
  /* 39739 */ 528, 528, 528, 504, 0, 0, 0, 0, 0, 2835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2842, 483, 483, 483, 483, 3297, 483,
  /* 39765 */ 483, 483, 3301, 483, 483, 483, 483, 483, 504, 504, 504, 3179, 504, 504, 504, 3182, 504, 504, 504, 504,
  /* 39785 */ 504, 504, 3312, 504, 504, 504, 3316, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 39806 */ 528, 3203, 528, 528, 528, 528, 504, 0, 504, 504, 985, 1452, 0, 0, 0, 1458, 0, 0, 528, 528, 3327, 528, 528,
  /* 39829 */ 528, 3331, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 0, 3108864, 0, 0, 0, 0, 0, 0, 0, 2204271, 2204271,
  /* 39853 */ 2204271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 504, 483, 504, 483, 483, 483, 504, 504, 528, 528, 0, 483,
  /* 39878 */ 504, 528, 3519, 3520, 3521, 3522, 0, 483, 483, 483, 483, 483, 2900, 483, 483, 483, 483, 483, 483, 483,
  /* 39898 */ 483, 483, 2909, 0, 0, 352, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 584, 585, 0, 0, 307, 0, 73728, 77824,
  /* 39925 */ 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 397, 0, 0, 0, 410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0,
  /* 39957 */ 0, 462, 469, 469, 469, 469, 469, 469, 469, 469, 469, 496, 519, 496, 519, 496, 496, 543, 519, 519, 519,
  /* 39978 */ 543, 519, 519, 519, 519, 519, 519, 519, 519, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 699, 0, 0, 0, 0, 0,
  /* 40002 */ 0, 0, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 2859, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1950, 0, 0, 0, 0, 483, 483,
  /* 40033 */ 483, 828, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3421, 504, 528, 528, 528,
  /* 40054 */ 528, 975, 528, 528, 528, 504, 0, 0, 983, 504, 82172, 985, 0, 0, 0, 0, 0, 268, 369, 269, 0, 0, 0, 0, 0, 0,
  /* 40080 */ 269, 374, 1082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1093, 0, 0, 0, 1098, 483, 1265, 835, 504, 504, 504, 504,
  /* 40105 */ 504, 504, 504, 504, 504, 504, 504, 504, 1284, 504, 504, 504, 504, 1294, 504, 504, 504, 504, 504, 504, 504,
  /* 40126 */ 504, 504, 504, 504, 504, 30029, 1816, 528, 528, 504, 504, 504, 1309, 504, 504, 504, 504, 504, 504, 504,
  /* 40146 */ 504, 504, 504, 504, 504, 1305, 504, 504, 504, 504, 504, 1346, 504, 504, 504, 504, 504, 504, 504, 30029,
  /* 40166 */ 1265, 909, 528, 528, 528, 528, 528, 528, 1431, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2286,
  /* 40186 */ 528, 528, 528, 528, 528, 1422, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1438, 528, 528, 528,
  /* 40207 */ 528, 528, 528, 1432, 528, 528, 528, 528, 528, 528, 528, 528, 1443, 0, 0, 1467, 0, 0, 0, 1473, 0, 0, 0, 0,
  /* 40231 */ 0, 0, 0, 0, 0, 617, 0, 0, 712, 0, 0, 0, 0, 0, 1499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1512, 528, 1868,
  /* 40261 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2544, 528, 0, 0, 1996, 0, 0, 0, 0,
  /* 40284 */ 2001, 0, 0, 0, 0, 0, 0, 0, 0, 371, 315, 0, 358, 0, 0, 0, 0, 2080, 483, 2082, 483, 483, 483, 483, 483, 483,
  /* 40310 */ 483, 483, 483, 483, 483, 483, 483, 1240, 483, 483, 2166, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 40331 */ 504, 504, 504, 504, 504, 2497, 504, 2252, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 40352 */ 528, 528, 2572, 528, 0, 0, 2314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 570, 677, 0, 2375, 0, 0, 0, 0, 0,
  /* 40381 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1497, 0, 0, 0, 2845, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
  /* 40414 */ 3217, 0, 0, 0, 0, 0, 0, 3027, 3224, 0, 0, 3226, 0, 0, 0, 0, 0, 3010, 0, 0, 0, 0, 0, 0, 0, 3016, 0, 0, 0,
  /* 40443 */ 0, 0, 3028, 0, 0, 0, 3031, 0, 0, 0, 0, 0, 0, 0, 1536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 0,
  /* 40474 */ 993, 0, 0, 997, 1001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3024, 0, 0, 0, 0, 0, 0, 1516, 0, 0, 0, 0, 0, 0,
  /* 40505 */ 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 1265, 1721, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 40529 */ 504, 504, 2759, 504, 483, 483, 3063, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 40549 */ 1715, 483, 483, 528, 528, 528, 3118, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2249,
  /* 40569 */ 528, 528, 528, 0, 0, 73728, 77824, 0, 0, 0, 0, 309, 69632, 0, 309, 355, 0, 355, 0, 0, 0, 0, 2354, 0, 0, 0,
  /* 40595 */ 2356, 0, 0, 0, 0, 0, 0, 0, 320, 0, 321, 0, 0, 0, 0, 320, 0, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40627 */ 0, 1582, 604, 605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 636, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40658 */ 645, 0, 647, 0, 0, 0, 0, 0, 3042, 0, 0, 0, 0, 0, 0, 3046, 3047, 0, 0, 0, 0, 0, 3231, 0, 483, 483, 483,
  /* 40685 */ 483, 483, 483, 483, 483, 483, 483, 2101, 483, 483, 483, 483, 483, 0, 0, 588, 682, 0, 0, 0, 0, 0, 689, 0,
  /* 40709 */ 0, 0, 0, 0, 0, 0, 1504, 0, 0, 1507, 0, 0, 0, 0, 0, 0, 0, 0, 701, 0, 0, 0, 0, 0, 708, 0, 0, 0, 605, 0, 0,
  /* 40740 */ 0, 0, 0, 3283, 3027, 0, 0, 0, 0, 0, 0, 0, 0, 483, 3233, 483, 483, 3235, 483, 483, 483, 483, 0, 0, 588, 0,
  /* 40766 */ 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 737, 0, 0,
  /* 40798 */ 0, 0, 0, 0, 267, 267, 267, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 824, 483,
  /* 40826 */ 483, 483, 483, 504, 504, 839, 845, 504, 504, 504, 860, 864, 528, 913, 919, 528, 528, 528, 934, 938, 528,
  /* 40847 */ 528, 528, 528, 528, 958, 960, 528, 528, 528, 528, 528, 2996, 2998, 528, 528, 528, 3001, 528, 3003, 3004,
  /* 40867 */ 528, 504, 504, 504, 504, 504, 1807, 504, 504, 504, 504, 504, 504, 30029, 0, 528, 528, 528, 528, 528, 931,
  /* 40888 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1878, 1879, 528, 528, 528, 528, 528, 971, 528, 528, 528,
  /* 40909 */ 528, 504, 0, 0, 839, 504, 82172, 985, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
  /* 40938 */ 0, 0, 0, 1053, 0, 0, 0, 1056, 0, 1058, 0, 1060, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
  /* 40967 */ 614, 0, 0, 0, 0, 619, 0, 1083, 0, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1004, 1138, 0, 0, 0, 0, 0,
  /* 40996 */ 1170, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 3053, 483, 483, 483, 483, 483, 483, 483, 3058,
  /* 41021 */ 483, 483, 483, 483, 1211, 1213, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2409, 483,
  /* 41041 */ 483, 483, 483, 483, 483, 1248, 483, 483, 483, 483, 483, 483, 483, 483, 1259, 1260, 483, 483, 483, 483,
  /* 41061 */ 483, 2084, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1256, 483, 483, 483, 483, 483, 483, 1265,
  /* 41081 */ 835, 504, 504, 504, 1271, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 30029, 1265, 909, 528, 528,
  /* 41101 */ 1361, 504, 504, 504, 504, 1326, 504, 504, 504, 504, 504, 504, 504, 1340, 504, 504, 504, 504, 504, 504,
  /* 41121 */ 3315, 504, 3317, 3318, 504, 3320, 504, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3204, 528,
  /* 41141 */ 528, 528, 1363, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2796, 528, 528,
  /* 41162 */ 528, 528, 1393, 1395, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2274, 528, 528, 528, 528,
  /* 41182 */ 1444, 528, 528, 528, 1449, 0, 504, 504, 985, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 254, 0, 0, 0, 0, 328, 1545,
  /* 41208 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1941, 1265, 0, 504, 504, 504, 504, 504, 504, 1727, 504, 504,
  /* 41235 */ 504, 504, 504, 504, 504, 1745, 504, 504, 504, 504, 1749, 504, 504, 504, 1752, 504, 504, 504, 504, 504,
  /* 41255 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3104, 504, 504, 504, 504, 1804, 504, 504, 504, 504,
  /* 41275 */ 1810, 504, 504, 504, 30029, 0, 528, 528, 528, 528, 528, 927, 528, 528, 942, 528, 528, 528, 528, 528, 528,
  /* 41296 */ 528, 528, 2777, 528, 528, 2781, 528, 528, 528, 528, 528, 528, 528, 528, 1823, 528, 528, 528, 528, 528,
  /* 41316 */ 528, 528, 528, 528, 528, 528, 2287, 528, 2289, 528, 528, 528, 528, 1886, 528, 528, 528, 1892, 528, 528,
  /* 41336 */ 528, 528, 528, 528, 528, 528, 1900, 528, 528, 528, 528, 1906, 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0,
  /* 41359 */ 0, 420, 435, 420, 420, 420, 420, 420, 420, 420, 420, 1942, 1943, 0, 1945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41385 */ 0, 676, 0, 0, 0, 0, 1983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1022, 0, 2010, 2011, 0, 0, 0, 0, 0, 0,
  /* 41416 */ 0, 0, 0, 2021, 0, 2023, 0, 0, 0, 0, 0, 110592, 110592, 0, 0, 0, 0, 0, 0, 2187264, 0, 0, 0, 0, 0, 126976,
  /* 41442 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 2053, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 41467 */ 483, 483, 2089, 483, 483, 483, 483, 483, 483, 2083, 483, 2085, 483, 2088, 483, 483, 483, 483, 483, 483,
  /* 41487 */ 483, 1643, 483, 483, 483, 483, 483, 483, 483, 483, 483, 3066, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 41508 */ 2094, 483, 483, 483, 483, 483, 2100, 483, 483, 483, 483, 483, 483, 483, 2717, 483, 483, 483, 0, 0, 504,
  /* 41529 */ 504, 504, 483, 483, 483, 483, 2123, 0, 0, 0, 0, 2130, 504, 504, 504, 504, 504, 504, 1330, 504, 504, 504,
  /* 41551 */ 504, 504, 504, 504, 504, 504, 504, 30029, 1265, 909, 528, 528, 528, 2137, 504, 504, 504, 504, 504, 504,
  /* 41571 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 3194, 504, 504, 504, 2167, 504, 2169, 504, 2172, 504, 504,
  /* 41591 */ 504, 504, 504, 504, 504, 504, 504, 898, 504, 504, 504, 504, 0, 528, 504, 504, 504, 2180, 504, 504, 504,
  /* 41612 */ 504, 504, 2186, 504, 504, 504, 504, 504, 504, 1332, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1760,
  /* 41632 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2209, 0, 0, 0, 0, 2216, 528, 528, 528, 528, 528, 528,
  /* 41654 */ 528, 1909, 504, 1911, 504, 0, 1913, 0, 0, 0, 2223, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 41676 */ 528, 528, 528, 528, 2261, 528, 528, 528, 528, 2253, 528, 2255, 528, 2258, 528, 528, 528, 528, 528, 528,
  /* 41696 */ 528, 528, 528, 2231, 528, 528, 2235, 528, 528, 528, 528, 528, 528, 2266, 528, 528, 528, 528, 528, 2272,
  /* 41716 */ 528, 528, 528, 528, 528, 528, 528, 2270, 528, 528, 528, 528, 2275, 528, 528, 528, 528, 528, 528, 528,
  /* 41736 */ 2295, 504, 504, 504, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2338, 0, 0, 2341, 0, 0, 0,
  /* 41766 */ 0, 0, 0, 2347, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 2363, 0,
  /* 41796 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 2389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2397, 0, 0, 483, 483,
  /* 41827 */ 774, 483, 483, 483, 789, 793, 483, 483, 483, 483, 811, 813, 483, 483, 2414, 483, 483, 483, 483, 483, 483,
  /* 41848 */ 483, 483, 483, 483, 483, 483, 483, 2410, 483, 483, 2472, 504, 504, 504, 504, 504, 2477, 504, 504, 504,
  /* 41868 */ 504, 504, 504, 504, 504, 504, 899, 504, 504, 504, 504, 0, 528, 2558, 528, 528, 528, 528, 528, 528, 528,
  /* 41889 */ 528, 528, 528, 528, 528, 528, 528, 528, 2543, 528, 528, 0, 2611, 0, 2612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41915 */ 0, 1021, 0, 0, 0, 0, 0, 0, 2627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 483, 483, 2677, 483,
  /* 41944 */ 2678, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1648, 483, 483, 483, 483, 504, 2724, 504,
  /* 41964 */ 2725, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1339, 504, 504, 504, 528, 528, 2772,
  /* 41984 */ 528, 2773, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2541, 528, 528, 528, 528, 483, 2884,
  /* 42004 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2895, 483, 2924, 504, 504, 504, 504,
  /* 42025 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2496, 504, 504, 2965, 528, 528, 528, 528, 528, 528,
  /* 42046 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 2783, 528, 528, 0, 0, 0, 3218, 0, 0, 0, 0, 0, 3027, 0, 0, 0,
  /* 42071 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3154, 0, 0, 0, 3230, 0, 0, 0, 3232, 483, 483, 483, 483, 3236, 483, 483, 483,
  /* 42097 */ 483, 483, 483, 2901, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2114, 483, 483, 483, 483, 483,
  /* 42117 */ 3266, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3275, 528, 528, 504, 0, 0, 0, 0, 0, 139264, 0, 0, 0, 0,
  /* 42141 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 3342, 0, 3344, 0, 0, 0, 0, 0, 483, 483, 483, 483, 483,
  /* 42170 */ 784, 483, 483, 483, 483, 483, 483, 483, 483, 1192, 483, 483, 483, 483, 483, 483, 483, 3353, 483, 483, 483,
  /* 42191 */ 483, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 3366, 528, 528, 528, 528, 3485, 528, 504, 3487, 0,
  /* 42212 */ 3489, 0, 0, 483, 483, 483, 483, 504, 504, 504, 504, 528, 528, 528, 528, 0, 3511, 0, 0, 0, 335, 0, 0, 0, 0,
  /* 42237 */ 327, 0, 344, 0, 310, 0, 0, 0, 0, 0, 337, 0, 340, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 2316, 2317, 0, 2319, 0,
  /* 42265 */ 2321, 0, 0, 0, 0, 0, 0, 2303, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 665, 1091, 0, 0, 0, 0, 1095, 0, 0, 0, 353,
  /* 42293 */ 354, 356, 357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 357, 0, 0, 362, 0, 0, 0, 0, 0, 327, 335, 365, 0, 356, 0,
  /* 42321 */ 357, 0, 327, 0, 310, 0, 0, 327, 0, 370, 372, 0, 357, 0, 0, 0, 327, 335, 0, 73728, 77824, 370, 0, 0, 0, 0,
  /* 42347 */ 69632, 0, 0, 390, 0, 390, 0, 0, 0, 0, 2628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2309, 0, 0, 0, 372, 390,
  /* 42376 */ 390, 411, 390, 0, 422, 0, 449, 449, 449, 449, 449, 449, 449, 449, 470, 470, 470, 470, 470, 470, 470, 482,
  /* 42398 */ 482, 498, 521, 498, 521, 498, 498, 545, 521, 521, 521, 545, 551, 551, 551, 521, 521, 521, 521, 521, 521,
  /* 42419 */ 521, 521, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 0, 260, 261, 0, 0, 264, 265, 0, 0, 567, 0, 0, 0, 0,
  /* 42445 */ 0, 0, 3019, 3020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2453504, 2490368, 2740224, 0, 0, 2564096, 0, 731, 0, 0, 0, 0,
  /* 42470 */ 0, 0, 0, 712, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 712, 0, 731, 0, 483, 769, 483, 483,
  /* 42499 */ 483, 483, 483, 483, 799, 483, 483, 483, 483, 483, 0, 2126, 0, 0, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 42521 */ 2507, 504, 504, 504, 504, 504, 504, 504, 504, 1746, 504, 504, 504, 504, 504, 504, 504, 504, 1759, 504,
  /* 42541 */ 504, 504, 1763, 504, 504, 1768, 870, 872, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 0,
  /* 42562 */ 528, 528, 528, 528, 528, 3131, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 483, 483, 3492, 3493,
  /* 42584 */ 528, 914, 528, 528, 528, 528, 528, 528, 944, 946, 528, 528, 528, 528, 528, 528, 528, 2538, 528, 528, 528,
  /* 42605 */ 528, 528, 528, 528, 528, 940, 528, 528, 528, 528, 528, 528, 528, 0, 1067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42631 */ 0, 0, 0, 1064, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 1520, 1521, 1522, 0, 0, 0, 0,
  /* 42660 */ 0, 0, 0, 1016, 0, 0, 0, 0, 0, 0, 0, 1023, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 571, 0, 0,
  /* 42691 */ 483, 483, 1184, 483, 483, 483, 1188, 483, 483, 1199, 483, 483, 1203, 483, 483, 483, 483, 483, 483, 3077,
  /* 42711 */ 483, 483, 483, 504, 504, 504, 504, 504, 504, 528, 528, 528, 528, 528, 528, 0, 3503, 1224, 483, 483, 483,
  /* 42732 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2091, 483, 1265, 835, 504, 504, 504, 504, 504,
  /* 42753 */ 504, 1274, 504, 504, 504, 1278, 504, 504, 504, 504, 504, 1742, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 42773 */ 504, 504, 1337, 504, 504, 1341, 504, 504, 1289, 504, 504, 1293, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 42793 */ 504, 504, 504, 504, 1798, 1799, 504, 504, 504, 504, 504, 504, 1311, 504, 504, 504, 1315, 504, 504, 504,
  /* 42813 */ 504, 504, 504, 504, 1758, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2932, 504, 504, 504, 504, 504, 504,
  /* 42834 */ 528, 528, 528, 1366, 528, 528, 528, 1370, 528, 528, 1381, 528, 528, 1385, 528, 528, 528, 528, 528, 929,
  /* 42854 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 1847, 528, 528, 528, 528, 528, 528, 528, 1407, 528, 528,
  /* 42875 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2816, 504, 0, 1483, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42899 */ 0, 0, 0, 0, 0, 0, 1080, 0, 0, 0, 1515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1528, 0, 1530, 0, 0, 0, 1534,
  /* 42929 */ 0, 0, 0, 1538, 0, 0, 0, 1542, 0, 0, 0, 0, 0, 1126400, 0, 324, 0, 0, 0, 0, 1126400, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42958 */ 0, 0, 1126400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 504, 504, 1738, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 42983 */ 504, 504, 504, 504, 504, 2523, 504, 504, 504, 504, 504, 504, 1756, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 43004 */ 504, 504, 504, 504, 30029, 1817, 528, 528, 1852, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 43024 */ 528, 528, 528, 528, 2976, 528, 528, 528, 528, 528, 1905, 528, 528, 528, 528, 504, 504, 504, 0, 0, 0, 0, 0,
  /* 43047 */ 0, 424, 1139128, 424, 424, 424, 424, 424, 424, 424, 424, 0, 1955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43073 */ 0, 1113, 0, 0, 2026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 0, 2092, 483, 483, 483, 483, 483,
  /* 43100 */ 483, 483, 483, 483, 483, 2102, 483, 483, 483, 483, 483, 483, 483, 3246, 483, 504, 504, 504, 504, 504, 504,
  /* 43121 */ 504, 3417, 504, 3419, 504, 504, 504, 528, 528, 2312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1953,
  /* 43147 */ 2335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1968, 0, 0, 2377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43178 */ 2388, 0, 0, 0, 0, 2640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1557, 0, 0, 0, 2440, 483, 483, 483, 483, 483,
  /* 43206 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2119, 528, 2559, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 43227 */ 528, 528, 2570, 528, 528, 528, 528, 528, 528, 1857, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2581,
  /* 43247 */ 528, 528, 528, 528, 528, 528, 2624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1981, 483, 483, 483,
  /* 43273 */ 2693, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2699, 483, 483, 483, 504, 504, 2740,
  /* 43293 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2748, 504, 504, 528, 528, 528, 2788, 528,
  /* 43314 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2260, 528, 528, 528, 3018, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43338 */ 0, 0, 0, 0, 0, 0, 0, 2009, 0, 3050, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 43362 */ 3307, 504, 483, 3073, 483, 483, 483, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 856, 504, 504,
  /* 43383 */ 528, 528, 528, 3129, 528, 528, 528, 528, 528, 528, 528, 528, 504, 3135, 0, 0, 0, 0, 0, 2445312, 0, 0, 0,
  /* 43406 */ 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 3139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0,
  /* 43439 */ 0, 3027, 0, 3148, 0, 0, 0, 0, 3152, 0, 0, 0, 0, 0, 0, 0, 1552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2862, 0, 0, 0,
  /* 43469 */ 0, 0, 2867, 483, 3164, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2451, 483,
  /* 43490 */ 483, 483, 3240, 483, 3242, 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 1775, 1776, 1777,
  /* 43510 */ 504, 504, 1780, 1781, 504, 504, 504, 504, 504, 3255, 504, 3257, 504, 504, 504, 504, 504, 528, 528, 528,
  /* 43530 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 3205, 528, 528, 0, 0, 3397, 0, 483, 483, 483, 483, 483, 483,
  /* 43552 */ 483, 483, 483, 483, 3408, 483, 483, 483, 483, 483, 2914, 2916, 483, 483, 483, 2919, 483, 2921, 2922, 483,
  /* 43572 */ 504, 483, 483, 528, 504, 504, 504, 528, 504, 504, 504, 504, 504, 504, 504, 504, 891, 504, 504, 504, 504,
  /* 43593 */ 504, 0, 528, 483, 483, 504, 504, 3450, 504, 3451, 504, 504, 504, 504, 504, 504, 504, 528, 528, 528, 528,
  /* 43614 */ 528, 528, 3199, 528, 528, 528, 528, 528, 528, 528, 528, 504, 504, 504, 0, 1913, 0, 0, 0, 3457, 528, 3458,
  /* 43636 */ 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0, 483, 483, 483, 483, 0, 0, 73728, 77824, 371, 0, 0,
  /* 43660 */ 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 313,
  /* 43691 */ 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 1002, 0, 0, 1004, 0, 0, 0, 0, 0, 0, 471, 471, 475, 475, 475, 475,
  /* 43719 */ 475, 471, 471, 499, 522, 499, 522, 499, 499, 546, 522, 522, 522, 546, 522, 522, 522, 522, 522, 522, 522,
  /* 43740 */ 522, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 0, 260, 261, 0, 0, 264, 265, 0, 0, 0, 568, 0, 0, 0, 0, 0,
  /* 43767 */ 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 589, 0, 0, 592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43800 */ 188783, 188783, 188783, 188783, 0, 651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 380, 292, 433,
  /* 43825 */ 446, 446, 446, 446, 446, 446, 446, 446, 568, 663, 0, 669, 670, 568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3143,
  /* 43851 */ 0, 3144, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0, 568, 0, 0, 0, 0, 2655, 0, 0, 0, 0, 0, 0, 0,
  /* 43882 */ 0, 0, 0, 0, 0, 2839, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 568, 0, 0, 0, 728, 0, 733, 0, 0, 0, 0, 2822, 0, 0,
  /* 43913 */ 0, 0, 0, 0, 0, 2826, 0, 0, 0, 0, 0, 0, 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 719, 0,
  /* 43944 */ 745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 568, 0, 0, 0, 0, 0, 382, 416, 0, 416, 416, 416, 416, 416, 416, 416, 416,
  /* 43971 */ 478, 416, 416, 485, 507, 485, 507, 485, 0, 719, 483, 770, 483, 483, 483, 483, 790, 794, 800, 804, 483,
  /* 43992 */ 483, 483, 483, 483, 483, 483, 3300, 483, 3302, 3303, 483, 3305, 483, 504, 504, 483, 820, 483, 483, 483,
  /* 44012 */ 483, 483, 504, 504, 841, 504, 504, 504, 504, 861, 865, 871, 504, 876, 504, 504, 504, 504, 504, 893, 504,
  /* 44033 */ 504, 504, 504, 504, 0, 528, 528, 528, 528, 528, 3209, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 504,
  /* 44055 */ 504, 82172, 985, 0, 0, 0, 528, 915, 528, 528, 528, 528, 935, 939, 945, 528, 950, 528, 528, 528, 528, 528,
  /* 44077 */ 504, 504, 2173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2357, 0, 0, 0, 0, 0, 0, 967, 528, 528, 528, 528, 528, 981, 0,
  /* 44104 */ 0, 841, 504, 82172, 985, 0, 0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3033, 0, 0, 0, 0, 0, 0, 0,
  /* 44134 */ 1054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1049, 0, 324, 324, 1099, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 1109, 0,
  /* 44163 */ 0, 0, 0, 0, 0, 594, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 0, 0, 0, 483, 0, 0, 0, 1118, 0,
  /* 44194 */ 0, 0, 0, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 0, 2670592, 2719744, 0, 0, 0, 2514944, 2691072, 0, 3182592, 0,
  /* 44218 */ 2560000, 0, 0, 0, 1157, 1109, 0, 1141, 1160, 0, 1163, 0, 0, 1077, 0, 0, 0, 0, 0, 585, 0, 0, 585, 0, 0, 0,
  /* 44244 */ 751, 0, 0, 0, 0, 0, 0, 1150976, 324, 0, 0, 0, 0, 0, 0, 0, 0, 1137, 0, 1015, 0, 0, 0, 0, 0, 0, 0, 1171, 0,
  /* 44273 */ 0, 0, 0, 0, 1171, 0, 0, 1054, 1171, 1178, 483, 483, 483, 483, 483, 2096, 2097, 483, 483, 483, 483, 483,
  /* 44295 */ 483, 2104, 483, 483, 483, 483, 483, 1250, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1200, 483,
  /* 44315 */ 483, 483, 483, 483, 483, 1183, 483, 483, 483, 483, 1189, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 44335 */ 1254, 483, 483, 483, 483, 483, 483, 483, 1210, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 44355 */ 1222, 483, 483, 483, 483, 483, 2124, 0, 0, 0, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 44377 */ 504, 504, 2471, 483, 1226, 483, 483, 483, 483, 483, 483, 483, 1232, 483, 483, 483, 1239, 1241, 483, 483,
  /* 44397 */ 483, 483, 483, 3064, 483, 483, 483, 483, 483, 483, 483, 3069, 483, 3071, 483, 1265, 835, 1267, 504, 504,
  /* 44417 */ 504, 504, 1273, 504, 504, 504, 504, 1279, 504, 504, 504, 504, 504, 1757, 504, 504, 504, 504, 504, 504,
  /* 44437 */ 504, 504, 504, 504, 1778, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1312, 504, 504, 504, 504, 1317,
  /* 44457 */ 504, 504, 504, 504, 504, 504, 1744, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2161, 504, 504, 504,
  /* 44478 */ 504, 504, 504, 504, 1324, 504, 504, 504, 1331, 1333, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3191,
  /* 44498 */ 504, 504, 504, 504, 504, 504, 528, 528, 1365, 528, 528, 528, 528, 1371, 528, 528, 528, 528, 528, 528, 528,
  /* 44519 */ 528, 528, 3211, 528, 528, 528, 504, 0, 0, 528, 528, 1392, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 44540 */ 528, 528, 1404, 528, 528, 528, 528, 528, 3270, 528, 3272, 528, 528, 528, 528, 528, 504, 0, 0, 0, 0, 0,
  /* 44562 */ 2494464, 2498560, 0, 0, 2531328, 2580480, 0, 0, 0, 0, 0, 0, 0, 2342, 0, 2343, 0, 2345, 0, 0, 0, 0, 528,
  /* 44585 */ 528, 528, 1409, 528, 528, 528, 528, 528, 528, 528, 528, 1416, 528, 528, 528, 528, 528, 528, 1874, 528,
  /* 44605 */ 528, 528, 528, 528, 528, 528, 528, 528, 2793, 528, 528, 528, 528, 528, 528, 1423, 1425, 528, 528, 528,
  /* 44625 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3124, 528, 528, 528, 528, 1447, 528, 504, 0, 504,
  /* 44646 */ 504, 985, 0, 0, 1456, 0, 0, 0, 1462, 0, 0, 0, 0, 0, 1468, 0, 0, 0, 0, 0, 1474, 0, 0, 0, 1468, 0, 0, 0,
  /* 44674 */ 1474, 0, 0, 0, 0, 0, 0, 0, 0, 1074, 0, 1076, 0, 0, 0, 0, 0, 0, 0, 1485, 1486, 0, 0, 0, 0, 0, 1492, 0, 0,
  /* 44703 */ 0, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213376, 0, 0, 0, 0, 0, 0, 1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44735 */ 0, 0, 0, 0, 0, 0, 2025, 0, 0, 1531, 0, 0, 0, 0, 0, 0, 0, 1539, 1540, 0, 0, 0, 0, 0, 0, 3027, 0, 0, 0, 0,
  /* 44765 */ 0, 0, 0, 0, 3292, 0, 0, 1547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 617, 0, 0, 0, 0, 0, 1613, 0, 0, 0, 0,
  /* 44797 */ 0, 0, 0, 0, 0, 0, 0, 0, 1078, 0, 0, 0, 483, 483, 483, 1639, 483, 483, 483, 483, 1645, 483, 483, 483, 483,
  /* 44822 */ 483, 483, 483, 2057, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2698, 483, 483, 483, 483, 483, 483, 483,
  /* 44843 */ 483, 483, 1656, 483, 483, 483, 483, 1660, 483, 483, 483, 483, 483, 483, 483, 2073, 483, 2075, 483, 483,
  /* 44863 */ 483, 483, 483, 483, 483, 483, 483, 483, 1672, 483, 483, 1676, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 44883 */ 1231, 483, 483, 483, 483, 483, 483, 483, 1702, 1703, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 44903 */ 483, 483, 483, 483, 2688, 483, 483, 1265, 0, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1733,
  /* 44924 */ 504, 504, 504, 504, 504, 1772, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2147, 504, 504, 504, 504,
  /* 44945 */ 504, 504, 504, 1739, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1750, 504, 504, 504, 504, 504,
  /* 44965 */ 1789, 504, 1791, 504, 1794, 504, 504, 504, 504, 504, 504, 504, 2753, 504, 504, 504, 2756, 504, 2758, 504,
  /* 44985 */ 504, 504, 504, 1754, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1766, 504, 504, 504, 504, 504,
  /* 45006 */ 2210, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 504, 504, 504, 0, 0, 2594, 0, 0, 0, 504, 504, 1771, 504,
  /* 45030 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2935, 504, 504, 0, 0, 1944, 0, 0, 0, 0, 0, 0,
  /* 45054 */ 0, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 0, 0, 1957, 0, 0, 0, 0, 1962, 1963, 0, 0, 1965, 1966, 0, 0, 0, 0, 0,
  /* 45083 */ 3047424, 0, 0, 0, 3125248, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 241664, 0, 0, 0, 0, 0, 0, 1995, 0, 0, 0, 0,
  /* 45110 */ 2000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1108, 0, 0, 0, 0, 0, 0, 483, 483, 2069, 483, 483, 483, 483, 483, 483,
  /* 45136 */ 483, 483, 483, 483, 2078, 483, 483, 483, 483, 483, 2125, 0, 0, 0, 504, 504, 504, 504, 504, 504, 504, 2478,
  /* 45158 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 2766, 504, 504, 0, 0, 528, 528, 483, 2081, 483, 483, 483,
  /* 45179 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2711, 483, 483, 483, 483, 483, 2108, 483, 483, 483,
  /* 45200 */ 2111, 483, 483, 483, 483, 2116, 483, 483, 483, 483, 483, 483, 3169, 483, 483, 483, 483, 483, 483, 483,
  /* 45220 */ 483, 483, 1710, 1712, 483, 483, 483, 483, 483, 2153, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 45240 */ 2162, 504, 504, 504, 2165, 504, 504, 504, 2194, 504, 504, 504, 2197, 504, 504, 504, 504, 2202, 504, 504,
  /* 45260 */ 504, 504, 504, 881, 504, 504, 504, 504, 504, 504, 504, 504, 0, 528, 2239, 528, 528, 528, 528, 528, 528,
  /* 45281 */ 528, 528, 528, 528, 2248, 528, 528, 528, 2251, 528, 528, 528, 2280, 528, 528, 528, 2283, 528, 528, 528,
  /* 45301 */ 528, 2288, 528, 528, 528, 528, 528, 528, 1891, 528, 528, 528, 528, 528, 1897, 528, 528, 528, 528, 504,
  /* 45321 */ 1104, 504, 504, 985, 0, 0, 0, 0, 0, 0, 0, 0, 3222, 3027, 0, 0, 0, 0, 0, 0, 0, 2336, 0, 0, 0, 0, 0, 0, 0,
  /* 45350 */ 0, 2344, 0, 0, 0, 2348, 0, 0, 0, 0, 2834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2865, 0, 2866, 0, 0, 0,
  /* 45379 */ 2352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1006, 0, 0, 0, 2376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2386, 0,
  /* 45410 */ 0, 0, 0, 0, 586, 0, 0, 586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 586, 0, 2400, 483, 483, 483, 483,
  /* 45439 */ 483, 483, 483, 483, 483, 2407, 483, 483, 483, 483, 483, 0, 2127, 0, 0, 504, 504, 504, 504, 504, 504, 504,
  /* 45461 */ 1314, 504, 504, 1318, 504, 504, 504, 504, 504, 483, 483, 2427, 483, 2428, 483, 483, 483, 483, 483, 483,
  /* 45481 */ 483, 483, 483, 2438, 483, 483, 483, 483, 483, 3076, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 528,
  /* 45502 */ 528, 528, 528, 528, 528, 0, 0, 0, 504, 504, 2463, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2470,
  /* 45524 */ 504, 504, 504, 504, 504, 2211, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 1844, 528, 528, 528, 528, 528,
  /* 45546 */ 528, 528, 528, 504, 504, 1912, 0, 0, 0, 0, 0, 504, 504, 504, 2488, 504, 504, 2490, 504, 2491, 504, 504,
  /* 45568 */ 504, 504, 504, 504, 504, 1809, 504, 504, 504, 504, 30029, 0, 528, 528, 504, 2499, 504, 504, 2503, 504,
  /* 45588 */ 504, 504, 504, 504, 504, 504, 504, 504, 2512, 504, 504, 504, 504, 504, 2476, 504, 504, 504, 504, 504, 504,
  /* 45609 */ 504, 504, 504, 504, 504, 1338, 504, 504, 504, 504, 504, 504, 2515, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 45630 */ 504, 504, 504, 504, 504, 3091, 504, 504, 528, 528, 528, 528, 2535, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 45651 */ 528, 528, 528, 2569, 528, 528, 528, 528, 528, 528, 528, 528, 2577, 528, 528, 528, 2580, 528, 528, 528,
  /* 45671 */ 528, 528, 528, 528, 1412, 528, 528, 528, 528, 528, 528, 528, 528, 504, 504, 504, 1452, 1913, 0, 0, 0,
  /* 45692 */ 2598, 2599, 0, 0, 2602, 2603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 2654, 0, 2656,
  /* 45720 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2404352, 0, 0, 0, 0, 483, 483, 2692, 483, 483, 483, 483, 483, 483, 483,
  /* 45746 */ 483, 483, 483, 483, 483, 483, 2894, 483, 483, 504, 2739, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 45767 */ 504, 504, 2749, 504, 504, 504, 504, 504, 2504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 45787 */ 2510, 504, 504, 504, 504, 528, 528, 2787, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 45807 */ 2797, 483, 483, 483, 2886, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2907, 2908, 483,
  /* 45827 */ 483, 483, 483, 2898, 483, 483, 483, 483, 483, 483, 483, 483, 2906, 483, 483, 483, 483, 483, 483, 833, 504,
  /* 45848 */ 504, 504, 504, 504, 504, 855, 504, 504, 504, 504, 2926, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 45869 */ 504, 504, 504, 3193, 504, 504, 504, 2938, 504, 504, 504, 504, 504, 504, 504, 504, 2946, 504, 504, 504,
  /* 45889 */ 504, 504, 0, 0, 0, 2215, 528, 528, 528, 528, 528, 528, 528, 1826, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 45911 */ 528, 2813, 528, 528, 528, 504, 504, 0, 528, 528, 2967, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 45932 */ 528, 528, 528, 3214, 0, 0, 528, 2979, 528, 528, 528, 528, 528, 528, 528, 528, 2987, 528, 528, 528, 528,
  /* 45953 */ 528, 504, 2297, 504, 0, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 3072, 483, 3074, 483, 483, 483,
  /* 45979 */ 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 857, 504, 504, 504, 504, 504, 3084, 504, 504, 504, 504,
  /* 46000 */ 504, 504, 504, 504, 504, 504, 504, 504, 2163, 504, 504, 504, 504, 504, 3094, 504, 504, 504, 504, 504, 504,
  /* 46021 */ 3100, 504, 3102, 504, 504, 504, 504, 504, 504, 2728, 504, 2731, 504, 504, 504, 504, 2736, 504, 504, 528,
  /* 46041 */ 528, 3128, 528, 3130, 528, 528, 528, 528, 528, 528, 528, 504, 0, 0, 0, 3490, 0, 483, 483, 483, 483, 3137,
  /* 46063 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3142, 0, 0, 0, 0, 0, 0, 610, 611, 0, 0, 0, 0, 0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
  /* 46095 */ 0, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 3151, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 254, 0, 0, 0, 327, 0, 0, 3156, 0,
  /* 46125 */ 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483, 483, 3162, 483, 483, 483, 3166, 483, 483, 483, 483, 483, 483,
  /* 46148 */ 483, 483, 483, 483, 483, 483, 1663, 483, 483, 483, 483, 483, 3175, 483, 483, 483, 504, 504, 504, 504, 504,
  /* 46169 */ 3180, 504, 504, 504, 3184, 504, 504, 504, 504, 504, 2517, 504, 504, 504, 2520, 504, 504, 504, 504, 504,
  /* 46189 */ 504, 504, 2943, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3089, 504, 504, 504, 504, 504, 504, 3410,
  /* 46209 */ 504, 504, 504, 3414, 504, 504, 504, 504, 504, 504, 504, 504, 3422, 528, 528, 528, 528, 528, 930, 528, 528,
  /* 46230 */ 528, 528, 528, 528, 528, 528, 528, 528, 1862, 528, 528, 528, 1867, 528, 528, 3426, 528, 528, 528, 528,
  /* 46250 */ 528, 528, 528, 528, 3434, 504, 0, 0, 0, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 3289, 3290, 0, 483, 3437, 0, 3439,
  /* 46275 */ 0, 3440, 3441, 483, 483, 483, 483, 483, 483, 483, 483, 483, 3447, 3448, 483, 504, 504, 504, 504, 504, 504,
  /* 46296 */ 504, 504, 504, 3454, 3455, 504, 528, 528, 528, 528, 528, 3198, 528, 528, 528, 3202, 528, 528, 528, 528,
  /* 46316 */ 528, 528, 528, 2590, 504, 504, 0, 0, 0, 2595, 0, 0, 483, 3512, 504, 3513, 528, 3514, 0, 483, 504, 528, 0,
  /* 46339 */ 483, 504, 528, 0, 483, 483, 483, 483, 483, 3168, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 504,
  /* 46360 */ 504, 3079, 504, 504, 504, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1142, 0, 0, 0, 73728, 77824,
  /* 46387 */ 0, 0, 381, 381, 0, 69632, 381, 0, 0, 381, 0, 0, 0, 0, 0, 3047424, 0, 0, 0, 3125248, 0, 102400, 0, 0, 0, 0,
  /* 46413 */ 0, 0, 1489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 381, 0, 439, 0, 0, 318,
  /* 46443 */ 318, 318, 318, 458, 318, 318, 439, 439, 439, 439, 439, 439, 439, 439, 439, 500, 523, 500, 523, 500, 500,
  /* 46464 */ 547, 523, 523, 523, 547, 523, 523, 523, 523, 523, 523, 523, 523, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0,
  /* 46486 */ 0, 0, 324, 324, 324, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 483, 483, 825, 483, 483,
  /* 46514 */ 483, 483, 504, 504, 504, 504, 504, 504, 504, 862, 504, 504, 504, 504, 504, 2727, 504, 504, 504, 504, 504,
  /* 46535 */ 504, 504, 504, 504, 504, 1747, 504, 504, 504, 504, 504, 528, 972, 528, 528, 528, 528, 504, 0, 0, 504, 504,
  /* 46557 */ 82172, 985, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3023, 0, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
  /* 46588 */ 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 483, 483, 483, 483, 483, 483, 1186, 483, 483, 483, 1195, 483,
  /* 46613 */ 483, 483, 483, 483, 483, 483, 2086, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2421, 483, 483, 483, 483,
  /* 46634 */ 483, 483, 1264, 1265, 835, 504, 504, 504, 504, 504, 504, 504, 504, 1276, 504, 504, 504, 1285, 528, 528,
  /* 46654 */ 528, 1448, 504, 0, 504, 504, 985, 0, 0, 0, 1457, 0, 0, 0, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46682 */ 1077, 0, 0, 0, 0, 1463, 0, 0, 0, 1469, 0, 0, 0, 1475, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 266, 0, 0, 0, 0, 0,
  /* 46712 */ 0, 0, 0, 1500, 0, 0, 0, 0, 0, 0, 0, 1508, 0, 0, 0, 0, 0, 0, 3027, 0, 0, 0, 0, 3288, 0, 0, 0, 483, 0, 0, 0,
  /* 46743 */ 1571, 0, 0, 0, 0, 0, 0, 1576, 0, 1578, 0, 0, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
  /* 46774 */ 0, 0, 0, 0, 0, 0, 1653, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2439,
  /* 46797 */ 1667, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1679, 483, 483, 483, 483, 483, 483, 1216, 483,
  /* 46817 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 2892, 483, 483, 483, 483, 483, 504, 504, 1786, 504, 504, 504,
  /* 46838 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3322, 528, 528, 528, 528, 1870, 528, 528, 528, 528, 528,
  /* 46859 */ 528, 528, 528, 528, 528, 528, 1882, 528, 528, 528, 528, 528, 3330, 528, 3332, 3333, 528, 3335, 528, 3337,
  /* 46879 */ 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 0, 528, 1903, 528, 528, 528,
  /* 46907 */ 528, 528, 528, 1910, 504, 504, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 712, 0, 1933, 0, 0, 0, 0, 0, 0,
  /* 46936 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2334, 483, 2068, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 46960 */ 483, 483, 3306, 504, 504, 2299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2349, 483, 483, 483, 2403,
  /* 46986 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 1678, 483, 483, 483, 1683, 2636, 0, 0, 0, 0,
  /* 47008 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2650, 0, 0, 2653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1035, 0, 0, 483,
  /* 47040 */ 2676, 483, 483, 483, 483, 483, 483, 2683, 483, 2685, 483, 483, 483, 483, 483, 483, 483, 2890, 483, 483,
  /* 47060 */ 483, 483, 483, 483, 483, 483, 1191, 1198, 483, 483, 483, 483, 483, 483, 2723, 504, 504, 504, 504, 504,
  /* 47080 */ 504, 2730, 504, 2732, 504, 504, 504, 504, 504, 504, 1773, 504, 504, 504, 504, 1779, 504, 504, 504, 504,
  /* 47100 */ 528, 2771, 528, 528, 528, 528, 528, 528, 2778, 528, 2780, 528, 528, 528, 528, 528, 528, 528, 2776, 528,
  /* 47120 */ 2779, 528, 528, 528, 528, 2784, 528, 0, 0, 2832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050, 324, 324,
  /* 47146 */ 504, 3187, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2174, 504, 504, 504, 0,
  /* 47167 */ 0, 0, 3398, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 3409, 3494, 483, 504, 504, 504, 504,
  /* 47188 */ 3498, 504, 528, 528, 528, 528, 3502, 528, 0, 0, 0, 0, 0, 3059712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
  /* 47214 */ 298, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0, 324, 0, 0, 254, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 0, 0, 0, 724, 0, 0,
  /* 47245 */ 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47278 */ 0, 0, 2853, 0, 0, 73728, 77824, 0, 0, 329, 329, 0, 69632, 329, 0, 0, 329, 0, 0, 0, 0, 267, 0, 267, 0, 0,
  /* 47304 */ 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 501, 524, 501, 501, 548, 524, 524, 524, 548, 524, 524, 524,
  /* 47330 */ 524, 524, 524, 524, 524, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47356 */ 0, 0, 1037, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 0, 504, 1290, 504,
  /* 47386 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2483, 504, 504, 504, 1424, 528, 528, 528,
  /* 47407 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2583, 528, 528, 528, 1560, 0, 0, 0, 0, 0, 0,
  /* 47430 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3017, 483, 1668, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 47454 */ 483, 483, 1696, 483, 483, 483, 483, 0, 2625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1481, 1482, 0, 320,
  /* 47481 */ 321, 322, 323, 0, 0, 324, 0, 0, 254, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
  /* 47511 */ 0, 0, 0, 0, 73728, 77824, 0, 0, 0, 0, 0, 69632, 0, 0, 391, 0, 391, 0, 0, 0, 0, 3041, 0, 0, 3044, 0, 0, 0,
  /* 47539 */ 0, 0, 0, 0, 0, 331, 0, 0, 332, 0, 0, 0, 0, 321, 391, 391, 0, 391, 0, 423, 0, 450, 450, 453, 453, 453, 453,
  /* 47566 */ 453, 459, 460, 453, 472, 472, 472, 472, 472, 472, 472, 472, 472, 502, 525, 502, 525, 502, 502, 549, 525,
  /* 47587 */ 525, 525, 549, 525, 525, 525, 525, 525, 525, 525, 525, 1, 16386, 3, 82172, 82172, 254, 0, 0, 483, 821,
  /* 47608 */ 483, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 3420, 504, 504, 528, 528, 968,
  /* 47629 */ 528, 528, 528, 528, 528, 894, 0, 0, 504, 504, 82172, 985, 0, 0, 0, 0, 0, 660, 0, 0, 726, 0, 0, 0, 0, 0, 0,
  /* 47656 */ 0, 0, 0, 0, 0, 0, 0, 0, 764, 0, 2325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1511, 0, 2453, 483, 483,
  /* 47686 */ 483, 483, 483, 483, 483, 483, 483, 483, 0, 0, 0, 0, 0, 0, 760, 720, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
  /* 47712 */ 180224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2306, 0, 0, 0, 0, 0, 0, 504, 504, 2487, 504, 504, 504, 504, 504, 504,
  /* 47738 */ 504, 504, 504, 504, 504, 504, 504, 2511, 504, 504, 504, 503, 526, 503, 503, 550, 526, 526, 526, 550, 526,
  /* 47759 */ 526, 526, 526, 526, 526, 526, 526, 1, 16386, 3, 82172, 82172, 254, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 0, 0,
  /* 47784 */ 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 628, 0, 0, 0, 0, 0, 0, 1008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2863,
  /* 47814 */ 2864, 0, 0, 0, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1079, 0, 0, 1225, 483, 483, 483, 483,
  /* 47843 */ 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 2712, 528, 528, 1408, 528, 528, 528, 528, 528, 528,
  /* 47864 */ 528, 528, 528, 528, 528, 528, 528, 2794, 528, 528, 528, 0, 1465, 0, 0, 0, 1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47890 */ 0, 307, 0, 366, 0, 0, 0, 504, 504, 504, 2168, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 47913 */ 2522, 504, 504, 504, 528, 528, 528, 2254, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
  /* 47933 */ 2975, 528, 528, 528, 504, 2473, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
  /* 47953 */ 2525, 0, 528, 528, 0, 0, 0, 260, 261, 0, 0, 264, 265, 0, 0, 0, 0, 0, 0, 571, 0, 0, 668, 0, 0, 0, 0, 0, 0,
  /* 47982 */ 0, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 483, 483, 826, 483, 483, 483, 483, 504, 504, 504, 504, 504, 504, 504,
  /* 48006 */ 504, 504, 2145, 504, 504, 2149, 504, 504, 504, 528, 973, 528, 528, 528, 528, 504, 0, 0, 504, 504, 82172,
  /* 48027 */ 985, 0, 0, 0, 0, 0, 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3349, 483, 483, 483, 483, 0, 1025, 0, 0, 0, 0,
  /* 48056 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1527, 0, 1344, 504, 504, 504, 504, 504, 504, 504, 504, 504, 30029, 1265,
  /* 48080 */ 909, 528, 528, 528, 528, 528, 528, 1908, 528, 504, 504, 504, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0,
  /* 48105 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1111, 0, 0, 0, 504, 504, 504, 1740,
  /* 48135 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2735, 504, 504, 504, 0, 0, 0, 1935, 0, 0, 0,
  /* 48158 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 1168, 0, 0, 0, 2012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
  /* 48189 */ 0, 2524, 0, 0, 0, 0, 0, 0, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2802, 528, 528, 528, 528, 528,
  /* 48212 */ 528, 528, 528, 528, 2561, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 3123, 528, 528, 528,
  /* 48233 */ 2818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3025, 0, 0, 2856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48265 */ 0, 1167, 0, 0, 504, 504, 504, 504, 2928, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 1304, 504,
  /* 48287 */ 504, 504, 1307, 528, 528, 528, 528, 2969, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 2803,
  /* 48307 */ 528, 528, 528, 528, 0, 0, 3026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1484, 0, 0, 504, 3093, 504, 504,
  /* 48334 */ 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 2934, 504, 504, 504, 0, 0, 73728, 77824, 0, 0,
  /* 48356 */ 0, 0, 0, 69632, 0, 0, 0, 0, 0, 398, 0, 1126400, 1126777, 1126777, 1126400, 0, 0, 0, 0, 1126777, 0, 0, 0,
  /* 48379 */ 0, 0, 0, 0, 1924, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16386, 0, 0, 0, 2187264, 0, 0, 1126400, 0, 0, 1126400, 0,
  /* 48405 */ 1126400, 1126400, 0, 0, 0, 0, 0, 1126953, 1126953, 1126953, 1126953, 1126953, 1126953, 1126953, 1126953,
  /* 48420 */ 1, 16386, 3, 0, 0, 2187264, 0, 0, 2130829, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 48436 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3117056, 424, 424,
  /* 48448 */ 1139161, 1139161, 1139161, 1139161, 1139161, 1139161, 1139161, 1139161, 1139161, 0, 0, 0, 0, 0, 0, 1121,
  /* 48464 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 0, 0, 424, 0, 0, 0, 0, 1, 16386, 3, 0, 0, 2187264, 0,
  /* 48495 */ 0, 0, 0, 267, 0, 196608, 0, 196608, 196608, 196608, 196608, 196608, 196608, 196608, 196608, 196608,
  /* 48511 */ 196875, 196875, 0, 0, 0, 0, 0, 0, 1150976, 378, 378, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 1961, 0, 0,
  /* 48538 */ 0, 1964, 0, 0, 0, 0, 0, 0, 0, 0, 1150976, 0, 1150976, 0, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 291, 292,
  /* 48564 */ 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2838, 0, 0, 2840, 0, 0, 0, 2744320, 0, 0, 0, 0, 0, 2940928, 0, 0,
  /* 48591 */ 2813952, 3149824, 2420736, 0, 2768896, 0, 0, 0, 0, 29199, 0, 0, 163840, 29199, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48613 */ 3159, 0, 483, 483, 483, 3161, 483, 483, 2482176, 0, 0, 0, 0, 2863104, 0, 0, 0, 0, 0, 0, 2822144, 0,
  /* 48635 */ 3219456, 2551808, 0, 0, 0, 2732032, 2867200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2183168, 2183168, 2183168,
  /* 48655 */ 2428928, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 48666 */ 2183168, 2535424
];

JSONiqParser.EXPECTED =
[
  /*    0 */ 992, 995, 997, 995, 1001, 1005, 1009, 1013, 1017, 2855, 1023, 1749, 2855, 1028, 2855, 1033, 1036, 1044,
  /*   18 */ 2855, 1051, 2856, 1058, 2855, 2573, 1318, 1318, 1064, 2281, 1069, 1136, 1114, 1075, 2855, 2855, 1087, 2855,
  /*   36 */ 2578, 1318, 1318, 1145, 2281, 2281, 1112, 1136, 1136, 1094, 1098, 2855, 1024, 2918, 1435, 1318, 1318, 2278,
  /*   54 */ 2281, 2281, 1083, 1136, 1136, 1105, 2855, 2855, 2258, 2919, 1318, 1318, 1081, 2281, 2281, 1135, 1136, 1138,
  /*   72 */ 2855, 1432, 2919, 1318, 1079, 2281, 1065, 1136, 1071, 2855, 2401, 1077, 1319, 2281, 1103, 1137, 2855, 1434,
  /*   90 */ 1317, 1109, 1147, 1038, 1441, 1316, 2280, 1118, 2275, 1124, 1120, 1128, 1040, 1132, 1142, 1151, 1155, 1159,
  /*  108 */ 1163, 1167, 1171, 1175, 1176, 1180, 1183, 1187, 1191, 1195, 1199, 2855, 2059, 2855, 1212, 2532, 2855, 2855,
  /*  126 */ 2855, 1740, 2855, 2855, 2855, 2691, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2689, 2855, 2855, 2855,
  /*  144 */ 2895, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855,
  /*  162 */ 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855,
  /*  180 */ 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855,
  /*  198 */ 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855,
  /*  216 */ 2855, 2855, 2855, 2855, 2855, 1254, 2855, 2075, 2709, 1218, 1222, 1226, 1230, 1234, 2855, 1859, 1239, 1243,
  /*  234 */ 1247, 1251, 1264, 2200, 1268, 2855, 2855, 1274, 1286, 1298, 1290, 2855, 2830, 2855, 1408, 1297, 2855, 1302,
  /*  252 */ 2855, 2855, 2683, 2061, 1306, 1310, 2855, 2820, 1323, 2855, 1495, 1333, 2855, 1940, 1885, 2855, 2855, 2012,
  /*  270 */ 1339, 1346, 2855, 2855, 1353, 2855, 2855, 1353, 2855, 2855, 1366, 2855, 1576, 1373, 1349, 2855, 1235, 1385,
  /*  288 */ 2855, 1214, 1334, 2855, 1391, 2696, 2646, 2797, 2855, 1397, 2855, 2797, 2855, 1359, 1575, 1362, 1407, 1412,
  /*  306 */ 2342, 1414, 1953, 1958, 1420, 1806, 2681, 1430, 1439, 2410, 1329, 2827, 1379, 1445, 2600, 1854, 2046, 1452,
  /*  324 */ 1461, 1474, 1480, 1476, 1484, 1488, 2855, 2298, 1494, 2423, 1499, 1503, 1509, 1513, 1516, 1522, 2428, 2190,
  /*  342 */ 1518, 1531, 1538, 1542, 1602, 1603, 1325, 2855, 1546, 1551, 1555, 1559, 1570, 1574, 2855, 1580, 2855, 1719,
  /*  360 */ 2855, 2855, 1327, 1590, 1588, 1595, 1599, 2841, 1609, 2855, 2568, 1614, 2855, 2584, 2855, 2855, 1415, 1619,
  /*  378 */ 1591, 1624, 1628, 1903, 1632, 2855, 1975, 1638, 2855, 1975, 1638, 2855, 1489, 1645, 1781, 1651, 1655, 1659,
  /*  396 */ 2855, 2260, 1665, 2855, 1891, 2855, 1490, 1827, 1448, 1670, 1679, 2101, 1685, 2226, 1679, 2330, 1647, 1690,
  /*  414 */ 1888, 2021, 2095, 2093, 1666, 1694, 2305, 2309, 2308, 1464, 1505, 1698, 1702, 1709, 1381, 1713, 1726, 1733,
  /*  432 */ 1737, 1753, 1757, 1761, 1765, 1705, 1769, 2457, 1773, 2855, 2631, 1060, 1778, 1785, 1797, 1801, 1804, 2159,
  /*  450 */ 1059, 1810, 1820, 1824, 1831, 2239, 1835, 1836, 2855, 1840, 1746, 1934, 1845, 1467, 1851, 2043, 2855, 2526,
  /*  468 */ 2855, 1260, 1858, 2855, 2867, 1053, 1863, 1867, 1634, 1876, 1847, 2855, 2855, 2236, 2855, 2855, 1882, 2855,
  /*  486 */ 2855, 1870, 1054, 1898, 1946, 1455, 1964, 1902, 2855, 2386, 2855, 2855, 2386, 2855, 2855, 1907, 1911, 1915,
  /*  504 */ 1921, 2947, 2855, 2855, 1931, 2855, 1980, 1938, 2146, 1743, 1944, 2475, 1970, 2855, 1277, 2855, 1970, 2855,
  /*  522 */ 1950, 1962, 1968, 1974, 1280, 1099, 1979, 1984, 2925, 2615, 2614, 1099, 1282, 1988, 2040, 2384, 1992, 1996,
  /*  540 */ 2001, 2352, 1956, 1816, 1423, 2000, 2005, 2009, 2787, 2016, 2020, 2855, 2377, 1564, 1457, 2025, 2029, 2033,
  /*  558 */ 2037, 2855, 2050, 2086, 1791, 2056, 2065, 2069, 2562, 2079, 2612, 1356, 2403, 2083, 1403, 1208, 2090, 1620,
  /*  576 */ 2100, 2855, 2105, 2855, 1205, 2633, 2376, 2111, 2116, 1393, 2120, 2472, 2855, 2127, 2855, 1686, 2134, 2855,
  /*  594 */ 2135, 2139, 2612, 1661, 2861, 2145, 1584, 2855, 2855, 2674, 2855, 2855, 2150, 2855, 2855, 2150, 2633, 1313,
  /*  612 */ 2794, 2901, 2158, 2855, 2163, 2855, 2877, 2855, 2855, 2810, 2682, 2170, 1582, 2174, 2934, 2855, 2872, 1341,
  /*  630 */ 2310, 2180, 2185, 2052, 2855, 2945, 2733, 2855, 2735, 1566, 2233, 2181, 2855, 2189, 2735, 2194, 2181, 2907,
  /*  648 */ 2913, 2198, 2204, 2210, 1788, 2217, 2206, 2221, 2215, 2213, 2225, 2855, 2855, 2855, 2855, 1673, 1547, 2230,
  /*  666 */ 2243, 2247, 2251, 2855, 2107, 1680, 2255, 1793, 2264, 2268, 2272, 2285, 2291, 2021, 2297, 2302, 2434, 1813,
  /*  684 */ 2314, 2855, 1400, 2855, 1878, 2855, 1342, 2318, 2855, 2323, 2129, 2328, 2334, 2338, 2855, 2165, 2855, 2855,
  /*  702 */ 2800, 2855, 2855, 2166, 2855, 2855, 2324, 2130, 2346, 2356, 2855, 1872, 2370, 2855, 1872, 2370, 2855, 1872,
  /*  720 */ 2370, 2371, 1681, 2360, 2364, 2855, 2176, 2855, 2855, 2368, 2855, 2319, 2375, 2381, 2390, 2394, 2341, 2398,
  /*  738 */ 2855, 1716, 2855, 2407, 2737, 2414, 2349, 1923, 2855, 1925, 1923, 1894, 2418, 2422, 2427, 2432, 1675, 2659,
  /*  756 */ 2438, 2444, 1610, 1293, 2448, 2454, 2461, 2465, 2450, 2469, 2723, 2481, 2720, 2485, 2489, 2493, 2855, 2293,
  /*  774 */ 1369, 2499, 2503, 2507, 2511, 2515, 2855, 2520, 1426, 2524, 2530, 2536, 2540, 2440, 2544, 2855, 2551, 2555,
  /*  792 */ 2559, 1047, 2566, 2572, 2516, 2577, 2855, 2582, 2855, 1470, 2855, 2651, 2588, 2593, 1019, 2597, 2604, 2855,
  /*  810 */ 2609, 2855, 2329, 2619, 2855, 1335, 2628, 2855, 2652, 2589, 2637, 2643, 2650, 2855, 2656, 2855, 2855, 2656,
  /*  828 */ 2855, 2855, 2663, 2855, 2667, 2671, 2547, 2680, 2855, 2687, 2855, 1416, 2695, 2855, 1722, 2700, 2704, 1927,
  /*  846 */ 2708, 2676, 1341, 2624, 1259, 2776, 2713, 2717, 1090, 2855, 2623, 2621, 2855, 2727, 2731, 1641, 1257, 2287,
  /*  864 */ 2329, 2741, 1640, 1525, 1562, 2745, 1270, 2751, 2152, 2072, 1927, 2747, 1202, 2755, 2154, 2883, 2855, 2855,
  /*  882 */ 2855, 2112, 2759, 2763, 1534, 2767, 2771, 2775, 2855, 2780, 2855, 2784, 2791, 2804, 2808, 2814, 2815, 2855,
  /*  900 */ 2639, 2819, 1604, 2123, 2477, 2855, 2855, 2824, 2855, 2495, 2855, 2605, 2834, 2855, 2839, 2855, 2845, 2850,
  /*  918 */ 2855, 2855, 2140, 2855, 2855, 1917, 2855, 2855, 2141, 2855, 2096, 2840, 1605, 2889, 2854, 2855, 1615, 2860,
  /*  936 */ 2855, 1615, 2860, 2855, 1615, 2860, 1729, 1774, 2865, 2871, 2855, 1387, 2855, 2855, 1376, 2855, 2855, 2876,
  /*  954 */ 2881, 2887, 2893, 2855, 2899, 2855, 2905, 2855, 2911, 2917, 2846, 2855, 2923, 2835, 2855, 2923, 2929, 2855,
  /*  972 */ 1527, 2855, 2933, 2938, 2942, 2855, 2855, 1841, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855, 2855,
  /*  990 */ 2855, 1030, 2951, 3030, 2958, 2982, 2982, 2982, 2982, 2990, 2972, 2969, 2966, 2982, 2983, 2962, 2961, 2979,
  /* 1008 */ 2987, 2975, 2999, 2999, 3003, 3007, 3011, 3015, 3019, 3023, 3092, 5185, 5185, 3045, 4315, 3027, 5185, 5185,
  /* 1026 */ 5185, 3097, 5185, 4658, 5185, 5185, 3093, 3294, 3295, 5008, 5012, 3843, 3034, 3034, 3034, 3042, 5185, 5006,
  /* 1044 */ 3041, 5077, 3087, 5185, 3045, 5185, 4978, 5185, 5064, 5185, 5185, 3128, 3440, 5059, 4191, 5185, 5185, 5185,
  /* 1062 */ 3126, 5185, 5011, 5012, 5012, 5012, 3109, 5012, 3845, 3034, 3034, 3034, 3114, 3068, 3092, 5185, 5185, 3295,
  /* 1080 */ 3295, 3295, 5010, 5012, 5012, 5014, 3034, 3073, 3077, 3561, 5185, 3046, 5185, 4003, 3034, 3084, 3064, 3069,
  /* 1098 */ 3091, 5185, 5185, 5185, 3275, 5012, 5013, 3034, 3034, 3105, 3086, 3295, 3842, 5012, 5012, 3844, 3034, 3034,
  /* 1116 */ 3055, 3063, 5016, 3034, 3034, 3036, 3558, 5325, 3295, 5011, 5012, 5015, 3295, 3296, 5012, 5014, 3295, 3842,
  /* 1134 */ 5012, 5016, 3034, 3034, 3034, 3034, 3035, 3058, 3034, 3044, 3293, 3295, 3295, 5012, 5012, 5015, 3034, 5011,
  /* 1152 */ 3108, 3034, 3037, 3292, 3295, 3842, 3108, 3034, 3043, 5007, 5013, 3041, 3293, 3842, 5017, 3840, 3110, 3122,
  /* 1170 */ 3133, 3135, 4777, 3139, 3143, 3154, 3161, 3161, 3161, 3156, 3147, 3151, 3160, 3161, 3162, 3166, 3170, 3176,
  /* 1188 */ 3174, 3180, 3184, 3188, 3192, 3195, 3199, 3203, 3207, 3211, 3215, 4940, 5337, 5184, 5185, 3047, 4659, 5185,
  /* 1206 */ 3079, 4423, 3746, 4626, 5185, 4389, 4912, 3100, 5185, 5185, 3324, 3429, 4189, 5185, 3245, 3677, 4029, 4512,
  /* 1224 */ 3251, 3253, 3257, 3261, 3265, 3269, 3273, 5185, 4329, 3231, 4313, 5185, 5185, 5185, 3323, 3279, 3284, 5185,
  /* 1242 */ 5372, 5097, 4460, 3316, 3291, 3980, 5185, 5185, 3300, 5186, 3311, 3315, 5185, 3230, 4312, 5185, 3247, 2995,
  /* 1260 */ 5185, 5185, 5185, 5107, 3974, 5185, 5185, 3974, 5319, 3404, 5185, 5185, 3332, 5185, 3543, 5185, 3285, 5185,
  /* 1278 */ 3275, 4154, 5185, 3275, 4180, 5185, 5185, 4362, 4492, 3321, 3328, 4477, 4571, 3358, 4999, 5185, 3286, 3462,
  /* 1296 */ 4519, 3367, 5185, 5185, 5185, 3336, 4363, 5185, 4005, 3404, 3874, 5185, 5185, 4591, 3377, 3381, 3387, 5185,
  /* 1314 */ 3287, 4452, 5185, 3294, 3295, 3295, 3295, 3295, 5008, 3398, 3386, 5185, 5185, 3391, 3709, 5185, 5185, 3490,
  /* 1332 */ 5185, 3382, 3388, 5185, 5185, 5185, 3342, 3322, 4270, 3746, 5185, 5185, 5185, 4396, 3996, 3424, 3411, 5185,
  /* 1350 */ 3423, 3430, 3389, 3323, 3399, 3412, 5185, 3447, 4369, 5185, 3451, 4314, 5185, 3459, 3218, 4140, 4363, 4108,
  /* 1368 */ 3405, 5185, 3478, 5185, 4330, 4409, 3416, 3373, 5185, 3495, 5324, 5185, 3500, 5185, 5185, 3625, 4101, 3428,
  /* 1386 */ 3387, 5185, 5185, 3494, 5323, 4890, 3405, 5185, 5185, 3534, 4433, 5185, 4862, 3445, 5185, 3518, 4633, 5185,
  /* 1404 */ 3535, 4434, 4652, 3467, 5185, 5185, 5185, 3362, 5185, 4861, 3474, 5185, 5185, 5185, 3390, 3643, 4259, 4139,
  /* 1422 */ 3482, 5185, 3545, 5185, 5063, 5052, 5129, 4901, 3486, 4314, 5185, 5185, 3559, 5185, 5185, 5185, 3293, 5185,
  /* 1440 */ 5042, 5185, 5185, 3560, 5185, 3767, 5185, 3766, 4314, 3044, 4735, 3536, 4000, 3516, 3943, 4314, 4106, 5185,
  /* 1458 */ 5185, 4235, 4247, 3909, 5185, 4628, 5185, 3562, 3881, 5185, 3573, 4044, 5185, 3586, 5031, 5347, 3542, 3694,
  /* 1476 */ 5185, 3541, 5185, 4001, 5185, 5184, 3541, 3943, 3552, 4002, 5185, 3551, 3552, 5185, 5185, 5185, 3392, 5185,
  /* 1494 */ 3556, 5185, 5185, 5185, 3396, 3567, 5185, 5185, 3577, 3583, 3591, 5185, 5185, 3625, 5185, 5058, 3602, 3606,
  /* 1512 */ 3610, 3614, 3616, 3620, 3620, 3623, 5185, 5185, 3632, 3638, 5185, 4613, 3557, 5185, 3594, 5185, 5185, 5185,
  /* 1530 */ 5383, 3648, 3652, 3656, 4623, 3674, 4233, 5204, 3663, 3668, 4069, 3685, 3692, 4243, 3698, 3703, 4324, 5185,
  /* 1548 */ 5185, 5185, 3503, 3718, 5185, 3543, 3633, 3753, 3723, 3651, 4601, 5276, 5185, 4150, 5185, 3596, 5185, 5185,
  /* 1566 */ 5248, 5185, 4846, 5185, 4192, 3100, 5185, 3728, 3732, 5185, 5185, 5185, 3546, 5185, 3740, 3745, 5185, 5185,
  /* 1584 */ 3634, 3687, 4653, 4624, 5185, 4583, 5185, 5185, 3813, 5185, 5185, 4192, 3752, 4394, 5328, 3353, 4980, 4182,
  /* 1602 */ 5185, 3699, 5185, 5185, 5185, 3418, 4628, 3759, 3733, 5185, 5185, 4752, 3764, 5185, 5185, 5185, 3563, 3771,
  /* 1620 */ 5185, 5185, 5185, 3579, 4583, 5185, 3724, 5324, 5004, 5185, 3099, 3863, 3306, 3789, 5185, 5185, 3815, 5185,
  /* 1638 */ 3307, 3790, 5185, 5185, 4002, 5185, 5185, 4391, 5185, 5185, 4132, 5185, 3837, 3753, 3796, 4738, 3354, 3864,
  /* 1656 */ 5185, 5185, 4194, 3305, 3808, 5185, 5185, 4010, 4239, 3733, 5185, 5185, 5185, 3627, 5174, 3286, 5185, 4594,
  /* 1674 */ 4843, 5185, 5185, 4756, 3746, 3819, 5185, 5185, 5185, 3734, 4606, 3823, 5185, 5185, 5185, 3747, 4102, 4394,
  /* 1692 */ 4746, 3991, 4469, 5185, 3316, 4392, 3317, 3892, 3352, 5247, 4380, 4384, 5185, 3624, 4938, 4936, 4356, 4921,
  /* 1710 */ 5185, 5185, 4919, 3896, 4379, 4383, 5060, 4713, 4697, 5185, 3739, 3744, 5185, 3640, 3644, 2995, 4382, 5185,
  /* 1728 */ 4381, 5185, 3747, 5316, 3561, 3626, 3887, 4220, 4384, 4350, 5185, 4221, 5185, 3785, 3461, 5185, 3127, 4128,
  /* 1746 */ 5185, 3129, 4026, 5185, 3226, 4171, 4618, 3900, 4738, 4222, 5060, 3907, 3624, 4223, 4440, 4737, 4222, 4349,
  /* 1764 */ 4922, 4221, 5060, 3915, 4936, 4770, 4904, 4771, 3902, 3921, 5185, 5185, 5185, 3798, 3925, 3932, 3936, 5185,
  /* 1782 */ 3797, 3719, 3559, 3829, 4086, 3942, 4021, 5185, 3997, 5185, 3800, 5185, 5185, 4553, 5249, 3712, 3947, 3951,
  /* 1800 */ 3955, 3959, 3962, 3966, 3968, 3968, 5185, 5185, 4139, 3482, 3221, 3441, 5185, 5248, 3746, 3572, 5185, 3802,
  /* 1818 */ 5185, 5062, 5362, 3533, 3972, 3978, 4728, 5185, 4601, 5185, 3812, 5185, 3418, 4923, 3984, 4986, 3989, 4019,
  /* 1836 */ 5185, 4015, 4020, 5185, 5312, 5185, 5185, 5185, 3801, 4059, 5122, 5185, 5185, 4163, 4091, 4049, 5024, 4055,
  /* 1854 */ 5185, 3910, 5185, 3522, 4080, 5185, 5185, 5185, 3938, 5059, 5185, 5361, 4330, 3858, 4058, 5121, 5185, 3917,
  /* 1872 */ 5185, 5185, 4207, 4692, 4085, 5024, 5185, 5185, 4201, 4641, 3390, 4164, 4092, 5185, 4004, 3403, 5185, 3302,
  /* 1890 */ 3849, 5185, 3304, 3807, 5185, 3407, 4418, 3093, 5185, 5361, 3774, 4096, 4117, 5185, 5185, 5185, 4060, 4341,
  /* 1908 */ 5185, 5185, 3537, 4124, 5059, 3754, 4854, 5144, 5122, 5185, 5185, 4265, 4269, 5389, 3877, 5185, 5185, 4309,
  /* 1926 */ 3454, 5185, 5185, 4339, 5185, 5185, 4707, 4155, 5185, 4033, 4330, 4038, 4708, 3406, 5185, 5185, 4342, 5185,
  /* 1944 */ 5360, 5039, 4384, 5185, 5185, 3814, 4343, 3537, 4159, 5185, 4040, 3406, 5185, 3543, 5185, 5061, 5185, 4393,
  /* 1962 */ 4168, 4728, 5185, 5185, 4463, 4112, 4138, 5185, 5185, 4559, 4145, 5185, 4175, 5185, 5185, 5185, 4061, 4180,
  /* 1980 */ 5185, 5185, 5185, 4118, 4364, 4186, 5185, 5119, 4199, 5182, 5185, 4526, 5123, 3406, 5185, 4845, 4098, 5185,
  /* 1998 */ 5185, 5063, 3801, 5185, 5062, 5185, 5061, 3546, 5061, 5185, 4099, 3544, 5185, 3546, 3544, 5185, 5185, 5196,
  /* 2016 */ 4227, 3544, 4725, 4792, 4794, 5185, 5185, 5185, 4119, 4498, 4251, 5185, 4263, 4274, 4278, 3419, 4818, 4282,
  /* 2034 */ 4286, 4290, 4294, 4298, 4299, 4303, 5185, 4050, 4205, 5185, 4065, 4073, 5185, 3911, 5185, 3531, 4764, 4240,
  /* 2052 */ 5185, 5185, 4481, 4486, 3534, 4319, 5169, 5185, 4076, 5185, 5185, 3321, 3372, 4626, 4565, 4323, 3339, 4328,
  /* 2070 */ 4659, 4337, 3045, 5185, 3679, 3046, 3352, 3235, 3239, 4354, 5185, 4576, 4354, 4377, 5185, 3419, 5185, 4100,
  /* 2088 */ 5208, 4429, 4402, 5185, 4408, 5185, 4119, 3853, 5185, 5185, 5185, 3748, 4414, 5185, 5185, 5185, 4120, 3080,
  /* 2106 */ 4424, 5185, 5185, 4595, 4844, 4239, 5185, 5185, 5185, 4194, 5207, 4428, 5185, 3799, 4974, 3746, 5195, 4628,
  /* 2124 */ 3047, 5185, 4939, 3598, 4438, 5185, 5185, 4645, 3813, 5327, 4216, 5185, 5185, 5185, 4214, 4218, 5185, 5185,
  /* 2142 */ 5185, 4267, 5185, 4428, 5185, 5185, 5185, 4361, 3747, 4448, 5185, 5185, 4659, 5185, 3680, 5185, 4739, 5185,
  /* 2160 */ 5185, 5185, 4373, 4554, 4468, 5185, 5185, 4673, 4677, 5185, 3505, 5185, 5185, 4473, 4398, 4625, 5185, 5185,
  /* 2178 */ 4691, 4697, 3876, 5185, 5185, 5185, 4491, 5185, 5292, 5185, 4847, 4496, 5185, 5185, 5185, 4584, 4499, 4848,
  /* 2196 */ 5144, 4503, 4510, 4516, 5185, 5185, 4730, 5185, 3927, 5185, 3926, 5185, 3999, 5185, 4022, 5185, 4475, 3999,
  /* 2214 */ 3998, 3996, 5185, 4022, 5185, 3997, 5185, 3927, 3996, 5185, 3926, 3998, 5185, 5185, 5185, 4594, 3470, 3813,
  /* 2232 */ 4131, 5294, 3688, 4505, 5185, 4162, 4090, 5185, 3995, 4009, 4014, 4525, 5327, 3871, 5378, 4530, 4534, 4538,
  /* 2250 */ 4541, 4545, 4545, 4545, 4547, 4646, 5185, 3125, 5185, 4193, 5185, 5185, 3303, 3806, 4558, 4564, 5185, 3561,
  /* 2268 */ 3780, 4569, 4666, 4575, 5180, 5185, 4580, 5185, 4193, 5325, 3295, 3295, 5009, 5012, 5012, 5012, 5012, 5185,
  /* 2286 */ 4588, 5185, 5185, 4803, 5178, 4588, 4599, 5185, 5185, 4832, 4241, 4683, 5185, 5185, 5185, 4612, 5185, 4605,
  /* 2304 */ 5185, 5327, 3862, 5184, 5146, 3868, 5185, 5185, 5185, 3792, 4192, 4610, 4617, 4622, 4640, 5185, 5185, 5185,
  /* 2322 */ 4636, 5185, 4840, 4844, 5185, 5185, 4736, 5185, 5185, 5185, 4659, 3827, 4650, 5248, 3791, 4241, 5185, 4657,
  /* 2340 */ 4664, 4520, 5185, 5185, 5185, 4861, 5185, 5363, 4395, 5249, 4170, 4519, 5185, 4199, 5184, 5060, 3570, 5185,
  /* 2358 */ 5154, 4670, 5325, 5185, 4939, 4068, 4453, 5180, 5185, 4687, 4635, 4692, 5025, 5185, 5185, 5185, 4682, 4693,
  /* 2376 */ 5185, 5185, 5185, 4763, 4239, 5185, 4521, 4843, 5185, 4211, 5185, 5185, 4464, 4113, 3735, 4703, 4736, 5363,
  /* 2394 */ 4395, 3463, 2954, 4660, 3985, 4718, 4634, 5185, 4242, 5185, 5185, 3316, 3527, 5185, 4717, 4678, 5185, 4257,
  /* 2412 */ 3928, 5104, 3511, 5325, 5185, 4734, 4744, 3903, 5185, 2953, 4518, 5185, 5185, 5185, 4929, 4757, 5185, 5185,
  /* 2430 */ 5185, 4954, 5185, 4751, 5185, 5185, 4939, 4651, 3463, 3777, 5185, 5185, 4944, 5185, 4752, 5185, 5185, 5091,
  /* 2448 */ 4623, 5346, 5185, 5345, 5185, 4775, 5185, 5344, 4506, 3460, 3461, 3117, 4906, 4768, 5343, 3746, 3705, 5185,
  /* 2466 */ 5344, 4992, 4782, 4623, 5346, 4781, 5185, 4314, 4408, 5185, 4137, 5185, 5185, 4365, 3831, 4045, 4802, 4947,
  /* 2484 */ 3704, 4948, 4786, 4800, 4798, 4789, 4807, 4815, 4822, 4823, 4827, 5185, 5185, 5027, 5305, 5045, 4404, 5185,
  /* 2502 */ 4837, 3437, 4852, 4858, 4866, 4870, 4874, 4878, 4882, 4885, 4894, 4897, 4894, 4888, 5185, 5185, 5185, 4996,
  /* 2520 */ 4833, 5185, 3478, 3535, 3059, 3664, 5185, 5185, 5108, 4081, 3046, 4333, 5185, 4034, 3225, 5185, 4658, 3783,
  /* 2538 */ 4910, 3280, 4916, 4927, 5185, 4933, 5185, 4944, 4952, 5185, 4338, 5185, 5096, 5185, 4958, 4962, 3477, 4332,
  /* 2556 */ 3545, 5269, 3884, 4968, 3100, 4410, 5185, 4347, 5185, 4576, 5185, 4984, 5185, 5185, 5156, 3758, 4990, 5185,
  /* 2574 */ 5185, 5185, 5005, 5021, 5185, 5185, 5185, 5007, 3587, 5032, 5185, 5185, 5158, 3760, 3220, 3534, 5062, 5051,
  /* 2592 */ 5074, 5128, 5056, 5185, 3455, 5185, 4984, 5185, 4000, 3509, 5185, 3515, 5293, 5185, 5185, 5185, 5026, 3342,
  /* 2610 */ 3346, 3350, 5185, 4360, 5185, 5185, 4560, 4176, 5185, 3344, 3348, 5185, 5185, 5162, 5185, 5185, 5185, 5133,
  /* 2628 */ 3346, 3350, 5068, 5185, 4372, 5185, 5185, 4051, 5185, 5081, 5087, 5185, 5185, 5185, 5298, 3046, 5185, 5095,
  /* 2646 */ 5185, 4385, 4133, 3714, 4306, 5185, 5185, 5185, 5036, 3220, 3390, 5101, 5112, 5185, 4417, 4343, 4761, 3390,
  /* 2664 */ 5101, 5112, 3634, 4549, 4195, 4331, 4810, 5270, 5002, 3525, 5185, 4444, 5185, 5185, 4659, 5138, 4419, 5185,
  /* 2682 */ 5185, 5185, 5060, 5185, 5185, 3642, 2993, 5185, 5185, 5185, 5327, 3101, 5185, 2994, 5185, 5185, 5185, 5061,
  /* 2700 */ 5145, 5185, 5185, 5116, 5185, 4811, 5127, 3833, 4000, 5185, 5185, 5185, 5070, 5142, 5185, 5185, 5151, 5185,
  /* 2718 */ 5047, 3856, 3746, 4947, 5264, 4801, 3704, 3746, 4800, 5162, 5145, 5185, 5167, 5267, 5173, 5185, 5185, 5185,
  /* 2736 */ 5370, 5185, 5185, 4722, 5185, 5163, 5185, 3888, 4148, 3659, 5185, 3047, 5185, 3681, 5185, 3331, 5185, 3241,
  /* 2754 */ 4659, 3671, 4340, 5185, 4339, 5190, 4740, 5194, 4624, 4231, 3317, 5200, 4624, 5212, 5216, 5220, 5224, 5228,
  /* 2772 */ 5232, 5242, 5235, 5238, 5185, 5185, 5185, 5137, 5185, 5329, 5246, 5336, 5185, 5253, 3417, 4628, 3544, 5062,
  /* 2790 */ 3545, 4340, 5185, 4828, 5185, 4457, 3286, 5185, 4141, 3434, 5185, 3517, 4675, 4634, 3996, 5185, 5261, 5274,
  /* 2808 */ 3628, 5280, 5185, 5185, 5257, 5185, 4964, 5185, 5185, 5286, 4738, 4229, 5185, 5185, 5185, 5146, 5185, 4699,
  /* 2826 */ 5324, 5185, 4482, 3492, 5185, 3562, 3363, 3368, 5304, 5185, 5185, 5185, 5147, 3748, 5300, 5185, 5185, 5185,
  /* 2844 */ 5157, 3417, 4627, 4339, 5185, 4747, 4045, 5185, 3547, 4254, 4971, 5185, 5185, 5185, 5185, 3051, 5309, 5185,
  /* 2862 */ 5185, 5185, 5207, 3801, 3047, 5185, 5185, 5289, 5185, 5083, 5185, 5185, 5185, 5255, 3496, 5185, 5185, 5185,
  /* 2880 */ 5256, 5333, 4193, 5185, 5185, 5324, 5185, 5185, 4628, 4340, 5185, 3118, 5185, 3126, 5362, 5185, 5185, 5326,
  /* 2898 */ 3100, 3562, 5352, 5185, 5185, 5353, 4397, 5185, 5341, 5185, 5185, 5369, 5185, 5185, 5351, 5185, 5185, 5371,
  /* 2916 */ 5185, 5357, 3561, 5185, 5185, 5185, 3292, 5185, 5147, 5185, 5185, 5390, 5185, 5367, 5185, 5185, 4629, 5376,
  /* 2934 */ 5185, 5185, 5185, 5282, 5185, 5382, 5185, 5089, 5185, 5387, 5185, 5185, 4490, 5185, 5185, 4705, 4709, 5412,
  /* 2952 */ 5394, 5930, 5429, 5697, 5429, 5429, 5425, 5401, 5427, 5641, 5426, 5420, 5641, 5641, 5422, 5420, 5420, 5641,
  /* 2970 */ 5641, 5641, 5570, 5419, 5427, 5641, 5641, 5436, 5438, 6108, 5434, 5427, 5641, 5641, 5641, 5641, 5424, 5812,
  /* 2988 */ 5641, 5436, 5641, 5641, 5641, 5851, 5846, 6234, 5429, 5429, 5429, 5442, 5442, 5442, 5442, 5439, 5440, 5444,
  /* 3006 */ 5446, 5448, 5447, 5451, 5453, 5455, 5449, 5457, 5458, 5457, 5457, 5458, 5459, 5412, 5394, 5929, 5416, 5816,
  /* 3024 */ 5642, 5643, 5880, 5429, 5964, 5575, 5429, 5398, 5817, 6099, 5704, 5704, 5704, 5704, 5585, 5429, 5429, 5704,
  /* 3042 */ 5704, 5704, 5892, 5429, 5429, 5429, 5405, 5429, 5429, 5469, 5429, 5429, 5863, 5704, 5704, 5892, 5580, 5429,
  /* 3060 */ 5429, 5429, 5416, 5716, 5587, 5587, 5587, 5490, 5490, 5797, 5797, 5797, 5797, 5911, 5470, 5429, 5677, 5466,
  /* 3078 */ 5466, 5429, 5429, 5404, 5578, 6071, 5580, 5586, 5587, 5587, 5797, 5797, 5429, 5797, 5881, 5429, 5429, 5429,
  /* 3096 */ 5395, 5429, 5862, 5799, 5429, 5429, 5414, 5429, 5429, 5704, 5704, 5585, 5580, 5580, 5580, 5704, 5704, 5429,
  /* 3114 */ 5704, 5704, 5585, 5892, 5429, 5881, 5429, 5429, 5493, 5580, 5704, 5698, 5429, 5429, 5429, 6002, 5406, 5429,
  /* 3132 */ 5429, 5581, 5698, 5581, 5698, 5581, 5429, 5964, 6233, 6241, 5894, 5473, 5895, 5503, 5481, 5502, 5517, 5515,
  /* 3150 */ 5505, 5967, 5508, 5510, 5484, 5487, 5894, 5894, 5500, 5894, 5485, 5894, 5894, 5894, 5894, 5897, 5899, 5899,
  /* 3168 */ 5514, 5519, 5968, 5522, 5511, 5894, 5899, 5521, 5894, 5894, 5895, 6243, 6243, 5899, 5896, 6242, 5411, 5506,
  /* 3186 */ 5524, 5526, 5516, 5866, 5482, 5528, 5529, 5534, 5536, 5538, 5538, 5538, 5538, 5541, 5541, 5540, 5543, 5545,
  /* 3204 */ 5893, 5795, 5894, 5898, 5894, 5512, 5900, 5548, 5550, 5551, 5554, 5551, 5551, 5552, 5429, 5399, 5429, 5429,
  /* 3222 */ 5407, 5429, 5411, 5558, 5429, 5429, 5429, 5461, 5911, 5726, 5675, 5640, 5741, 5429, 5911, 5911, 5799, 5724,
  /* 3240 */ 5567, 5429, 5429, 5404, 5593, 5911, 5572, 5429, 5429, 5404, 5710, 5595, 5597, 5599, 5599, 5600, 5602, 5603,
  /* 3258 */ 5604, 5606, 5607, 5610, 5610, 5609, 5608, 5612, 5612, 5612, 5612, 5614, 5617, 5617, 5616, 5617, 5617, 5429,
  /* 3276 */ 5429, 5406, 5879, 5857, 5429, 5429, 5429, 5479, 6077, 5767, 5997, 5429, 5429, 5429, 5491, 5627, 5429, 5429,
  /* 3294 */ 5429, 5493, 5493, 5493, 5493, 5580, 5632, 5635, 5429, 5429, 5406, 5889, 5488, 5588, 5922, 5563, 5750, 5658,
  /* 3312 */ 5660, 5429, 5625, 5663, 5429, 5429, 5429, 5495, 5429, 5925, 5794, 5429, 5429, 5411, 5890, 5718, 6203, 5665,
  /* 3330 */ 5532, 5429, 5404, 5997, 5429, 5429, 5429, 6070, 5417, 5429, 5404, 6061, 5429, 5404, 6224, 5588, 6226, 5638,
  /* 3348 */ 5790, 5752, 5847, 5416, 5429, 5429, 6002, 5429, 5429, 5416, 5411, 6124, 5666, 5927, 5411, 6124, 5728, 5682,
  /* 3366 */ 5720, 5720, 5708, 5760, 5429, 5429, 6155, 5714, 5974, 5429, 5399, 5429, 5823, 5735, 5890, 5700, 5926, 5720,
  /* 3384 */ 6102, 5851, 6102, 5851, 5793, 5744, 5429, 5429, 5429, 5577, 5654, 5872, 5429, 5889, 5891, 5718, 5926, 5720,
  /* 3402 */ 5639, 5739, 5790, 5592, 5766, 5429, 5429, 5429, 5531, 5639, 6107, 5792, 5755, 5429, 5754, 5429, 5429, 5429,
  /* 3420 */ 5643, 5429, 5429, 5429, 5889, 5796, 5926, 5720, 5718, 5926, 5720, 6096, 5851, 5793, 5806, 5793, 5744, 5429,
  /* 3438 */ 5406, 5912, 5411, 5495, 5403, 5965, 6001, 5807, 5755, 5429, 5429, 5406, 6241, 5429, 5758, 5764, 5781, 5416,
  /* 3456 */ 5429, 5429, 5921, 5754, 5429, 5429, 5768, 5429, 5429, 5930, 5429, 5637, 5807, 5696, 5767, 5395, 5495, 6113,
  /* 3474 */ 5806, 5793, 5766, 5429, 5407, 5429, 5429, 5429, 5701, 5637, 5807, 5766, 5796, 5926, 5806, 5765, 5583, 5701,
  /* 3492 */ 5764, 5766, 5429, 5429, 5412, 5651, 5588, 5974, 5429, 5780, 5766, 5429, 5410, 5429, 5429, 5768, 5929, 5784,
  /* 3510 */ 5767, 5429, 5429, 5464, 5919, 5429, 5786, 5429, 5429, 5429, 5645, 6161, 5429, 5788, 5767, 5429, 5416, 5429,
  /* 3528 */ 5970, 6001, 5698, 5674, 5767, 5429, 5429, 5470, 5429, 5429, 5429, 5799, 5407, 5429, 5788, 5429, 5429, 5429,
  /* 3546 */ 5646, 5429, 5429, 5429, 5559, 5655, 5429, 5429, 5655, 5429, 5749, 6232, 5429, 5429, 5429, 5652, 5429, 5429,
  /* 3564 */ 5429, 5411, 5645, 5687, 5810, 5792, 5429, 5429, 6158, 5429, 5429, 5429, 6095, 5919, 5643, 5429, 5429, 5577,
  /* 3582 */ 6071, 5429, 5919, 5747, 5429, 5429, 6218, 5588, 6215, 5429, 5767, 6001, 5429, 5429, 6249, 5767, 5429, 5429,
  /* 3600 */ 6091, 5723, 5429, 5815, 5814, 5886, 5821, 5865, 5825, 5838, 5827, 5830, 5831, 5831, 5829, 5830, 5833, 5833,
  /* 3618 */ 5834, 5835, 5835, 5835, 5835, 5835, 5429, 5429, 5429, 5654, 5429, 5429, 5429, 5661, 5646, 5837, 5429, 5429,
  /* 3636 */ 5429, 5668, 5429, 5822, 5429, 5429, 5577, 6208, 5497, 5805, 5851, 5846, 5702, 5429, 5652, 5698, 5429, 5429,
  /* 3654 */ 5656, 5429, 5429, 5840, 5849, 5429, 5429, 6249, 6156, 5854, 5429, 5429, 5429, 5679, 5429, 5893, 5859, 5429,
  /* 3672 */ 5429, 6254, 5429, 5429, 6258, 5429, 5467, 5429, 5429, 5404, 5974, 5429, 5405, 5429, 5861, 5429, 5429, 5583,
  /* 3690 */ 5702, 5429, 5868, 5431, 5429, 5429, 5583, 5721, 5430, 5429, 5429, 5975, 5870, 5870, 5429, 5429, 5429, 5684,
  /* 3708 */ 5712, 5872, 5569, 6001, 5429, 5470, 5429, 5816, 5416, 5429, 5722, 5429, 6155, 5429, 5429, 5702, 5429, 5893,
  /* 3726 */ 5429, 5495, 5429, 5976, 6105, 5843, 5778, 5782, 5429, 5429, 5429, 5694, 5892, 5429, 5975, 5977, 6106, 5844,
  /* 3744 */ 5844, 5696, 5416, 5429, 5429, 5429, 5578, 5496, 5429, 6092, 5429, 5429, 5429, 5685, 5688, 5923, 5563, 5750,
  /* 3762 */ 5792, 5782, 5792, 5782, 5429, 5429, 5583, 5784, 5767, 5654, 5872, 5569, 5429, 5470, 5850, 5697, 5816, 5970,
  /* 3780 */ 5429, 5471, 6129, 5429, 5478, 5429, 5429, 5958, 5429, 5750, 6098, 5416, 5429, 5429, 5644, 6004, 5998, 5429,
  /* 3798 */ 5429, 5429, 5722, 5429, 5429, 5429, 5721, 5429, 5588, 5922, 5563, 5751, 5782, 5429, 5429, 5965, 5429, 5429,
  /* 3816 */ 5429, 5695, 5767, 5688, 5562, 5873, 5852, 5922, 5563, 5791, 5416, 5802, 5686, 5564, 5429, 5429, 5655, 5998,
  /* 3834 */ 5429, 5414, 5921, 5722, 5429, 5767, 5429, 5493, 5493, 5580, 5580, 5580, 5584, 5704, 5704, 5489, 6087, 5563,
  /* 3852 */ 5791, 5588, 5562, 5873, 5965, 5404, 5429, 5429, 6014, 5429, 6002, 5429, 5429, 5636, 5780, 5429, 5902, 5904,
  /* 3870 */ 5791, 5429, 5494, 5974, 5429, 5495, 6006, 5429, 5429, 5429, 5970, 5654, 5729, 5905, 5965, 5429, 5405, 5495,
  /* 3888 */ 5429, 5494, 5429, 5646, 5429, 5998, 5429, 5698, 5998, 5494, 5429, 5799, 5653, 5655, 5495, 5429, 5429, 5768,
  /* 3906 */ 5799, 5775, 5740, 5429, 5429, 5583, 5786, 5429, 5429, 5655, 5892, 5429, 5429, 5588, 5416, 5429, 5881, 5881,
  /* 3924 */ 5881, 5407, 5429, 5818, 5429, 5429, 5429, 5775, 6002, 5429, 5888, 6019, 6097, 6001, 5429, 5429, 5619, 5429,
  /* 3942 */ 6175, 5429, 5429, 5429, 5788, 5911, 5429, 5429, 5933, 5429, 5934, 5932, 5940, 5672, 5673, 5942, 5944, 5946,
  /* 3960 */ 5947, 5947, 5947, 5949, 5950, 5950, 5951, 5952, 5953, 5953, 5953, 5953, 5429, 6119, 5429, 5429, 5628, 5663,
  /* 3978 */ 5429, 5955, 5429, 5429, 5630, 5429, 5957, 5429, 5429, 5429, 5803, 5429, 5960, 5429, 5429, 5637, 5429, 5432,
  /* 3996 */ 5429, 5429, 5429, 5816, 5429, 5429, 5429, 5583, 5429, 5429, 5429, 5636, 5739, 5819, 5429, 5429, 5406, 5714,
  /* 4014 */ 5963, 5429, 5429, 5408, 5980, 5980, 5983, 5429, 5429, 5429, 5818, 5429, 5410, 6019, 5964, 5992, 5711, 6251,
  /* 4032 */ 6250, 5685, 5429, 5429, 5429, 5855, 5429, 6120, 5429, 5429, 5637, 5592, 6035, 5429, 5429, 5429, 5881, 5991,
  /* 4050 */ 5429, 5429, 5429, 5882, 5429, 6076, 5406, 5995, 5429, 5556, 5429, 5429, 5429, 5878, 5488, 5408, 6008, 5588,
  /* 4068 */ 5864, 5429, 5429, 5429, 6206, 5731, 5492, 5771, 5429, 5556, 5429, 5966, 5999, 6004, 5770, 5772, 5429, 5718,
  /* 4086 */ 5429, 5429, 5429, 5887, 5935, 5928, 5811, 6016, 5429, 5429, 5429, 5974, 5429, 5674, 5429, 5429, 5429, 5892,
  /* 4104 */ 5429, 5429, 5921, 5881, 5429, 5429, 5637, 5790, 5935, 5928, 5811, 5846, 5756, 5756, 5429, 5429, 5429, 5888,
  /* 4122 */ 5654, 5588, 5429, 6018, 5403, 5965, 5429, 6019, 5965, 6001, 5964, 5429, 5429, 5429, 5719, 5429, 5847, 5429,
  /* 4140 */ 5429, 5429, 5890, 5701, 5927, 5935, 6024, 5696, 5767, 5405, 5429, 5429, 6078, 5429, 6023, 5846, 5766, 5429,
  /* 4158 */ 5429, 5495, 5759, 5992, 5429, 5577, 5736, 5530, 5935, 5928, 5655, 5429, 6062, 5429, 5429, 5429, 6227, 5935,
  /* 4176 */ 5696, 5767, 5429, 5429, 6027, 5766, 5429, 5429, 5637, 5997, 6002, 5406, 5636, 5992, 5724, 5466, 5429, 5893,
  /* 4194 */ 5429, 5429, 5429, 5406, 5429, 5429, 5992, 5429, 5429, 5644, 6160, 6029, 5767, 5429, 5429, 5644, 6170, 5429,
  /* 4212 */ 5879, 5766, 5429, 5578, 5586, 5725, 5937, 5876, 5429, 5429, 5654, 5769, 5678, 5429, 5429, 5721, 5429, 5429,
  /* 4230 */ 5646, 5429, 5652, 5732, 5429, 5429, 5495, 5921, 5992, 5573, 6041, 5697, 5429, 5429, 5429, 5893, 5652, 5745,
  /* 4248 */ 5676, 5875, 5794, 6023, 5429, 5794, 5429, 5583, 5429, 5702, 5429, 5429, 5881, 5816, 5416, 5722, 5678, 5429,
  /* 4266 */ 5429, 5647, 5651, 5588, 5719, 5429, 5429, 5842, 6034, 5429, 5862, 5643, 5429, 6033, 5678, 5746, 5498, 6040,
  /* 4284 */ 6043, 6045, 6046, 6046, 6046, 6046, 6048, 6048, 6048, 6048, 6049, 6054, 6054, 6050, 6055, 6051, 6051, 6051,
  /* 4302 */ 6051, 6051, 6052, 6051, 5429, 5583, 5564, 5429, 5586, 6011, 5741, 5781, 5767, 5429, 5429, 5429, 5475, 5668,
  /* 4320 */ 5429, 5620, 5965, 5789, 5429, 5429, 5429, 5909, 6185, 5429, 5429, 5429, 5911, 5429, 5429, 5429, 5477, 5693,
  /* 4338 */ 5429, 5429, 5404, 5429, 5429, 5429, 5919, 5429, 5429, 6064, 6066, 5429, 5429, 5653, 5775, 5740, 6065, 6067,
  /* 4356 */ 5429, 5429, 5653, 5892, 5883, 5429, 5429, 5429, 5920, 5429, 5429, 5429, 5561, 5798, 5929, 5696, 5429, 5588,
  /* 4374 */ 5399, 5429, 5429, 5874, 6128, 5429, 5429, 5653, 5902, 5567, 5678, 5429, 5429, 5429, 5754, 6086, 5637, 5428,
  /* 4392 */ 5429, 5429, 5429, 5702, 5429, 5429, 5429, 5644, 5399, 5429, 5429, 6072, 5429, 6155, 6178, 6180, 5692, 5429,
  /* 4410 */ 5429, 5429, 5921, 5429, 5726, 5937, 6089, 5429, 5592, 5429, 5429, 5429, 6236, 6071, 5726, 5937, 6089, 5416,
  /* 4428 */ 5740, 5997, 6129, 5429, 5429, 5429, 5974, 5429, 5583, 6082, 5936, 6111, 5429, 5429, 5654, 5495, 6091, 6003,
  /* 4446 */ 6005, 6129, 5465, 6004, 6111, 5416, 6212, 5429, 5429, 5429, 5930, 5429, 5921, 5992, 5429, 5622, 5624, 5429,
  /* 4464 */ 5404, 5888, 5737, 5935, 5938, 5429, 5429, 5429, 5965, 5429, 5992, 5429, 5997, 5429, 5429, 5670, 5416, 5668,
  /* 4482 */ 5429, 5429, 5583, 5701, 5702, 5429, 5644, 5818, 5429, 5842, 5429, 5429, 5429, 5992, 5644, 5671, 5429, 5429,
  /* 4500 */ 5747, 5429, 5429, 5702, 5429, 6084, 5429, 5429, 5429, 5997, 5429, 5992, 5996, 5429, 5591, 5808, 5429, 5974,
  /* 4518 */ 5429, 5816, 5970, 5429, 5429, 5429, 6174, 6115, 5429, 5429, 6155, 5429, 6123, 6126, 6132, 6133, 6135, 6137,
  /* 4536 */ 6141, 6141, 6145, 6142, 6143, 6147, 6147, 6147, 6148, 6149, 6149, 6149, 6149, 5429, 5429, 5768, 6222, 6127,
  /* 4554 */ 5429, 5429, 5429, 6004, 5733, 5429, 5429, 5429, 6021, 5935, 6151, 5429, 5429, 5429, 6059, 5429, 6153, 5429,
  /* 4572 */ 5429, 5823, 6103, 5689, 5429, 5429, 5429, 6069, 5429, 5915, 5917, 5429, 5643, 5429, 5767, 5429, 5914, 5916,
  /* 4590 */ 5918, 5429, 5644, 5643, 5429, 5406, 5889, 5489, 6000, 5429, 5918, 5429, 5429, 5841, 5429, 5395, 5892, 5920,
  /* 4608 */ 5964, 5429, 5565, 6129, 5429, 5404, 5802, 5686, 5749, 6154, 5429, 5403, 5429, 5893, 5969, 5429, 5429, 5429,
  /* 4626 */ 6104, 5429, 5429, 5429, 5674, 5429, 5404, 6165, 5690, 5429, 5429, 5429, 6170, 6172, 6160, 6164, 6166, 5691,
  /* 4644 */ 5429, 5694, 5495, 5919, 5429, 5965, 5768, 5667, 5429, 5429, 5429, 6084, 5416, 5703, 5794, 5429, 5429, 5429,
  /* 4662 */ 5404, 5402, 6168, 5429, 5636, 5429, 5429, 5800, 6168, 5636, 5970, 5429, 5645, 6171, 6011, 5790, 5845, 5690,
  /* 4680 */ 5429, 5429, 5654, 5531, 5592, 5767, 5429, 5582, 5429, 6168, 5727, 6170, 6172, 5811, 5777, 5781, 5691, 5781,
  /* 4698 */ 5691, 5429, 5429, 5885, 6139, 5920, 5965, 5429, 5429, 5888, 5879, 5730, 5811, 5846, 5766, 5586, 6172, 5811,
  /* 4716 */ 5777, 5803, 5723, 6011, 5790, 5845, 5722, 6000, 5997, 5429, 5646, 5429, 5674, 5678, 5429, 5429, 5633, 5429,
  /* 4734 */ 5798, 5702, 5429, 5429, 5494, 5429, 5429, 5429, 5732, 5429, 5920, 5429, 5494, 5429, 5429, 5799, 5429, 5722,
  /* 4752 */ 6011, 5592, 5782, 5429, 5429, 6010, 6012, 5781, 5416, 5429, 5798, 5429, 5429, 5888, 6031, 5573, 5930, 5818,
  /* 4770 */ 5429, 5429, 5907, 5429, 5429, 5684, 5712, 5429, 5429, 5908, 6233, 5429, 5768, 5429, 5930, 5818, 5930, 5429,
  /* 4788 */ 5768, 5930, 5429, 5715, 5429, 5653, 5429, 5653, 5429, 5721, 6104, 5930, 5429, 6104, 5930, 5429, 5429, 5429,
  /* 4806 */ 6247, 5684, 5429, 5684, 5429, 5653, 5429, 6155, 5893, 5684, 5747, 5747, 5747, 5470, 6162, 6037, 5747, 5748,
  /* 4824 */ 5748, 5748, 5748, 5748, 5429, 5429, 5429, 6281, 5429, 5798, 6004, 5568, 5697, 5411, 5985, 5404, 5429, 5653,
  /* 4842 */ 5489, 6000, 6025, 5429, 5429, 5429, 6001, 5996, 5429, 5429, 5984, 5406, 5429, 5429, 5911, 6014, 5407, 6182,
  /* 4860 */ 5984, 5429, 5653, 5796, 5926, 5720, 5406, 5470, 5429, 5474, 5415, 5429, 5416, 5680, 6184, 6183, 6187, 5680,
  /* 4878 */ 6191, 6190, 6190, 6190, 6189, 6190, 6193, 6195, 6196, 6197, 6198, 5429, 5429, 5429, 5920, 5637, 6198, 6198,
  /* 4896 */ 6198, 6198, 6199, 6200, 6198, 5429, 5998, 5742, 5429, 5653, 5881, 5429, 5881, 5429, 5429, 6130, 5429, 5429,
  /* 4914 */ 5961, 5429, 5671, 5429, 6202, 5429, 5654, 5729, 5740, 5429, 5429, 5429, 5762, 5429, 5773, 5429, 5429, 5964,
  /* 4932 */ 5429, 5429, 6073, 6075, 5429, 5654, 5776, 5429, 5429, 5429, 5768, 5767, 5429, 6074, 6076, 5429, 5684, 5416,
  /* 4950 */ 5429, 6104, 6205, 5429, 5429, 5429, 5964, 5910, 5429, 5768, 6003, 5492, 6176, 5429, 5429, 5429, 5972, 5974,
  /* 4968 */ 5702, 5429, 5992, 5560, 5583, 5429, 5702, 5429, 5429, 6084, 5476, 5429, 5429, 5429, 5978, 5429, 5429, 6282,
  /* 4986 */ 5429, 5429, 5981, 5429, 6211, 5429, 5429, 5429, 5996, 5429, 5408, 5648, 6214, 5638, 5709, 5761, 5429, 5405,
  /* 5004 */ 5702, 5429, 5429, 5698, 5493, 5493, 5493, 5699, 5580, 5580, 5580, 5580, 5581, 5704, 5704, 5704, 5429, 5750,
  /* 5022 */ 5752, 6080, 5429, 5691, 5429, 5429, 5429, 5884, 6138, 6215, 6096, 5751, 6079, 5416, 5798, 6004, 6222, 5429,
  /* 5040 */ 5697, 5429, 5674, 5592, 5766, 5429, 5407, 5646, 5429, 5767, 5530, 5429, 5767, 6178, 5411, 6209, 5804, 5429,
  /* 5058 */ 5429, 6001, 5429, 5429, 5429, 5653, 5429, 5429, 5429, 5575, 5429, 6229, 5429, 5429, 6002, 5470, 6209, 5429,
  /* 5076 */ 5404, 5495, 5463, 5564, 5587, 5702, 5992, 5429, 5429, 6002, 5583, 5414, 5429, 5921, 5429, 5429, 5429, 6011,
  /* 5094 */ 5592, 5429, 5850, 5794, 5429, 5429, 6203, 5412, 5588, 5497, 5805, 5765, 5767, 5429, 5409, 6009, 5935, 5999,
  /* 5112 */ 6231, 5752, 5847, 5416, 5429, 5769, 5697, 5429, 5697, 5429, 6216, 5429, 5429, 5429, 5879, 5411, 6209, 5429,
  /* 5130 */ 5404, 5429, 5913, 6240, 5717, 5805, 5710, 5404, 6208, 5925, 6238, 6025, 6025, 5416, 5429, 5668, 5429, 5429,
  /* 5148 */ 5429, 5889, 5652, 5429, 5768, 5494, 5429, 5705, 5429, 5429, 5878, 5546, 5688, 5923, 6245, 5710, 6234, 5429,
  /* 5166 */ 5974, 5769, 5429, 5429, 5429, 6057, 5416, 5576, 5429, 5414, 5429, 5637, 6025, 5416, 5429, 5429, 6062, 5429,
  /* 5184 */ 5721, 5429, 5429, 5429, 5429, 5396, 5579, 5497, 5683, 5678, 5646, 5732, 5429, 5429, 5429, 5925, 5413, 5429,
  /* 5202 */ 5429, 6256, 5924, 5732, 5644, 5892, 5921, 5992, 5429, 5740, 6121, 5987, 5732, 5650, 5986, 5646, 5649, 5738,
  /* 5220 */ 6260, 5643, 5649, 6262, 6264, 6267, 6267, 6268, 6266, 6270, 6270, 6270, 6271, 6272, 6274, 6273, 6273, 6278,
  /* 5238 */ 6278, 6279, 6277, 6277, 6275, 6274, 6274, 6275, 5497, 5403, 5429, 5429, 5429, 5747, 5416, 5574, 5429, 5429,
  /* 5256 */ 5429, 6101, 6005, 5782, 5429, 6252, 5429, 6284, 5429, 5715, 5416, 5429, 5646, 6155, 5893, 5403, 6208, 5965,
  /* 5274 */ 5406, 6286, 5429, 5429, 6104, 5706, 5856, 5429, 5429, 5429, 6104, 6005, 5429, 5971, 5973, 5429, 5722, 5589,
  /* 5292 */ 5429, 5564, 5429, 5429, 5429, 5974, 5578, 5496, 6038, 5429, 5646, 5893, 6138, 5719, 5429, 5429, 5429, 5530,
  /* 5310 */ 5880, 5974, 5429, 5722, 5989, 5416, 5497, 5403, 5653, 5429, 5725, 5637, 5492, 5588, 5974, 5429, 5429, 5429,
  /* 5328 */ 5698, 5429, 5429, 5406, 5579, 5429, 5921, 5470, 5646, 5429, 5893, 5429, 5998, 5889, 5556, 5429, 5429, 6104,
  /* 5346 */ 6024, 5416, 5429, 5429, 6220, 5411, 5651, 5974, 5429, 5429, 6094, 5429, 5921, 5653, 5429, 5747, 5655, 5429,
  /* 5364 */ 5429, 5429, 5798, 5970, 5646, 5429, 5429, 6110, 5429, 5429, 5429, 5993, 5411, 5646, 5429, 5429, 6118, 6117,
  /* 5382 */ 5429, 5889, 5429, 5429, 5429, 5721, 5404, 5429, 5429, 6130, 5767, 5429, 16, 524288, 0, -2075131904,
  /* 5398 */ -2143289344, 4194304, 0x80000000, 541065216, 4194304, 32768, 0, 1, 0, 2, 0, 3, 4, 0, 4, 8, 0, 0x80000000,
  /* 5416 */ 0x80000000, 0, -2080374784, 6291456, 1082130432, 1082130432, 75497472, 1082130432, 8396288, 8389120,
  /* 5426 */ 8392704, 1082130432, 8388608, 0, 0, -1799356416, 0, -1073217536, 553803776, 17080320, 8388608, 1082130432,
  /* 5438 */ 75497472, 478150656, 343932928, 9437184, 343932928, 343932928, 128, 9437184, 4194432, 9441280, 1083179008,
  /* 5449 */ 8388736, 8388736, 8388800, 8388736, 1082130560, 8388736, 1082130624, 8388736, 8396416, 8396416, 75505280,
  /* 5460 */ 8396416, 3072, 3584, 128, 524288, 128, 8192, 8192, 10256, 3072, 2048, 0, 232, 4, 67125248, 0, 3072, 0,
  /* 5478 */ 3076, 0, 3140, 160, 1056, -2147221472, 131104, 262176, 262176, 33554464, 32, 64, 256, 4096, 524288,
  /* 5493 */ 1048576, 1048576, 0, 128, 1024, 2048, -1874853880, 32, 65568, 67125248, 40, 96, 34, 40, 537134880,
  /* 5508 */ 536871008, 263200, 393248, 131104, 32, 224, 33, 33, 34, 32, 97, 33, 40, 537133856, 394272, 263200, 34, 42,
  /* 5526 */ 32, 20447232, 32, 1056, 32, 256, 65536, 9437184, 132128, 42, 296032, 516697768, 516719712, 516719712,
  /* 5540 */ 1053593312, 516722400, 516722400, 516730600, 1053724512, 1053724520, 32, 320, 43, 106, 18358315, 18360891,
  /* 5552 */ 18360891, 555231867, 18360955, 555231803, 32, 65536, 402653184, 0, 12288, 0, 14336, 1572864, 2097152, 0,
  /* 5566 */ 224, 8192, 1048576, 4194304, 8388608, 8388864, 8208, 8192, 524288, 33554432, 33554432, 1, 2, 8, 128, 128,
  /* 5582 */ 192, 0, 64, 192, 128, 256, 256, 512, 0x80000000, 1048576, 67108864, 134217728, 65536, 67110912, 1208123392,
  /* 5597 */ 76625926, -2141192063, 68237446, 68237446, 68237710, -2079246202, -2079246202, -2075051898, -2072954746,
  /* 5606 */ -2072430457, -2079246186, 1995962612, 1995962612, 1995963636, 1995962612, 1995963636, 1995963636,
  /* 5614 */ 1995963637, 1995963637, 1995964151, 1995964149, 1995964149, 8208, 0, 16448, 14340, 65536, 76546048, 0,
  /* 5626 */ 30964, -2141192192, 0, 31988, 14468, 68157440, 14732, 0, 32500, -2079326208, 0, 32768, 131072, 262144,
  /* 5640 */ 1048576, 8388608, 8388608, 256, 0, 8, 16, 0, 12, 256, 16, 16, 32, 0, 16, 64, 0, 18, -2073034752, 589824,
  /* 5660 */ 14484, 0, 37120, 491520, 1995440128, 4, 6144, 24576, 0, 65536, 128, 6291456, 0, 65824, 0, 131072, 524288,
  /* 5677 */ 16777216, 16777216, 0, 1028, 0x80000000, 24576, 32768, 262144, 2097152, 64, 512, 512, 1024, 536870912,
  /* 5691 */ -1073741824, 0, 393216, 0, 524288, 268435456, 536870912, 0, 1048576, 128, 4096, 16384, 0, 192, 192,
  /* 5706 */ 268435456, 0x80000000, 262144, 15728640, 33554432, 134217728, 134217728, 0x80000000, 4, 4096, 2097152, 256,
  /* 5718 */ 1024, 4096, 65536, 131072, 0, 256, 2048, 2048, 8192, 32768, 1024, 6144, 8192, 65536, 262144, 0, 272,
  /* 5735 */ 7340032, 4, 24, 256, 131072, 1048576, 16777216, 67108864, 12288, 1610612736, 0, 1049600, 0, 2097152,
  /* 5749 */ 2097152, 4194304, 25165824, 33554432, 201326592, 16384, 268435456, 1610612736, 0x80000000, 512, 32768,
  /* 5760 */ 33554432, 1946157056, 0, 278528, 131072, 67108864, 536870912, 1073741824, 0, 4096, 1048576, 2097152,
  /* 5772 */ -121634816, 0, 3142, 64, 4096, 16777216, 100663296, 268435456, 131072, 134217728, 536870912, 0x80000000,
  /* 5784 */ 131072, 536870912, 131072, 1073741824, 64, 131072, 8388608, 16777216, 33554432, 67108864, 268435456, 0, 96,
  /* 5797 */ 4096, 4096, 8192, 0, 104, 2, 16, 128, 16384, 131072, 4194304, 67108864, 268452864, 576, 2097152, 8388608,
  /* 5813 */ 16850976, 2, 592, 0, 4194304, 4194304, 0, -804782080, 32, 65664, 0, 5242880, 8388640, 3145728, 79700512,
  /* 5828 */ -1878786048, -1664966112, 482517536, 482517536, 1556259360, -1799085536, -1799085536, -1208205442,
  /* 5836 */ -1208205442, 2, 32, 594, 32, 8704, 0, 6291456, 25165824, 100663296, 134217728, 268435456, 1073741824,
  /* 5849 */ 79691776, 0, 8388608, 33554432, 0x80000000, -1879048192, 0, 12582912, 0, 10256, 172544, 482344960,
  /* 5861 */ -1665138688, 0, 16777216, 8192, 16384, 32, 42, 32, 270848, 1851200, -1210056704, 512, 2097152, 16777216,
  /* 5875 */ 134217728, 805306368, 0x80000000, 6, 24, 512, 4096, 0, 24, 0, 28, 32, 2, 2, 4, 16, 96, 128, 0, 32, 32, 33,
  /* 5897 */ 32, 41, 40, 40, 42, 64, 6144, 8192, 1572864, 16777216, 16, 4096, 33554432, 576, 0, 2048, 16512, 0, 504,
  /* 5916 */ 2492416, 260046848, -536870912, 0, 512, 0, 1024, 14336, 262144, 1024, 16384, 32768, 65536, 524288, 2097152,
  /* 5931 */ 0x80000000, 65824, 545267712, 545267712, 512, 8192, 917504, 6291456, 536870912, 65824, 16908288, 65824,
  /* 5943 */ 545268224, -2147417824, 1342980096, -2147139296, -2147134176, -2147134176, -1072873184, -804437728,
  /* 5951 */ -804437728, -800243422, -117611713, -117611713, 288, 65536, 1342701568, 0, 17825792, 5408, 0, 19922944,
  /* 5963 */ -800587776, 0, 33554432, 0, 48, 1120, 96, 1024, 0, 60, 4864, 65536, 0, 62, 16192, 262144, 0x80000000, 9020,
  /* 5981 */ 344064, 0x80000000, -117964800, 0, 33554688, 0, 34340864, 34340864, 512, 4194304, 5120, 0, 67108864, 17408,
  /* 5995 */ -801112064, 0, 134217728, 0, 16384, 65536, 67108864, 0, 8192, 262144, 524288, 6291456, 0x80000000, 4, 56,
  /* 6010 */ 256, 393216, 2097152, 67108864, 8388608, 536870912, 402653184, -536870912, 4, 128, 32768, 2, 24, 8192,
  /* 6024 */ 2097152, 134217728, 1073741824, 8192, 268435456, 512, 536870912, 32, 4096, 805306372, 268435460, 524288,
  /* 6036 */ 1342177280, 33570880, 2048, 32768, 2048, 2097152, 268435456, 264192, 8552961, 8686081, 1082427905,
  /* 6047 */ 1082427905, 8817153, 8817153, 820947843, -1326535797, -1326535797, -1326535781, -1326535797, 820947843,
  /* 6056 */ 820947843, 8, 272629760, 1, 33280, 35328, 0, 536870912, 3, 43904, 917504, 819986432, 0x80000000, 3, 8, 384,
  /* 6072 */ 2560, 0, 151311, 264503296, -805306368, 0, 163840, 201326592, 1342177280, 0x80000000, 16384, 33554432, 8,
  /* 6085 */ 4194304, 1, 512, 14336, 8388608, 805306368, 2, 128, 65536, 64, 16384, 262144, 4194304, 33554432, 536870912,
  /* 6100 */ 8388864, 8, 262144, 7340032, 0, 262144, 1572864, 6291456, 8388608, 8392704, 8, 6291456, 805306368, 512,
  /* 6114 */ 524288, 1048576, 33554432, 16, 134217984, 0, 545259520, 0, 17039360, 33554496, 16, 224, 33554496, 28672, 0,
  /* 6129 */ 805306368, 0, 268435456, 16, 33554496, -2145386496, 33554496, 134218000, 570425416, 32, 768, 4096,
  /* 6141 */ 838861032, 838861032, 838861033, 838893801, 838861033, 843055336, 570426472, 570426472, -274331144,
  /* 6150 */ -274331144, 72, 536870912, 233, 37748736, 0, 1073741824, 65536, 8, 536870912, 16, 480, 2048, 65536, 2048,
  /* 6165 */ 2490368, 260046848, 536870912, 1, 4194304, 16, 448, 2048, 393216, 16, 256, 4194304, 536870912, 32, 32768,
  /* 6180 */ 4, 33554688, 67125248, 1060864, 1028, 0, 1082130432, 1028, 262145, 268438532, 3076, 3076, 281018368,
  /* 6193 */ 274730052, 274730052, 283118660, 283118660, 274730054, -540651761, -540651761, -540586225, -540586225,
  /* 6202 */ 14680064, 0, 1207959552, 216847, 0, 1556086784, 4, 256, 33554432, 68, 2097152, 536870912, 512, 19456,
  /* 6216 */ 131072, 16777216, 3, 12, 84992, 0, 1048576, 536870912, 2, 12, 3072, 16384, 16785408, 81920, 0, 262144,
  /* 6232 */ 8388608, 67108864, 1073741824, 0x80000000, 64, 2097152, 131072, 33554432, 1, 4, 32, 56, 41, 1, 256, 1,
  /* 6248 */ 33554432, 1, 134217728, 1073905664, 0, 14592, 1, 65536, 2359296, 0, 128, 2097152, 1025, 256, 25170176,
  /* 6263 */ 23068672, 25180416, 25180416, 25213250, 25180482, 25180482, 25196866, 31494400, 31494400, 31756544, 70460,
  /* 6274 */ 70460, 332604, 70460, 18158396, 1381180, 1381180, 9769788, 4352, 8388608, 268435456, 14656, 0, 31040,
  /* 6287 */ 47424
];

JSONiqParser.TOKEN =
[
  "(0)",
  "END",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'/>'",
  "':'",
  "':)'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'jsoniq'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'select'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

                                                            // line 1188 "JSONiqParser.ebnf"
                                                            });
                                                            // line 27507 "JSONiqParser.js"
// End
