// This file was generated on Wed Mar 27, 2013 02:33 (UTC+01) by REx v5.25 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net>
// REx command line: JSONiqParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "JSONiqParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module){
                                                            var JSONiqParser = exports.JSONiqParser = function JSONiqParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 40 "JSONiqParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? JSONiqParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = JSONiqParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [JSONiqParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(239);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Module();
    shift(26);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  this.parse_PredicateList = function()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(89);              // END | S^WS | '(:' | '['
      if (l1 != 64)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 270:                       // 'xquery'
      lookahead2W(161);             // S^WS | '#' | '(' | '(:' | 'encoding' | 'version'
      break;
    default:
      lk = l1;
    }
    if (lk == 62222                 // 'xquery' 'encoding'
     || lk == 132878)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(239);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 178:                       // 'module'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | 'namespace'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 92338:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(270);                     // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 121:                       // 'encoding'
      shift(121);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
      break;
    default:
      shift(259);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 121)                // 'encoding'
      {
        shift(121);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(12);                  // StringLiteral
      }
    }
    lookahead1W(27);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(178);                     // 'module'
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shift(180);                     // 'namespace'
    lookahead1W(219);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(28);                // S^WS | '(:' | '='
    shift(57);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(27);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(239);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(197);           // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
                                    // 'construction' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'ft-option' | 'function' | 'index' | 'integrity' | 'namespace' | 'option' |
                                    // 'ordering' | 'revalidation' | 'updating' | 'variable'
        break;
      case 149:                     // 'import'
        lookahead2W(163);           // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
        break;
      default:
        lk = l1;
      }
      if (lk != 40552               // 'declare' 'base-uri'
       && lk != 41576               // 'declare' 'boundary-space'
       && lk != 48232               // 'declare' 'construction'
       && lk != 51304               // 'declare' 'copy-namespaces'
       && lk != 52328               // 'declare' 'decimal-format'
       && lk != 53864               // 'declare' 'default'
       && lk != 70248               // 'declare' 'ft-option'
       && lk != 91285               // 'import' 'module'
       && lk != 92264               // 'declare' 'namespace'
       && lk != 101992              // 'declare' 'ordering'
       && lk != 111720              // 'declare' 'revalidation'
       && lk != 113301)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(190);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 53864)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 92264:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 149:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70248:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(27);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(239);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(191);           // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      if (lk != 17000               // 'declare' '%'
       && lk != 46696               // 'declare' 'collection'
       && lk != 49768               // 'declare' 'context'
       && lk != 72296               // 'declare' 'function'
       && lk != 77416               // 'declare' 'index'
       && lk != 80488               // 'declare' 'integrity'
       && lk != 99944               // 'declare' 'option'
       && lk != 129640              // 'declare' 'updating'
       && lk != 132200)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 104:                     // 'declare'
        lookahead2W(187);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 49768:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 99944:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(27);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(50);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 104:                       // 'declare'
      lookahead2W(184);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 53864)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 41576:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 40552:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 48232:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 101992:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 111720:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 51304:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'boundary-space'
    shift(81);                      // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 210:                       // 'preserve'
      shift(210);                   // 'preserve'
      break;
    default:
      shift(237);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shift(105);                     // 'default'
    lookahead1W(37);                // S^WS | '(:' | 'collation'
    shift(90);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(104);                    // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shiftT(105);                    // 'default'
    lookahead1W(37);                // S^WS | '(:' | 'collation'
    shiftT(90);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(8);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(31);                // S^WS | '(:' | 'base-uri'
    shift(79);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(40);                // S^WS | '(:' | 'construction'
    shift(94);                      // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 237:                       // 'strip'
      shift(237);                   // 'strip'
      break;
    default:
      shift(210);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(67);                // S^WS | '(:' | 'ordering'
    shift(199);                     // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 198:                       // 'ordered'
      shift(198);                   // 'ordered'
      break;
    default:
      shift(252);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shift(105);                     // 'default'
    lookahead1W(66);                // S^WS | '(:' | 'order'
    shift(197);                     // 'order'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shift(119);                     // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 143:                       // 'greatest'
      shift(143);                   // 'greatest'
      break;
    default:
      shift(169);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(104);                    // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shiftT(105);                    // 'default'
    lookahead1W(66);                // S^WS | '(:' | 'order'
    shiftT(197);                    // 'order'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shiftT(119);                    // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 143:                       // 'greatest'
      shiftT(143);                  // 'greatest'
      break;
    default:
      shiftT(169);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'copy-namespaces'
    shift(100);                     // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(42);                      // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 210:                       // 'preserve'
      shift(210);                   // 'preserve'
      break;
    default:
      shift(186);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      shift(153);                   // 'inherit'
      break;
    default:
      shift(185);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 102:                       // 'decimal-format'
      shift(102);                   // 'decimal-format'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      shift(105);                   // 'default'
      lookahead1W(44);              // S^WS | '(:' | 'decimal-format'
      shift(102);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(193);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 50)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(28);              // S^WS | '(:' | '='
      shift(57);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 103:                       // 'decimal-separator'
      shift(103);                   // 'decimal-separator'
      break;
    case 145:                       // 'grouping-separator'
      shift(145);                   // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      shift(152);                   // 'infinity'
      break;
    case 175:                       // 'minus-sign'
      shift(175);                   // 'minus-sign'
      break;
    case 63:                        // 'NaN'
      shift(63);                    // 'NaN'
      break;
    case 205:                       // 'percent'
      shift(205);                   // 'percent'
      break;
    case 204:                       // 'per-mille'
      shift(204);                   // 'per-mille'
      break;
    case 271:                       // 'zero-digit'
      shift(271);                   // 'zero-digit'
      break;
    case 112:                       // 'digit'
      shift(112);                   // 'digit'
      break;
    default:
      shift(203);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 149:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 113301:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(149);                     // 'import'
    lookahead1W(72);                // S^WS | '(:' | 'schema'
    shift(221);                     // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 8)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 77)                   // 'at'
    {
      shift(77);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(8);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 180:                       // 'namespace'
      shift(180);                   // 'namespace'
      lookahead1W(219);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(28);              // S^WS | '(:' | '='
      shift(57);                    // '='
      break;
    default:
      shift(105);                   // 'default'
      lookahead1W(46);              // S^WS | '(:' | 'element'
      shift(117);                   // 'element'
      lookahead1W(60);              // S^WS | '(:' | 'namespace'
      shift(180);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(149);                     // 'import'
    lookahead1W(59);                // S^WS | '(:' | 'module'
    shift(178);                     // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 180)                  // 'namespace'
    {
      shift(180);                   // 'namespace'
      lookahead1W(219);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(28);              // S^WS | '(:' | '='
      shift(57);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 77)                   // 'at'
    {
      shift(77);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(8);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shift(180);                     // 'namespace'
    lookahead1W(219);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(28);                // S^WS | '(:' | '='
    shift(57);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shift(105);                     // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 117:                       // 'element'
      shift(117);                   // 'element'
      break;
    default:
      shift(141);                   // 'function'
    }
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shift(180);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(104);                    // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'default'
    shiftT(105);                    // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 117:                       // 'element'
      shiftT(117);                  // 'element'
      break;
    default:
      shiftT(141);                  // 'function'
    }
    lookahead1W(60);                // S^WS | '(:' | 'namespace'
    shiftT(180);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(8);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    shift(137);                     // 'ft-option'
    lookahead1W(80);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(104);                     // 'declare'
    for (;;)
    {
      lookahead1W(182);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 253)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 253:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 258:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 141:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 91:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 151:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(253);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(33);                      // '%'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(183);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(158);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(158);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(33);                     // '%'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(183);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(158);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(158);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(258);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(151);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 49:                        // ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(129);                   // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shift(49);                  // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(42);                // S^WS | '(:' | 'context'
    shift(97);                      // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    shift(161);                     // 'item'
    lookahead1W(151);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 75)                   // 'as'
    {
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 49:                        // ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(129);                   // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shift(49);                  // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(147);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(147);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(278);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(65);                // S^WS | '(:' | 'option'
    shift(195);                     // 'option'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(12);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(185);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 216)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(185);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 216)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 133:                       // 'for'
      lookahead2W(145);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
      parse_ForClause();
      break;
    case 170:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 133:                       // 'for'
      lookahead2W(145);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
      try_ForClause();
      break;
    case 170:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 133:                       // 'for'
    case 170:                       // 'let'
      parse_InitialClause();
      break;
    case 262:                       // 'where'
      parse_WhereClause();
      break;
    case 144:                       // 'group'
      parse_GroupByClause();
      break;
    case 101:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 133:                       // 'for'
    case 170:                       // 'let'
      try_InitialClause();
      break;
    case 262:                       // 'where'
      try_WhereClause();
      break;
    case 144:                       // 'group'
      try_GroupByClause();
      break;
    case 101:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    shift(133);                     // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    shiftT(133);                    // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(175);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 68)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(154);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 224)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(175);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 68)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(154);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 224)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(68);                      // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shift(119);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(68);                     // 'allowing'
    lookahead1W(48);                // S^WS | '(:' | 'empty'
    shiftT(119);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(77);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(77);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(224);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(224);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(170);                     // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(170);                    // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 32:                        // '$'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(26);                // S^WS | '(:' | ':='
    shift(49);                      // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 32:                        // '$'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(26);                // S^WS | '(:' | ':='
    shiftT(49);                     // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    shift(133);                     // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 247:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    shiftT(133);                    // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 247:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(247);                     // 'tumbling'
    lookahead1W(84);                // S^WS | '(:' | 'window'
    shift(265);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 122                   // 'end'
     || l1 == 194)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(247);                    // 'tumbling'
    lookahead1W(84);                // S^WS | '(:' | 'window'
    shiftT(265);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 122                   // 'end'
     || l1 == 194)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(230);                     // 'sliding'
    lookahead1W(84);                // S^WS | '(:' | 'window'
    shift(265);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(230);                    // 'sliding'
    lookahead1W(84);                // S^WS | '(:' | 'window'
    shiftT(265);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(233);                     // 'start'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(82);                // S^WS | '(:' | 'when'
    shift(261);                     // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(233);                    // 'start'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(82);                // S^WS | '(:' | 'when'
    shiftT(261);                    // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 194)                  // 'only'
    {
      shift(194);                   // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    shift(122);                     // 'end'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(82);                // S^WS | '(:' | 'when'
    shift(261);                     // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 194)                  // 'only'
    {
      shiftT(194);                  // 'only'
    }
    lookahead1W(49);                // S^WS | '(:' | 'end'
    shiftT(122);                    // 'end'
    lookahead1W(174);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(82);                // S^WS | '(:' | 'when'
    shiftT(261);                    // 'when'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(167);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 77)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(157);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 211)                  // 'previous'
    {
      shift(211);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 183)                  // 'next'
    {
      shift(183);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(167);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 77)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(157);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 211)                  // 'previous'
    {
      shiftT(211);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 183)                  // 'next'
    {
      shiftT(183);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(101);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(101);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(262);                     // 'where'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(262);                    // 'where'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(144);                     // 'group'
    lookahead1W(33);                // S^WS | '(:' | 'by'
    shift(83);                      // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(144);                    // 'group'
    lookahead1W(33);                // S^WS | '(:' | 'by'
    shiftT(83);                     // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(195);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 49                    // ':='
     || l1 == 75)                   // 'as'
    {
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(26);              // S^WS | '(:' | ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 90)                   // 'collation'
    {
      shift(90);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(195);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 49                    // ':='
     || l1 == 75)                   // 'as'
    {
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(26);              // S^WS | '(:' | ':='
      shiftT(49);                   // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 90)                   // 'collation'
    {
      shiftT(90);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(8);                    // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 197:                       // 'order'
      shift(197);                   // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shift(83);                    // 'by'
      break;
    default:
      shift(232);                   // 'stable'
      lookahead1W(66);              // S^WS | '(:' | 'order'
      shift(197);                   // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shift(83);                    // 'by'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 197:                       // 'order'
      shiftT(197);                  // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shiftT(83);                   // 'by'
      break;
    default:
      shiftT(232);                  // 'stable'
      lookahead1W(66);              // S^WS | '(:' | 'order'
      shiftT(197);                  // 'order'
      lookahead1W(33);              // S^WS | '(:' | 'by'
      shiftT(83);                   // 'by'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(188);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 76                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 76:                      // 'ascending'
        shift(76);                  // 'ascending'
        break;
      default:
        shift(109);                 // 'descending'
      }
    }
    lookahead1W(192);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 119)                  // 'empty'
    {
      shift(119);                   // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 143:                     // 'greatest'
        shift(143);                 // 'greatest'
        break;
      default:
        shift(169);                 // 'least'
      }
    }
    lookahead1W(189);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 90)                   // 'collation'
    {
      shift(90);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 76                    // 'ascending'
     || l1 == 109)                  // 'descending'
    {
      switch (l1)
      {
      case 76:                      // 'ascending'
        shiftT(76);                 // 'ascending'
        break;
      default:
        shiftT(109);                // 'descending'
      }
    }
    lookahead1W(192);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 119)                  // 'empty'
    {
      shiftT(119);                  // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 143:                     // 'greatest'
        shiftT(143);                // 'greatest'
        break;
      default:
        shiftT(169);                // 'least'
      }
    }
    lookahead1W(189);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 90)                   // 'collation'
    {
      shiftT(90);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(8);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 231:                       // 'some'
      shift(231);                   // 'some'
      break;
    default:
      shift(125);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shift(150);                     // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shift(150);                   // 'in'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(220);                     // 'satisfies'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 231:                       // 'some'
      shiftT(231);                  // 'some'
      break;
    default:
      shiftT(125);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    shiftT(150);                    // 'in'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shiftT(150);                  // 'in'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(220);                    // 'satisfies'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(239);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(239);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(84);                    // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(84);                   // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(249);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(249);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(84);                      // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(84);                     // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceTypeUnion();
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 275)                // '|'
      {
        break;
      }
      shift(275);                   // '|'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 275)                // '|'
      {
        break;
      }
      shiftT(275);                  // '|'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(148);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(76);                // S^WS | '(:' | 'then'
    shift(241);                     // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(118);                     // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(148);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(76);                // S^WS | '(:' | 'then'
    shiftT(241);                    // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(118);                    // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(198);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 87)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(198);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 87)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(246);                     // 'try'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(246);                    // 'try'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    shiftT(278);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(87);                      // 'catch'
    lookahead1W(228);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(87);                     // 'catch'
    lookahead1W(228);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(278);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 275)                // '|'
      {
        break;
      }
      shift(275);                   // '|'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 275)                // '|'
      {
        break;
      }
      shiftT(275);                  // '|'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 196)                // 'or'
      {
        break;
      }
      shift(196);                   // 'or'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 196)                // 'or'
      {
        break;
      }
      shiftT(196);                  // 'or'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 71)                 // 'and'
      {
        break;
      }
      shift(71);                    // 'and'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 71)                 // 'and'
      {
        break;
      }
      shiftT(71);                   // 'and'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 51                    // '<'
     || l1 == 54                    // '<<'
     || l1 == 55                    // '<='
     || l1 == 57                    // '='
     || l1 == 58                    // '>'
     || l1 == 59                    // '>='
     || l1 == 60                    // '>>'
     || l1 == 124                   // 'eq'
     || l1 == 142                   // 'ge'
     || l1 == 146                   // 'gt'
     || l1 == 160                   // 'is'
     || l1 == 168                   // 'le'
     || l1 == 174                   // 'lt'
     || l1 == 182)                  // 'ne'
    {
      switch (l1)
      {
      case 124:                     // 'eq'
      case 142:                     // 'ge'
      case 146:                     // 'gt'
      case 168:                     // 'le'
      case 174:                     // 'lt'
      case 182:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 54:                      // '<<'
      case 60:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 51                    // '<'
     || l1 == 54                    // '<<'
     || l1 == 55                    // '<='
     || l1 == 57                    // '='
     || l1 == 58                    // '>'
     || l1 == 59                    // '>='
     || l1 == 60                    // '>>'
     || l1 == 124                   // 'eq'
     || l1 == 142                   // 'ge'
     || l1 == 146                   // 'gt'
     || l1 == 160                   // 'is'
     || l1 == 168                   // 'le'
     || l1 == 174                   // 'lt'
     || l1 == 182)                  // 'ne'
    {
      switch (l1)
      {
      case 124:                     // 'eq'
      case 142:                     // 'ge'
      case 146:                     // 'gt'
      case 168:                     // 'le'
      case 174:                     // 'lt'
      case 182:                     // 'ne'
        try_ValueComp();
        break;
      case 54:                      // '<<'
      case 60:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 95)                   // 'contains'
    {
      shift(95);                    // 'contains'
      lookahead1W(75);              // S^WS | '(:' | 'text'
      shift(240);                   // 'text'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 267)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 95)                   // 'contains'
    {
      shiftT(95);                   // 'contains'
      lookahead1W(75);              // S^WS | '(:' | 'text'
      shiftT(240);                  // 'text'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 267)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 276)                // '||'
      {
        break;
      }
      shift(276);                   // '||'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 276)                // '||'
      {
        break;
      }
      shiftT(276);                  // '||'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 244)                  // 'to'
    {
      shift(244);                   // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 244)                  // 'to'
    {
      shiftT(244);                  // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shift(41);                  // '+'
        break;
      default:
        shift(43);                  // '-'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shiftT(41);                 // '+'
        break;
      default:
        shiftT(43);                 // '-'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 114                 // 'div'
       && l1 != 147                 // 'idiv'
       && l1 != 176)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shift(39);                  // '*'
        break;
      case 114:                     // 'div'
        shift(114);                 // 'div'
        break;
      case 147:                     // 'idiv'
        shift(147);                 // 'idiv'
        break;
      default:
        shift(176);                 // 'mod'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 114                 // 'div'
       && l1 != 147                 // 'idiv'
       && l1 != 176)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shiftT(39);                 // '*'
        break;
      case 114:                     // 'div'
        shiftT(114);                // 'div'
        break;
      case 147:                     // 'idiv'
        shiftT(147);                // 'idiv'
        break;
      default:
        shiftT(176);                // 'mod'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 250                 // 'union'
       && l1 != 275)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 250:                     // 'union'
        shift(250);                 // 'union'
        break;
      default:
        shift(275);                 // '|'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 250                 // 'union'
       && l1 != 275)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 250:                     // 'union'
        shiftT(250);                // 'union'
        break;
      default:
        shiftT(275);                // '|'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(210);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 127                 // 'except'
       && l1 != 158)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 158:                     // 'intersect'
        shift(158);                 // 'intersect'
        break;
      default:
        shift(127);                 // 'except'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(210);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 127                 // 'except'
       && l1 != 158)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 158:                     // 'intersect'
        shiftT(158);                // 'intersect'
        break;
      default:
        shiftT(127);                // 'except'
      }
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(211);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 156)                  // 'instance'
    {
      shift(156);                   // 'instance'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shift(192);                   // 'of'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(211);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 156)                  // 'instance'
    {
      shiftT(156);                  // 'instance'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shiftT(192);                  // 'of'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 245)                  // 'treat'
    {
      shift(245);                   // 'treat'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(212);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 245)                  // 'treat'
    {
      shiftT(245);                  // 'treat'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 86)                   // 'castable'
    {
      shift(86);                    // 'castable'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 86)                   // 'castable'
    {
      shiftT(86);                   // 'castable'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 85)                   // 'cast'
    {
      shift(85);                    // 'cast'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 85)                   // 'cast'
    {
      shiftT(85);                   // 'cast'
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shift(43);                  // '-'
        break;
      default:
        shift(41);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shiftT(43);                 // '-'
        break;
      default:
        shiftT(41);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 256:                       // 'validate'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 85760:                     // 'validate' 'lax'
    case 121088:                    // 'validate' 'strict'
    case 127232:                    // 'validate' 'type'
    case 139520:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 256:                       // 'validate'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 85760:                     // 'validate' 'lax'
    case 121088:                    // 'validate' 'strict'
    case 127232:                    // 'validate' 'type'
    case 139520:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      shift(27);                    // '!'
      lookahead1W(236);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      shiftT(27);                   // '!'
      lookahead1W(236);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 57:                        // '='
      shift(57);                    // '='
      break;
    case 28:                        // '!='
      shift(28);                    // '!='
      break;
    case 51:                        // '<'
      shift(51);                    // '<'
      break;
    case 55:                        // '<='
      shift(55);                    // '<='
      break;
    case 58:                        // '>'
      shift(58);                    // '>'
      break;
    default:
      shift(59);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 57:                        // '='
      shiftT(57);                   // '='
      break;
    case 28:                        // '!='
      shiftT(28);                   // '!='
      break;
    case 51:                        // '<'
      shiftT(51);                   // '<'
      break;
    case 55:                        // '<='
      shiftT(55);                   // '<='
      break;
    case 58:                        // '>'
      shiftT(58);                   // '>'
      break;
    default:
      shiftT(59);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 124:                       // 'eq'
      shift(124);                   // 'eq'
      break;
    case 182:                       // 'ne'
      shift(182);                   // 'ne'
      break;
    case 174:                       // 'lt'
      shift(174);                   // 'lt'
      break;
    case 168:                       // 'le'
      shift(168);                   // 'le'
      break;
    case 146:                       // 'gt'
      shift(146);                   // 'gt'
      break;
    default:
      shift(142);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 124:                       // 'eq'
      shiftT(124);                  // 'eq'
      break;
    case 182:                       // 'ne'
      shiftT(182);                  // 'ne'
      break;
    case 174:                       // 'lt'
      shiftT(174);                  // 'lt'
      break;
    case 168:                       // 'le'
      shiftT(168);                  // 'le'
      break;
    case 146:                       // 'gt'
      shiftT(146);                  // 'gt'
      break;
    default:
      shiftT(142);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      shift(160);                   // 'is'
      break;
    case 54:                        // '<<'
      shift(54);                    // '<<'
      break;
    default:
      shift(60);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      shiftT(160);                  // 'is'
      break;
    case 54:                        // '<<'
      shiftT(54);                   // '<<'
      break;
    default:
      shiftT(60);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(256);                     // 'validate'
    lookahead1W(168);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 272)                  // '{'
    {
      switch (l1)
      {
      case 248:                     // 'type'
        shift(248);                 // 'type'
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(256);                    // 'validate'
    lookahead1W(168);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 272)                  // '{'
    {
      switch (l1)
      {
      case 248:                     // 'type'
        shiftT(248);                // 'type'
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(278);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 167:                       // 'lax'
      shift(167);                   // 'lax'
      break;
    default:
      shift(236);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 167:                       // 'lax'
      shiftT(167);                  // 'lax'
      break;
    default:
      shiftT(236);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(272);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 278)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(278);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(272);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 278)                  // '}'
    {
      try_Expr();
    }
    shiftT(278);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(36);                      // '(#'
    lookahead1(222);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      shift(22);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      shift(22);                    // S
      lookahead1(0);                // PragmaContents
      shift(2);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(31);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(36);                     // '(#'
    lookahead1(222);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      shiftT(22);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      shiftT(22);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(2);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(31);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    parse_RelativePathExpr();
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    try_RelativePathExpr();
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    parse_PostfixExpr();
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    try_PostfixExpr();
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 6:                         // Wildcard
      shift(6);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 6:                         // Wildcard
      shiftT(6);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 64)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 64:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_ObjectLookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(216);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 64)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 64:                      // '['
        try_Predicate();
        break;
      case 35:                      // '('
        try_ArgumentList();
        break;
      default:
        try_ObjectLookup();
      }
    }
  }

  function parse_ObjectLookup()
  {
    eventHandler.startNonterminal("ObjectLookup", e0);
    shift(45);                      // '.'
    lookahead1W(226);               // StringLiteral | NCName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 12:                        // StringLiteral
      shift(12);                    // StringLiteral
      break;
    case 35:                        // '('
      whitespace();
      parse_ParenthesizedExpr();
      break;
    case 32:                        // '$'
      whitespace();
      parse_VarRef();
      break;
    default:
      whitespace();
      parse_NCName();
    }
    eventHandler.endNonterminal("ObjectLookup", e0);
  }

  function try_ObjectLookup()
  {
    shiftT(45);                     // '.'
    lookahead1W(226);               // StringLiteral | NCName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 12:                        // StringLiteral
      shiftT(12);                   // StringLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(35);                      // '('
    lookahead1W(246);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(241);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(35);                     // '('
    lookahead1W(246);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(241);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    shiftT(38);                     // ')'
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(64);                      // '['
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(65);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(64);                     // '['
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(65);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 12:                        // StringLiteral
      shift(12);                    // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 12:                        // StringLiteral
      shiftT(12);                   // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 9:                         // IntegerLiteral
      shift(9);                     // IntegerLiteral
      break;
    case 10:                        // DecimalLiteral
      shift(10);                    // DecimalLiteral
      break;
    default:
      shift(11);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 9:                         // IntegerLiteral
      shiftT(9);                    // IntegerLiteral
      break;
    case 10:                        // DecimalLiteral
      shiftT(10);                   // DecimalLiteral
      break;
    default:
      shiftT(11);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(35);                      // '('
    lookahead1W(240);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(35);                     // '('
    lookahead1W(240);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    shiftT(38);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(45);                      // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(45);                     // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(198);                     // 'ordered'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(198);                    // 'ordered'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(278);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(252);                     // 'unordered'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(252);                    // 'unordered'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(278);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 61:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 61:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(61);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(61);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 51:                        // '<'
      parse_DirElemConstructor();
      break;
    case 52:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 51:                        // '<'
      try_DirElemConstructor();
      break;
    case 52:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(51);                      // '<'
    lookahead1(4);                  // QName
    shift(21);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 46:                        // '/>'
      shift(46);                    // '/>'
      break;
    default:
      shift(58);                    // '>'
      for (;;)
      {
        lookahead1(186);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 53)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(53);                    // '</'
      lookahead1(4);                // QName
      shift(21);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 22)                 // S
      {
        shift(22);                  // S
      }
      lookahead1(8);                // '>'
      shift(58);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(51);                     // '<'
    lookahead1(4);                  // QName
    shiftT(21);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 46:                        // '/>'
      shiftT(46);                   // '/>'
      break;
    default:
      shiftT(58);                   // '>'
      for (;;)
      {
        lookahead1(186);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 53)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(53);                   // '</'
      lookahead1(4);                // QName
      shiftT(21);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 22)                 // S
      {
        shiftT(22);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(58);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      shift(22);                    // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 21)                 // QName
      {
        shift(21);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 22)               // S
        {
          shift(22);                // S
        }
        lookahead1(7);              // '='
        shift(57);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          shift(22);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      shiftT(22);                   // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 21)                 // QName
      {
        shiftT(21);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 22)               // S
        {
          shiftT(22);               // S
        }
        lookahead1(7);              // '='
        shiftT(57);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          shiftT(22);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      shift(29);                    // '"'
      for (;;)
      {
        lookahead1(178);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeQuot
          shift(14);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(29);                    // '"'
      break;
    default:
      shift(34);                    // "'"
      for (;;)
      {
        lookahead1(179);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 15:                    // EscapeApos
          shift(15);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(34);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      shiftT(29);                   // '"'
      for (;;)
      {
        lookahead1(178);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeQuot
          shiftT(14);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(29);                   // '"'
      break;
    default:
      shiftT(34);                   // "'"
      for (;;)
      {
        lookahead1(179);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 15:                    // EscapeApos
          shiftT(15);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(34);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // QuotAttrContentChar
      shift(17);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // QuotAttrContentChar
      shiftT(17);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 18:                        // AposAttrContentChar
      shift(18);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 18:                        // AposAttrContentChar
      shiftT(18);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      parse_DirectConstructor();
      break;
    case 5:                         // CDataSection
      shift(5);                     // CDataSection
      break;
    case 16:                        // ElementContentChar
      shift(16);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 51:                        // '<'
    case 52:                        // '<!--'
    case 56:                        // '<?'
      try_DirectConstructor();
      break;
    case 5:                         // CDataSection
      shiftT(5);                    // CDataSection
      break;
    case 16:                        // ElementContentChar
      shiftT(16);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(52);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(3);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(44);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(52);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(3);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(44);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(56);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(19);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      shift(22);                    // S
      lookahead1(2);                // DirPIContents
      shift(4);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(62);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(56);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(19);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      shiftT(22);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(4);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(62);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 115:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 117:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 78:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 180:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 240:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 92:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 115:                       // 'document'
      try_CompDocConstructor();
      break;
    case 117:                       // 'element'
      try_CompElemConstructor();
      break;
    case 78:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 180:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 240:                       // 'text'
      try_CompTextConstructor();
      break;
    case 92:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(117);                     // 'element'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shift(272);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(278);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 278)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(278);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(117);                    // 'element'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shiftT(272);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(278);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 278)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(278);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(180);                     // 'namespace'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shift(272);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      shift(278);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(180);                    // 'namespace'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shiftT(272);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      shiftT(278);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    shiftT(278);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(30);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(9);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(30);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(9);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(141);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 75)                   // 'as'
    {
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(141);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      try_ParamList();
    }
    shiftT(38);                     // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 75)                   // 'as'
    {
      shiftT(75);                   // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 61)                   // '?'
    {
      shift(61);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 61)                   // '?'
    {
      shiftT(61);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(75);                      // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(75);                     // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 120:                       // 'empty-sequence'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18040:                     // 'empty-sequence' '('
      shift(120);                   // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 61:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 120:                       // 'empty-sequence'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18040:                     // 'empty-sequence' '('
      shiftT(120);                  // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 61:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 61:                        // '?'
      shift(61);                    // '?'
      break;
    case 40:                        // '*'
      shift(40);                    // '*'
      break;
    default:
      shift(41);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 61:                        // '?'
      shiftT(61);                   // '?'
      break;
    case 40:                        // '*'
      shiftT(40);                   // '*'
      break;
    default:
      shiftT(41);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 74:                        // 'array'
    case 78:                        // 'attribute'
    case 92:                        // 'comment'
    case 116:                       // 'document-node'
    case 117:                       // 'element'
    case 141:                       // 'function'
    case 161:                       // 'item'
    case 163:                       // 'json-item'
    case 181:                       // 'namespace-node'
    case 187:                       // 'node'
    case 190:                       // 'object'
    case 212:                       // 'processing-instruction'
    case 222:                       // 'schema-attribute'
    case 223:                       // 'schema-element'
    case 240:                       // 'text'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17994                 // 'array' '('
     || lk == 18083                 // 'json-item' '('
     || lk == 18110)                // 'object' '('
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 17998:                     // 'attribute' '('
    case 18012:                     // 'comment' '('
    case 18036:                     // 'document-node' '('
    case 18037:                     // 'element' '('
    case 18101:                     // 'namespace-node' '('
    case 18107:                     // 'node' '('
    case 18132:                     // 'processing-instruction' '('
    case 18142:                     // 'schema-attribute' '('
    case 18143:                     // 'schema-element' '('
    case 18160:                     // 'text' '('
      parse_KindTest();
      break;
    case 18081:                     // 'item' '('
      shift(161);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case -6:
      parse_JSONTest();
      break;
    case 238:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 74:                        // 'array'
    case 78:                        // 'attribute'
    case 92:                        // 'comment'
    case 116:                       // 'document-node'
    case 117:                       // 'element'
    case 141:                       // 'function'
    case 161:                       // 'item'
    case 163:                       // 'json-item'
    case 181:                       // 'namespace-node'
    case 187:                       // 'node'
    case 190:                       // 'object'
    case 212:                       // 'processing-instruction'
    case 222:                       // 'schema-attribute'
    case 223:                       // 'schema-element'
    case 240:                       // 'text'
      lookahead2W(218);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17994                 // 'array' '('
     || lk == 18083                 // 'json-item' '('
     || lk == 18110)                // 'object' '('
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(2, e0A, -1);
          lk = -8;
        }
        catch (p1A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 17998:                     // 'attribute' '('
    case 18012:                     // 'comment' '('
    case 18036:                     // 'document-node' '('
    case 18037:                     // 'element' '('
    case 18101:                     // 'namespace-node' '('
    case 18107:                     // 'node' '('
    case 18132:                     // 'processing-instruction' '('
    case 18142:                     // 'schema-attribute' '('
    case 18143:                     // 'schema-element' '('
    case 18160:                     // 'text' '('
      try_KindTest();
      break;
    case 18081:                     // 'item' '('
      shiftT(161);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    case 33:                        // '%'
    case 18061:                     // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case -6:
      try_JSONTest();
      break;
    case 238:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 163:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 190:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 163:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 190:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(238);                     // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(238);                    // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(163);                     // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(163);                    // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(190);                     // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(190);                    // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(74);                      // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(74);                     // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 116:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 117:                       // 'element'
      parse_ElementTest();
      break;
    case 78:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 223:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 222:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 212:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 92:                        // 'comment'
      parse_CommentTest();
      break;
    case 240:                       // 'text'
      parse_TextTest();
      break;
    case 181:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    case 187:                       // 'node'
      parse_AnyKindTest();
      break;
    default:
      parse_JSONTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 116:                       // 'document-node'
      try_DocumentTest();
      break;
    case 117:                       // 'element'
      try_ElementTest();
      break;
    case 78:                        // 'attribute'
      try_AttributeTest();
      break;
    case 223:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 222:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 212:                       // 'processing-instruction'
      try_PITest();
      break;
    case 92:                        // 'comment'
      try_CommentTest();
      break;
    case 240:                       // 'text'
      try_TextTest();
      break;
    case 181:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    case 187:                       // 'node'
      try_AnyKindTest();
      break;
    default:
      try_JSONTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(187);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(187);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(116);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(148);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 117:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(116);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(148);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 117:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(240);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(240);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(92);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(92);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(181);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(181);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(212);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(223);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 12:                      // StringLiteral
        shift(12);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(212);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(223);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 12:                      // StringLiteral
        shiftT(12);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(78);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(78);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(222);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(222);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(117);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 61)               // '?'
        {
          shift(61);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(117);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(231);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 61)               // '?'
        {
          shiftT(61);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(223);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(223);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(3, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 141:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(3, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(3, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(141);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(39);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(141);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(39);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(141);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(235);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(233);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    shift(38);                      // ')'
    lookahead1W(29);                // S^WS | '(:' | 'as'
    shift(75);                      // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(141);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(235);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(233);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_SequenceType();
      }
    }
    shiftT(38);                     // ')'
    lookahead1W(29);                // S^WS | '(:' | 'as'
    shiftT(75);                     // 'as'
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(35);                      // '('
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(35);                     // '('
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(104);                     // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'revalidation'
    shift(218);                     // 'revalidation'
    lookahead1W(156);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 236:                       // 'strict'
      shift(236);                   // 'strict'
      break;
    case 167:                       // 'lax'
      shift(167);                   // 'lax'
      break;
    default:
      shift(229);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 66:                        // 'after'
      shift(66);                    // 'after'
      break;
    case 80:                        // 'before'
      shift(80);                    // 'before'
      break;
    default:
      if (l1 == 75)                 // 'as'
      {
        shift(75);                  // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 130:                   // 'first'
          shift(130);               // 'first'
          break;
        default:
          shift(166);               // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      shift(159);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 66:                        // 'after'
      shiftT(66);                   // 'after'
      break;
    case 80:                        // 'before'
      shiftT(80);                   // 'before'
      break;
    default:
      if (l1 == 75)                 // 'as'
      {
        shiftT(75);                 // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 130:                   // 'first'
          shiftT(130);              // 'first'
          break;
        default:
          shiftT(166);              // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      shiftT(159);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(155);                     // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 187:                       // 'node'
      shift(187);                   // 'node'
      break;
    default:
      shift(188);                   // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(155);                    // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 187:                       // 'node'
      shiftT(187);                  // 'node'
      break;
    default:
      shiftT(188);                  // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(106);                     // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 187:                       // 'node'
      shift(187);                   // 'node'
      break;
    default:
      shift(188);                   // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(106);                    // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 187:                       // 'node'
      shiftT(187);                  // 'node'
      break;
    default:
      shiftT(188);                  // 'nodes'
    }
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(215);                     // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 257)                  // 'value'
    {
      shift(257);                   // 'value'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shift(192);                   // 'of'
    }
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(187);                     // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(266);                     // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(215);                    // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 257)                  // 'value'
    {
      shiftT(257);                  // 'value'
      lookahead1W(63);              // S^WS | '(:' | 'of'
      shiftT(192);                  // 'of'
    }
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shiftT(187);                    // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    shiftT(266);                    // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(214);                     // 'rename'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(187);                     // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(75);                      // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(214);                    // 'rename'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shiftT(187);                    // 'node'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    shiftT(75);                     // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(99);                      // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shift(49);                      // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(26);              // S^WS | '(:' | ':='
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(177);                     // 'modify'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(99);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shiftT(49);                     // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(26);              // S^WS | '(:' | ':='
      shiftT(49);                   // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(177);                    // 'modify'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 77:                      // 'at'
        lookahead2W(155);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 111                 // 'different'
       && lk != 113                 // 'distance'
       && lk != 123                 // 'entire'
       && lk != 198                 // 'ordered'
       && lk != 219                 // 'same'
       && lk != 265                 // 'window'
       && lk != 62541               // 'at' 'end'
       && lk != 119373)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 77:                      // 'at'
        lookahead2W(155);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 111                 // 'different'
       && lk != 113                 // 'distance'
       && lk != 123                 // 'entire'
       && lk != 198                 // 'ordered'
       && lk != 219                 // 'same'
       && lk != 265                 // 'window'
       && lk != 62541               // 'at' 'end'
       && lk != 119373)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(260);                     // 'weight'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shift(272);                     // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(260);                    // 'weight'
    lookahead1W(86);                // S^WS | '(:' | '{'
    shiftT(272);                    // '{'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(278);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 140)                // 'ftor'
      {
        break;
      }
      shift(140);                   // 'ftor'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 140)                // 'ftor'
      {
        break;
      }
      shiftT(140);                  // 'ftor'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 138)                // 'ftand'
      {
        break;
      }
      shift(138);                   // 'ftand'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 138)                // 'ftand'
      {
        break;
      }
      shiftT(138);                  // 'ftand'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 189)                // 'not'
      {
        break;
      }
      shift(189);                   // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shift(150);                   // 'in'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 189)                // 'not'
      {
        break;
      }
      shiftT(189);                  // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      shiftT(150);                  // 'in'
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 139)                  // 'ftnot'
    {
      shift(139);                   // 'ftnot'
    }
    lookahead1W(159);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 139)                  // 'ftnot'
    {
      shiftT(139);                  // 'ftnot'
    }
    lookahead1W(159);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 255)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 260)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(202);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 255)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 260)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      shift(35);                    // '('
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(38);                    // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(203);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 191)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      shiftT(35);                   // '('
      lookahead1W(170);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(38);                   // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(203);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 191)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(209);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 67                    // 'all'
     || l1 == 72                    // 'any'
     || l1 == 206)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(209);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 67                    // 'all'
     || l1 == 72                    // 'any'
     || l1 == 206)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 12:                        // StringLiteral
      shift(12);                    // StringLiteral
      break;
    default:
      shift(272);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(278);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 12:                        // StringLiteral
      shiftT(12);                   // StringLiteral
      break;
    default:
      shiftT(272);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(278);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(272);                     // '{'
    lookahead1W(177);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 278)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(278);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(272);                    // '{'
    lookahead1W(177);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 278)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(278);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 72:                        // 'any'
      shift(72);                    // 'any'
      lookahead1W(206);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 268)                // 'word'
      {
        shift(268);                 // 'word'
      }
      break;
    case 67:                        // 'all'
      shift(67);                    // 'all'
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 269)                // 'words'
      {
        shift(269);                 // 'words'
      }
      break;
    default:
      shift(206);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 72:                        // 'any'
      shiftT(72);                   // 'any'
      lookahead1W(206);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 268)                // 'word'
      {
        shiftT(268);                // 'word'
      }
      break;
    case 67:                        // 'all'
      shiftT(67);                   // 'all'
      lookahead1W(207);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 269)                // 'words'
      {
        shiftT(269);                // 'words'
      }
      break;
    default:
      shiftT(206);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(191);                     // 'occurs'
    lookahead1W(153);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(243);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(191);                    // 'occurs'
    lookahead1W(153);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(243);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 126:                       // 'exactly'
      shift(126);                   // 'exactly'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 169:                     // 'least'
        shift(169);                 // 'least'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(179);                 // 'most'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(136);                   // 'from'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      shift(244);                   // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 126:                       // 'exactly'
      shiftT(126);                  // 'exactly'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 169:                     // 'least'
        shiftT(169);                // 'least'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        shiftT(179);                // 'most'
        lookahead1W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(136);                  // 'from'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      shiftT(244);                  // 'to'
      lookahead1W(237);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 198:                       // 'ordered'
      parse_FTOrder();
      break;
    case 265:                       // 'window'
      parse_FTWindow();
      break;
    case 113:                       // 'distance'
      parse_FTDistance();
      break;
    case 111:                       // 'different'
    case 219:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 198:                       // 'ordered'
      try_FTOrder();
      break;
    case 265:                       // 'window'
      try_FTWindow();
      break;
    case 113:                       // 'distance'
      try_FTDistance();
      break;
    case 111:                       // 'different'
    case 219:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(198);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(198);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(265);                     // 'window'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(265);                    // 'window'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(113);                     // 'distance'
    lookahead1W(153);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(113);                    // 'distance'
    lookahead1W(153);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 269:                       // 'words'
      shift(269);                   // 'words'
      break;
    case 228:                       // 'sentences'
      shift(228);                   // 'sentences'
      break;
    default:
      shift(201);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 269:                       // 'words'
      shiftT(269);                  // 'words'
      break;
    case 228:                       // 'sentences'
      shiftT(228);                  // 'sentences'
      break;
    default:
      shiftT(201);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 219:                       // 'same'
      shift(219);                   // 'same'
      break;
    default:
      shift(111);                   // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 219:                       // 'same'
      shiftT(219);                  // 'same'
      break;
    default:
      shiftT(111);                  // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 227:                       // 'sentence'
      shift(227);                   // 'sentence'
      break;
    default:
      shift(200);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 227:                       // 'sentence'
      shiftT(227);                  // 'sentence'
      break;
    default:
      shiftT(200);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 233:                     // 'start'
        shift(233);                 // 'start'
        break;
      default:
        shift(122);                 // 'end'
      }
      break;
    default:
      shift(123);                   // 'entire'
      lookahead1W(41);              // S^WS | '(:' | 'content'
      shift(96);                    // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 233:                     // 'start'
        shiftT(233);                // 'start'
        break;
      default:
        shiftT(122);                // 'end'
      }
      break;
    default:
      shiftT(123);                  // 'entire'
      lookahead1W(41);              // S^WS | '(:' | 'content'
      shiftT(96);                   // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(255);                   // 'using'
      lookahead1W(194);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(202);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 255)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(255);                  // 'using'
      lookahead1W(194);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(202);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 255)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 184:                       // 'no'
      lookahead2W(169);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 165:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 264:                       // 'wildcards'
    case 135352:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 242:                       // 'thesaurus'
    case 124088:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 234:                       // 'stemming'
    case 119992:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 110:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 235:                       // 'stop'
    case 120504:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 195:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 184:                       // 'no'
      lookahead2W(169);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 165:                       // 'language'
      try_FTLanguageOption();
      break;
    case 264:                       // 'wildcards'
    case 135352:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 242:                       // 'thesaurus'
    case 124088:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 234:                       // 'stemming'
    case 119992:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 110:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 235:                       // 'stop'
    case 120504:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 195:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 84:                        // 'case'
      shift(84);                    // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        shift(154);                 // 'insensitive'
        break;
      default:
        shift(226);                 // 'sensitive'
      }
      break;
    case 173:                       // 'lowercase'
      shift(173);                   // 'lowercase'
      break;
    default:
      shift(254);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 84:                        // 'case'
      shiftT(84);                   // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        shiftT(154);                // 'insensitive'
        break;
      default:
        shiftT(226);                // 'sensitive'
      }
      break;
    case 173:                       // 'lowercase'
      shiftT(173);                  // 'lowercase'
      break;
    default:
      shiftT(254);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(110);                     // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      shift(154);                   // 'insensitive'
      break;
    default:
      shift(226);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(110);                    // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      shiftT(154);                  // 'insensitive'
      break;
    default:
      shiftT(226);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 234:                       // 'stemming'
      shift(234);                   // 'stemming'
      break;
    default:
      shift(184);                   // 'no'
      lookahead1W(73);              // S^WS | '(:' | 'stemming'
      shift(234);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 234:                       // 'stemming'
      shiftT(234);                  // 'stemming'
      break;
    default:
      shiftT(184);                  // 'no'
      lookahead1W(73);              // S^WS | '(:' | 'stemming'
      shiftT(234);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 242:                       // 'thesaurus'
      shift(242);                   // 'thesaurus'
      lookahead1W(146);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 77:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 105:                     // 'default'
        shift(105);                 // 'default'
        break;
      default:
        shift(35);                  // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 77:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(105);               // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shift(42);                // ','
          lookahead1W(30);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(38);                  // ')'
      }
      break;
    default:
      shift(184);                   // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'thesaurus'
      shift(242);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 242:                       // 'thesaurus'
      shiftT(242);                  // 'thesaurus'
      lookahead1W(146);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 77:                      // 'at'
        try_FTThesaurusID();
        break;
      case 105:                     // 'default'
        shiftT(105);                // 'default'
        break;
      default:
        shiftT(35);                 // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 77:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(105);              // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shiftT(42);               // ','
          lookahead1W(30);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(38);                 // ')'
      }
      break;
    default:
      shiftT(184);                  // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'thesaurus'
      shiftT(242);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(77);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    lookahead1W(208);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 213)                  // 'relationship'
    {
      shift(213);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
    }
    lookahead1W(204);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(176);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 126                   // 'exactly'
     || lk == 136                   // 'from'
     || lk == 86605                 // 'at' 'least'
     || lk == 91725)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(57);              // S^WS | '(:' | 'levels'
      shift(171);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(77);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(8);                      // URILiteral
    lookahead1W(208);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 213)                  // 'relationship'
    {
      shiftT(213);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(12);                   // StringLiteral
    }
    lookahead1W(204);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(176);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 126                   // 'exactly'
     || lk == 136                   // 'from'
     || lk == 86605                 // 'at' 'least'
     || lk == 91725)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(57);              // S^WS | '(:' | 'levels'
      shiftT(171);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 126:                       // 'exactly'
      shift(126);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(9);                     // IntegerLiteral
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 169:                     // 'least'
        shift(169);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(9);                   // IntegerLiteral
        break;
      default:
        shift(179);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(9);                   // IntegerLiteral
      }
      break;
    default:
      shift(136);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(9);                     // IntegerLiteral
      lookahead1W(78);              // S^WS | '(:' | 'to'
      shift(244);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(9);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 126:                       // 'exactly'
      shiftT(126);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(9);                    // IntegerLiteral
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 169:                     // 'least'
        shiftT(169);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(9);                  // IntegerLiteral
        break;
      default:
        shiftT(179);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(9);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(136);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(9);                    // IntegerLiteral
      lookahead1W(78);              // S^WS | '(:' | 'to'
      shiftT(244);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(9);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 235:                       // 'stop'
      shift(235);                   // 'stop'
      lookahead1W(85);              // S^WS | '(:' | 'words'
      shift(269);                   // 'words'
      lookahead1W(146);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 105:                     // 'default'
        shift(105);                 // 'default'
        for (;;)
        {
          lookahead1W(205);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 127             // 'except'
           && l1 != 250)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(205);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 127             // 'except'
           && l1 != 250)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(184);                   // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stop'
      shift(235);                   // 'stop'
      lookahead1W(85);              // S^WS | '(:' | 'words'
      shift(269);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 235:                       // 'stop'
      shiftT(235);                  // 'stop'
      lookahead1W(85);              // S^WS | '(:' | 'words'
      shiftT(269);                  // 'words'
      lookahead1W(146);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 105:                     // 'default'
        shiftT(105);                // 'default'
        for (;;)
        {
          lookahead1W(205);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 127             // 'except'
           && l1 != 250)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(205);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 127             // 'except'
           && l1 != 250)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(184);                  // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stop'
      shiftT(235);                  // 'stop'
      lookahead1W(85);              // S^WS | '(:' | 'words'
      shiftT(269);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 77:                        // 'at'
      shift(77);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(8);                     // URILiteral
      break;
    default:
      shift(35);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(12);                    // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(12);                  // StringLiteral
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(8);                    // URILiteral
      break;
    default:
      shiftT(35);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(12);                   // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(12);                 // StringLiteral
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 250:                       // 'union'
      shift(250);                   // 'union'
      break;
    default:
      shift(127);                   // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 250:                       // 'union'
      shiftT(250);                  // 'union'
      break;
    default:
      shiftT(127);                  // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(165);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(12);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(165);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(12);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 264:                       // 'wildcards'
      shift(264);                   // 'wildcards'
      break;
    default:
      shift(184);                   // 'no'
      lookahead1W(83);              // S^WS | '(:' | 'wildcards'
      shift(264);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 264:                       // 'wildcards'
      shiftT(264);                  // 'wildcards'
      break;
    default:
      shiftT(184);                  // 'no'
      lookahead1W(83);              // S^WS | '(:' | 'wildcards'
      shiftT(264);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(195);                     // 'option'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(12);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(195);                    // 'option'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(12);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(267);                     // 'without'
    lookahead1W(41);                // S^WS | '(:' | 'content'
    shift(96);                      // 'content'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(267);                    // 'without'
    lookahead1W(41);                // S^WS | '(:' | 'content'
    shiftT(96);                     // 'content'
    lookahead1W(237);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(91);                      // 'collection'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(75);                      // 'as'
    lookahead1W(196);               // S^WS | '(:' | 'array' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'json-item' | 'namespace-node' | 'node' | 'object' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(164);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 50)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(150);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 90)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(75);                      // 'as'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(181);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 61)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(90);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(8);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(151);                     // 'index'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(64);                // S^WS | '(:' | 'on'
    shift(193);                     // 'on'
    lookahead1W(62);                // S^WS | '(:' | 'nodes'
    shift(188);                     // 'nodes'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    shift(83);                      // 'by'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(236);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(157);                     // 'integrity'
    lookahead1W(39);                // S^WS | '(:' | 'constraint'
    shift(93);                      // 'constraint'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 193:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(193);                     // 'on'
    lookahead1W(38);                // S^WS | '(:' | 'collection'
    shift(91);                      // 'collection'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(144);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 32:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 187:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(36);                // S^WS | '(:' | 'check'
    shift(88);                      // 'check'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(187);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(36);                // S^WS | '(:' | 'check'
    shift(88);                      // 'check'
    lookahead1W(79);                // S^WS | '(:' | 'unique'
    shift(251);                     // 'unique'
    lookahead1W(56);                // S^WS | '(:' | 'key'
    shift(164);                     // 'key'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(134);                     // 'foreach'
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(187);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(36);                // S^WS | '(:' | 'check'
    shift(88);                      // 'check'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(135);                     // 'foreign'
    lookahead1W(56);                // S^WS | '(:' | 'key'
    shift(164);                     // 'key'
    lookahead1W(50);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(136);                     // 'from'
    lookahead1W(38);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(244);                     // 'to'
    lookahead1W(38);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(91);                      // 'collection'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(61);                // S^WS | '(:' | 'node'
    shift(187);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(56);                // S^WS | '(:' | 'key'
    shift(164);                     // 'key'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(37);                     // '(:'
    for (;;)
    {
      lookahead1(88);               // CommentContents | '(:' | ':)'
      if (l1 == 48)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // CommentContents
        shiftT(25);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(48);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 23:                        // S^WS
      shiftT(23);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(220);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 78:                        // 'attribute'
      shift(78);                    // 'attribute'
      break;
    case 92:                        // 'comment'
      shift(92);                    // 'comment'
      break;
    case 116:                       // 'document-node'
      shift(116);                   // 'document-node'
      break;
    case 117:                       // 'element'
      shift(117);                   // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shift(120);                   // 'empty-sequence'
      break;
    case 141:                       // 'function'
      shift(141);                   // 'function'
      break;
    case 148:                       // 'if'
      shift(148);                   // 'if'
      break;
    case 161:                       // 'item'
      shift(161);                   // 'item'
      break;
    case 181:                       // 'namespace-node'
      shift(181);                   // 'namespace-node'
      break;
    case 187:                       // 'node'
      shift(187);                   // 'node'
      break;
    case 212:                       // 'processing-instruction'
      shift(212);                   // 'processing-instruction'
      break;
    case 222:                       // 'schema-attribute'
      shift(222);                   // 'schema-attribute'
      break;
    case 223:                       // 'schema-element'
      shift(223);                   // 'schema-element'
      break;
    case 239:                       // 'switch'
      shift(239);                   // 'switch'
      break;
    case 240:                       // 'text'
      shift(240);                   // 'text'
      break;
    case 249:                       // 'typeswitch'
      shift(249);                   // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(220);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 78:                        // 'attribute'
      shiftT(78);                   // 'attribute'
      break;
    case 92:                        // 'comment'
      shiftT(92);                   // 'comment'
      break;
    case 116:                       // 'document-node'
      shiftT(116);                  // 'document-node'
      break;
    case 117:                       // 'element'
      shiftT(117);                  // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shiftT(120);                  // 'empty-sequence'
      break;
    case 141:                       // 'function'
      shiftT(141);                  // 'function'
      break;
    case 148:                       // 'if'
      shiftT(148);                  // 'if'
      break;
    case 161:                       // 'item'
      shiftT(161);                  // 'item'
      break;
    case 181:                       // 'namespace-node'
      shiftT(181);                  // 'namespace-node'
      break;
    case 187:                       // 'node'
      shiftT(187);                  // 'node'
      break;
    case 212:                       // 'processing-instruction'
      shiftT(212);                  // 'processing-instruction'
      break;
    case 222:                       // 'schema-attribute'
      shiftT(222);                  // 'schema-attribute'
      break;
    case 223:                       // 'schema-element'
      shiftT(223);                  // 'schema-element'
      break;
    case 239:                       // 'switch'
      shiftT(239);                  // 'switch'
      break;
    case 240:                       // 'text'
      shiftT(240);                  // 'text'
      break;
    case 249:                       // 'typeswitch'
      shiftT(249);                  // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 7:                         // EQName^Token
      shift(7);                     // EQName^Token
      break;
    case 66:                        // 'after'
      shift(66);                    // 'after'
      break;
    case 69:                        // 'ancestor'
      shift(69);                    // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shift(70);                    // 'ancestor-or-self'
      break;
    case 71:                        // 'and'
      shift(71);                    // 'and'
      break;
    case 75:                        // 'as'
      shift(75);                    // 'as'
      break;
    case 76:                        // 'ascending'
      shift(76);                    // 'ascending'
      break;
    case 80:                        // 'before'
      shift(80);                    // 'before'
      break;
    case 84:                        // 'case'
      shift(84);                    // 'case'
      break;
    case 85:                        // 'cast'
      shift(85);                    // 'cast'
      break;
    case 86:                        // 'castable'
      shift(86);                    // 'castable'
      break;
    case 89:                        // 'child'
      shift(89);                    // 'child'
      break;
    case 90:                        // 'collation'
      shift(90);                    // 'collation'
      break;
    case 99:                        // 'copy'
      shift(99);                    // 'copy'
      break;
    case 101:                       // 'count'
      shift(101);                   // 'count'
      break;
    case 104:                       // 'declare'
      shift(104);                   // 'declare'
      break;
    case 105:                       // 'default'
      shift(105);                   // 'default'
      break;
    case 106:                       // 'delete'
      shift(106);                   // 'delete'
      break;
    case 107:                       // 'descendant'
      shift(107);                   // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shift(108);                   // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      shift(109);                   // 'descending'
      break;
    case 114:                       // 'div'
      shift(114);                   // 'div'
      break;
    case 115:                       // 'document'
      shift(115);                   // 'document'
      break;
    case 118:                       // 'else'
      shift(118);                   // 'else'
      break;
    case 119:                       // 'empty'
      shift(119);                   // 'empty'
      break;
    case 122:                       // 'end'
      shift(122);                   // 'end'
      break;
    case 124:                       // 'eq'
      shift(124);                   // 'eq'
      break;
    case 125:                       // 'every'
      shift(125);                   // 'every'
      break;
    case 127:                       // 'except'
      shift(127);                   // 'except'
      break;
    case 130:                       // 'first'
      shift(130);                   // 'first'
      break;
    case 131:                       // 'following'
      shift(131);                   // 'following'
      break;
    case 132:                       // 'following-sibling'
      shift(132);                   // 'following-sibling'
      break;
    case 133:                       // 'for'
      shift(133);                   // 'for'
      break;
    case 142:                       // 'ge'
      shift(142);                   // 'ge'
      break;
    case 144:                       // 'group'
      shift(144);                   // 'group'
      break;
    case 146:                       // 'gt'
      shift(146);                   // 'gt'
      break;
    case 147:                       // 'idiv'
      shift(147);                   // 'idiv'
      break;
    case 149:                       // 'import'
      shift(149);                   // 'import'
      break;
    case 155:                       // 'insert'
      shift(155);                   // 'insert'
      break;
    case 156:                       // 'instance'
      shift(156);                   // 'instance'
      break;
    case 158:                       // 'intersect'
      shift(158);                   // 'intersect'
      break;
    case 159:                       // 'into'
      shift(159);                   // 'into'
      break;
    case 160:                       // 'is'
      shift(160);                   // 'is'
      break;
    case 166:                       // 'last'
      shift(166);                   // 'last'
      break;
    case 168:                       // 'le'
      shift(168);                   // 'le'
      break;
    case 170:                       // 'let'
      shift(170);                   // 'let'
      break;
    case 174:                       // 'lt'
      shift(174);                   // 'lt'
      break;
    case 176:                       // 'mod'
      shift(176);                   // 'mod'
      break;
    case 177:                       // 'modify'
      shift(177);                   // 'modify'
      break;
    case 178:                       // 'module'
      shift(178);                   // 'module'
      break;
    case 180:                       // 'namespace'
      shift(180);                   // 'namespace'
      break;
    case 182:                       // 'ne'
      shift(182);                   // 'ne'
      break;
    case 194:                       // 'only'
      shift(194);                   // 'only'
      break;
    case 196:                       // 'or'
      shift(196);                   // 'or'
      break;
    case 197:                       // 'order'
      shift(197);                   // 'order'
      break;
    case 198:                       // 'ordered'
      shift(198);                   // 'ordered'
      break;
    case 202:                       // 'parent'
      shift(202);                   // 'parent'
      break;
    case 208:                       // 'preceding'
      shift(208);                   // 'preceding'
      break;
    case 209:                       // 'preceding-sibling'
      shift(209);                   // 'preceding-sibling'
      break;
    case 214:                       // 'rename'
      shift(214);                   // 'rename'
      break;
    case 215:                       // 'replace'
      shift(215);                   // 'replace'
      break;
    case 216:                       // 'return'
      shift(216);                   // 'return'
      break;
    case 220:                       // 'satisfies'
      shift(220);                   // 'satisfies'
      break;
    case 225:                       // 'self'
      shift(225);                   // 'self'
      break;
    case 231:                       // 'some'
      shift(231);                   // 'some'
      break;
    case 232:                       // 'stable'
      shift(232);                   // 'stable'
      break;
    case 233:                       // 'start'
      shift(233);                   // 'start'
      break;
    case 244:                       // 'to'
      shift(244);                   // 'to'
      break;
    case 245:                       // 'treat'
      shift(245);                   // 'treat'
      break;
    case 246:                       // 'try'
      shift(246);                   // 'try'
      break;
    case 250:                       // 'union'
      shift(250);                   // 'union'
      break;
    case 252:                       // 'unordered'
      shift(252);                   // 'unordered'
      break;
    case 256:                       // 'validate'
      shift(256);                   // 'validate'
      break;
    case 262:                       // 'where'
      shift(262);                   // 'where'
      break;
    case 266:                       // 'with'
      shift(266);                   // 'with'
      break;
    case 270:                       // 'xquery'
      shift(270);                   // 'xquery'
      break;
    case 68:                        // 'allowing'
      shift(68);                    // 'allowing'
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      break;
    case 79:                        // 'base-uri'
      shift(79);                    // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shift(81);                    // 'boundary-space'
      break;
    case 82:                        // 'break'
      shift(82);                    // 'break'
      break;
    case 87:                        // 'catch'
      shift(87);                    // 'catch'
      break;
    case 94:                        // 'construction'
      shift(94);                    // 'construction'
      break;
    case 97:                        // 'context'
      shift(97);                    // 'context'
      break;
    case 98:                        // 'continue'
      shift(98);                    // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shift(100);                   // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shift(102);                   // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shift(121);                   // 'encoding'
      break;
    case 128:                       // 'exit'
      shift(128);                   // 'exit'
      break;
    case 129:                       // 'external'
      shift(129);                   // 'external'
      break;
    case 137:                       // 'ft-option'
      shift(137);                   // 'ft-option'
      break;
    case 150:                       // 'in'
      shift(150);                   // 'in'
      break;
    case 151:                       // 'index'
      shift(151);                   // 'index'
      break;
    case 157:                       // 'integrity'
      shift(157);                   // 'integrity'
      break;
    case 167:                       // 'lax'
      shift(167);                   // 'lax'
      break;
    case 188:                       // 'nodes'
      shift(188);                   // 'nodes'
      break;
    case 195:                       // 'option'
      shift(195);                   // 'option'
      break;
    case 199:                       // 'ordering'
      shift(199);                   // 'ordering'
      break;
    case 218:                       // 'revalidation'
      shift(218);                   // 'revalidation'
      break;
    case 221:                       // 'schema'
      shift(221);                   // 'schema'
      break;
    case 224:                       // 'score'
      shift(224);                   // 'score'
      break;
    case 230:                       // 'sliding'
      shift(230);                   // 'sliding'
      break;
    case 236:                       // 'strict'
      shift(236);                   // 'strict'
      break;
    case 247:                       // 'tumbling'
      shift(247);                   // 'tumbling'
      break;
    case 248:                       // 'type'
      shift(248);                   // 'type'
      break;
    case 253:                       // 'updating'
      shift(253);                   // 'updating'
      break;
    case 257:                       // 'value'
      shift(257);                   // 'value'
      break;
    case 258:                       // 'variable'
      shift(258);                   // 'variable'
      break;
    case 259:                       // 'version'
      shift(259);                   // 'version'
      break;
    case 263:                       // 'while'
      shift(263);                   // 'while'
      break;
    case 93:                        // 'constraint'
      shift(93);                    // 'constraint'
      break;
    case 172:                       // 'loop'
      shift(172);                   // 'loop'
      break;
    case 217:                       // 'returning'
      shift(217);                   // 'returning'
      break;
    case 190:                       // 'object'
      shift(190);                   // 'object'
      break;
    case 163:                       // 'json-item'
      shift(163);                   // 'json-item'
      break;
    default:
      shift(74);                    // 'array'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 7:                         // EQName^Token
      shiftT(7);                    // EQName^Token
      break;
    case 66:                        // 'after'
      shiftT(66);                   // 'after'
      break;
    case 69:                        // 'ancestor'
      shiftT(69);                   // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shiftT(70);                   // 'ancestor-or-self'
      break;
    case 71:                        // 'and'
      shiftT(71);                   // 'and'
      break;
    case 75:                        // 'as'
      shiftT(75);                   // 'as'
      break;
    case 76:                        // 'ascending'
      shiftT(76);                   // 'ascending'
      break;
    case 80:                        // 'before'
      shiftT(80);                   // 'before'
      break;
    case 84:                        // 'case'
      shiftT(84);                   // 'case'
      break;
    case 85:                        // 'cast'
      shiftT(85);                   // 'cast'
      break;
    case 86:                        // 'castable'
      shiftT(86);                   // 'castable'
      break;
    case 89:                        // 'child'
      shiftT(89);                   // 'child'
      break;
    case 90:                        // 'collation'
      shiftT(90);                   // 'collation'
      break;
    case 99:                        // 'copy'
      shiftT(99);                   // 'copy'
      break;
    case 101:                       // 'count'
      shiftT(101);                  // 'count'
      break;
    case 104:                       // 'declare'
      shiftT(104);                  // 'declare'
      break;
    case 105:                       // 'default'
      shiftT(105);                  // 'default'
      break;
    case 106:                       // 'delete'
      shiftT(106);                  // 'delete'
      break;
    case 107:                       // 'descendant'
      shiftT(107);                  // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shiftT(108);                  // 'descendant-or-self'
      break;
    case 109:                       // 'descending'
      shiftT(109);                  // 'descending'
      break;
    case 114:                       // 'div'
      shiftT(114);                  // 'div'
      break;
    case 115:                       // 'document'
      shiftT(115);                  // 'document'
      break;
    case 118:                       // 'else'
      shiftT(118);                  // 'else'
      break;
    case 119:                       // 'empty'
      shiftT(119);                  // 'empty'
      break;
    case 122:                       // 'end'
      shiftT(122);                  // 'end'
      break;
    case 124:                       // 'eq'
      shiftT(124);                  // 'eq'
      break;
    case 125:                       // 'every'
      shiftT(125);                  // 'every'
      break;
    case 127:                       // 'except'
      shiftT(127);                  // 'except'
      break;
    case 130:                       // 'first'
      shiftT(130);                  // 'first'
      break;
    case 131:                       // 'following'
      shiftT(131);                  // 'following'
      break;
    case 132:                       // 'following-sibling'
      shiftT(132);                  // 'following-sibling'
      break;
    case 133:                       // 'for'
      shiftT(133);                  // 'for'
      break;
    case 142:                       // 'ge'
      shiftT(142);                  // 'ge'
      break;
    case 144:                       // 'group'
      shiftT(144);                  // 'group'
      break;
    case 146:                       // 'gt'
      shiftT(146);                  // 'gt'
      break;
    case 147:                       // 'idiv'
      shiftT(147);                  // 'idiv'
      break;
    case 149:                       // 'import'
      shiftT(149);                  // 'import'
      break;
    case 155:                       // 'insert'
      shiftT(155);                  // 'insert'
      break;
    case 156:                       // 'instance'
      shiftT(156);                  // 'instance'
      break;
    case 158:                       // 'intersect'
      shiftT(158);                  // 'intersect'
      break;
    case 159:                       // 'into'
      shiftT(159);                  // 'into'
      break;
    case 160:                       // 'is'
      shiftT(160);                  // 'is'
      break;
    case 166:                       // 'last'
      shiftT(166);                  // 'last'
      break;
    case 168:                       // 'le'
      shiftT(168);                  // 'le'
      break;
    case 170:                       // 'let'
      shiftT(170);                  // 'let'
      break;
    case 174:                       // 'lt'
      shiftT(174);                  // 'lt'
      break;
    case 176:                       // 'mod'
      shiftT(176);                  // 'mod'
      break;
    case 177:                       // 'modify'
      shiftT(177);                  // 'modify'
      break;
    case 178:                       // 'module'
      shiftT(178);                  // 'module'
      break;
    case 180:                       // 'namespace'
      shiftT(180);                  // 'namespace'
      break;
    case 182:                       // 'ne'
      shiftT(182);                  // 'ne'
      break;
    case 194:                       // 'only'
      shiftT(194);                  // 'only'
      break;
    case 196:                       // 'or'
      shiftT(196);                  // 'or'
      break;
    case 197:                       // 'order'
      shiftT(197);                  // 'order'
      break;
    case 198:                       // 'ordered'
      shiftT(198);                  // 'ordered'
      break;
    case 202:                       // 'parent'
      shiftT(202);                  // 'parent'
      break;
    case 208:                       // 'preceding'
      shiftT(208);                  // 'preceding'
      break;
    case 209:                       // 'preceding-sibling'
      shiftT(209);                  // 'preceding-sibling'
      break;
    case 214:                       // 'rename'
      shiftT(214);                  // 'rename'
      break;
    case 215:                       // 'replace'
      shiftT(215);                  // 'replace'
      break;
    case 216:                       // 'return'
      shiftT(216);                  // 'return'
      break;
    case 220:                       // 'satisfies'
      shiftT(220);                  // 'satisfies'
      break;
    case 225:                       // 'self'
      shiftT(225);                  // 'self'
      break;
    case 231:                       // 'some'
      shiftT(231);                  // 'some'
      break;
    case 232:                       // 'stable'
      shiftT(232);                  // 'stable'
      break;
    case 233:                       // 'start'
      shiftT(233);                  // 'start'
      break;
    case 244:                       // 'to'
      shiftT(244);                  // 'to'
      break;
    case 245:                       // 'treat'
      shiftT(245);                  // 'treat'
      break;
    case 246:                       // 'try'
      shiftT(246);                  // 'try'
      break;
    case 250:                       // 'union'
      shiftT(250);                  // 'union'
      break;
    case 252:                       // 'unordered'
      shiftT(252);                  // 'unordered'
      break;
    case 256:                       // 'validate'
      shiftT(256);                  // 'validate'
      break;
    case 262:                       // 'where'
      shiftT(262);                  // 'where'
      break;
    case 266:                       // 'with'
      shiftT(266);                  // 'with'
      break;
    case 270:                       // 'xquery'
      shiftT(270);                  // 'xquery'
      break;
    case 68:                        // 'allowing'
      shiftT(68);                   // 'allowing'
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      break;
    case 79:                        // 'base-uri'
      shiftT(79);                   // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shiftT(81);                   // 'boundary-space'
      break;
    case 82:                        // 'break'
      shiftT(82);                   // 'break'
      break;
    case 87:                        // 'catch'
      shiftT(87);                   // 'catch'
      break;
    case 94:                        // 'construction'
      shiftT(94);                   // 'construction'
      break;
    case 97:                        // 'context'
      shiftT(97);                   // 'context'
      break;
    case 98:                        // 'continue'
      shiftT(98);                   // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shiftT(100);                  // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shiftT(102);                  // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shiftT(121);                  // 'encoding'
      break;
    case 128:                       // 'exit'
      shiftT(128);                  // 'exit'
      break;
    case 129:                       // 'external'
      shiftT(129);                  // 'external'
      break;
    case 137:                       // 'ft-option'
      shiftT(137);                  // 'ft-option'
      break;
    case 150:                       // 'in'
      shiftT(150);                  // 'in'
      break;
    case 151:                       // 'index'
      shiftT(151);                  // 'index'
      break;
    case 157:                       // 'integrity'
      shiftT(157);                  // 'integrity'
      break;
    case 167:                       // 'lax'
      shiftT(167);                  // 'lax'
      break;
    case 188:                       // 'nodes'
      shiftT(188);                  // 'nodes'
      break;
    case 195:                       // 'option'
      shiftT(195);                  // 'option'
      break;
    case 199:                       // 'ordering'
      shiftT(199);                  // 'ordering'
      break;
    case 218:                       // 'revalidation'
      shiftT(218);                  // 'revalidation'
      break;
    case 221:                       // 'schema'
      shiftT(221);                  // 'schema'
      break;
    case 224:                       // 'score'
      shiftT(224);                  // 'score'
      break;
    case 230:                       // 'sliding'
      shiftT(230);                  // 'sliding'
      break;
    case 236:                       // 'strict'
      shiftT(236);                  // 'strict'
      break;
    case 247:                       // 'tumbling'
      shiftT(247);                  // 'tumbling'
      break;
    case 248:                       // 'type'
      shiftT(248);                  // 'type'
      break;
    case 253:                       // 'updating'
      shiftT(253);                  // 'updating'
      break;
    case 257:                       // 'value'
      shiftT(257);                  // 'value'
      break;
    case 258:                       // 'variable'
      shiftT(258);                  // 'variable'
      break;
    case 259:                       // 'version'
      shiftT(259);                  // 'version'
      break;
    case 263:                       // 'while'
      shiftT(263);                  // 'while'
      break;
    case 93:                        // 'constraint'
      shiftT(93);                   // 'constraint'
      break;
    case 172:                       // 'loop'
      shiftT(172);                  // 'loop'
      break;
    case 217:                       // 'returning'
      shiftT(217);                  // 'returning'
      break;
    case 190:                       // 'object'
      shiftT(190);                  // 'object'
      break;
    case 163:                       // 'json-item'
      shiftT(163);                  // 'json-item'
      break;
    default:
      shiftT(74);                   // 'array'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 20:                        // NCName^Token
      shift(20);                    // NCName^Token
      break;
    case 66:                        // 'after'
      shift(66);                    // 'after'
      break;
    case 71:                        // 'and'
      shift(71);                    // 'and'
      break;
    case 75:                        // 'as'
      shift(75);                    // 'as'
      break;
    case 76:                        // 'ascending'
      shift(76);                    // 'ascending'
      break;
    case 80:                        // 'before'
      shift(80);                    // 'before'
      break;
    case 84:                        // 'case'
      shift(84);                    // 'case'
      break;
    case 85:                        // 'cast'
      shift(85);                    // 'cast'
      break;
    case 86:                        // 'castable'
      shift(86);                    // 'castable'
      break;
    case 90:                        // 'collation'
      shift(90);                    // 'collation'
      break;
    case 101:                       // 'count'
      shift(101);                   // 'count'
      break;
    case 105:                       // 'default'
      shift(105);                   // 'default'
      break;
    case 109:                       // 'descending'
      shift(109);                   // 'descending'
      break;
    case 114:                       // 'div'
      shift(114);                   // 'div'
      break;
    case 118:                       // 'else'
      shift(118);                   // 'else'
      break;
    case 119:                       // 'empty'
      shift(119);                   // 'empty'
      break;
    case 122:                       // 'end'
      shift(122);                   // 'end'
      break;
    case 124:                       // 'eq'
      shift(124);                   // 'eq'
      break;
    case 127:                       // 'except'
      shift(127);                   // 'except'
      break;
    case 133:                       // 'for'
      shift(133);                   // 'for'
      break;
    case 142:                       // 'ge'
      shift(142);                   // 'ge'
      break;
    case 144:                       // 'group'
      shift(144);                   // 'group'
      break;
    case 146:                       // 'gt'
      shift(146);                   // 'gt'
      break;
    case 147:                       // 'idiv'
      shift(147);                   // 'idiv'
      break;
    case 156:                       // 'instance'
      shift(156);                   // 'instance'
      break;
    case 158:                       // 'intersect'
      shift(158);                   // 'intersect'
      break;
    case 159:                       // 'into'
      shift(159);                   // 'into'
      break;
    case 160:                       // 'is'
      shift(160);                   // 'is'
      break;
    case 168:                       // 'le'
      shift(168);                   // 'le'
      break;
    case 170:                       // 'let'
      shift(170);                   // 'let'
      break;
    case 174:                       // 'lt'
      shift(174);                   // 'lt'
      break;
    case 176:                       // 'mod'
      shift(176);                   // 'mod'
      break;
    case 177:                       // 'modify'
      shift(177);                   // 'modify'
      break;
    case 182:                       // 'ne'
      shift(182);                   // 'ne'
      break;
    case 194:                       // 'only'
      shift(194);                   // 'only'
      break;
    case 196:                       // 'or'
      shift(196);                   // 'or'
      break;
    case 197:                       // 'order'
      shift(197);                   // 'order'
      break;
    case 216:                       // 'return'
      shift(216);                   // 'return'
      break;
    case 220:                       // 'satisfies'
      shift(220);                   // 'satisfies'
      break;
    case 232:                       // 'stable'
      shift(232);                   // 'stable'
      break;
    case 233:                       // 'start'
      shift(233);                   // 'start'
      break;
    case 244:                       // 'to'
      shift(244);                   // 'to'
      break;
    case 245:                       // 'treat'
      shift(245);                   // 'treat'
      break;
    case 250:                       // 'union'
      shift(250);                   // 'union'
      break;
    case 262:                       // 'where'
      shift(262);                   // 'where'
      break;
    case 266:                       // 'with'
      shift(266);                   // 'with'
      break;
    case 69:                        // 'ancestor'
      shift(69);                    // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shift(70);                    // 'ancestor-or-self'
      break;
    case 78:                        // 'attribute'
      shift(78);                    // 'attribute'
      break;
    case 89:                        // 'child'
      shift(89);                    // 'child'
      break;
    case 92:                        // 'comment'
      shift(92);                    // 'comment'
      break;
    case 99:                        // 'copy'
      shift(99);                    // 'copy'
      break;
    case 104:                       // 'declare'
      shift(104);                   // 'declare'
      break;
    case 106:                       // 'delete'
      shift(106);                   // 'delete'
      break;
    case 107:                       // 'descendant'
      shift(107);                   // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shift(108);                   // 'descendant-or-self'
      break;
    case 115:                       // 'document'
      shift(115);                   // 'document'
      break;
    case 116:                       // 'document-node'
      shift(116);                   // 'document-node'
      break;
    case 117:                       // 'element'
      shift(117);                   // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shift(120);                   // 'empty-sequence'
      break;
    case 125:                       // 'every'
      shift(125);                   // 'every'
      break;
    case 130:                       // 'first'
      shift(130);                   // 'first'
      break;
    case 131:                       // 'following'
      shift(131);                   // 'following'
      break;
    case 132:                       // 'following-sibling'
      shift(132);                   // 'following-sibling'
      break;
    case 141:                       // 'function'
      shift(141);                   // 'function'
      break;
    case 148:                       // 'if'
      shift(148);                   // 'if'
      break;
    case 149:                       // 'import'
      shift(149);                   // 'import'
      break;
    case 155:                       // 'insert'
      shift(155);                   // 'insert'
      break;
    case 161:                       // 'item'
      shift(161);                   // 'item'
      break;
    case 166:                       // 'last'
      shift(166);                   // 'last'
      break;
    case 178:                       // 'module'
      shift(178);                   // 'module'
      break;
    case 180:                       // 'namespace'
      shift(180);                   // 'namespace'
      break;
    case 181:                       // 'namespace-node'
      shift(181);                   // 'namespace-node'
      break;
    case 187:                       // 'node'
      shift(187);                   // 'node'
      break;
    case 198:                       // 'ordered'
      shift(198);                   // 'ordered'
      break;
    case 202:                       // 'parent'
      shift(202);                   // 'parent'
      break;
    case 208:                       // 'preceding'
      shift(208);                   // 'preceding'
      break;
    case 209:                       // 'preceding-sibling'
      shift(209);                   // 'preceding-sibling'
      break;
    case 212:                       // 'processing-instruction'
      shift(212);                   // 'processing-instruction'
      break;
    case 214:                       // 'rename'
      shift(214);                   // 'rename'
      break;
    case 215:                       // 'replace'
      shift(215);                   // 'replace'
      break;
    case 222:                       // 'schema-attribute'
      shift(222);                   // 'schema-attribute'
      break;
    case 223:                       // 'schema-element'
      shift(223);                   // 'schema-element'
      break;
    case 225:                       // 'self'
      shift(225);                   // 'self'
      break;
    case 231:                       // 'some'
      shift(231);                   // 'some'
      break;
    case 239:                       // 'switch'
      shift(239);                   // 'switch'
      break;
    case 240:                       // 'text'
      shift(240);                   // 'text'
      break;
    case 246:                       // 'try'
      shift(246);                   // 'try'
      break;
    case 249:                       // 'typeswitch'
      shift(249);                   // 'typeswitch'
      break;
    case 252:                       // 'unordered'
      shift(252);                   // 'unordered'
      break;
    case 256:                       // 'validate'
      shift(256);                   // 'validate'
      break;
    case 258:                       // 'variable'
      shift(258);                   // 'variable'
      break;
    case 270:                       // 'xquery'
      shift(270);                   // 'xquery'
      break;
    case 68:                        // 'allowing'
      shift(68);                    // 'allowing'
      break;
    case 77:                        // 'at'
      shift(77);                    // 'at'
      break;
    case 79:                        // 'base-uri'
      shift(79);                    // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shift(81);                    // 'boundary-space'
      break;
    case 82:                        // 'break'
      shift(82);                    // 'break'
      break;
    case 87:                        // 'catch'
      shift(87);                    // 'catch'
      break;
    case 94:                        // 'construction'
      shift(94);                    // 'construction'
      break;
    case 97:                        // 'context'
      shift(97);                    // 'context'
      break;
    case 98:                        // 'continue'
      shift(98);                    // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shift(100);                   // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shift(102);                   // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shift(121);                   // 'encoding'
      break;
    case 128:                       // 'exit'
      shift(128);                   // 'exit'
      break;
    case 129:                       // 'external'
      shift(129);                   // 'external'
      break;
    case 137:                       // 'ft-option'
      shift(137);                   // 'ft-option'
      break;
    case 150:                       // 'in'
      shift(150);                   // 'in'
      break;
    case 151:                       // 'index'
      shift(151);                   // 'index'
      break;
    case 157:                       // 'integrity'
      shift(157);                   // 'integrity'
      break;
    case 167:                       // 'lax'
      shift(167);                   // 'lax'
      break;
    case 188:                       // 'nodes'
      shift(188);                   // 'nodes'
      break;
    case 195:                       // 'option'
      shift(195);                   // 'option'
      break;
    case 199:                       // 'ordering'
      shift(199);                   // 'ordering'
      break;
    case 218:                       // 'revalidation'
      shift(218);                   // 'revalidation'
      break;
    case 221:                       // 'schema'
      shift(221);                   // 'schema'
      break;
    case 224:                       // 'score'
      shift(224);                   // 'score'
      break;
    case 230:                       // 'sliding'
      shift(230);                   // 'sliding'
      break;
    case 236:                       // 'strict'
      shift(236);                   // 'strict'
      break;
    case 247:                       // 'tumbling'
      shift(247);                   // 'tumbling'
      break;
    case 248:                       // 'type'
      shift(248);                   // 'type'
      break;
    case 253:                       // 'updating'
      shift(253);                   // 'updating'
      break;
    case 257:                       // 'value'
      shift(257);                   // 'value'
      break;
    case 259:                       // 'version'
      shift(259);                   // 'version'
      break;
    case 263:                       // 'while'
      shift(263);                   // 'while'
      break;
    case 93:                        // 'constraint'
      shift(93);                    // 'constraint'
      break;
    case 172:                       // 'loop'
      shift(172);                   // 'loop'
      break;
    default:
      shift(217);                   // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 20:                        // NCName^Token
      shiftT(20);                   // NCName^Token
      break;
    case 66:                        // 'after'
      shiftT(66);                   // 'after'
      break;
    case 71:                        // 'and'
      shiftT(71);                   // 'and'
      break;
    case 75:                        // 'as'
      shiftT(75);                   // 'as'
      break;
    case 76:                        // 'ascending'
      shiftT(76);                   // 'ascending'
      break;
    case 80:                        // 'before'
      shiftT(80);                   // 'before'
      break;
    case 84:                        // 'case'
      shiftT(84);                   // 'case'
      break;
    case 85:                        // 'cast'
      shiftT(85);                   // 'cast'
      break;
    case 86:                        // 'castable'
      shiftT(86);                   // 'castable'
      break;
    case 90:                        // 'collation'
      shiftT(90);                   // 'collation'
      break;
    case 101:                       // 'count'
      shiftT(101);                  // 'count'
      break;
    case 105:                       // 'default'
      shiftT(105);                  // 'default'
      break;
    case 109:                       // 'descending'
      shiftT(109);                  // 'descending'
      break;
    case 114:                       // 'div'
      shiftT(114);                  // 'div'
      break;
    case 118:                       // 'else'
      shiftT(118);                  // 'else'
      break;
    case 119:                       // 'empty'
      shiftT(119);                  // 'empty'
      break;
    case 122:                       // 'end'
      shiftT(122);                  // 'end'
      break;
    case 124:                       // 'eq'
      shiftT(124);                  // 'eq'
      break;
    case 127:                       // 'except'
      shiftT(127);                  // 'except'
      break;
    case 133:                       // 'for'
      shiftT(133);                  // 'for'
      break;
    case 142:                       // 'ge'
      shiftT(142);                  // 'ge'
      break;
    case 144:                       // 'group'
      shiftT(144);                  // 'group'
      break;
    case 146:                       // 'gt'
      shiftT(146);                  // 'gt'
      break;
    case 147:                       // 'idiv'
      shiftT(147);                  // 'idiv'
      break;
    case 156:                       // 'instance'
      shiftT(156);                  // 'instance'
      break;
    case 158:                       // 'intersect'
      shiftT(158);                  // 'intersect'
      break;
    case 159:                       // 'into'
      shiftT(159);                  // 'into'
      break;
    case 160:                       // 'is'
      shiftT(160);                  // 'is'
      break;
    case 168:                       // 'le'
      shiftT(168);                  // 'le'
      break;
    case 170:                       // 'let'
      shiftT(170);                  // 'let'
      break;
    case 174:                       // 'lt'
      shiftT(174);                  // 'lt'
      break;
    case 176:                       // 'mod'
      shiftT(176);                  // 'mod'
      break;
    case 177:                       // 'modify'
      shiftT(177);                  // 'modify'
      break;
    case 182:                       // 'ne'
      shiftT(182);                  // 'ne'
      break;
    case 194:                       // 'only'
      shiftT(194);                  // 'only'
      break;
    case 196:                       // 'or'
      shiftT(196);                  // 'or'
      break;
    case 197:                       // 'order'
      shiftT(197);                  // 'order'
      break;
    case 216:                       // 'return'
      shiftT(216);                  // 'return'
      break;
    case 220:                       // 'satisfies'
      shiftT(220);                  // 'satisfies'
      break;
    case 232:                       // 'stable'
      shiftT(232);                  // 'stable'
      break;
    case 233:                       // 'start'
      shiftT(233);                  // 'start'
      break;
    case 244:                       // 'to'
      shiftT(244);                  // 'to'
      break;
    case 245:                       // 'treat'
      shiftT(245);                  // 'treat'
      break;
    case 250:                       // 'union'
      shiftT(250);                  // 'union'
      break;
    case 262:                       // 'where'
      shiftT(262);                  // 'where'
      break;
    case 266:                       // 'with'
      shiftT(266);                  // 'with'
      break;
    case 69:                        // 'ancestor'
      shiftT(69);                   // 'ancestor'
      break;
    case 70:                        // 'ancestor-or-self'
      shiftT(70);                   // 'ancestor-or-self'
      break;
    case 78:                        // 'attribute'
      shiftT(78);                   // 'attribute'
      break;
    case 89:                        // 'child'
      shiftT(89);                   // 'child'
      break;
    case 92:                        // 'comment'
      shiftT(92);                   // 'comment'
      break;
    case 99:                        // 'copy'
      shiftT(99);                   // 'copy'
      break;
    case 104:                       // 'declare'
      shiftT(104);                  // 'declare'
      break;
    case 106:                       // 'delete'
      shiftT(106);                  // 'delete'
      break;
    case 107:                       // 'descendant'
      shiftT(107);                  // 'descendant'
      break;
    case 108:                       // 'descendant-or-self'
      shiftT(108);                  // 'descendant-or-self'
      break;
    case 115:                       // 'document'
      shiftT(115);                  // 'document'
      break;
    case 116:                       // 'document-node'
      shiftT(116);                  // 'document-node'
      break;
    case 117:                       // 'element'
      shiftT(117);                  // 'element'
      break;
    case 120:                       // 'empty-sequence'
      shiftT(120);                  // 'empty-sequence'
      break;
    case 125:                       // 'every'
      shiftT(125);                  // 'every'
      break;
    case 130:                       // 'first'
      shiftT(130);                  // 'first'
      break;
    case 131:                       // 'following'
      shiftT(131);                  // 'following'
      break;
    case 132:                       // 'following-sibling'
      shiftT(132);                  // 'following-sibling'
      break;
    case 141:                       // 'function'
      shiftT(141);                  // 'function'
      break;
    case 148:                       // 'if'
      shiftT(148);                  // 'if'
      break;
    case 149:                       // 'import'
      shiftT(149);                  // 'import'
      break;
    case 155:                       // 'insert'
      shiftT(155);                  // 'insert'
      break;
    case 161:                       // 'item'
      shiftT(161);                  // 'item'
      break;
    case 166:                       // 'last'
      shiftT(166);                  // 'last'
      break;
    case 178:                       // 'module'
      shiftT(178);                  // 'module'
      break;
    case 180:                       // 'namespace'
      shiftT(180);                  // 'namespace'
      break;
    case 181:                       // 'namespace-node'
      shiftT(181);                  // 'namespace-node'
      break;
    case 187:                       // 'node'
      shiftT(187);                  // 'node'
      break;
    case 198:                       // 'ordered'
      shiftT(198);                  // 'ordered'
      break;
    case 202:                       // 'parent'
      shiftT(202);                  // 'parent'
      break;
    case 208:                       // 'preceding'
      shiftT(208);                  // 'preceding'
      break;
    case 209:                       // 'preceding-sibling'
      shiftT(209);                  // 'preceding-sibling'
      break;
    case 212:                       // 'processing-instruction'
      shiftT(212);                  // 'processing-instruction'
      break;
    case 214:                       // 'rename'
      shiftT(214);                  // 'rename'
      break;
    case 215:                       // 'replace'
      shiftT(215);                  // 'replace'
      break;
    case 222:                       // 'schema-attribute'
      shiftT(222);                  // 'schema-attribute'
      break;
    case 223:                       // 'schema-element'
      shiftT(223);                  // 'schema-element'
      break;
    case 225:                       // 'self'
      shiftT(225);                  // 'self'
      break;
    case 231:                       // 'some'
      shiftT(231);                  // 'some'
      break;
    case 239:                       // 'switch'
      shiftT(239);                  // 'switch'
      break;
    case 240:                       // 'text'
      shiftT(240);                  // 'text'
      break;
    case 246:                       // 'try'
      shiftT(246);                  // 'try'
      break;
    case 249:                       // 'typeswitch'
      shiftT(249);                  // 'typeswitch'
      break;
    case 252:                       // 'unordered'
      shiftT(252);                  // 'unordered'
      break;
    case 256:                       // 'validate'
      shiftT(256);                  // 'validate'
      break;
    case 258:                       // 'variable'
      shiftT(258);                  // 'variable'
      break;
    case 270:                       // 'xquery'
      shiftT(270);                  // 'xquery'
      break;
    case 68:                        // 'allowing'
      shiftT(68);                   // 'allowing'
      break;
    case 77:                        // 'at'
      shiftT(77);                   // 'at'
      break;
    case 79:                        // 'base-uri'
      shiftT(79);                   // 'base-uri'
      break;
    case 81:                        // 'boundary-space'
      shiftT(81);                   // 'boundary-space'
      break;
    case 82:                        // 'break'
      shiftT(82);                   // 'break'
      break;
    case 87:                        // 'catch'
      shiftT(87);                   // 'catch'
      break;
    case 94:                        // 'construction'
      shiftT(94);                   // 'construction'
      break;
    case 97:                        // 'context'
      shiftT(97);                   // 'context'
      break;
    case 98:                        // 'continue'
      shiftT(98);                   // 'continue'
      break;
    case 100:                       // 'copy-namespaces'
      shiftT(100);                  // 'copy-namespaces'
      break;
    case 102:                       // 'decimal-format'
      shiftT(102);                  // 'decimal-format'
      break;
    case 121:                       // 'encoding'
      shiftT(121);                  // 'encoding'
      break;
    case 128:                       // 'exit'
      shiftT(128);                  // 'exit'
      break;
    case 129:                       // 'external'
      shiftT(129);                  // 'external'
      break;
    case 137:                       // 'ft-option'
      shiftT(137);                  // 'ft-option'
      break;
    case 150:                       // 'in'
      shiftT(150);                  // 'in'
      break;
    case 151:                       // 'index'
      shiftT(151);                  // 'index'
      break;
    case 157:                       // 'integrity'
      shiftT(157);                  // 'integrity'
      break;
    case 167:                       // 'lax'
      shiftT(167);                  // 'lax'
      break;
    case 188:                       // 'nodes'
      shiftT(188);                  // 'nodes'
      break;
    case 195:                       // 'option'
      shiftT(195);                  // 'option'
      break;
    case 199:                       // 'ordering'
      shiftT(199);                  // 'ordering'
      break;
    case 218:                       // 'revalidation'
      shiftT(218);                  // 'revalidation'
      break;
    case 221:                       // 'schema'
      shiftT(221);                  // 'schema'
      break;
    case 224:                       // 'score'
      shiftT(224);                  // 'score'
      break;
    case 230:                       // 'sliding'
      shiftT(230);                  // 'sliding'
      break;
    case 236:                       // 'strict'
      shiftT(236);                  // 'strict'
      break;
    case 247:                       // 'tumbling'
      shiftT(247);                  // 'tumbling'
      break;
    case 248:                       // 'type'
      shiftT(248);                  // 'type'
      break;
    case 253:                       // 'updating'
      shiftT(253);                  // 'updating'
      break;
    case 257:                       // 'value'
      shiftT(257);                  // 'value'
      break;
    case 259:                       // 'version'
      shiftT(259);                  // 'version'
      break;
    case 263:                       // 'while'
      shiftT(263);                  // 'while'
      break;
    case 93:                        // 'constraint'
      shiftT(93);                   // 'constraint'
      break;
    case 172:                       // 'loop'
      shiftT(172);                  // 'loop'
      break;
    default:
      shiftT(217);                  // 'returning'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(245);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(240);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(222);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 51:                      // '<'
        lookahead2(4);              // QName
        break;
      case 52:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 56:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '['
        lookahead2W(242);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 73:                      // 'append'
        lookahead2W(55);            // S^WS | '(:' | 'json'
        break;
      case 128:                     // 'exit'
        lookahead2W(142);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 133:                     // 'for'
        lookahead2W(171);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 170:                     // 'let'
        lookahead2W(160);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 180:                     // 'namespace'
        lookahead2W(227);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 212:                     // 'processing-instruction'
        lookahead2W(224);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 214:                     // 'rename'
        lookahead2W(162);           // S^WS | '#' | '(' | '(:' | 'json' | 'node'
        break;
      case 215:                     // 'replace'
        lookahead2W(173);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 256:                     // 'validate'
        lookahead2W(180);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 272:                     // '{'
        lookahead2W(244);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 274:                     // '{|'
        lookahead2W(243);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 78:                      // 'attribute'
      case 117:                     // 'element'
        lookahead2W(230);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 82:                      // 'break'
      case 98:                      // 'continue'
        lookahead2W(140);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 92:                      // 'comment'
      case 240:                     // 'text'
        lookahead2W(93);            // S^WS | '#' | '(:' | '{'
        break;
      case 106:                     // 'delete'
      case 155:                     // 'insert'
        lookahead2W(172);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
        break;
      case 99:                      // 'copy'
      case 125:                     // 'every'
      case 231:                     // 'some'
      case 258:                     // 'variable'
        lookahead2W(139);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 115:                     // 'document'
      case 198:                     // 'ordered'
      case 246:                     // 'try'
      case 252:                     // 'unordered'
        lookahead2W(143);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 9:                       // IntegerLiteral
      case 10:                      // DecimalLiteral
      case 11:                      // DoubleLiteral
      case 12:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 116:                     // 'document-node'
      case 120:                     // 'empty-sequence'
      case 161:                     // 'item'
      case 181:                     // 'namespace-node'
      case 187:                     // 'node'
      case 222:                     // 'schema-attribute'
      case 223:                     // 'schema-element'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 7:                       // EQName^Token
      case 66:                      // 'after'
      case 68:                      // 'allowing'
      case 69:                      // 'ancestor'
      case 70:                      // 'ancestor-or-self'
      case 71:                      // 'and'
      case 74:                      // 'array'
      case 75:                      // 'as'
      case 76:                      // 'ascending'
      case 77:                      // 'at'
      case 79:                      // 'base-uri'
      case 80:                      // 'before'
      case 81:                      // 'boundary-space'
      case 84:                      // 'case'
      case 85:                      // 'cast'
      case 86:                      // 'castable'
      case 87:                      // 'catch'
      case 89:                      // 'child'
      case 90:                      // 'collation'
      case 93:                      // 'constraint'
      case 94:                      // 'construction'
      case 97:                      // 'context'
      case 100:                     // 'copy-namespaces'
      case 101:                     // 'count'
      case 102:                     // 'decimal-format'
      case 104:                     // 'declare'
      case 105:                     // 'default'
      case 107:                     // 'descendant'
      case 108:                     // 'descendant-or-self'
      case 109:                     // 'descending'
      case 114:                     // 'div'
      case 118:                     // 'else'
      case 119:                     // 'empty'
      case 121:                     // 'encoding'
      case 122:                     // 'end'
      case 124:                     // 'eq'
      case 127:                     // 'except'
      case 129:                     // 'external'
      case 130:                     // 'first'
      case 131:                     // 'following'
      case 132:                     // 'following-sibling'
      case 137:                     // 'ft-option'
      case 141:                     // 'function'
      case 142:                     // 'ge'
      case 144:                     // 'group'
      case 146:                     // 'gt'
      case 147:                     // 'idiv'
      case 148:                     // 'if'
      case 149:                     // 'import'
      case 150:                     // 'in'
      case 151:                     // 'index'
      case 156:                     // 'instance'
      case 157:                     // 'integrity'
      case 158:                     // 'intersect'
      case 159:                     // 'into'
      case 160:                     // 'is'
      case 163:                     // 'json-item'
      case 166:                     // 'last'
      case 167:                     // 'lax'
      case 168:                     // 'le'
      case 172:                     // 'loop'
      case 174:                     // 'lt'
      case 176:                     // 'mod'
      case 177:                     // 'modify'
      case 178:                     // 'module'
      case 182:                     // 'ne'
      case 188:                     // 'nodes'
      case 190:                     // 'object'
      case 194:                     // 'only'
      case 195:                     // 'option'
      case 196:                     // 'or'
      case 197:                     // 'order'
      case 199:                     // 'ordering'
      case 202:                     // 'parent'
      case 208:                     // 'preceding'
      case 209:                     // 'preceding-sibling'
      case 216:                     // 'return'
      case 217:                     // 'returning'
      case 218:                     // 'revalidation'
      case 220:                     // 'satisfies'
      case 221:                     // 'schema'
      case 224:                     // 'score'
      case 225:                     // 'self'
      case 230:                     // 'sliding'
      case 232:                     // 'stable'
      case 233:                     // 'start'
      case 236:                     // 'strict'
      case 239:                     // 'switch'
      case 244:                     // 'to'
      case 245:                     // 'treat'
      case 247:                     // 'tumbling'
      case 248:                     // 'type'
      case 249:                     // 'typeswitch'
      case 250:                     // 'union'
      case 253:                     // 'updating'
      case 257:                     // 'value'
      case 259:                     // 'version'
      case 262:                     // 'where'
      case 263:                     // 'while'
      case 266:                     // 'with'
      case 270:                     // 'xquery'
        lookahead2W(92);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 278                 // '}'
       && lk != 13321               // IntegerLiteral EOF
       && lk != 13322               // DecimalLiteral EOF
       && lk != 13323               // DoubleLiteral EOF
       && lk != 13324               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 16642               // 'variable' '$'
       && lk != 21513               // IntegerLiteral ','
       && lk != 21514               // DecimalLiteral ','
       && lk != 21515               // DoubleLiteral ','
       && lk != 21516               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88146               // 'break' 'loop'
       && lk != 88162               // 'continue' 'loop'
       && lk != 111232              // 'exit' 'returning'
       && lk != 142345              // IntegerLiteral '}'
       && lk != 142346              // DecimalLiteral '}'
       && lk != 142347              // DoubleLiteral '}'
       && lk != 142348              // StringLiteral '}'
       && lk != 142381)             // '.' '}'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16642               // 'variable' '$'
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88146               // 'break' 'loop'
       && lk != 88162               // 'continue' 'loop'
       && lk != 111232)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(245);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(240);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(222);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 51:                      // '<'
        lookahead2(4);              // QName
        break;
      case 52:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 56:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '['
        lookahead2W(242);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 73:                      // 'append'
        lookahead2W(55);            // S^WS | '(:' | 'json'
        break;
      case 128:                     // 'exit'
        lookahead2W(142);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 133:                     // 'for'
        lookahead2W(171);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 170:                     // 'let'
        lookahead2W(160);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 180:                     // 'namespace'
        lookahead2W(227);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 212:                     // 'processing-instruction'
        lookahead2W(224);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 214:                     // 'rename'
        lookahead2W(162);           // S^WS | '#' | '(' | '(:' | 'json' | 'node'
        break;
      case 215:                     // 'replace'
        lookahead2W(173);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 256:                     // 'validate'
        lookahead2W(180);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 272:                     // '{'
        lookahead2W(244);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 274:                     // '{|'
        lookahead2W(243);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(225);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(237);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 78:                      // 'attribute'
      case 117:                     // 'element'
        lookahead2W(230);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
        break;
      case 82:                      // 'break'
      case 98:                      // 'continue'
        lookahead2W(140);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 92:                      // 'comment'
      case 240:                     // 'text'
        lookahead2W(93);            // S^WS | '#' | '(:' | '{'
        break;
      case 106:                     // 'delete'
      case 155:                     // 'insert'
        lookahead2W(172);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
        break;
      case 99:                      // 'copy'
      case 125:                     // 'every'
      case 231:                     // 'some'
      case 258:                     // 'variable'
        lookahead2W(139);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 115:                     // 'document'
      case 198:                     // 'ordered'
      case 246:                     // 'try'
      case 252:                     // 'unordered'
        lookahead2W(143);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 9:                       // IntegerLiteral
      case 10:                      // DecimalLiteral
      case 11:                      // DoubleLiteral
      case 12:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 116:                     // 'document-node'
      case 120:                     // 'empty-sequence'
      case 161:                     // 'item'
      case 181:                     // 'namespace-node'
      case 187:                     // 'node'
      case 222:                     // 'schema-attribute'
      case 223:                     // 'schema-element'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 7:                       // EQName^Token
      case 66:                      // 'after'
      case 68:                      // 'allowing'
      case 69:                      // 'ancestor'
      case 70:                      // 'ancestor-or-self'
      case 71:                      // 'and'
      case 74:                      // 'array'
      case 75:                      // 'as'
      case 76:                      // 'ascending'
      case 77:                      // 'at'
      case 79:                      // 'base-uri'
      case 80:                      // 'before'
      case 81:                      // 'boundary-space'
      case 84:                      // 'case'
      case 85:                      // 'cast'
      case 86:                      // 'castable'
      case 87:                      // 'catch'
      case 89:                      // 'child'
      case 90:                      // 'collation'
      case 93:                      // 'constraint'
      case 94:                      // 'construction'
      case 97:                      // 'context'
      case 100:                     // 'copy-namespaces'
      case 101:                     // 'count'
      case 102:                     // 'decimal-format'
      case 104:                     // 'declare'
      case 105:                     // 'default'
      case 107:                     // 'descendant'
      case 108:                     // 'descendant-or-self'
      case 109:                     // 'descending'
      case 114:                     // 'div'
      case 118:                     // 'else'
      case 119:                     // 'empty'
      case 121:                     // 'encoding'
      case 122:                     // 'end'
      case 124:                     // 'eq'
      case 127:                     // 'except'
      case 129:                     // 'external'
      case 130:                     // 'first'
      case 131:                     // 'following'
      case 132:                     // 'following-sibling'
      case 137:                     // 'ft-option'
      case 141:                     // 'function'
      case 142:                     // 'ge'
      case 144:                     // 'group'
      case 146:                     // 'gt'
      case 147:                     // 'idiv'
      case 148:                     // 'if'
      case 149:                     // 'import'
      case 150:                     // 'in'
      case 151:                     // 'index'
      case 156:                     // 'instance'
      case 157:                     // 'integrity'
      case 158:                     // 'intersect'
      case 159:                     // 'into'
      case 160:                     // 'is'
      case 163:                     // 'json-item'
      case 166:                     // 'last'
      case 167:                     // 'lax'
      case 168:                     // 'le'
      case 172:                     // 'loop'
      case 174:                     // 'lt'
      case 176:                     // 'mod'
      case 177:                     // 'modify'
      case 178:                     // 'module'
      case 182:                     // 'ne'
      case 188:                     // 'nodes'
      case 190:                     // 'object'
      case 194:                     // 'only'
      case 195:                     // 'option'
      case 196:                     // 'or'
      case 197:                     // 'order'
      case 199:                     // 'ordering'
      case 202:                     // 'parent'
      case 208:                     // 'preceding'
      case 209:                     // 'preceding-sibling'
      case 216:                     // 'return'
      case 217:                     // 'returning'
      case 218:                     // 'revalidation'
      case 220:                     // 'satisfies'
      case 221:                     // 'schema'
      case 224:                     // 'score'
      case 225:                     // 'self'
      case 230:                     // 'sliding'
      case 232:                     // 'stable'
      case 233:                     // 'start'
      case 236:                     // 'strict'
      case 239:                     // 'switch'
      case 244:                     // 'to'
      case 245:                     // 'treat'
      case 247:                     // 'tumbling'
      case 248:                     // 'type'
      case 249:                     // 'typeswitch'
      case 250:                     // 'union'
      case 253:                     // 'updating'
      case 257:                     // 'value'
      case 259:                     // 'version'
      case 262:                     // 'where'
      case 263:                     // 'while'
      case 266:                     // 'with'
      case 270:                     // 'xquery'
        lookahead2W(92);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 278                 // '}'
       && lk != 13321               // IntegerLiteral EOF
       && lk != 13322               // DecimalLiteral EOF
       && lk != 13323               // DoubleLiteral EOF
       && lk != 13324               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 16642               // 'variable' '$'
       && lk != 21513               // IntegerLiteral ','
       && lk != 21514               // DecimalLiteral ','
       && lk != 21515               // DoubleLiteral ','
       && lk != 21516               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88146               // 'break' 'loop'
       && lk != 88162               // 'continue' 'loop'
       && lk != 111232              // 'exit' 'returning'
       && lk != 142345              // IntegerLiteral '}'
       && lk != 142346              // DecimalLiteral '}'
       && lk != 142347              // DoubleLiteral '}'
       && lk != 142348              // StringLiteral '}'
       && lk != 142381)             // '.' '}'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(4, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 16642               // 'variable' '$'
       && lk != 25609               // IntegerLiteral ';'
       && lk != 25610               // DecimalLiteral ';'
       && lk != 25611               // DoubleLiteral ';'
       && lk != 25612               // StringLiteral ';'
       && lk != 25645               // '.' ';'
       && lk != 88146               // 'break' 'loop'
       && lk != 88162               // 'continue' 'loop'
       && lk != 111232)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 26                    // EOF
     && l1 != 278)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 26                    // EOF
     && l1 != 278)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 128:                       // 'exit'
      lookahead2W(142);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 133:                       // 'for'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 170:                       // 'let'
      lookahead2W(160);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 246:                       // 'try'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 258:                       // 'variable'
      lookahead2W(139);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 82:                        // 'break'
    case 98:                        // 'continue'
      lookahead2W(140);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 148:                       // 'if'
    case 239:                       // 'switch'
    case 249:                       // 'typeswitch'
    case 263:                       // 'while'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 7                     // EQName^Token
     && lk != 9                     // IntegerLiteral
     && lk != 10                    // DecimalLiteral
     && lk != 11                    // DoubleLiteral
     && lk != 12                    // StringLiteral
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 45                    // '.'
     && lk != 51                    // '<'
     && lk != 52                    // '<!--'
     && lk != 56                    // '<?'
     && lk != 64                    // '['
     && lk != 66                    // 'after'
     && lk != 68                    // 'allowing'
     && lk != 69                    // 'ancestor'
     && lk != 70                    // 'ancestor-or-self'
     && lk != 71                    // 'and'
     && lk != 73                    // 'append'
     && lk != 74                    // 'array'
     && lk != 75                    // 'as'
     && lk != 76                    // 'ascending'
     && lk != 77                    // 'at'
     && lk != 78                    // 'attribute'
     && lk != 79                    // 'base-uri'
     && lk != 80                    // 'before'
     && lk != 81                    // 'boundary-space'
     && lk != 84                    // 'case'
     && lk != 85                    // 'cast'
     && lk != 86                    // 'castable'
     && lk != 87                    // 'catch'
     && lk != 89                    // 'child'
     && lk != 90                    // 'collation'
     && lk != 92                    // 'comment'
     && lk != 93                    // 'constraint'
     && lk != 94                    // 'construction'
     && lk != 97                    // 'context'
     && lk != 99                    // 'copy'
     && lk != 100                   // 'copy-namespaces'
     && lk != 101                   // 'count'
     && lk != 102                   // 'decimal-format'
     && lk != 104                   // 'declare'
     && lk != 105                   // 'default'
     && lk != 106                   // 'delete'
     && lk != 107                   // 'descendant'
     && lk != 108                   // 'descendant-or-self'
     && lk != 109                   // 'descending'
     && lk != 114                   // 'div'
     && lk != 115                   // 'document'
     && lk != 116                   // 'document-node'
     && lk != 117                   // 'element'
     && lk != 118                   // 'else'
     && lk != 119                   // 'empty'
     && lk != 120                   // 'empty-sequence'
     && lk != 121                   // 'encoding'
     && lk != 122                   // 'end'
     && lk != 124                   // 'eq'
     && lk != 125                   // 'every'
     && lk != 127                   // 'except'
     && lk != 129                   // 'external'
     && lk != 130                   // 'first'
     && lk != 131                   // 'following'
     && lk != 132                   // 'following-sibling'
     && lk != 137                   // 'ft-option'
     && lk != 141                   // 'function'
     && lk != 142                   // 'ge'
     && lk != 144                   // 'group'
     && lk != 146                   // 'gt'
     && lk != 147                   // 'idiv'
     && lk != 149                   // 'import'
     && lk != 150                   // 'in'
     && lk != 151                   // 'index'
     && lk != 155                   // 'insert'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'integrity'
     && lk != 158                   // 'intersect'
     && lk != 159                   // 'into'
     && lk != 160                   // 'is'
     && lk != 161                   // 'item'
     && lk != 163                   // 'json-item'
     && lk != 166                   // 'last'
     && lk != 167                   // 'lax'
     && lk != 168                   // 'le'
     && lk != 172                   // 'loop'
     && lk != 174                   // 'lt'
     && lk != 176                   // 'mod'
     && lk != 177                   // 'modify'
     && lk != 178                   // 'module'
     && lk != 180                   // 'namespace'
     && lk != 181                   // 'namespace-node'
     && lk != 182                   // 'ne'
     && lk != 187                   // 'node'
     && lk != 188                   // 'nodes'
     && lk != 190                   // 'object'
     && lk != 194                   // 'only'
     && lk != 195                   // 'option'
     && lk != 196                   // 'or'
     && lk != 197                   // 'order'
     && lk != 198                   // 'ordered'
     && lk != 199                   // 'ordering'
     && lk != 202                   // 'parent'
     && lk != 208                   // 'preceding'
     && lk != 209                   // 'preceding-sibling'
     && lk != 212                   // 'processing-instruction'
     && lk != 214                   // 'rename'
     && lk != 215                   // 'replace'
     && lk != 216                   // 'return'
     && lk != 217                   // 'returning'
     && lk != 218                   // 'revalidation'
     && lk != 220                   // 'satisfies'
     && lk != 221                   // 'schema'
     && lk != 222                   // 'schema-attribute'
     && lk != 223                   // 'schema-element'
     && lk != 224                   // 'score'
     && lk != 225                   // 'self'
     && lk != 230                   // 'sliding'
     && lk != 231                   // 'some'
     && lk != 232                   // 'stable'
     && lk != 233                   // 'start'
     && lk != 236                   // 'strict'
     && lk != 240                   // 'text'
     && lk != 244                   // 'to'
     && lk != 245                   // 'treat'
     && lk != 247                   // 'tumbling'
     && lk != 248                   // 'type'
     && lk != 250                   // 'union'
     && lk != 252                   // 'unordered'
     && lk != 253                   // 'updating'
     && lk != 256                   // 'validate'
     && lk != 257                   // 'value'
     && lk != 259                   // 'version'
     && lk != 262                   // 'where'
     && lk != 266                   // 'with'
     && lk != 270                   // 'xquery'
     && lk != 274                   // '{|'
     && lk != 15442                 // 'break' '#'
     && lk != 15458                 // 'continue' '#'
     && lk != 15488                 // 'exit' '#'
     && lk != 15493                 // 'for' '#'
     && lk != 15508                 // 'if' '#'
     && lk != 15530                 // 'let' '#'
     && lk != 15599                 // 'switch' '#'
     && lk != 15606                 // 'try' '#'
     && lk != 15609                 // 'typeswitch' '#'
     && lk != 15618                 // 'variable' '#'
     && lk != 15623                 // 'while' '#'
     && lk != 16517                 // 'for' '$'
     && lk != 16554                 // 'let' '$'
     && lk != 16642                 // 'variable' '$'
     && lk != 18002                 // 'break' '('
     && lk != 18018                 // 'continue' '('
     && lk != 18048                 // 'exit' '('
     && lk != 18053                 // 'for' '('
     && lk != 18068                 // 'if' '('
     && lk != 18090                 // 'let' '('
     && lk != 18159                 // 'switch' '('
     && lk != 18166                 // 'try' '('
     && lk != 18169                 // 'typeswitch' '('
     && lk != 18178                 // 'variable' '('
     && lk != 88146                 // 'break' 'loop'
     && lk != 88162                 // 'continue' 'loop'
     && lk != 111232                // 'exit' 'returning'
     && lk != 114858                // 'let' 'score'
     && lk != 117893                // 'for' 'sliding'
     && lk != 126597                // 'for' 'tumbling'
     && lk != 139510)               // 'try' '{'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 88146:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 88162:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 111232:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16517:                     // 'for' '$'
    case 16554:                     // 'let' '$'
    case 114858:                    // 'let' 'score'
    case 117893:                    // 'for' 'sliding'
    case 126597:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 18068:                     // 'if' '('
      parse_IfStatement();
      break;
    case 18159:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 139510:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 18169:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16642:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 128:                       // 'exit'
      lookahead2W(142);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 133:                       // 'for'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 170:                       // 'let'
      lookahead2W(160);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 246:                       // 'try'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 258:                       // 'variable'
      lookahead2W(139);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 82:                        // 'break'
    case 98:                        // 'continue'
      lookahead2W(140);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 148:                       // 'if'
    case 239:                       // 'switch'
    case 249:                       // 'typeswitch'
    case 263:                       // 'while'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 7                     // EQName^Token
     && lk != 9                     // IntegerLiteral
     && lk != 10                    // DecimalLiteral
     && lk != 11                    // DoubleLiteral
     && lk != 12                    // StringLiteral
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 45                    // '.'
     && lk != 51                    // '<'
     && lk != 52                    // '<!--'
     && lk != 56                    // '<?'
     && lk != 64                    // '['
     && lk != 66                    // 'after'
     && lk != 68                    // 'allowing'
     && lk != 69                    // 'ancestor'
     && lk != 70                    // 'ancestor-or-self'
     && lk != 71                    // 'and'
     && lk != 73                    // 'append'
     && lk != 74                    // 'array'
     && lk != 75                    // 'as'
     && lk != 76                    // 'ascending'
     && lk != 77                    // 'at'
     && lk != 78                    // 'attribute'
     && lk != 79                    // 'base-uri'
     && lk != 80                    // 'before'
     && lk != 81                    // 'boundary-space'
     && lk != 84                    // 'case'
     && lk != 85                    // 'cast'
     && lk != 86                    // 'castable'
     && lk != 87                    // 'catch'
     && lk != 89                    // 'child'
     && lk != 90                    // 'collation'
     && lk != 92                    // 'comment'
     && lk != 93                    // 'constraint'
     && lk != 94                    // 'construction'
     && lk != 97                    // 'context'
     && lk != 99                    // 'copy'
     && lk != 100                   // 'copy-namespaces'
     && lk != 101                   // 'count'
     && lk != 102                   // 'decimal-format'
     && lk != 104                   // 'declare'
     && lk != 105                   // 'default'
     && lk != 106                   // 'delete'
     && lk != 107                   // 'descendant'
     && lk != 108                   // 'descendant-or-self'
     && lk != 109                   // 'descending'
     && lk != 114                   // 'div'
     && lk != 115                   // 'document'
     && lk != 116                   // 'document-node'
     && lk != 117                   // 'element'
     && lk != 118                   // 'else'
     && lk != 119                   // 'empty'
     && lk != 120                   // 'empty-sequence'
     && lk != 121                   // 'encoding'
     && lk != 122                   // 'end'
     && lk != 124                   // 'eq'
     && lk != 125                   // 'every'
     && lk != 127                   // 'except'
     && lk != 129                   // 'external'
     && lk != 130                   // 'first'
     && lk != 131                   // 'following'
     && lk != 132                   // 'following-sibling'
     && lk != 137                   // 'ft-option'
     && lk != 141                   // 'function'
     && lk != 142                   // 'ge'
     && lk != 144                   // 'group'
     && lk != 146                   // 'gt'
     && lk != 147                   // 'idiv'
     && lk != 149                   // 'import'
     && lk != 150                   // 'in'
     && lk != 151                   // 'index'
     && lk != 155                   // 'insert'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'integrity'
     && lk != 158                   // 'intersect'
     && lk != 159                   // 'into'
     && lk != 160                   // 'is'
     && lk != 161                   // 'item'
     && lk != 163                   // 'json-item'
     && lk != 166                   // 'last'
     && lk != 167                   // 'lax'
     && lk != 168                   // 'le'
     && lk != 172                   // 'loop'
     && lk != 174                   // 'lt'
     && lk != 176                   // 'mod'
     && lk != 177                   // 'modify'
     && lk != 178                   // 'module'
     && lk != 180                   // 'namespace'
     && lk != 181                   // 'namespace-node'
     && lk != 182                   // 'ne'
     && lk != 187                   // 'node'
     && lk != 188                   // 'nodes'
     && lk != 190                   // 'object'
     && lk != 194                   // 'only'
     && lk != 195                   // 'option'
     && lk != 196                   // 'or'
     && lk != 197                   // 'order'
     && lk != 198                   // 'ordered'
     && lk != 199                   // 'ordering'
     && lk != 202                   // 'parent'
     && lk != 208                   // 'preceding'
     && lk != 209                   // 'preceding-sibling'
     && lk != 212                   // 'processing-instruction'
     && lk != 214                   // 'rename'
     && lk != 215                   // 'replace'
     && lk != 216                   // 'return'
     && lk != 217                   // 'returning'
     && lk != 218                   // 'revalidation'
     && lk != 220                   // 'satisfies'
     && lk != 221                   // 'schema'
     && lk != 222                   // 'schema-attribute'
     && lk != 223                   // 'schema-element'
     && lk != 224                   // 'score'
     && lk != 225                   // 'self'
     && lk != 230                   // 'sliding'
     && lk != 231                   // 'some'
     && lk != 232                   // 'stable'
     && lk != 233                   // 'start'
     && lk != 236                   // 'strict'
     && lk != 240                   // 'text'
     && lk != 244                   // 'to'
     && lk != 245                   // 'treat'
     && lk != 247                   // 'tumbling'
     && lk != 248                   // 'type'
     && lk != 250                   // 'union'
     && lk != 252                   // 'unordered'
     && lk != 253                   // 'updating'
     && lk != 256                   // 'validate'
     && lk != 257                   // 'value'
     && lk != 259                   // 'version'
     && lk != 262                   // 'where'
     && lk != 266                   // 'with'
     && lk != 270                   // 'xquery'
     && lk != 274                   // '{|'
     && lk != 15442                 // 'break' '#'
     && lk != 15458                 // 'continue' '#'
     && lk != 15488                 // 'exit' '#'
     && lk != 15493                 // 'for' '#'
     && lk != 15508                 // 'if' '#'
     && lk != 15530                 // 'let' '#'
     && lk != 15599                 // 'switch' '#'
     && lk != 15606                 // 'try' '#'
     && lk != 15609                 // 'typeswitch' '#'
     && lk != 15618                 // 'variable' '#'
     && lk != 15623                 // 'while' '#'
     && lk != 16517                 // 'for' '$'
     && lk != 16554                 // 'let' '$'
     && lk != 16642                 // 'variable' '$'
     && lk != 18002                 // 'break' '('
     && lk != 18018                 // 'continue' '('
     && lk != 18048                 // 'exit' '('
     && lk != 18053                 // 'for' '('
     && lk != 18068                 // 'if' '('
     && lk != 18090                 // 'let' '('
     && lk != 18159                 // 'switch' '('
     && lk != 18166                 // 'try' '('
     && lk != 18169                 // 'typeswitch' '('
     && lk != 18178                 // 'variable' '('
     && lk != 88146                 // 'break' 'loop'
     && lk != 88162                 // 'continue' 'loop'
     && lk != 111232                // 'exit' 'returning'
     && lk != 114858                // 'let' 'score'
     && lk != 117893                // 'for' 'sliding'
     && lk != 126597                // 'for' 'tumbling'
     && lk != 139510)               // 'try' '{'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(5, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(5, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(5, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(5, e0A, -12);
                lk = -14;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(5, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 88146:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 88162:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 111232:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16517:                     // 'for' '$'
    case 16554:                     // 'let' '$'
    case 114858:                    // 'let' 'score'
    case 117893:                    // 'for' 'sliding'
    case 126597:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 18068:                     // 'if' '('
      try_IfStatement();
      break;
    case 18159:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 139510:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 18169:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16642:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(50);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(50);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shift(49);                      // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(50);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(26);                // S^WS | '(:' | ':='
    shiftT(49);                     // ':='
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(50);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(272);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    shift(278);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(272);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    shiftT(278);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(82);                      // 'break'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shift(172);                     // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shift(50);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(82);                     // 'break'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shiftT(172);                    // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shiftT(50);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(98);                      // 'continue'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shift(172);                     // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shift(50);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(98);                     // 'continue'
    lookahead1W(58);                // S^WS | '(:' | 'loop'
    shiftT(172);                    // 'loop'
    lookahead1W(27);                // S^WS | '(:' | ';'
    shiftT(50);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(128);                     // 'exit'
    lookahead1W(70);                // S^WS | '(:' | 'returning'
    shift(217);                     // 'returning'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(50);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(128);                    // 'exit'
    lookahead1W(70);                // S^WS | '(:' | 'returning'
    shiftT(217);                    // 'returning'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(50);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(185);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 216)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(185);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 216)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(148);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(76);                // S^WS | '(:' | 'then'
    shift(241);                     // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    shift(118);                     // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(148);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(76);                // S^WS | '(:' | 'then'
    shiftT(241);                    // 'then'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(47);                // S^WS | '(:' | 'else'
    shiftT(118);                    // 'else'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(239);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(239);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(84);                    // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(84);                   // 'case'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(246);                     // 'try'
    lookahead1W(86);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      shift(87);                    // 'catch'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(245);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 87:                      // 'catch'
        lookahead2W(232);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 3159                // 'catch' Wildcard
       && lk != 3671                // 'catch' EQName^Token
       && lk != 33879               // 'catch' 'after'
       && lk != 34903               // 'catch' 'allowing'
       && lk != 35415               // 'catch' 'ancestor'
       && lk != 35927               // 'catch' 'ancestor-or-self'
       && lk != 36439               // 'catch' 'and'
       && lk != 37975               // 'catch' 'array'
       && lk != 38487               // 'catch' 'as'
       && lk != 38999               // 'catch' 'ascending'
       && lk != 39511               // 'catch' 'at'
       && lk != 40023               // 'catch' 'attribute'
       && lk != 40535               // 'catch' 'base-uri'
       && lk != 41047               // 'catch' 'before'
       && lk != 41559               // 'catch' 'boundary-space'
       && lk != 42071               // 'catch' 'break'
       && lk != 43095               // 'catch' 'case'
       && lk != 43607               // 'catch' 'cast'
       && lk != 44119               // 'catch' 'castable'
       && lk != 44631               // 'catch' 'catch'
       && lk != 45655               // 'catch' 'child'
       && lk != 46167               // 'catch' 'collation'
       && lk != 47191               // 'catch' 'comment'
       && lk != 47703               // 'catch' 'constraint'
       && lk != 48215               // 'catch' 'construction'
       && lk != 49751               // 'catch' 'context'
       && lk != 50263               // 'catch' 'continue'
       && lk != 50775               // 'catch' 'copy'
       && lk != 51287               // 'catch' 'copy-namespaces'
       && lk != 51799               // 'catch' 'count'
       && lk != 52311               // 'catch' 'decimal-format'
       && lk != 53335               // 'catch' 'declare'
       && lk != 53847               // 'catch' 'default'
       && lk != 54359               // 'catch' 'delete'
       && lk != 54871               // 'catch' 'descendant'
       && lk != 55383               // 'catch' 'descendant-or-self'
       && lk != 55895               // 'catch' 'descending'
       && lk != 58455               // 'catch' 'div'
       && lk != 58967               // 'catch' 'document'
       && lk != 59479               // 'catch' 'document-node'
       && lk != 59991               // 'catch' 'element'
       && lk != 60503               // 'catch' 'else'
       && lk != 61015               // 'catch' 'empty'
       && lk != 61527               // 'catch' 'empty-sequence'
       && lk != 62039               // 'catch' 'encoding'
       && lk != 62551               // 'catch' 'end'
       && lk != 63575               // 'catch' 'eq'
       && lk != 64087               // 'catch' 'every'
       && lk != 65111               // 'catch' 'except'
       && lk != 65623               // 'catch' 'exit'
       && lk != 66135               // 'catch' 'external'
       && lk != 66647               // 'catch' 'first'
       && lk != 67159               // 'catch' 'following'
       && lk != 67671               // 'catch' 'following-sibling'
       && lk != 68183               // 'catch' 'for'
       && lk != 70231               // 'catch' 'ft-option'
       && lk != 72279               // 'catch' 'function'
       && lk != 72791               // 'catch' 'ge'
       && lk != 73815               // 'catch' 'group'
       && lk != 74839               // 'catch' 'gt'
       && lk != 75351               // 'catch' 'idiv'
       && lk != 75863               // 'catch' 'if'
       && lk != 76375               // 'catch' 'import'
       && lk != 76887               // 'catch' 'in'
       && lk != 77399               // 'catch' 'index'
       && lk != 79447               // 'catch' 'insert'
       && lk != 79959               // 'catch' 'instance'
       && lk != 80471               // 'catch' 'integrity'
       && lk != 80983               // 'catch' 'intersect'
       && lk != 81495               // 'catch' 'into'
       && lk != 82007               // 'catch' 'is'
       && lk != 82519               // 'catch' 'item'
       && lk != 83543               // 'catch' 'json-item'
       && lk != 85079               // 'catch' 'last'
       && lk != 85591               // 'catch' 'lax'
       && lk != 86103               // 'catch' 'le'
       && lk != 87127               // 'catch' 'let'
       && lk != 88151               // 'catch' 'loop'
       && lk != 89175               // 'catch' 'lt'
       && lk != 90199               // 'catch' 'mod'
       && lk != 90711               // 'catch' 'modify'
       && lk != 91223               // 'catch' 'module'
       && lk != 92247               // 'catch' 'namespace'
       && lk != 92759               // 'catch' 'namespace-node'
       && lk != 93271               // 'catch' 'ne'
       && lk != 95831               // 'catch' 'node'
       && lk != 96343               // 'catch' 'nodes'
       && lk != 97367               // 'catch' 'object'
       && lk != 99415               // 'catch' 'only'
       && lk != 99927               // 'catch' 'option'
       && lk != 100439              // 'catch' 'or'
       && lk != 100951              // 'catch' 'order'
       && lk != 101463              // 'catch' 'ordered'
       && lk != 101975              // 'catch' 'ordering'
       && lk != 103511              // 'catch' 'parent'
       && lk != 106583              // 'catch' 'preceding'
       && lk != 107095              // 'catch' 'preceding-sibling'
       && lk != 108631              // 'catch' 'processing-instruction'
       && lk != 109655              // 'catch' 'rename'
       && lk != 110167              // 'catch' 'replace'
       && lk != 110679              // 'catch' 'return'
       && lk != 111191              // 'catch' 'returning'
       && lk != 111703              // 'catch' 'revalidation'
       && lk != 112727              // 'catch' 'satisfies'
       && lk != 113239              // 'catch' 'schema'
       && lk != 113751              // 'catch' 'schema-attribute'
       && lk != 114263              // 'catch' 'schema-element'
       && lk != 114775              // 'catch' 'score'
       && lk != 115287              // 'catch' 'self'
       && lk != 117847              // 'catch' 'sliding'
       && lk != 118359              // 'catch' 'some'
       && lk != 118871              // 'catch' 'stable'
       && lk != 119383              // 'catch' 'start'
       && lk != 120919              // 'catch' 'strict'
       && lk != 122455              // 'catch' 'switch'
       && lk != 122967              // 'catch' 'text'
       && lk != 125015              // 'catch' 'to'
       && lk != 125527              // 'catch' 'treat'
       && lk != 126039              // 'catch' 'try'
       && lk != 126551              // 'catch' 'tumbling'
       && lk != 127063              // 'catch' 'type'
       && lk != 127575              // 'catch' 'typeswitch'
       && lk != 128087              // 'catch' 'union'
       && lk != 129111              // 'catch' 'unordered'
       && lk != 129623              // 'catch' 'updating'
       && lk != 131159              // 'catch' 'validate'
       && lk != 131671              // 'catch' 'value'
       && lk != 132183              // 'catch' 'variable'
       && lk != 132695              // 'catch' 'version'
       && lk != 134231              // 'catch' 'where'
       && lk != 134743              // 'catch' 'while'
       && lk != 136279              // 'catch' 'with'
       && lk != 138327)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(246);                    // 'try'
    lookahead1W(86);                // S^WS | '(:' | '{'
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'catch'
      shiftT(87);                   // 'catch'
      lookahead1W(228);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
      lookahead1W(245);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' |
                                    // '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 87:                      // 'catch'
        lookahead2W(232);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 3159                // 'catch' Wildcard
       && lk != 3671                // 'catch' EQName^Token
       && lk != 33879               // 'catch' 'after'
       && lk != 34903               // 'catch' 'allowing'
       && lk != 35415               // 'catch' 'ancestor'
       && lk != 35927               // 'catch' 'ancestor-or-self'
       && lk != 36439               // 'catch' 'and'
       && lk != 37975               // 'catch' 'array'
       && lk != 38487               // 'catch' 'as'
       && lk != 38999               // 'catch' 'ascending'
       && lk != 39511               // 'catch' 'at'
       && lk != 40023               // 'catch' 'attribute'
       && lk != 40535               // 'catch' 'base-uri'
       && lk != 41047               // 'catch' 'before'
       && lk != 41559               // 'catch' 'boundary-space'
       && lk != 42071               // 'catch' 'break'
       && lk != 43095               // 'catch' 'case'
       && lk != 43607               // 'catch' 'cast'
       && lk != 44119               // 'catch' 'castable'
       && lk != 44631               // 'catch' 'catch'
       && lk != 45655               // 'catch' 'child'
       && lk != 46167               // 'catch' 'collation'
       && lk != 47191               // 'catch' 'comment'
       && lk != 47703               // 'catch' 'constraint'
       && lk != 48215               // 'catch' 'construction'
       && lk != 49751               // 'catch' 'context'
       && lk != 50263               // 'catch' 'continue'
       && lk != 50775               // 'catch' 'copy'
       && lk != 51287               // 'catch' 'copy-namespaces'
       && lk != 51799               // 'catch' 'count'
       && lk != 52311               // 'catch' 'decimal-format'
       && lk != 53335               // 'catch' 'declare'
       && lk != 53847               // 'catch' 'default'
       && lk != 54359               // 'catch' 'delete'
       && lk != 54871               // 'catch' 'descendant'
       && lk != 55383               // 'catch' 'descendant-or-self'
       && lk != 55895               // 'catch' 'descending'
       && lk != 58455               // 'catch' 'div'
       && lk != 58967               // 'catch' 'document'
       && lk != 59479               // 'catch' 'document-node'
       && lk != 59991               // 'catch' 'element'
       && lk != 60503               // 'catch' 'else'
       && lk != 61015               // 'catch' 'empty'
       && lk != 61527               // 'catch' 'empty-sequence'
       && lk != 62039               // 'catch' 'encoding'
       && lk != 62551               // 'catch' 'end'
       && lk != 63575               // 'catch' 'eq'
       && lk != 64087               // 'catch' 'every'
       && lk != 65111               // 'catch' 'except'
       && lk != 65623               // 'catch' 'exit'
       && lk != 66135               // 'catch' 'external'
       && lk != 66647               // 'catch' 'first'
       && lk != 67159               // 'catch' 'following'
       && lk != 67671               // 'catch' 'following-sibling'
       && lk != 68183               // 'catch' 'for'
       && lk != 70231               // 'catch' 'ft-option'
       && lk != 72279               // 'catch' 'function'
       && lk != 72791               // 'catch' 'ge'
       && lk != 73815               // 'catch' 'group'
       && lk != 74839               // 'catch' 'gt'
       && lk != 75351               // 'catch' 'idiv'
       && lk != 75863               // 'catch' 'if'
       && lk != 76375               // 'catch' 'import'
       && lk != 76887               // 'catch' 'in'
       && lk != 77399               // 'catch' 'index'
       && lk != 79447               // 'catch' 'insert'
       && lk != 79959               // 'catch' 'instance'
       && lk != 80471               // 'catch' 'integrity'
       && lk != 80983               // 'catch' 'intersect'
       && lk != 81495               // 'catch' 'into'
       && lk != 82007               // 'catch' 'is'
       && lk != 82519               // 'catch' 'item'
       && lk != 83543               // 'catch' 'json-item'
       && lk != 85079               // 'catch' 'last'
       && lk != 85591               // 'catch' 'lax'
       && lk != 86103               // 'catch' 'le'
       && lk != 87127               // 'catch' 'let'
       && lk != 88151               // 'catch' 'loop'
       && lk != 89175               // 'catch' 'lt'
       && lk != 90199               // 'catch' 'mod'
       && lk != 90711               // 'catch' 'modify'
       && lk != 91223               // 'catch' 'module'
       && lk != 92247               // 'catch' 'namespace'
       && lk != 92759               // 'catch' 'namespace-node'
       && lk != 93271               // 'catch' 'ne'
       && lk != 95831               // 'catch' 'node'
       && lk != 96343               // 'catch' 'nodes'
       && lk != 97367               // 'catch' 'object'
       && lk != 99415               // 'catch' 'only'
       && lk != 99927               // 'catch' 'option'
       && lk != 100439              // 'catch' 'or'
       && lk != 100951              // 'catch' 'order'
       && lk != 101463              // 'catch' 'ordered'
       && lk != 101975              // 'catch' 'ordering'
       && lk != 103511              // 'catch' 'parent'
       && lk != 106583              // 'catch' 'preceding'
       && lk != 107095              // 'catch' 'preceding-sibling'
       && lk != 108631              // 'catch' 'processing-instruction'
       && lk != 109655              // 'catch' 'rename'
       && lk != 110167              // 'catch' 'replace'
       && lk != 110679              // 'catch' 'return'
       && lk != 111191              // 'catch' 'returning'
       && lk != 111703              // 'catch' 'revalidation'
       && lk != 112727              // 'catch' 'satisfies'
       && lk != 113239              // 'catch' 'schema'
       && lk != 113751              // 'catch' 'schema-attribute'
       && lk != 114263              // 'catch' 'schema-element'
       && lk != 114775              // 'catch' 'score'
       && lk != 115287              // 'catch' 'self'
       && lk != 117847              // 'catch' 'sliding'
       && lk != 118359              // 'catch' 'some'
       && lk != 118871              // 'catch' 'stable'
       && lk != 119383              // 'catch' 'start'
       && lk != 120919              // 'catch' 'strict'
       && lk != 122455              // 'catch' 'switch'
       && lk != 122967              // 'catch' 'text'
       && lk != 125015              // 'catch' 'to'
       && lk != 125527              // 'catch' 'treat'
       && lk != 126039              // 'catch' 'try'
       && lk != 126551              // 'catch' 'tumbling'
       && lk != 127063              // 'catch' 'type'
       && lk != 127575              // 'catch' 'typeswitch'
       && lk != 128087              // 'catch' 'union'
       && lk != 129111              // 'catch' 'unordered'
       && lk != 129623              // 'catch' 'updating'
       && lk != 131159              // 'catch' 'validate'
       && lk != 131671              // 'catch' 'value'
       && lk != 132183              // 'catch' 'variable'
       && lk != 132695              // 'catch' 'version'
       && lk != 134231              // 'catch' 'where'
       && lk != 134743              // 'catch' 'while'
       && lk != 136279              // 'catch' 'with'
       && lk != 138327)             // 'catch' 'xquery'
      {
        break;
      }
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(249);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shift(105);                     // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(249);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(34);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 84)                 // 'case'
      {
        break;
      }
    }
    shiftT(105);                    // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(84);                      // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shift(75);                    // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shift(216);                     // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(84);                     // 'case'
    lookahead1W(234);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(29);              // S^WS | '(:' | 'as'
      shiftT(75);                   // 'as'
    }
    lookahead1W(233);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(69);                // S^WS | '(:' | 'return'
    shiftT(216);                    // 'return'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(258);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(32);                      // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(165);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 75)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(149);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 49)                   // ':='
    {
      shift(49);                    // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(32);                    // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(165);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 75)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(149);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shift(49);                  // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(50);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(258);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(32);                     // '$'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(165);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 75)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(149);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 49)                   // ':='
    {
      shiftT(49);                   // ':='
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(32);                   // '$'
      lookahead1W(225);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(165);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 75)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(149);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 49)                 // ':='
      {
        shiftT(49);                 // ':='
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    shiftT(50);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(263);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(263);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 133:                       // 'for'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 170:                       // 'let'
      lookahead2W(160);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 246:                       // 'try'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 148:                       // 'if'
    case 239:                       // 'switch'
    case 249:                       // 'typeswitch'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
    case 16554:                     // 'let' '$'
    case 114858:                    // 'let' 'score'
    case 117893:                    // 'for' 'sliding'
    case 126597:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 18068:                     // 'if' '('
      parse_IfExpr();
      break;
    case 18159:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 139510:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 18169:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 133:                       // 'for'
      lookahead2W(171);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 170:                       // 'let'
      lookahead2W(160);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 246:                       // 'try'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 148:                       // 'if'
    case 239:                       // 'switch'
    case 249:                       // 'typeswitch'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16517:                     // 'for' '$'
    case 16554:                     // 'let' '$'
    case 114858:                    // 'let' 'score'
    case 117893:                    // 'for' 'sliding'
    case 126597:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 18068:                     // 'if' '('
      try_IfExpr();
      break;
    case 18159:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 139510:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 18169:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 214:                       // 'rename'
      lookahead2W(162);             // S^WS | '#' | '(' | '(:' | 'json' | 'node'
      break;
    case 215:                       // 'replace'
      lookahead2W(173);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 106:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(172);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
      break;
    case 99:                        // 'copy'
    case 125:                       // 'every'
    case 231:                       // 'some'
      lookahead2W(139);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16509:                     // 'every' '$'
    case 16615:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 95899:                     // 'insert' 'node'
    case 96411:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 95850:                     // 'delete' 'node'
    case 96362:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 95958:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 95959:                     // 'replace' 'node'
    case 131799:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 16483:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 83050:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 83099:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 83158:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case 83159:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case 73:                        // 'append'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 214:                       // 'rename'
      lookahead2W(162);             // S^WS | '#' | '(' | '(:' | 'json' | 'node'
      break;
    case 215:                       // 'replace'
      lookahead2W(173);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 106:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(172);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'nodes'
      break;
    case 99:                        // 'copy'
    case 125:                       // 'every'
    case 231:                       // 'some'
      lookahead2W(139);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16509:                     // 'every' '$'
    case 16615:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 95899:                     // 'insert' 'node'
    case 96411:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 95850:                     // 'delete' 'node'
    case 96362:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 95958:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 95959:                     // 'replace' 'node'
    case 131799:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 16483:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 83050:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 83099:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 83158:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case 83159:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case 73:                        // 'append'
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(106);                     // 'delete'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(106);                    // 'delete'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    shift(155);                     // 'insert'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(159);                     // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(68);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 106061)               // 'at' 'position'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(77);               // 'at'
          lookahead1W(68);          // S^WS | '(:' | 'position'
          shiftT(207);              // 'position'
          lookahead1W(238);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      shift(77);                    // 'at'
      lookahead1W(68);              // S^WS | '(:' | 'position'
      shift(207);                   // 'position'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    shiftT(155);                    // 'insert'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(159);                    // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 77:                        // 'at'
      lookahead2W(68);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 106061)               // 'at' 'position'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(77);               // 'at'
          lookahead1W(68);          // S^WS | '(:' | 'position'
          shiftT(207);              // 'position'
          lookahead1W(238);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
          memoize(6, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      shiftT(77);                   // 'at'
      lookahead1W(68);              // S^WS | '(:' | 'position'
      shiftT(207);                  // 'position'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(214);                     // 'rename'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(75);                      // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(214);                    // 'rename'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    shiftT(75);                     // 'as'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(215);                     // 'replace'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(81);                // S^WS | '(:' | 'value'
    shift(257);                     // 'value'
    lookahead1W(63);                // S^WS | '(:' | 'of'
    shift(192);                     // 'of'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(266);                     // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(215);                    // 'replace'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(81);                // S^WS | '(:' | 'value'
    shiftT(257);                    // 'value'
    lookahead1W(63);                // S^WS | '(:' | 'of'
    shiftT(192);                    // 'of'
    lookahead1W(236);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    shiftT(266);                    // 'with'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(73);                      // 'append'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shift(162);                     // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(159);                     // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(73);                     // 'append'
    lookahead1W(55);                // S^WS | '(:' | 'json'
    shiftT(162);                    // 'json'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(159);                    // 'into'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 13:                        // PredefinedEntityRef
      shift(13);                    // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      shift(24);                    // CharRef
      break;
    case 273:                       // '{{'
      shift(273);                   // '{{'
      break;
    case 279:                       // '}}'
      shift(279);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 13:                        // PredefinedEntityRef
      shiftT(13);                   // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      shiftT(24);                   // CharRef
      break;
    case 273:                       // '{{'
      shiftT(273);                  // '{{'
      break;
    case 279:                       // '}}'
      shiftT(279);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(115);                     // 'document'
    lookahead1W(86);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(115);                    // 'document'
    lookahead1W(86);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(78);                      // 'attribute'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shift(272);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(278);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 142608)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(272);              // '{'
          lookahead1W(87);          // S^WS | '(:' | '}'
          shiftT(278);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(272);                   // '{'
      lookahead1W(87);              // S^WS | '(:' | '}'
      shift(278);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(78);                     // 'attribute'
    lookahead1W(229);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shiftT(272);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(278);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 142608)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(272);              // '{'
          lookahead1W(87);          // S^WS | '(:' | '}'
          shiftT(278);              // '}'
          memoize(7, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(272);                  // '{'
      lookahead1W(87);              // S^WS | '(:' | '}'
      shiftT(278);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(212);                     // 'processing-instruction'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shift(272);                   // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(278);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 142608)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(272);              // '{'
          lookahead1W(87);          // S^WS | '(:' | '}'
          shiftT(278);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(272);                   // '{'
      lookahead1W(87);              // S^WS | '(:' | '}'
      shift(278);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(212);                    // 'processing-instruction'
    lookahead1W(221);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shiftT(272);                  // '{'
      lookahead1W(238);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(278);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(86);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 142608)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(272);              // '{'
          lookahead1W(87);          // S^WS | '(:' | '}'
          shiftT(278);              // '}'
          memoize(8, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(272);                  // '{'
      lookahead1W(87);              // S^WS | '(:' | '}'
      shiftT(278);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(92);                      // 'comment'
    lookahead1W(86);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(92);                     // 'comment'
    lookahead1W(86);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(240);                     // 'text'
    lookahead1W(86);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(240);                    // 'text'
    lookahead1W(86);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 180:                       // 'namespace'
      lookahead2W(227);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 212:                       // 'processing-instruction'
      lookahead2W(224);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 78:                        // 'attribute'
    case 117:                       // 'element'
      lookahead2W(230);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 92:                        // 'comment'
    case 240:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 115:                       // 'document'
    case 198:                       // 'ordered'
    case 252:                       // 'unordered'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 7:                         // EQName^Token
    case 66:                        // 'after'
    case 68:                        // 'allowing'
    case 69:                        // 'ancestor'
    case 70:                        // 'ancestor-or-self'
    case 71:                        // 'and'
    case 74:                        // 'array'
    case 75:                        // 'as'
    case 76:                        // 'ascending'
    case 77:                        // 'at'
    case 79:                        // 'base-uri'
    case 80:                        // 'before'
    case 81:                        // 'boundary-space'
    case 82:                        // 'break'
    case 84:                        // 'case'
    case 85:                        // 'cast'
    case 86:                        // 'castable'
    case 87:                        // 'catch'
    case 89:                        // 'child'
    case 90:                        // 'collation'
    case 93:                        // 'constraint'
    case 94:                        // 'construction'
    case 97:                        // 'context'
    case 98:                        // 'continue'
    case 99:                        // 'copy'
    case 100:                       // 'copy-namespaces'
    case 101:                       // 'count'
    case 102:                       // 'decimal-format'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 114:                       // 'div'
    case 118:                       // 'else'
    case 119:                       // 'empty'
    case 121:                       // 'encoding'
    case 122:                       // 'end'
    case 124:                       // 'eq'
    case 125:                       // 'every'
    case 127:                       // 'except'
    case 128:                       // 'exit'
    case 129:                       // 'external'
    case 130:                       // 'first'
    case 131:                       // 'following'
    case 132:                       // 'following-sibling'
    case 133:                       // 'for'
    case 137:                       // 'ft-option'
    case 142:                       // 'ge'
    case 144:                       // 'group'
    case 146:                       // 'gt'
    case 147:                       // 'idiv'
    case 149:                       // 'import'
    case 150:                       // 'in'
    case 151:                       // 'index'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'integrity'
    case 158:                       // 'intersect'
    case 159:                       // 'into'
    case 160:                       // 'is'
    case 163:                       // 'json-item'
    case 166:                       // 'last'
    case 167:                       // 'lax'
    case 168:                       // 'le'
    case 170:                       // 'let'
    case 172:                       // 'loop'
    case 174:                       // 'lt'
    case 176:                       // 'mod'
    case 177:                       // 'modify'
    case 178:                       // 'module'
    case 182:                       // 'ne'
    case 188:                       // 'nodes'
    case 190:                       // 'object'
    case 194:                       // 'only'
    case 195:                       // 'option'
    case 196:                       // 'or'
    case 197:                       // 'order'
    case 199:                       // 'ordering'
    case 202:                       // 'parent'
    case 208:                       // 'preceding'
    case 209:                       // 'preceding-sibling'
    case 214:                       // 'rename'
    case 215:                       // 'replace'
    case 216:                       // 'return'
    case 217:                       // 'returning'
    case 218:                       // 'revalidation'
    case 220:                       // 'satisfies'
    case 221:                       // 'schema'
    case 224:                       // 'score'
    case 225:                       // 'self'
    case 230:                       // 'sliding'
    case 231:                       // 'some'
    case 232:                       // 'stable'
    case 233:                       // 'start'
    case 236:                       // 'strict'
    case 244:                       // 'to'
    case 245:                       // 'treat'
    case 246:                       // 'try'
    case 247:                       // 'tumbling'
    case 248:                       // 'type'
    case 250:                       // 'union'
    case 253:                       // 'updating'
    case 256:                       // 'validate'
    case 257:                       // 'value'
    case 258:                       // 'variable'
    case 259:                       // 'version'
    case 262:                       // 'where'
    case 263:                       // 'while'
    case 266:                       // 'with'
    case 270:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3856                  // '{' EQName^Token
     || lk == 4880                  // '{' IntegerLiteral
     || lk == 5392                  // '{' DecimalLiteral
     || lk == 5904                  // '{' DoubleLiteral
     || lk == 6416                  // '{' StringLiteral
     || lk == 16656                 // '{' '$'
     || lk == 17168                 // '{' '%'
     || lk == 18192                 // '{' '('
     || lk == 18704                 // '{' '(#'
     || lk == 21264                 // '{' '+'
     || lk == 22288                 // '{' '-'
     || lk == 23312                 // '{' '.'
     || lk == 26384                 // '{' '<'
     || lk == 26896                 // '{' '<!--'
     || lk == 28944                 // '{' '<?'
     || lk == 33040                 // '{' '['
     || lk == 34064                 // '{' 'after'
     || lk == 35088                 // '{' 'allowing'
     || lk == 35600                 // '{' 'ancestor'
     || lk == 36112                 // '{' 'ancestor-or-self'
     || lk == 36624                 // '{' 'and'
     || lk == 37648                 // '{' 'append'
     || lk == 38160                 // '{' 'array'
     || lk == 38672                 // '{' 'as'
     || lk == 39184                 // '{' 'ascending'
     || lk == 39696                 // '{' 'at'
     || lk == 40208                 // '{' 'attribute'
     || lk == 40720                 // '{' 'base-uri'
     || lk == 41232                 // '{' 'before'
     || lk == 41744                 // '{' 'boundary-space'
     || lk == 42256                 // '{' 'break'
     || lk == 43280                 // '{' 'case'
     || lk == 43792                 // '{' 'cast'
     || lk == 44304                 // '{' 'castable'
     || lk == 44816                 // '{' 'catch'
     || lk == 45840                 // '{' 'child'
     || lk == 46352                 // '{' 'collation'
     || lk == 47376                 // '{' 'comment'
     || lk == 47888                 // '{' 'constraint'
     || lk == 48400                 // '{' 'construction'
     || lk == 49936                 // '{' 'context'
     || lk == 50448                 // '{' 'continue'
     || lk == 50960                 // '{' 'copy'
     || lk == 51472                 // '{' 'copy-namespaces'
     || lk == 51984                 // '{' 'count'
     || lk == 52496                 // '{' 'decimal-format'
     || lk == 53520                 // '{' 'declare'
     || lk == 54032                 // '{' 'default'
     || lk == 54544                 // '{' 'delete'
     || lk == 55056                 // '{' 'descendant'
     || lk == 55568                 // '{' 'descendant-or-self'
     || lk == 56080                 // '{' 'descending'
     || lk == 58640                 // '{' 'div'
     || lk == 59152                 // '{' 'document'
     || lk == 59664                 // '{' 'document-node'
     || lk == 60176                 // '{' 'element'
     || lk == 60688                 // '{' 'else'
     || lk == 61200                 // '{' 'empty'
     || lk == 61712                 // '{' 'empty-sequence'
     || lk == 62224                 // '{' 'encoding'
     || lk == 62736                 // '{' 'end'
     || lk == 63760                 // '{' 'eq'
     || lk == 64272                 // '{' 'every'
     || lk == 65296                 // '{' 'except'
     || lk == 65808                 // '{' 'exit'
     || lk == 66320                 // '{' 'external'
     || lk == 66832                 // '{' 'first'
     || lk == 67344                 // '{' 'following'
     || lk == 67856                 // '{' 'following-sibling'
     || lk == 68368                 // '{' 'for'
     || lk == 70416                 // '{' 'ft-option'
     || lk == 72464                 // '{' 'function'
     || lk == 72976                 // '{' 'ge'
     || lk == 74000                 // '{' 'group'
     || lk == 75024                 // '{' 'gt'
     || lk == 75536                 // '{' 'idiv'
     || lk == 76048                 // '{' 'if'
     || lk == 76560                 // '{' 'import'
     || lk == 77072                 // '{' 'in'
     || lk == 77584                 // '{' 'index'
     || lk == 79632                 // '{' 'insert'
     || lk == 80144                 // '{' 'instance'
     || lk == 80656                 // '{' 'integrity'
     || lk == 81168                 // '{' 'intersect'
     || lk == 81680                 // '{' 'into'
     || lk == 82192                 // '{' 'is'
     || lk == 82704                 // '{' 'item'
     || lk == 83728                 // '{' 'json-item'
     || lk == 85264                 // '{' 'last'
     || lk == 85776                 // '{' 'lax'
     || lk == 86288                 // '{' 'le'
     || lk == 87312                 // '{' 'let'
     || lk == 88336                 // '{' 'loop'
     || lk == 89360                 // '{' 'lt'
     || lk == 90384                 // '{' 'mod'
     || lk == 90896                 // '{' 'modify'
     || lk == 91408                 // '{' 'module'
     || lk == 92432                 // '{' 'namespace'
     || lk == 92944                 // '{' 'namespace-node'
     || lk == 93456                 // '{' 'ne'
     || lk == 96016                 // '{' 'node'
     || lk == 96528                 // '{' 'nodes'
     || lk == 97552                 // '{' 'object'
     || lk == 99600                 // '{' 'only'
     || lk == 100112                // '{' 'option'
     || lk == 100624                // '{' 'or'
     || lk == 101136                // '{' 'order'
     || lk == 101648                // '{' 'ordered'
     || lk == 102160                // '{' 'ordering'
     || lk == 103696                // '{' 'parent'
     || lk == 106768                // '{' 'preceding'
     || lk == 107280                // '{' 'preceding-sibling'
     || lk == 108816                // '{' 'processing-instruction'
     || lk == 109840                // '{' 'rename'
     || lk == 110352                // '{' 'replace'
     || lk == 110864                // '{' 'return'
     || lk == 111376                // '{' 'returning'
     || lk == 111888                // '{' 'revalidation'
     || lk == 112912                // '{' 'satisfies'
     || lk == 113424                // '{' 'schema'
     || lk == 113936                // '{' 'schema-attribute'
     || lk == 114448                // '{' 'schema-element'
     || lk == 114960                // '{' 'score'
     || lk == 115472                // '{' 'self'
     || lk == 118032                // '{' 'sliding'
     || lk == 118544                // '{' 'some'
     || lk == 119056                // '{' 'stable'
     || lk == 119568                // '{' 'start'
     || lk == 121104                // '{' 'strict'
     || lk == 122640                // '{' 'switch'
     || lk == 123152                // '{' 'text'
     || lk == 125200                // '{' 'to'
     || lk == 125712                // '{' 'treat'
     || lk == 126224                // '{' 'try'
     || lk == 126736                // '{' 'tumbling'
     || lk == 127248                // '{' 'type'
     || lk == 127760                // '{' 'typeswitch'
     || lk == 128272                // '{' 'union'
     || lk == 129296                // '{' 'unordered'
     || lk == 129808                // '{' 'updating'
     || lk == 131344                // '{' 'validate'
     || lk == 131856                // '{' 'value'
     || lk == 132368                // '{' 'variable'
     || lk == 132880                // '{' 'version'
     || lk == 134416                // '{' 'where'
     || lk == 134928                // '{' 'while'
     || lk == 136464                // '{' 'with'
     || lk == 138512                // '{' 'xquery'
     || lk == 139536                // '{' '{'
     || lk == 140560                // '{' '{|'
     || lk == 142608)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 9:                         // IntegerLiteral
    case 10:                        // DecimalLiteral
    case 11:                        // DoubleLiteral
    case 12:                        // StringLiteral
      parse_Literal();
      break;
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17927:                     // EQName^Token '('
    case 17986:                     // 'after' '('
    case 17988:                     // 'allowing' '('
    case 17989:                     // 'ancestor' '('
    case 17990:                     // 'ancestor-or-self' '('
    case 17991:                     // 'and' '('
    case 17994:                     // 'array' '('
    case 17995:                     // 'as' '('
    case 17996:                     // 'ascending' '('
    case 17997:                     // 'at' '('
    case 17999:                     // 'base-uri' '('
    case 18000:                     // 'before' '('
    case 18001:                     // 'boundary-space' '('
    case 18002:                     // 'break' '('
    case 18004:                     // 'case' '('
    case 18005:                     // 'cast' '('
    case 18006:                     // 'castable' '('
    case 18007:                     // 'catch' '('
    case 18009:                     // 'child' '('
    case 18010:                     // 'collation' '('
    case 18013:                     // 'constraint' '('
    case 18014:                     // 'construction' '('
    case 18017:                     // 'context' '('
    case 18018:                     // 'continue' '('
    case 18019:                     // 'copy' '('
    case 18020:                     // 'copy-namespaces' '('
    case 18021:                     // 'count' '('
    case 18022:                     // 'decimal-format' '('
    case 18024:                     // 'declare' '('
    case 18025:                     // 'default' '('
    case 18026:                     // 'delete' '('
    case 18027:                     // 'descendant' '('
    case 18028:                     // 'descendant-or-self' '('
    case 18029:                     // 'descending' '('
    case 18034:                     // 'div' '('
    case 18035:                     // 'document' '('
    case 18038:                     // 'else' '('
    case 18039:                     // 'empty' '('
    case 18041:                     // 'encoding' '('
    case 18042:                     // 'end' '('
    case 18044:                     // 'eq' '('
    case 18045:                     // 'every' '('
    case 18047:                     // 'except' '('
    case 18048:                     // 'exit' '('
    case 18049:                     // 'external' '('
    case 18050:                     // 'first' '('
    case 18051:                     // 'following' '('
    case 18052:                     // 'following-sibling' '('
    case 18053:                     // 'for' '('
    case 18057:                     // 'ft-option' '('
    case 18062:                     // 'ge' '('
    case 18064:                     // 'group' '('
    case 18066:                     // 'gt' '('
    case 18067:                     // 'idiv' '('
    case 18069:                     // 'import' '('
    case 18070:                     // 'in' '('
    case 18071:                     // 'index' '('
    case 18075:                     // 'insert' '('
    case 18076:                     // 'instance' '('
    case 18077:                     // 'integrity' '('
    case 18078:                     // 'intersect' '('
    case 18079:                     // 'into' '('
    case 18080:                     // 'is' '('
    case 18083:                     // 'json-item' '('
    case 18086:                     // 'last' '('
    case 18087:                     // 'lax' '('
    case 18088:                     // 'le' '('
    case 18090:                     // 'let' '('
    case 18092:                     // 'loop' '('
    case 18094:                     // 'lt' '('
    case 18096:                     // 'mod' '('
    case 18097:                     // 'modify' '('
    case 18098:                     // 'module' '('
    case 18100:                     // 'namespace' '('
    case 18102:                     // 'ne' '('
    case 18108:                     // 'nodes' '('
    case 18110:                     // 'object' '('
    case 18114:                     // 'only' '('
    case 18115:                     // 'option' '('
    case 18116:                     // 'or' '('
    case 18117:                     // 'order' '('
    case 18118:                     // 'ordered' '('
    case 18119:                     // 'ordering' '('
    case 18122:                     // 'parent' '('
    case 18128:                     // 'preceding' '('
    case 18129:                     // 'preceding-sibling' '('
    case 18134:                     // 'rename' '('
    case 18135:                     // 'replace' '('
    case 18136:                     // 'return' '('
    case 18137:                     // 'returning' '('
    case 18138:                     // 'revalidation' '('
    case 18140:                     // 'satisfies' '('
    case 18141:                     // 'schema' '('
    case 18144:                     // 'score' '('
    case 18145:                     // 'self' '('
    case 18150:                     // 'sliding' '('
    case 18151:                     // 'some' '('
    case 18152:                     // 'stable' '('
    case 18153:                     // 'start' '('
    case 18156:                     // 'strict' '('
    case 18164:                     // 'to' '('
    case 18165:                     // 'treat' '('
    case 18166:                     // 'try' '('
    case 18167:                     // 'tumbling' '('
    case 18168:                     // 'type' '('
    case 18170:                     // 'union' '('
    case 18172:                     // 'unordered' '('
    case 18173:                     // 'updating' '('
    case 18176:                     // 'validate' '('
    case 18177:                     // 'value' '('
    case 18178:                     // 'variable' '('
    case 18179:                     // 'version' '('
    case 18182:                     // 'where' '('
    case 18183:                     // 'while' '('
    case 18186:                     // 'with' '('
    case 18190:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 139462:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 139516:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 116:                       // 'document-node'
    case 120:                       // 'empty-sequence'
    case 141:                       // 'function'
    case 148:                       // 'if'
    case 161:                       // 'item'
    case 181:                       // 'namespace-node'
    case 187:                       // 'node'
    case 222:                       // 'schema-attribute'
    case 223:                       // 'schema-element'
    case 239:                       // 'switch'
    case 249:                       // 'typeswitch'
    case 15367:                     // EQName^Token '#'
    case 15426:                     // 'after' '#'
    case 15428:                     // 'allowing' '#'
    case 15429:                     // 'ancestor' '#'
    case 15430:                     // 'ancestor-or-self' '#'
    case 15431:                     // 'and' '#'
    case 15434:                     // 'array' '#'
    case 15435:                     // 'as' '#'
    case 15436:                     // 'ascending' '#'
    case 15437:                     // 'at' '#'
    case 15438:                     // 'attribute' '#'
    case 15439:                     // 'base-uri' '#'
    case 15440:                     // 'before' '#'
    case 15441:                     // 'boundary-space' '#'
    case 15442:                     // 'break' '#'
    case 15444:                     // 'case' '#'
    case 15445:                     // 'cast' '#'
    case 15446:                     // 'castable' '#'
    case 15447:                     // 'catch' '#'
    case 15449:                     // 'child' '#'
    case 15450:                     // 'collation' '#'
    case 15452:                     // 'comment' '#'
    case 15453:                     // 'constraint' '#'
    case 15454:                     // 'construction' '#'
    case 15457:                     // 'context' '#'
    case 15458:                     // 'continue' '#'
    case 15459:                     // 'copy' '#'
    case 15460:                     // 'copy-namespaces' '#'
    case 15461:                     // 'count' '#'
    case 15462:                     // 'decimal-format' '#'
    case 15464:                     // 'declare' '#'
    case 15465:                     // 'default' '#'
    case 15466:                     // 'delete' '#'
    case 15467:                     // 'descendant' '#'
    case 15468:                     // 'descendant-or-self' '#'
    case 15469:                     // 'descending' '#'
    case 15474:                     // 'div' '#'
    case 15475:                     // 'document' '#'
    case 15477:                     // 'element' '#'
    case 15478:                     // 'else' '#'
    case 15479:                     // 'empty' '#'
    case 15481:                     // 'encoding' '#'
    case 15482:                     // 'end' '#'
    case 15484:                     // 'eq' '#'
    case 15485:                     // 'every' '#'
    case 15487:                     // 'except' '#'
    case 15488:                     // 'exit' '#'
    case 15489:                     // 'external' '#'
    case 15490:                     // 'first' '#'
    case 15491:                     // 'following' '#'
    case 15492:                     // 'following-sibling' '#'
    case 15493:                     // 'for' '#'
    case 15497:                     // 'ft-option' '#'
    case 15502:                     // 'ge' '#'
    case 15504:                     // 'group' '#'
    case 15506:                     // 'gt' '#'
    case 15507:                     // 'idiv' '#'
    case 15509:                     // 'import' '#'
    case 15510:                     // 'in' '#'
    case 15511:                     // 'index' '#'
    case 15515:                     // 'insert' '#'
    case 15516:                     // 'instance' '#'
    case 15517:                     // 'integrity' '#'
    case 15518:                     // 'intersect' '#'
    case 15519:                     // 'into' '#'
    case 15520:                     // 'is' '#'
    case 15523:                     // 'json-item' '#'
    case 15526:                     // 'last' '#'
    case 15527:                     // 'lax' '#'
    case 15528:                     // 'le' '#'
    case 15530:                     // 'let' '#'
    case 15532:                     // 'loop' '#'
    case 15534:                     // 'lt' '#'
    case 15536:                     // 'mod' '#'
    case 15537:                     // 'modify' '#'
    case 15538:                     // 'module' '#'
    case 15540:                     // 'namespace' '#'
    case 15542:                     // 'ne' '#'
    case 15548:                     // 'nodes' '#'
    case 15550:                     // 'object' '#'
    case 15554:                     // 'only' '#'
    case 15555:                     // 'option' '#'
    case 15556:                     // 'or' '#'
    case 15557:                     // 'order' '#'
    case 15558:                     // 'ordered' '#'
    case 15559:                     // 'ordering' '#'
    case 15562:                     // 'parent' '#'
    case 15568:                     // 'preceding' '#'
    case 15569:                     // 'preceding-sibling' '#'
    case 15572:                     // 'processing-instruction' '#'
    case 15574:                     // 'rename' '#'
    case 15575:                     // 'replace' '#'
    case 15576:                     // 'return' '#'
    case 15577:                     // 'returning' '#'
    case 15578:                     // 'revalidation' '#'
    case 15580:                     // 'satisfies' '#'
    case 15581:                     // 'schema' '#'
    case 15584:                     // 'score' '#'
    case 15585:                     // 'self' '#'
    case 15590:                     // 'sliding' '#'
    case 15591:                     // 'some' '#'
    case 15592:                     // 'stable' '#'
    case 15593:                     // 'start' '#'
    case 15596:                     // 'strict' '#'
    case 15600:                     // 'text' '#'
    case 15604:                     // 'to' '#'
    case 15605:                     // 'treat' '#'
    case 15606:                     // 'try' '#'
    case 15607:                     // 'tumbling' '#'
    case 15608:                     // 'type' '#'
    case 15610:                     // 'union' '#'
    case 15612:                     // 'unordered' '#'
    case 15613:                     // 'updating' '#'
    case 15616:                     // 'validate' '#'
    case 15617:                     // 'value' '#'
    case 15618:                     // 'variable' '#'
    case 15619:                     // 'version' '#'
    case 15622:                     // 'where' '#'
    case 15623:                     // 'while' '#'
    case 15626:                     // 'with' '#'
    case 15630:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 64:                        // '['
      parse_ArrayConstructor();
      break;
    case 274:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 180:                       // 'namespace'
      lookahead2W(227);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 212:                       // 'processing-instruction'
      lookahead2W(224);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 272:                       // '{'
      lookahead2W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 78:                        // 'attribute'
    case 117:                       // 'element'
      lookahead2W(230);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 92:                        // 'comment'
    case 240:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 115:                       // 'document'
    case 198:                       // 'ordered'
    case 252:                       // 'unordered'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 7:                         // EQName^Token
    case 66:                        // 'after'
    case 68:                        // 'allowing'
    case 69:                        // 'ancestor'
    case 70:                        // 'ancestor-or-self'
    case 71:                        // 'and'
    case 74:                        // 'array'
    case 75:                        // 'as'
    case 76:                        // 'ascending'
    case 77:                        // 'at'
    case 79:                        // 'base-uri'
    case 80:                        // 'before'
    case 81:                        // 'boundary-space'
    case 82:                        // 'break'
    case 84:                        // 'case'
    case 85:                        // 'cast'
    case 86:                        // 'castable'
    case 87:                        // 'catch'
    case 89:                        // 'child'
    case 90:                        // 'collation'
    case 93:                        // 'constraint'
    case 94:                        // 'construction'
    case 97:                        // 'context'
    case 98:                        // 'continue'
    case 99:                        // 'copy'
    case 100:                       // 'copy-namespaces'
    case 101:                       // 'count'
    case 102:                       // 'decimal-format'
    case 104:                       // 'declare'
    case 105:                       // 'default'
    case 106:                       // 'delete'
    case 107:                       // 'descendant'
    case 108:                       // 'descendant-or-self'
    case 109:                       // 'descending'
    case 114:                       // 'div'
    case 118:                       // 'else'
    case 119:                       // 'empty'
    case 121:                       // 'encoding'
    case 122:                       // 'end'
    case 124:                       // 'eq'
    case 125:                       // 'every'
    case 127:                       // 'except'
    case 128:                       // 'exit'
    case 129:                       // 'external'
    case 130:                       // 'first'
    case 131:                       // 'following'
    case 132:                       // 'following-sibling'
    case 133:                       // 'for'
    case 137:                       // 'ft-option'
    case 142:                       // 'ge'
    case 144:                       // 'group'
    case 146:                       // 'gt'
    case 147:                       // 'idiv'
    case 149:                       // 'import'
    case 150:                       // 'in'
    case 151:                       // 'index'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'integrity'
    case 158:                       // 'intersect'
    case 159:                       // 'into'
    case 160:                       // 'is'
    case 163:                       // 'json-item'
    case 166:                       // 'last'
    case 167:                       // 'lax'
    case 168:                       // 'le'
    case 170:                       // 'let'
    case 172:                       // 'loop'
    case 174:                       // 'lt'
    case 176:                       // 'mod'
    case 177:                       // 'modify'
    case 178:                       // 'module'
    case 182:                       // 'ne'
    case 188:                       // 'nodes'
    case 190:                       // 'object'
    case 194:                       // 'only'
    case 195:                       // 'option'
    case 196:                       // 'or'
    case 197:                       // 'order'
    case 199:                       // 'ordering'
    case 202:                       // 'parent'
    case 208:                       // 'preceding'
    case 209:                       // 'preceding-sibling'
    case 214:                       // 'rename'
    case 215:                       // 'replace'
    case 216:                       // 'return'
    case 217:                       // 'returning'
    case 218:                       // 'revalidation'
    case 220:                       // 'satisfies'
    case 221:                       // 'schema'
    case 224:                       // 'score'
    case 225:                       // 'self'
    case 230:                       // 'sliding'
    case 231:                       // 'some'
    case 232:                       // 'stable'
    case 233:                       // 'start'
    case 236:                       // 'strict'
    case 244:                       // 'to'
    case 245:                       // 'treat'
    case 246:                       // 'try'
    case 247:                       // 'tumbling'
    case 248:                       // 'type'
    case 250:                       // 'union'
    case 253:                       // 'updating'
    case 256:                       // 'validate'
    case 257:                       // 'value'
    case 258:                       // 'variable'
    case 259:                       // 'version'
    case 262:                       // 'where'
    case 263:                       // 'while'
    case 266:                       // 'with'
    case 270:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3856                  // '{' EQName^Token
     || lk == 4880                  // '{' IntegerLiteral
     || lk == 5392                  // '{' DecimalLiteral
     || lk == 5904                  // '{' DoubleLiteral
     || lk == 6416                  // '{' StringLiteral
     || lk == 16656                 // '{' '$'
     || lk == 17168                 // '{' '%'
     || lk == 18192                 // '{' '('
     || lk == 18704                 // '{' '(#'
     || lk == 21264                 // '{' '+'
     || lk == 22288                 // '{' '-'
     || lk == 23312                 // '{' '.'
     || lk == 26384                 // '{' '<'
     || lk == 26896                 // '{' '<!--'
     || lk == 28944                 // '{' '<?'
     || lk == 33040                 // '{' '['
     || lk == 34064                 // '{' 'after'
     || lk == 35088                 // '{' 'allowing'
     || lk == 35600                 // '{' 'ancestor'
     || lk == 36112                 // '{' 'ancestor-or-self'
     || lk == 36624                 // '{' 'and'
     || lk == 37648                 // '{' 'append'
     || lk == 38160                 // '{' 'array'
     || lk == 38672                 // '{' 'as'
     || lk == 39184                 // '{' 'ascending'
     || lk == 39696                 // '{' 'at'
     || lk == 40208                 // '{' 'attribute'
     || lk == 40720                 // '{' 'base-uri'
     || lk == 41232                 // '{' 'before'
     || lk == 41744                 // '{' 'boundary-space'
     || lk == 42256                 // '{' 'break'
     || lk == 43280                 // '{' 'case'
     || lk == 43792                 // '{' 'cast'
     || lk == 44304                 // '{' 'castable'
     || lk == 44816                 // '{' 'catch'
     || lk == 45840                 // '{' 'child'
     || lk == 46352                 // '{' 'collation'
     || lk == 47376                 // '{' 'comment'
     || lk == 47888                 // '{' 'constraint'
     || lk == 48400                 // '{' 'construction'
     || lk == 49936                 // '{' 'context'
     || lk == 50448                 // '{' 'continue'
     || lk == 50960                 // '{' 'copy'
     || lk == 51472                 // '{' 'copy-namespaces'
     || lk == 51984                 // '{' 'count'
     || lk == 52496                 // '{' 'decimal-format'
     || lk == 53520                 // '{' 'declare'
     || lk == 54032                 // '{' 'default'
     || lk == 54544                 // '{' 'delete'
     || lk == 55056                 // '{' 'descendant'
     || lk == 55568                 // '{' 'descendant-or-self'
     || lk == 56080                 // '{' 'descending'
     || lk == 58640                 // '{' 'div'
     || lk == 59152                 // '{' 'document'
     || lk == 59664                 // '{' 'document-node'
     || lk == 60176                 // '{' 'element'
     || lk == 60688                 // '{' 'else'
     || lk == 61200                 // '{' 'empty'
     || lk == 61712                 // '{' 'empty-sequence'
     || lk == 62224                 // '{' 'encoding'
     || lk == 62736                 // '{' 'end'
     || lk == 63760                 // '{' 'eq'
     || lk == 64272                 // '{' 'every'
     || lk == 65296                 // '{' 'except'
     || lk == 65808                 // '{' 'exit'
     || lk == 66320                 // '{' 'external'
     || lk == 66832                 // '{' 'first'
     || lk == 67344                 // '{' 'following'
     || lk == 67856                 // '{' 'following-sibling'
     || lk == 68368                 // '{' 'for'
     || lk == 70416                 // '{' 'ft-option'
     || lk == 72464                 // '{' 'function'
     || lk == 72976                 // '{' 'ge'
     || lk == 74000                 // '{' 'group'
     || lk == 75024                 // '{' 'gt'
     || lk == 75536                 // '{' 'idiv'
     || lk == 76048                 // '{' 'if'
     || lk == 76560                 // '{' 'import'
     || lk == 77072                 // '{' 'in'
     || lk == 77584                 // '{' 'index'
     || lk == 79632                 // '{' 'insert'
     || lk == 80144                 // '{' 'instance'
     || lk == 80656                 // '{' 'integrity'
     || lk == 81168                 // '{' 'intersect'
     || lk == 81680                 // '{' 'into'
     || lk == 82192                 // '{' 'is'
     || lk == 82704                 // '{' 'item'
     || lk == 83728                 // '{' 'json-item'
     || lk == 85264                 // '{' 'last'
     || lk == 85776                 // '{' 'lax'
     || lk == 86288                 // '{' 'le'
     || lk == 87312                 // '{' 'let'
     || lk == 88336                 // '{' 'loop'
     || lk == 89360                 // '{' 'lt'
     || lk == 90384                 // '{' 'mod'
     || lk == 90896                 // '{' 'modify'
     || lk == 91408                 // '{' 'module'
     || lk == 92432                 // '{' 'namespace'
     || lk == 92944                 // '{' 'namespace-node'
     || lk == 93456                 // '{' 'ne'
     || lk == 96016                 // '{' 'node'
     || lk == 96528                 // '{' 'nodes'
     || lk == 97552                 // '{' 'object'
     || lk == 99600                 // '{' 'only'
     || lk == 100112                // '{' 'option'
     || lk == 100624                // '{' 'or'
     || lk == 101136                // '{' 'order'
     || lk == 101648                // '{' 'ordered'
     || lk == 102160                // '{' 'ordering'
     || lk == 103696                // '{' 'parent'
     || lk == 106768                // '{' 'preceding'
     || lk == 107280                // '{' 'preceding-sibling'
     || lk == 108816                // '{' 'processing-instruction'
     || lk == 109840                // '{' 'rename'
     || lk == 110352                // '{' 'replace'
     || lk == 110864                // '{' 'return'
     || lk == 111376                // '{' 'returning'
     || lk == 111888                // '{' 'revalidation'
     || lk == 112912                // '{' 'satisfies'
     || lk == 113424                // '{' 'schema'
     || lk == 113936                // '{' 'schema-attribute'
     || lk == 114448                // '{' 'schema-element'
     || lk == 114960                // '{' 'score'
     || lk == 115472                // '{' 'self'
     || lk == 118032                // '{' 'sliding'
     || lk == 118544                // '{' 'some'
     || lk == 119056                // '{' 'stable'
     || lk == 119568                // '{' 'start'
     || lk == 121104                // '{' 'strict'
     || lk == 122640                // '{' 'switch'
     || lk == 123152                // '{' 'text'
     || lk == 125200                // '{' 'to'
     || lk == 125712                // '{' 'treat'
     || lk == 126224                // '{' 'try'
     || lk == 126736                // '{' 'tumbling'
     || lk == 127248                // '{' 'type'
     || lk == 127760                // '{' 'typeswitch'
     || lk == 128272                // '{' 'union'
     || lk == 129296                // '{' 'unordered'
     || lk == 129808                // '{' 'updating'
     || lk == 131344                // '{' 'validate'
     || lk == 131856                // '{' 'value'
     || lk == 132368                // '{' 'variable'
     || lk == 132880                // '{' 'version'
     || lk == 134416                // '{' 'where'
     || lk == 134928                // '{' 'while'
     || lk == 136464                // '{' 'with'
     || lk == 138512                // '{' 'xquery'
     || lk == 139536                // '{' '{'
     || lk == 140560                // '{' '{|'
     || lk == 142608)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(9, e0A, -10);
          lk = -14;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 9:                         // IntegerLiteral
    case 10:                        // DecimalLiteral
    case 11:                        // DoubleLiteral
    case 12:                        // StringLiteral
      try_Literal();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      try_ContextItemExpr();
      break;
    case 17927:                     // EQName^Token '('
    case 17986:                     // 'after' '('
    case 17988:                     // 'allowing' '('
    case 17989:                     // 'ancestor' '('
    case 17990:                     // 'ancestor-or-self' '('
    case 17991:                     // 'and' '('
    case 17994:                     // 'array' '('
    case 17995:                     // 'as' '('
    case 17996:                     // 'ascending' '('
    case 17997:                     // 'at' '('
    case 17999:                     // 'base-uri' '('
    case 18000:                     // 'before' '('
    case 18001:                     // 'boundary-space' '('
    case 18002:                     // 'break' '('
    case 18004:                     // 'case' '('
    case 18005:                     // 'cast' '('
    case 18006:                     // 'castable' '('
    case 18007:                     // 'catch' '('
    case 18009:                     // 'child' '('
    case 18010:                     // 'collation' '('
    case 18013:                     // 'constraint' '('
    case 18014:                     // 'construction' '('
    case 18017:                     // 'context' '('
    case 18018:                     // 'continue' '('
    case 18019:                     // 'copy' '('
    case 18020:                     // 'copy-namespaces' '('
    case 18021:                     // 'count' '('
    case 18022:                     // 'decimal-format' '('
    case 18024:                     // 'declare' '('
    case 18025:                     // 'default' '('
    case 18026:                     // 'delete' '('
    case 18027:                     // 'descendant' '('
    case 18028:                     // 'descendant-or-self' '('
    case 18029:                     // 'descending' '('
    case 18034:                     // 'div' '('
    case 18035:                     // 'document' '('
    case 18038:                     // 'else' '('
    case 18039:                     // 'empty' '('
    case 18041:                     // 'encoding' '('
    case 18042:                     // 'end' '('
    case 18044:                     // 'eq' '('
    case 18045:                     // 'every' '('
    case 18047:                     // 'except' '('
    case 18048:                     // 'exit' '('
    case 18049:                     // 'external' '('
    case 18050:                     // 'first' '('
    case 18051:                     // 'following' '('
    case 18052:                     // 'following-sibling' '('
    case 18053:                     // 'for' '('
    case 18057:                     // 'ft-option' '('
    case 18062:                     // 'ge' '('
    case 18064:                     // 'group' '('
    case 18066:                     // 'gt' '('
    case 18067:                     // 'idiv' '('
    case 18069:                     // 'import' '('
    case 18070:                     // 'in' '('
    case 18071:                     // 'index' '('
    case 18075:                     // 'insert' '('
    case 18076:                     // 'instance' '('
    case 18077:                     // 'integrity' '('
    case 18078:                     // 'intersect' '('
    case 18079:                     // 'into' '('
    case 18080:                     // 'is' '('
    case 18083:                     // 'json-item' '('
    case 18086:                     // 'last' '('
    case 18087:                     // 'lax' '('
    case 18088:                     // 'le' '('
    case 18090:                     // 'let' '('
    case 18092:                     // 'loop' '('
    case 18094:                     // 'lt' '('
    case 18096:                     // 'mod' '('
    case 18097:                     // 'modify' '('
    case 18098:                     // 'module' '('
    case 18100:                     // 'namespace' '('
    case 18102:                     // 'ne' '('
    case 18108:                     // 'nodes' '('
    case 18110:                     // 'object' '('
    case 18114:                     // 'only' '('
    case 18115:                     // 'option' '('
    case 18116:                     // 'or' '('
    case 18117:                     // 'order' '('
    case 18118:                     // 'ordered' '('
    case 18119:                     // 'ordering' '('
    case 18122:                     // 'parent' '('
    case 18128:                     // 'preceding' '('
    case 18129:                     // 'preceding-sibling' '('
    case 18134:                     // 'rename' '('
    case 18135:                     // 'replace' '('
    case 18136:                     // 'return' '('
    case 18137:                     // 'returning' '('
    case 18138:                     // 'revalidation' '('
    case 18140:                     // 'satisfies' '('
    case 18141:                     // 'schema' '('
    case 18144:                     // 'score' '('
    case 18145:                     // 'self' '('
    case 18150:                     // 'sliding' '('
    case 18151:                     // 'some' '('
    case 18152:                     // 'stable' '('
    case 18153:                     // 'start' '('
    case 18156:                     // 'strict' '('
    case 18164:                     // 'to' '('
    case 18165:                     // 'treat' '('
    case 18166:                     // 'try' '('
    case 18167:                     // 'tumbling' '('
    case 18168:                     // 'type' '('
    case 18170:                     // 'union' '('
    case 18172:                     // 'unordered' '('
    case 18173:                     // 'updating' '('
    case 18176:                     // 'validate' '('
    case 18177:                     // 'value' '('
    case 18178:                     // 'variable' '('
    case 18179:                     // 'version' '('
    case 18182:                     // 'where' '('
    case 18183:                     // 'while' '('
    case 18186:                     // 'with' '('
    case 18190:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 139462:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 139516:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 116:                       // 'document-node'
    case 120:                       // 'empty-sequence'
    case 141:                       // 'function'
    case 148:                       // 'if'
    case 161:                       // 'item'
    case 181:                       // 'namespace-node'
    case 187:                       // 'node'
    case 222:                       // 'schema-attribute'
    case 223:                       // 'schema-element'
    case 239:                       // 'switch'
    case 249:                       // 'typeswitch'
    case 15367:                     // EQName^Token '#'
    case 15426:                     // 'after' '#'
    case 15428:                     // 'allowing' '#'
    case 15429:                     // 'ancestor' '#'
    case 15430:                     // 'ancestor-or-self' '#'
    case 15431:                     // 'and' '#'
    case 15434:                     // 'array' '#'
    case 15435:                     // 'as' '#'
    case 15436:                     // 'ascending' '#'
    case 15437:                     // 'at' '#'
    case 15438:                     // 'attribute' '#'
    case 15439:                     // 'base-uri' '#'
    case 15440:                     // 'before' '#'
    case 15441:                     // 'boundary-space' '#'
    case 15442:                     // 'break' '#'
    case 15444:                     // 'case' '#'
    case 15445:                     // 'cast' '#'
    case 15446:                     // 'castable' '#'
    case 15447:                     // 'catch' '#'
    case 15449:                     // 'child' '#'
    case 15450:                     // 'collation' '#'
    case 15452:                     // 'comment' '#'
    case 15453:                     // 'constraint' '#'
    case 15454:                     // 'construction' '#'
    case 15457:                     // 'context' '#'
    case 15458:                     // 'continue' '#'
    case 15459:                     // 'copy' '#'
    case 15460:                     // 'copy-namespaces' '#'
    case 15461:                     // 'count' '#'
    case 15462:                     // 'decimal-format' '#'
    case 15464:                     // 'declare' '#'
    case 15465:                     // 'default' '#'
    case 15466:                     // 'delete' '#'
    case 15467:                     // 'descendant' '#'
    case 15468:                     // 'descendant-or-self' '#'
    case 15469:                     // 'descending' '#'
    case 15474:                     // 'div' '#'
    case 15475:                     // 'document' '#'
    case 15477:                     // 'element' '#'
    case 15478:                     // 'else' '#'
    case 15479:                     // 'empty' '#'
    case 15481:                     // 'encoding' '#'
    case 15482:                     // 'end' '#'
    case 15484:                     // 'eq' '#'
    case 15485:                     // 'every' '#'
    case 15487:                     // 'except' '#'
    case 15488:                     // 'exit' '#'
    case 15489:                     // 'external' '#'
    case 15490:                     // 'first' '#'
    case 15491:                     // 'following' '#'
    case 15492:                     // 'following-sibling' '#'
    case 15493:                     // 'for' '#'
    case 15497:                     // 'ft-option' '#'
    case 15502:                     // 'ge' '#'
    case 15504:                     // 'group' '#'
    case 15506:                     // 'gt' '#'
    case 15507:                     // 'idiv' '#'
    case 15509:                     // 'import' '#'
    case 15510:                     // 'in' '#'
    case 15511:                     // 'index' '#'
    case 15515:                     // 'insert' '#'
    case 15516:                     // 'instance' '#'
    case 15517:                     // 'integrity' '#'
    case 15518:                     // 'intersect' '#'
    case 15519:                     // 'into' '#'
    case 15520:                     // 'is' '#'
    case 15523:                     // 'json-item' '#'
    case 15526:                     // 'last' '#'
    case 15527:                     // 'lax' '#'
    case 15528:                     // 'le' '#'
    case 15530:                     // 'let' '#'
    case 15532:                     // 'loop' '#'
    case 15534:                     // 'lt' '#'
    case 15536:                     // 'mod' '#'
    case 15537:                     // 'modify' '#'
    case 15538:                     // 'module' '#'
    case 15540:                     // 'namespace' '#'
    case 15542:                     // 'ne' '#'
    case 15548:                     // 'nodes' '#'
    case 15550:                     // 'object' '#'
    case 15554:                     // 'only' '#'
    case 15555:                     // 'option' '#'
    case 15556:                     // 'or' '#'
    case 15557:                     // 'order' '#'
    case 15558:                     // 'ordered' '#'
    case 15559:                     // 'ordering' '#'
    case 15562:                     // 'parent' '#'
    case 15568:                     // 'preceding' '#'
    case 15569:                     // 'preceding-sibling' '#'
    case 15572:                     // 'processing-instruction' '#'
    case 15574:                     // 'rename' '#'
    case 15575:                     // 'replace' '#'
    case 15576:                     // 'return' '#'
    case 15577:                     // 'returning' '#'
    case 15578:                     // 'revalidation' '#'
    case 15580:                     // 'satisfies' '#'
    case 15581:                     // 'schema' '#'
    case 15584:                     // 'score' '#'
    case 15585:                     // 'self' '#'
    case 15590:                     // 'sliding' '#'
    case 15591:                     // 'some' '#'
    case 15592:                     // 'stable' '#'
    case 15593:                     // 'start' '#'
    case 15596:                     // 'strict' '#'
    case 15600:                     // 'text' '#'
    case 15604:                     // 'to' '#'
    case 15605:                     // 'treat' '#'
    case 15606:                     // 'try' '#'
    case 15607:                     // 'tumbling' '#'
    case 15608:                     // 'type' '#'
    case 15610:                     // 'union' '#'
    case 15612:                     // 'unordered' '#'
    case 15613:                     // 'updating' '#'
    case 15616:                     // 'validate' '#'
    case 15617:                     // 'value' '#'
    case 15618:                     // 'variable' '#'
    case 15619:                     // 'version' '#'
    case 15622:                     // 'where' '#'
    case 15623:                     // 'while' '#'
    case 15626:                     // 'with' '#'
    case 15630:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 64:                        // '['
      try_ArrayConstructor();
      break;
    case 274:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(274);                     // '{|'
    lookahead1W(243);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 277)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(277);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(274);                    // '{|'
    lookahead1W(243);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 277)                  // '|}'
    {
      try_Expr();
    }
    shiftT(277);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(272);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 278)                  // '}'
    {
      whitespace();
      parse_PairConstructor();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_PairConstructor();
      }
    }
    shift(278);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(272);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 278)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(238);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_PairConstructor();
      }
    }
    shiftT(278);                    // '}'
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    shift(47);                      // ':'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    shiftT(47);                     // ':'
    lookahead1W(238);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(64);                      // '['
    lookahead1W(242);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 65)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(65);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(64);                     // '['
    lookahead1W(242);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 65)                   // ']'
    {
      try_Expr();
    }
    shiftT(65);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(272);                     // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(278);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(272);                    // '{'
    lookahead1W(244);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    shiftT(278);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(141);                     // 'function'
    lookahead1W(225);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(152);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 75)                   // 'as'
    {
      shift(75);                    // 'as'
      lookahead1W(233);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 272:                       // '{'
      shift(272);                   // '{'
      lookahead1W(244);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '<' | '<!--' | '<?' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(278);                   // '}'
      break;
    default:
      shift(129);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(JSONiqParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 23)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = JSONiqParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = JSONiqParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = JSONiqParser.MAP1[(c0 & 15) + JSONiqParser.MAP1[(c1 & 31) + JSONiqParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (JSONiqParser.MAP2[m] > c0) hi = m - 1;
          else if (JSONiqParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = JSONiqParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = JSONiqParser.TRANSITION[(i0 & 15) + JSONiqParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

JSONiqParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 280; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3497 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = JSONiqParser.EXPECTED[(i0 & 1) + JSONiqParser.EXPECTED[(i1 & 3) + JSONiqParser.EXPECTED[(i2 & 3) + JSONiqParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(JSONiqParser.TOKEN[j]);
      }
    }
  }
  return set;
};

JSONiqParser.MAP0 =
[
  /*   0 */ 69, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 24, 38, 24, 30, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
  /* 118 */ 60, 61, 62, 63, 64, 65, 66, 67, 24, 24
];

JSONiqParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 69, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 24, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 24, 38, 24, 30,
  /* 371 */ 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
  /* 398 */ 65, 66, 67, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 30, 30, 24, 24, 24, 24, 24, 24, 24, 68, 24, 24,
  /* 425 */ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
  /* 452 */ 68, 68, 68, 68
];

JSONiqParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 24, 30, 24, 30, 30,
  /* 17 */ 24
];

JSONiqParser.INITIAL =
[
  /*   0 */ 1, 16386, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 8282, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
  /* 106 */ 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  /* 127 */ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
  /* 148 */ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
  /* 169 */ 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
  /* 190 */ 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
  /* 211 */ 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
  /* 232 */ 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247
];

JSONiqParser.TRANSITION =
[
  /*     0 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*    15 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*    30 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*    45 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*    60 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*    75 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*    90 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   105 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   120 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   135 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   150 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   165 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   180 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   195 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   210 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   225 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   240 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   255 */ 20921, 17920, 17962, 17982, 17982, 17982, 17990, 17982, 17982, 17982, 17982, 17982, 17935, 17982, 17966,
  /*   270 */ 17982, 17946, 18006, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   285 */ 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921, 20921, 36259, 20921, 38747,
  /*   300 */ 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292,
  /*   315 */ 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435,
  /*   330 */ 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970,
  /*   345 */ 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605,
  /*   360 */ 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849,
  /*   375 */ 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139,
  /*   390 */ 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323,
  /*   405 */ 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517,
  /*   420 */ 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955,
  /*   435 */ 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137,
  /*   450 */ 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998,
  /*   465 */ 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921,
  /*   480 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   495 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   510 */ 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20921, 20921, 20921, 20921, 20921, 20541, 18930,
  /*   525 */ 18938, 20921, 21852, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20595, 20921, 20921, 20921,
  /*   540 */ 20921, 20921, 20257, 18964, 18505, 18970, 20615, 18052, 26012, 44929, 39133, 20921, 20921, 36259, 20921,
  /*   555 */ 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219,
  /*   570 */ 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399,
  /*   585 */ 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229,
  /*   600 */ 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590,
  /*   615 */ 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802,
  /*   630 */ 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087,
  /*   645 */ 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307,
  /*   660 */ 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498,
  /*   675 */ 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909,
  /*   690 */ 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153,
  /*   705 */ 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343,
  /*   720 */ 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921,
  /*   735 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   750 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*   765 */ 20921, 20921, 20921, 20640, 20656, 20921, 20921, 20921, 20772, 20921, 20921, 34652, 20923, 25347, 20675,
  /*   780 */ 20921, 20922, 24402, 24414, 20710, 20921, 20921, 20921, 18030, 20921, 35852, 20742, 20921, 20921, 20921,
  /*   795 */ 20921, 20921, 20921, 20257, 18964, 18505, 18970, 19008, 20763, 26012, 44929, 39133, 20921, 20921, 36259,
  /*   810 */ 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103,
  /*   825 */ 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375,
  /*   840 */ 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482,
  /*   855 */ 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230,
  /*   870 */ 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784,
  /*   885 */ 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071,
  /*   900 */ 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109,
  /*   915 */ 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291,
  /*   930 */ 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871,
  /*   945 */ 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133,
  /*   960 */ 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561,
  /*   975 */ 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921,
  /*   990 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1005 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1020 */ 20921, 20921, 20921, 20921, 20788, 31256, 20921, 20921, 20921, 26658, 20921, 20921, 39953, 20921, 20830,
  /*  1035 */ 20815, 31255, 20921, 20843, 24319, 20571, 20921, 20921, 20921, 20868, 20921, 35852, 22734, 20921, 20921,
  /*  1050 */ 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 20163, 20894, 26012, 44929, 39133, 20921, 20921,
  /*  1065 */ 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826,
  /*  1080 */ 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033,
  /*  1095 */ 18375, 18399, 18435, 19629, 19039, 18457, 18441, 19602, 18970, 18477, 48224, 18970, 18498, 19659, 19689,
  /*  1110 */ 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563,
  /*  1125 */ 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766,
  /*  1140 */ 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055,
  /*  1155 */ 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272,
  /*  1170 */ 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462,
  /*  1185 */ 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835,
  /*  1200 */ 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090,
  /*  1215 */ 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667,
  /*  1230 */ 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921,
  /*  1245 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1260 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1275 */ 20921, 20921, 20921, 20921, 20921, 20522, 24835, 20921, 20921, 20921, 21127, 20920, 20921, 24829, 20919,
  /*  1290 */ 24840, 20541, 20921, 20921, 20939, 20951, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20921,
  /*  1305 */ 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921,
  /*  1320 */ 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308,
  /*  1335 */ 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921,
  /*  1350 */ 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211,
  /*  1365 */ 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537,
  /*  1380 */ 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748,
  /*  1395 */ 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287,
  /*  1410 */ 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921,
  /*  1425 */ 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446,
  /*  1440 */ 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799,
  /*  1455 */ 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074,
  /*  1470 */ 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312,
  /*  1485 */ 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921,
  /*  1500 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1515 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1530 */ 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20981, 20921, 20921,
  /*  1545 */ 20921, 20921, 20967, 31860, 20921, 38654, 21000, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921,
  /*  1560 */ 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133,
  /*  1575 */ 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285,
  /*  1590 */ 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322,
  /*  1605 */ 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498,
  /*  1620 */ 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921,
  /*  1635 */ 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730,
  /*  1650 */ 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024,
  /*  1665 */ 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235,
  /*  1680 */ 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405,
  /*  1695 */ 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705,
  /*  1710 */ 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058,
  /*  1725 */ 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273,
  /*  1740 */ 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497,
  /*  1755 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1770 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  1785 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20921, 20921,
  /*  1800 */ 20921, 20921, 20921, 21036, 20921, 20921, 20921, 21852, 21070, 20921, 20921, 20921, 18030, 20921, 35852,
  /*  1815 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929,
  /*  1830 */ 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 21094, 20112,
  /*  1845 */ 18285, 18308, 18826, 19746, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332,
  /*  1860 */ 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970,
  /*  1875 */ 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921,
  /*  1890 */ 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818,
  /*  1905 */ 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986,
  /*  1920 */ 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712,
  /*  1935 */ 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375,
  /*  1950 */ 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683,
  /*  1965 */ 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042,
  /*  1980 */ 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970,
  /*  1995 */ 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485,
  /*  2010 */ 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2025 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2040 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 21143, 21159, 20921, 20921, 20921, 20852, 20921,
  /*  2055 */ 20921, 27106, 26102, 45597, 21178, 20921, 26101, 21213, 21225, 21241, 20921, 20921, 20921, 18030, 20921,
  /*  2070 */ 35852, 37525, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 19343, 21265, 26012,
  /*  2085 */ 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246,
  /*  2100 */ 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921,
  /*  2115 */ 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224,
  /*  2130 */ 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157,
  /*  2145 */ 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800,
  /*  2160 */ 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954,
  /*  2175 */ 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197,
  /*  2190 */ 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216,
  /*  2205 */ 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732,
  /*  2220 */ 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026,
  /*  2235 */ 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969,
  /*  2250 */ 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469,
  /*  2265 */ 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2280 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2295 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 21299, 21367, 21404, 21404, 21404, 21337,
  /*  2310 */ 21399, 21404, 21409, 21371, 21353, 21387, 21329, 21314, 21425, 21438, 20571, 20921, 20921, 20921, 21473,
  /*  2325 */ 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052,
  /*  2340 */ 26012, 44929, 39587, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222,
  /*  2355 */ 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921,
  /*  2370 */ 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477,
  /*  2385 */ 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784,
  /*  2400 */ 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782,
  /*  2415 */ 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412,
  /*  2430 */ 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176,
  /*  2445 */ 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446,
  /*  2460 */ 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705,
  /*  2475 */ 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978,
  /*  2490 */ 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256,
  /*  2505 */ 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565,
  /*  2520 */ 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2535 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2550 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 19283, 20921, 20921, 20921,
  /*  2565 */ 32271, 33390, 20921, 20921, 33392, 20921, 20541, 36533, 36541, 19882, 19893, 20571, 20921, 20921, 20921,
  /*  2580 */ 21495, 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704,
  /*  2595 */ 18052, 26012, 44929, 38684, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206,
  /*  2610 */ 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921,
  /*  2625 */ 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970,
  /*  2640 */ 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521,
  /*  2655 */ 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764,
  /*  2670 */ 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243,
  /*  2685 */ 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155,
  /*  2700 */ 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405,
  /*  2715 */ 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683,
  /*  2730 */ 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010,
  /*  2745 */ 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420,
  /*  2760 */ 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453,
  /*  2775 */ 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2790 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  2805 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 38707, 20921, 20921,
  /*  2820 */ 20921, 45766, 20921, 20921, 20921, 20921, 21517, 21538, 38708, 21572, 21606, 21852, 20571, 20921, 20921,
  /*  2835 */ 20921, 18030, 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970,
  /*  2850 */ 18704, 18052, 26012, 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461,
  /*  2865 */ 18206, 18222, 18246, 20112, 18285, 18308, 18826, 19760, 19219, 18292, 18315, 18833, 18331, 20921, 18349,
  /*  2880 */ 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645,
  /*  2895 */ 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794,
  /*  2910 */ 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746,
  /*  2925 */ 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908,
  /*  2940 */ 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134,
  /*  2955 */ 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375,
  /*  2970 */ 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645,
  /*  2985 */ 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994,
  /*  3000 */ 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238,
  /*  3015 */ 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574,
  /*  3030 */ 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3045 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3060 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921,
  /*  3075 */ 20921, 20921, 45766, 20921, 20921, 20921, 20921, 20555, 21658, 20552, 21687, 33412, 21716, 20571, 20921,
  /*  3090 */ 20921, 20921, 18030, 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505,
  /*  3105 */ 18970, 18704, 18052, 26012, 44929, 39133, 20921, 20921, 36295, 20921, 38747, 18077, 18098, 18127, 18146,
  /*  3120 */ 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921,
  /*  3135 */ 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441,
  /*  3150 */ 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713,
  /*  3165 */ 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728,
  /*  3180 */ 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812,
  /*  3195 */ 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082,
  /*  3210 */ 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216,
  /*  3225 */ 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618,
  /*  3240 */ 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971,
  /*  3255 */ 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240,
  /*  3270 */ 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437,
  /*  3285 */ 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3300 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3315 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 25126,
  /*  3330 */ 20921, 20921, 20921, 45766, 33227, 20921, 20921, 21751, 25130, 21774, 21787, 21793, 20921, 21852, 20571,
  /*  3345 */ 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964,
  /*  3360 */ 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127,
  /*  3375 */ 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331,
  /*  3390 */ 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457,
  /*  3405 */ 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961,
  /*  3420 */ 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694,
  /*  3435 */ 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881,
  /*  3450 */ 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103,
  /*  3465 */ 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359,
  /*  3480 */ 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593,
  /*  3495 */ 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003,
  /*  3510 */ 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224,
  /*  3525 */ 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433,
  /*  3540 */ 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3555 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3570 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 21809,
  /*  3585 */ 20921, 20921, 20921, 20921, 45766, 20921, 20921, 20921, 20921, 20921, 20541, 20686, 21832, 33977, 21868,
  /*  3600 */ 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199,
  /*  3615 */ 31149, 27623, 21937, 43499, 20921, 21758, 20921, 28516, 40647, 21899, 36295, 38455, 20921, 20921, 20921,
  /*  3630 */ 20921, 22389, 41200, 21918, 41200, 22540, 27274, 35204, 27274, 27274, 47616, 21937, 21936, 21937, 22575,
  /*  3645 */ 21955, 20921, 20921, 20921, 20921, 20921, 35602, 35703, 41075, 20921, 20921, 20921, 41199, 41200, 41200,
  /*  3660 */ 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 20921,
  /*  3675 */ 34993, 21993, 20921, 20921, 20921, 20921, 20921, 22012, 20921, 28136, 22046, 22067, 41200, 41200, 41200,
  /*  3690 */ 31623, 22084, 27274, 36670, 27274, 27274, 29452, 41806, 21937, 35952, 21937, 21937, 26097, 20921, 20921,
  /*  3705 */ 20921, 20921, 26498, 20921, 20921, 22390, 41200, 22130, 41200, 41200, 47605, 27274, 45882, 27274, 27274,
  /*  3720 */ 29345, 21937, 34478, 21937, 21937, 21938, 26100, 20921, 20921, 22150, 47493, 20921, 41196, 41200, 41200,
  /*  3735 */ 22170, 31631, 27274, 27274, 22190, 41458, 21937, 21937, 22210, 33827, 20921, 20921, 22230, 20921, 41197,
  /*  3750 */ 22254, 41200, 27272, 22272, 27274, 38124, 22289, 21937, 33335, 20921, 27439, 22306, 39103, 22327, 27662,
  /*  3765 */ 22348, 27274, 30236, 37494, 21938, 20921, 22521, 22386, 45240, 31147, 34897, 38122, 22406, 27064, 47434,
  /*  3780 */ 22430, 22454, 22482, 22517, 22537, 22556, 22574, 28137, 26987, 31635, 32883, 47208, 22438, 22591, 22390,
  /*  3795 */ 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3810 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3825 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3840 */ 20522, 20921, 20921, 20921, 20921, 45766, 20921, 20921, 20921, 27604, 20921, 20541, 38277, 38276, 40703,
  /*  3855 */ 22616, 20571, 20921, 20921, 20921, 18030, 20921, 35872, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  3870 */ 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077,
  /*  3885 */ 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315,
  /*  3900 */ 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629,
  /*  3915 */ 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503,
  /*  3930 */ 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636,
  /*  3945 */ 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949,
  /*  3960 */ 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160,
  /*  3975 */ 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161,
  /*  3990 */ 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534,
  /*  4005 */ 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620,
  /*  4020 */ 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179,
  /*  4035 */ 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372,
  /*  4050 */ 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4065 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4080 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4095 */ 20921, 20522, 22664, 20921, 20921, 20921, 20506, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 20921,
  /*  4110 */ 20921, 21852, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 22684, 20921, 20921, 20921, 20921,
  /*  4125 */ 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921, 20921, 36259, 20921, 38747,
  /*  4140 */ 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292,
  /*  4155 */ 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435,
  /*  4170 */ 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970,
  /*  4185 */ 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605,
  /*  4200 */ 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849,
  /*  4215 */ 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139,
  /*  4230 */ 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323,
  /*  4245 */ 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517,
  /*  4260 */ 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955,
  /*  4275 */ 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137,
  /*  4290 */ 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998,
  /*  4305 */ 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921,
  /*  4320 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4335 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4350 */ 20921, 20921, 20522, 22704, 20921, 20921, 20921, 45766, 20921, 20921, 20921, 28421, 20921, 20541, 20921,
  /*  4365 */ 20921, 38321, 22721, 22756, 20921, 20921, 20921, 18030, 20921, 41128, 20921, 20921, 20921, 20921, 20921,
  /*  4380 */ 20921, 20921, 41199, 31149, 27623, 21937, 43499, 20921, 20921, 20921, 28516, 20921, 20921, 22629, 20921,
  /*  4395 */ 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 22540, 27274, 27274, 27274, 27274, 47616, 21937,
  /*  4410 */ 21937, 21937, 21939, 22780, 20921, 20921, 20921, 20921, 20921, 21078, 20921, 20921, 20921, 20921, 20921,
  /*  4425 */ 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937,
  /*  4440 */ 21937, 27551, 22817, 22870, 20921, 20921, 20921, 20921, 42765, 20921, 20921, 20921, 28136, 41200, 41200,
  /*  4455 */ 41200, 41200, 41200, 30411, 27274, 27274, 27274, 27274, 27274, 41452, 21937, 21937, 21937, 21937, 21937,
  /*  4470 */ 26639, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 40959, 27274,
  /*  4485 */ 27274, 27274, 27274, 37860, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921,
  /*  4500 */ 41196, 41200, 41200, 41200, 22889, 27274, 27274, 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921,
  /*  4515 */ 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921,
  /*  4530 */ 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122,
  /*  4545 */ 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193,
  /*  4560 */ 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921,
  /*  4575 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4590 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4605 */ 20921, 20921, 20921, 20522, 30772, 20921, 20921, 20921, 21274, 42887, 20921, 20921, 45646, 30777, 20541,
  /*  4620 */ 22950, 22958, 20921, 18359, 22974, 20921, 20921, 20921, 22998, 20921, 35852, 20921, 20921, 20921, 20921,
  /*  4635 */ 20921, 20921, 20921, 20257, 18672, 24239, 23805, 23963, 18052, 26012, 44929, 38421, 20921, 20921, 36259,
  /*  4650 */ 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 23024, 24234, 23359, 23065, 18190, 23753,
  /*  4665 */ 23192, 23783, 23279, 23954, 23096, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921, 25033, 18375,
  /*  4680 */ 18399, 18435, 19629, 19039, 18457, 18441, 20296, 18678, 23114, 23715, 18678, 18184, 23184, 23287, 23144,
  /*  4695 */ 24014, 23805, 23171, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537, 18563, 18230,
  /*  4710 */ 18590, 18605, 18636, 18661, 23208, 24051, 23742, 23234, 23250, 23303, 24002, 23403, 23835, 23155, 23925,
  /*  4725 */ 23918, 23328, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055, 23344,
  /*  4740 */ 24064, 23218, 23375, 23312, 23431, 23457, 23470, 23486, 20417, 23502, 23971, 19235, 20921, 19272, 36109,
  /*  4755 */ 19307, 19323, 18161, 19389, 19359, 23544, 23128, 24156, 23568, 23584, 23597, 23415, 23613, 23629, 43291,
  /*  4770 */ 19498, 42517, 19534, 19550, 19593, 19618, 23678, 23708, 23731, 23769, 23799, 23822, 23851, 19835, 19871,
  /*  4785 */ 19909, 19955, 18620, 20356, 23889, 23517, 23905, 23941, 23987, 20026, 20042, 20058, 20074, 24038, 23528,
  /*  4800 */ 23389, 24080, 23080, 20195, 24096, 23265, 24127, 23039, 20256, 18677, 23806, 20273, 20327, 23552, 24022,
  /*  4815 */ 20343, 18173, 24111, 20388, 24143, 24172, 24221, 23692, 20403, 24255, 24271, 24283, 20921, 20921, 20921,
  /*  4830 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4845 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  4860 */ 20921, 20921, 20921, 20921, 20522, 40894, 20921, 20921, 20921, 45766, 20799, 20921, 20921, 34745, 34746,
  /*  4875 */ 24308, 24335, 24341, 20921, 21852, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20921, 20921,
  /*  4890 */ 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921, 20921,
  /*  4905 */ 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308, 18826,
  /*  4920 */ 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36505, 24357, 20921, 25033,
  /*  4935 */ 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211, 19689,
  /*  4950 */ 18482, 48229, 18970, 24373, 24389, 24430, 44713, 24794, 18521, 24784, 43632, 20921, 20921, 18537, 18563,
  /*  4965 */ 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748, 18766,
  /*  4980 */ 18784, 18802, 24456, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287, 19055,
  /*  4995 */ 24472, 19087, 19139, 19160, 19181, 24513, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921, 19272,
  /*  5010 */ 36109, 19307, 19323, 18161, 19389, 19359, 24553, 19375, 19405, 19446, 24527, 19375, 19405, 19446, 19462,
  /*  5025 */ 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799, 19835,
  /*  5040 */ 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074, 20090,
  /*  5055 */ 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312, 19667,
  /*  5070 */ 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921, 20921,
  /*  5085 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5100 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5115 */ 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20921, 20921, 20921, 20921,
  /*  5130 */ 20921, 28119, 21047, 21054, 19819, 24577, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921, 20921,
  /*  5145 */ 20921, 21189, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133, 20921,
  /*  5160 */ 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285, 18308,
  /*  5175 */ 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921,
  /*  5190 */ 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211,
  /*  5205 */ 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537,
  /*  5220 */ 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748,
  /*  5235 */ 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287,
  /*  5250 */ 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921,
  /*  5265 */ 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446,
  /*  5280 */ 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799,
  /*  5295 */ 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074,
  /*  5310 */ 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312,
  /*  5325 */ 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921,
  /*  5340 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5355 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5370 */ 20921, 20921, 20921, 20921, 20921, 20921, 24612, 41631, 20921, 20921, 20921, 45766, 20921, 20921, 20921,
  /*  5385 */ 20921, 20921, 20541, 21549, 21556, 20921, 21852, 24640, 20921, 20921, 20921, 18030, 20921, 35852, 20921,
  /*  5400 */ 20921, 20921, 33723, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929, 39133,
  /*  5415 */ 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285,
  /*  5430 */ 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322,
  /*  5445 */ 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498,
  /*  5460 */ 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921,
  /*  5475 */ 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730,
  /*  5490 */ 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024,
  /*  5505 */ 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235,
  /*  5520 */ 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405,
  /*  5535 */ 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705,
  /*  5550 */ 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058,
  /*  5565 */ 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273,
  /*  5580 */ 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497,
  /*  5595 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5610 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5625 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24674, 24683, 20921, 20921, 20921, 20624, 20921, 20921,
  /*  5640 */ 20921, 20921, 20921, 20541, 21583, 21590, 20921, 19783, 24703, 20921, 20921, 20921, 18030, 20921, 35852,
  /*  5655 */ 20921, 20921, 20921, 38446, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 24537, 18052, 26012, 44929,
  /*  5670 */ 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112,
  /*  5685 */ 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332,
  /*  5700 */ 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970,
  /*  5715 */ 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921,
  /*  5730 */ 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818,
  /*  5745 */ 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986,
  /*  5760 */ 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712,
  /*  5775 */ 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375,
  /*  5790 */ 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683,
  /*  5805 */ 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042,
  /*  5820 */ 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 24487, 20256, 18969, 18970,
  /*  5835 */ 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485,
  /*  5850 */ 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5865 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  5880 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24737, 20921, 20921, 20921, 20921, 45766, 38501,
  /*  5895 */ 20921, 20921, 20921, 38503, 24773, 20921, 38736, 20921, 24810, 20571, 20921, 20921, 20921, 18030, 20921,
  /*  5910 */ 35852, 20921, 24856, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 24876, 18052, 26012,
  /*  5925 */ 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246,
  /*  5940 */ 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921,
  /*  5955 */ 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224,
  /*  5970 */ 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157,
  /*  5985 */ 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800,
  /*  6000 */ 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954,
  /*  6015 */ 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197,
  /*  6030 */ 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216,
  /*  6045 */ 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732,
  /*  6060 */ 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026,
  /*  6075 */ 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969,
  /*  6090 */ 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469,
  /*  6105 */ 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6120 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6135 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766,
  /*  6150 */ 20921, 20921, 20921, 20921, 20921, 20541, 20921, 20921, 20921, 21852, 20571, 20921, 20921, 20921, 18030,
  /*  6165 */ 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052,
  /*  6180 */ 26012, 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222,
  /*  6195 */ 18246, 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921,
  /*  6210 */ 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477,
  /*  6225 */ 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784,
  /*  6240 */ 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782,
  /*  6255 */ 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412,
  /*  6270 */ 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176,
  /*  6285 */ 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446,
  /*  6300 */ 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705,
  /*  6315 */ 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978,
  /*  6330 */ 20026, 20042, 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256,
  /*  6345 */ 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565,
  /*  6360 */ 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6375 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6390 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921,
  /*  6405 */ 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919, 39187, 24940, 20921, 20921, 20921,
  /*  6420 */ 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600,
  /*  6435 */ 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200,
  /*  6450 */ 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921,
  /*  6465 */ 20921, 20921, 42764, 20921, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274,
  /*  6480 */ 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 24964, 24993, 20921, 20921, 20921,
  /*  6495 */ 20921, 42765, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274,
  /*  6510 */ 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26639, 20921, 20921, 20921, 20921, 28843, 20921,
  /*  6525 */ 20921, 22390, 41200, 41200, 41200, 41200, 43867, 27274, 27274, 27274, 27274, 39051, 21937, 21937, 21937,
  /*  6540 */ 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 22889, 27274, 27274,
  /*  6555 */ 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 25012, 20921, 41197, 41200, 41200, 27272, 27274,
  /*  6570 */ 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937,
  /*  6585 */ 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429,
  /*  6600 */ 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093,
  /*  6615 */ 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6630 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6645 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921,
  /*  6660 */ 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919, 39187, 24940, 20921, 20921,
  /*  6675 */ 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937,
  /*  6690 */ 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200,
  /*  6705 */ 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921,
  /*  6720 */ 20921, 20921, 20921, 42764, 20921, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178,
  /*  6735 */ 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 24964, 24993, 20921, 20921,
  /*  6750 */ 20921, 20921, 42765, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274,
  /*  6765 */ 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26639, 20921, 20921, 20921, 20921, 20921,
  /*  6780 */ 20921, 20921, 22390, 41200, 41200, 41200, 41200, 43867, 27274, 27274, 27274, 27274, 39051, 21937, 21937,
  /*  6795 */ 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 22889, 27274,
  /*  6810 */ 27274, 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272,
  /*  6825 */ 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120,
  /*  6840 */ 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937,
  /*  6855 */ 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802,
  /*  6870 */ 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6885 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  6900 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921,
  /*  6915 */ 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919, 39187, 24940, 20921,
  /*  6930 */ 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 31149, 27623,
  /*  6945 */ 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389,
  /*  6960 */ 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921,
  /*  6975 */ 20921, 20921, 20921, 20921, 42764, 46063, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200,
  /*  6990 */ 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 24964, 24993, 20921,
  /*  7005 */ 20921, 20921, 20921, 42765, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274,
  /*  7020 */ 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26639, 20921, 20921, 20921, 20921,
  /*  7035 */ 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 43867, 27274, 27274, 27274, 27274, 39051, 21937,
  /*  7050 */ 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 22889,
  /*  7065 */ 27274, 27274, 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200,
  /*  7080 */ 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274,
  /*  7095 */ 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633,
  /*  7110 */ 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881,
  /*  7125 */ 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7140 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7155 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921,
  /*  7170 */ 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919, 39187, 24940,
  /*  7185 */ 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 31149,
  /*  7200 */ 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7215 */ 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955,
  /*  7230 */ 20921, 20921, 20921, 20921, 20921, 42764, 20921, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200,
  /*  7245 */ 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 24964, 24993,
  /*  7260 */ 20921, 20921, 20921, 20921, 42765, 43693, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623,
  /*  7275 */ 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26639, 20921, 20921, 20921,
  /*  7290 */ 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 43867, 27274, 27274, 27274, 27274, 39051,
  /*  7305 */ 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200,
  /*  7320 */ 22889, 27274, 27274, 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200,
  /*  7335 */ 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274,
  /*  7350 */ 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988,
  /*  7365 */ 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150,
  /*  7380 */ 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7395 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7410 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919,
  /*  7425 */ 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919, 39187,
  /*  7440 */ 24940, 20921, 20921, 20921, 18030, 20921, 32842, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199,
  /*  7455 */ 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 28964, 20921, 20921, 20921, 20921,
  /*  7470 */ 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939,
  /*  7485 */ 21955, 20921, 20921, 20921, 20921, 20921, 42764, 20921, 20921, 20921, 20921, 20921, 41199, 41200, 41200,
  /*  7500 */ 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 24964,
  /*  7515 */ 24993, 20921, 20921, 20921, 20921, 42765, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200,
  /*  7530 */ 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26639, 20921, 20921,
  /*  7545 */ 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 43867, 27274, 27274, 27274, 27274,
  /*  7560 */ 39051, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200,
  /*  7575 */ 41200, 22889, 27274, 27274, 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197,
  /*  7590 */ 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987,
  /*  7605 */ 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389,
  /*  7620 */ 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390,
  /*  7635 */ 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7650 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7665 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7680 */ 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919,
  /*  7695 */ 39187, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7710 */ 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7725 */ 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937,
  /*  7740 */ 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 41200,
  /*  7755 */ 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823,
  /*  7770 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200,
  /*  7785 */ 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26097, 20921,
  /*  7800 */ 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605, 27274, 27274, 27274,
  /*  7815 */ 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200,
  /*  7830 */ 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921,
  /*  7845 */ 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200,
  /*  7860 */ 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064,
  /*  7875 */ 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925,
  /*  7890 */ 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7905 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7920 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7935 */ 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452,
  /*  7950 */ 27919, 39187, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  7965 */ 20921, 41199, 31149, 27623, 21937, 35648, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921,
  /*  7980 */ 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937,
  /*  7995 */ 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199,
  /*  8010 */ 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937,
  /*  8025 */ 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136, 41200, 41200, 41200,
  /*  8040 */ 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26097,
  /*  8055 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605, 27274, 27274,
  /*  8070 */ 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196,
  /*  8085 */ 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921, 20921,
  /*  8100 */ 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195,
  /*  8115 */ 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937,
  /*  8130 */ 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151,
  /*  8145 */ 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921,
  /*  8160 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8175 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8190 */ 20921, 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921,
  /*  8205 */ 39452, 27919, 27928, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8220 */ 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921,
  /*  8235 */ 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937,
  /*  8250 */ 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8265 */ 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937,
  /*  8280 */ 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136, 41200, 41200,
  /*  8295 */ 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937,
  /*  8310 */ 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605, 27274,
  /*  8325 */ 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921,
  /*  8340 */ 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921,
  /*  8355 */ 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921,
  /*  8370 */ 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122,
  /*  8385 */ 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193,
  /*  8400 */ 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921,
  /*  8415 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8430 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8445 */ 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541,
  /*  8460 */ 25031, 39452, 27919, 39187, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8475 */ 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921,
  /*  8490 */ 21457, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773,
  /*  8505 */ 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8520 */ 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937,
  /*  8535 */ 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136, 41200,
  /*  8550 */ 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937,
  /*  8565 */ 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605,
  /*  8580 */ 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921,
  /*  8595 */ 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921,
  /*  8610 */ 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921,
  /*  8625 */ 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274,
  /*  8640 */ 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883,
  /*  8655 */ 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921,
  /*  8670 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8685 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8700 */ 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921,
  /*  8715 */ 20541, 20921, 18036, 25049, 25058, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921,
  /*  8730 */ 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921,
  /*  8745 */ 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274,
  /*  8760 */ 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8775 */ 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937,
  /*  8790 */ 21937, 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136,
  /*  8805 */ 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937,
  /*  8820 */ 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200,
  /*  8835 */ 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921,
  /*  8850 */ 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099,
  /*  8865 */ 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921,
  /*  8880 */ 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147,
  /*  8895 */ 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635,
  /*  8910 */ 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921,
  /*  8925 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8940 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  8955 */ 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921,
  /*  8970 */ 20921, 20541, 20921, 39452, 27919, 39187, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921,
  /*  8985 */ 20921, 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921,
  /*  9000 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274,
  /*  9015 */ 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9030 */ 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973,
  /*  9045 */ 21937, 21937, 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9060 */ 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937,
  /*  9075 */ 21937, 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200,
  /*  9090 */ 41200, 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921,
  /*  9105 */ 37182, 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937,
  /*  9120 */ 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759,
  /*  9135 */ 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200,
  /*  9150 */ 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987,
  /*  9165 */ 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921,
  /*  9180 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9195 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9210 */ 20921, 20921, 20921, 20921, 20921, 20921, 25074, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921,
  /*  9225 */ 20921, 20921, 20541, 20921, 39452, 27919, 39187, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921,
  /*  9240 */ 20921, 20921, 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516,
  /*  9255 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274,
  /*  9270 */ 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9285 */ 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274,
  /*  9300 */ 21973, 21937, 21937, 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9315 */ 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937,
  /*  9330 */ 21937, 21937, 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200,
  /*  9345 */ 41200, 41200, 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921,
  /*  9360 */ 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937,
  /*  9375 */ 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937,
  /*  9390 */ 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138,
  /*  9405 */ 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137,
  /*  9420 */ 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913,
  /*  9435 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9450 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9465 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 37534, 20921, 20921,
  /*  9480 */ 20921, 20921, 20921, 20541, 39931, 39930, 44901, 25095, 20571, 20921, 20921, 20921, 18030, 20921, 35852,
  /*  9495 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929,
  /*  9510 */ 39133, 20921, 20921, 36259, 24885, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112,
  /*  9525 */ 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332,
  /*  9540 */ 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970,
  /*  9555 */ 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921,
  /*  9570 */ 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818,
  /*  9585 */ 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986,
  /*  9600 */ 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712,
  /*  9615 */ 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375,
  /*  9630 */ 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683,
  /*  9645 */ 19705, 19799, 19835, 25146, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042,
  /*  9660 */ 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970,
  /*  9675 */ 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485,
  /*  9690 */ 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9705 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9720 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20921,
  /*  9735 */ 20921, 20921, 20921, 20921, 20541, 40074, 40082, 20921, 25180, 20571, 20921, 20921, 20921, 18030, 20921,
  /*  9750 */ 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052, 26012,
  /*  9765 */ 44929, 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246,
  /*  9780 */ 20112, 18285, 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921,
  /*  9795 */ 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224,
  /*  9810 */ 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157,
  /*  9825 */ 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800,
  /*  9840 */ 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954,
  /*  9855 */ 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197,
  /*  9870 */ 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216,
  /*  9885 */ 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732,
  /*  9900 */ 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026,
  /*  9915 */ 25209, 20058, 20074, 20090, 20133, 20153, 20137, 25225, 20195, 20224, 20240, 20238, 21109, 20256, 18969,
  /*  9930 */ 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469,
  /*  9945 */ 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9960 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /*  9975 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 27947, 20921, 20921, 20921, 18269,
  /*  9990 */ 25241, 25267, 20921, 25257, 46693, 20541, 25284, 25299, 25312, 25328, 25363, 25379, 22648, 31992, 25396,
  /* 10005 */ 25484, 41666, 22830, 29228, 24977, 25500, 23441, 31720, 25527, 25562, 25604, 25639, 25700, 25716, 25747,
  /* 10020 */ 20921, 20921, 28516, 34505, 20921, 25766, 35730, 28012, 47278, 20921, 28167, 22389, 41200, 41200, 22068,
  /* 10035 */ 31701, 27274, 27274, 27274, 33545, 39773, 21937, 21937, 21937, 25783, 21955, 40820, 20921, 38623, 43755,
  /* 10050 */ 31346, 42764, 41318, 21522, 20921, 25459, 42599, 48264, 25834, 41200, 32054, 34868, 44962, 25855, 27274,
  /* 10065 */ 27274, 41750, 40208, 25885, 37103, 21937, 21937, 25925, 26086, 24964, 25941, 20921, 45203, 21197, 20921,
  /* 10080 */ 25978, 20921, 20921, 30616, 18130, 43067, 26028, 42412, 43475, 41200, 26048, 39557, 27274, 29339, 31024,
  /* 10095 */ 28552, 34909, 26072, 21937, 26118, 34180, 42125, 32394, 40920, 41108, 20921, 24757, 28940, 26138, 20921,
  /* 10110 */ 22390, 26174, 41200, 41200, 26203, 43867, 26285, 27274, 27274, 38001, 26301, 31659, 26336, 21937, 45436,
  /* 10125 */ 33259, 29376, 26357, 47476, 20921, 24624, 20921, 26373, 26404, 47233, 41200, 26462, 46581, 40970, 27274,
  /* 10140 */ 26478, 46015, 22494, 21937, 26099, 26494, 20921, 20921, 19512, 41197, 26514, 32203, 27272, 26535, 31203,
  /* 10155 */ 38124, 26555, 33906, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938,
  /* 10170 */ 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 26575, 26604,
  /* 10185 */ 42189, 26626, 26674, 26707, 26728, 26750, 26778, 31151, 22925, 26797, 31150, 32881, 26802, 39093, 38115,
  /* 10200 */ 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10215 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10230 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 22705, 26823, 20921, 20921,
  /* 10245 */ 18269, 20921, 20921, 20921, 20921, 20921, 26841, 19248, 19256, 26890, 26899, 24940, 20921, 20921, 20921,
  /* 10260 */ 18030, 20921, 20921, 20921, 20921, 32102, 20921, 20921, 20921, 20921, 41199, 31149, 32541, 21977, 22600,
  /* 10275 */ 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200,
  /* 10290 */ 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921,
  /* 10305 */ 20921, 42479, 42764, 47332, 20921, 47330, 20921, 20921, 41199, 41200, 41200, 41200, 33160, 39178, 27274,
  /* 10320 */ 27274, 27274, 27274, 26915, 21973, 21937, 21937, 21937, 28480, 26938, 24964, 24993, 20921, 20921, 20921,
  /* 10335 */ 20921, 42765, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274,
  /* 10350 */ 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26639, 20921, 20921, 26965, 20921, 20921, 32718,
  /* 10365 */ 43784, 33610, 26984, 41200, 41200, 41200, 27004, 27031, 27274, 27274, 27274, 47758, 33289, 21937, 21937,
  /* 10380 */ 21937, 29511, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 22889, 27274, 27274,
  /* 10395 */ 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274,
  /* 10410 */ 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937,
  /* 10425 */ 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429,
  /* 10440 */ 41198, 27273, 21938, 40008, 29316, 37412, 27053, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093,
  /* 10455 */ 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10470 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10485 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 27087, 20921,
  /* 10500 */ 20921, 18269, 20921, 27122, 20921, 25157, 20921, 27140, 27156, 27170, 27183, 27192, 24940, 20921, 20921,
  /* 10515 */ 21451, 27208, 20921, 24650, 20921, 20921, 21633, 20921, 20921, 27231, 20921, 27251, 27268, 31049, 22290,
  /* 10530 */ 41265, 20921, 27291, 20921, 28516, 27311, 43216, 20921, 43737, 45674, 29066, 27332, 25405, 28852, 28906,
  /* 10545 */ 41200, 41200, 31701, 27351, 27400, 27274, 27274, 46203, 34216, 21937, 21937, 21939, 21955, 29028, 20921,
  /* 10560 */ 20921, 32608, 20921, 30808, 20921, 30069, 27421, 20921, 20921, 36351, 44271, 44306, 44748, 41200, 39178,
  /* 10575 */ 37383, 27679, 27274, 39045, 27274, 21973, 27455, 36721, 27696, 27493, 32823, 24964, 24993, 20921, 20921,
  /* 10590 */ 38591, 20921, 24948, 20921, 48299, 20921, 28136, 41200, 41200, 41200, 41200, 38985, 31623, 27274, 27274,
  /* 10605 */ 27274, 27510, 27527, 34909, 21937, 21937, 28591, 21937, 27548, 27567, 27602, 20921, 20921, 45950, 20921,
  /* 10620 */ 47272, 20921, 22390, 41200, 41200, 37016, 41200, 43867, 27274, 27274, 27274, 27620, 39051, 21937, 21937,
  /* 10635 */ 21937, 47916, 21938, 26100, 20921, 27295, 20921, 20921, 31493, 27639, 41200, 27659, 41200, 22889, 27274,
  /* 10650 */ 27678, 27274, 22907, 21937, 27695, 21937, 25869, 20921, 20921, 20921, 27712, 42342, 41218, 27741, 47065,
  /* 10665 */ 29424, 27758, 28611, 36089, 27775, 26759, 20921, 21957, 20921, 41195, 41200, 35055, 27274, 27274, 27792,
  /* 10680 */ 21937, 42714, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937,
  /* 10695 */ 43429, 41198, 27273, 21938, 27810, 27826, 27864, 27880, 41193, 31151, 22925, 22390, 31150, 32881, 26802,
  /* 10710 */ 39093, 38115, 30592, 27905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10725 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10740 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 36946,
  /* 10755 */ 20921, 20921, 18269, 20921, 27944, 39987, 27963, 20921, 27982, 28033, 28047, 28060, 28069, 24940, 20921,
  /* 10770 */ 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 32579, 20921, 20921, 28085, 37236, 32436, 27623,
  /* 10785 */ 37095, 22600, 20921, 38464, 28101, 28516, 20921, 26263, 36997, 28135, 20921, 24903, 38630, 28154, 28189,
  /* 10800 */ 22051, 44278, 28227, 28211, 28250, 28268, 37448, 27511, 34607, 37500, 47624, 28284, 47924, 21955, 20921,
  /* 10815 */ 20921, 20921, 28308, 45100, 42764, 20921, 20921, 20921, 20921, 38554, 41199, 41200, 41200, 41200, 28328,
  /* 10830 */ 39178, 27274, 27274, 27274, 22558, 27274, 21973, 21937, 21937, 21937, 37801, 32823, 24964, 28348, 20921,
  /* 10845 */ 20921, 44196, 22668, 42765, 20921, 20921, 20921, 41936, 26417, 32635, 41200, 41200, 30653, 31623, 28373,
  /* 10860 */ 46145, 27274, 27274, 40551, 34909, 28397, 32555, 21937, 21937, 34250, 26639, 20921, 20921, 20921, 20921,
  /* 10875 */ 20921, 28419, 28437, 25684, 41200, 41200, 37356, 41200, 25588, 27274, 27274, 40448, 27274, 39051, 28454,
  /* 10890 */ 21937, 21937, 28475, 21938, 28496, 48326, 48159, 20921, 20921, 28513, 41196, 35305, 41366, 28532, 22889,
  /* 10905 */ 47143, 33507, 28550, 22907, 28568, 45029, 28589, 26099, 25539, 20921, 20921, 20921, 41197, 41200, 41200,
  /* 10920 */ 27272, 27274, 27274, 38124, 21937, 21937, 26759, 25015, 20921, 20921, 41195, 41200, 42085, 27274, 27274,
  /* 10935 */ 28607, 21937, 37778, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 28627, 22389, 26988, 31633,
  /* 10950 */ 21937, 47420, 36870, 42368, 37056, 46824, 39846, 29904, 39287, 41193, 31151, 22925, 22390, 31150, 32881,
  /* 10965 */ 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10980 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 10995 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921,
  /* 11010 */ 26825, 28662, 20921, 18269, 42447, 28681, 20921, 40360, 28704, 28722, 28753, 28769, 28782, 28791, 24940,
  /* 11025 */ 37584, 21013, 28807, 28868, 28922, 28956, 20921, 28986, 35504, 38027, 29015, 29051, 25993, 29087, 29103,
  /* 11040 */ 29153, 29201, 29217, 28970, 25193, 20921, 29244, 21816, 29282, 26856, 28932, 20921, 20921, 43959, 20921,
  /* 11055 */ 22389, 29302, 22332, 26691, 29361, 28381, 29402, 29422, 29440, 29468, 29492, 28403, 34187, 46507, 21955,
  /* 11070 */ 29527, 29548, 29564, 31109, 29588, 29623, 31340, 29035, 29639, 29663, 25546, 29694, 26388, 29722, 29773,
  /* 11085 */ 29807, 26187, 29843, 29893, 29928, 29944, 45461, 29960, 44685, 29976, 29992, 27466, 30043, 24964, 30094,
  /* 11100 */ 30130, 20921, 30152, 32143, 42765, 45916, 46476, 30176, 28017, 35418, 28202, 41200, 46420, 31737, 30226,
  /* 11115 */ 40977, 30252, 27274, 29757, 37625, 30273, 22370, 30297, 21937, 30316, 32805, 26639, 24687, 33576, 32726,
  /* 11130 */ 30344, 47693, 29572, 30363, 44022, 35018, 30379, 30398, 30435, 43867, 30474, 30493, 42966, 30514, 30540,
  /* 11145 */ 43391, 39884, 35255, 30577, 37899, 26100, 20921, 30204, 30632, 20921, 26874, 41196, 30649, 30669, 41200,
  /* 11160 */ 22889, 30685, 30703, 27274, 22907, 30719, 30737, 21937, 26099, 31466, 30753, 45304, 30793, 30824, 47849,
  /* 11175 */ 44555, 30840, 43878, 47891, 30890, 30328, 42747, 30929, 38525, 31954, 30965, 32418, 30988, 26987, 31040,
  /* 11190 */ 48099, 35092, 31065, 31083, 20921, 31099, 28138, 41200, 46357, 27274, 31125, 41513, 26233, 22389, 31143,
  /* 11205 */ 35084, 34242, 27366, 41198, 31167, 39530, 31527, 31183, 31219, 31241, 31272, 31288, 31325, 22390, 31150,
  /* 11220 */ 32881, 31362, 31392, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11235 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11250 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919,
  /* 11265 */ 20921, 20921, 31419, 20921, 18269, 31439, 31457, 20921, 31509, 19482, 31543, 31559, 31575, 31588, 31597,
  /* 11280 */ 24940, 20921, 39432, 20921, 18030, 20921, 20921, 20921, 20921, 35275, 20921, 32136, 35276, 35274, 31613,
  /* 11295 */ 29706, 27623, 31651, 39730, 20921, 26153, 20921, 28516, 26153, 20921, 20921, 38954, 20921, 25954, 40409,
  /* 11310 */ 20921, 22389, 31675, 41200, 41200, 31701, 30524, 27274, 27274, 27274, 43269, 35677, 21937, 21937, 21939,
  /* 11325 */ 21955, 20921, 20921, 20921, 20921, 20921, 42764, 20921, 20921, 20921, 28688, 20921, 41199, 41200, 41200,
  /* 11340 */ 41200, 31698, 39178, 27274, 27274, 27274, 32222, 27274, 21973, 21937, 21937, 21937, 28292, 32823, 24964,
  /* 11355 */ 24993, 20921, 20921, 20921, 20921, 42765, 20921, 20921, 31717, 28136, 41200, 41200, 27742, 41200, 41200,
  /* 11370 */ 31623, 27274, 27274, 36153, 27274, 27274, 34909, 21937, 21937, 42988, 21937, 21937, 26639, 20921, 20921,
  /* 11385 */ 20921, 20921, 20921, 20921, 47471, 22390, 41200, 41200, 41200, 31736, 43867, 27274, 27274, 27274, 48004,
  /* 11400 */ 39051, 21937, 21937, 21937, 45146, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200,
  /* 11415 */ 41200, 22889, 27274, 27274, 27274, 22907, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197,
  /* 11430 */ 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 39296, 20921, 20921, 20921, 41195, 31753, 26987,
  /* 11445 */ 44985, 27274, 38120, 31772, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389,
  /* 11460 */ 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390,
  /* 11475 */ 31150, 32881, 31791, 31819, 38115, 30007, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11490 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11505 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11520 */ 24919, 20921, 20921, 20921, 20921, 18269, 20921, 26320, 20921, 20921, 20921, 31846, 31882, 31890, 31906,
  /* 11535 */ 31915, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 24590, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11550 */ 41199, 31149, 27623, 21937, 22934, 31931, 20921, 20921, 28516, 20921, 20921, 20921, 42144, 20921, 20921,
  /* 11565 */ 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937,
  /* 11580 */ 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22238, 20921, 20921, 31950, 41199, 41200,
  /* 11595 */ 41200, 41200, 41200, 45524, 27274, 27274, 27274, 27274, 27274, 31970, 21937, 21937, 21937, 21937, 32823,
  /* 11610 */ 20921, 20921, 20921, 20921, 31990, 48125, 20921, 32008, 20921, 20921, 21735, 41200, 41200, 35179, 41200,
  /* 11625 */ 41200, 31623, 27274, 27274, 36663, 27274, 27274, 34909, 21937, 21937, 32028, 21937, 21937, 26097, 20921,
  /* 11640 */ 20921, 28834, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605, 27274, 27274, 27274,
  /* 11655 */ 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 21996, 20921, 29871, 20921, 41196, 41200,
  /* 11670 */ 41200, 32049, 31631, 27274, 27274, 47363, 41458, 21937, 21937, 32070, 26099, 32091, 18419, 32125, 20921,
  /* 11685 */ 32159, 44531, 32179, 32219, 42810, 32238, 32287, 33916, 32306, 27889, 20921, 28646, 36016, 26683, 41405,
  /* 11700 */ 32337, 27274, 32353, 41768, 35468, 32381, 20921, 22521, 32410, 47969, 32434, 32452, 29912, 31309, 27064,
  /* 11715 */ 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925,
  /* 11730 */ 22390, 31150, 32881, 26802, 39093, 32498, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11745 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11760 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 11775 */ 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452,
  /* 11790 */ 27919, 39187, 24940, 32577, 20921, 41560, 18030, 20921, 20921, 20921, 28737, 20921, 28735, 34845, 32595,
  /* 11805 */ 28733, 32630, 32651, 42194, 32678, 32697, 20921, 20921, 35806, 28516, 42619, 36963, 20921, 20921, 20921,
  /* 11820 */ 32742, 20921, 20921, 22389, 41200, 41200, 25839, 31701, 27274, 27274, 27274, 32760, 39773, 21937, 21937,
  /* 11835 */ 26559, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 46903, 45066, 20921, 41199,
  /* 11850 */ 41200, 41200, 41200, 41200, 35903, 27274, 27274, 27274, 27274, 27274, 32780, 21937, 21937, 21937, 21937,
  /* 11865 */ 28573, 20921, 21020, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 47200, 26610, 41200, 41200,
  /* 11880 */ 41200, 41200, 31623, 42671, 27274, 27274, 27274, 27274, 34909, 32800, 21937, 21937, 21937, 21937, 26097,
  /* 11895 */ 20921, 20921, 29071, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 46778, 47605, 27274, 27274,
  /* 11910 */ 27274, 39629, 29345, 21937, 21937, 21937, 21937, 32821, 26100, 20921, 20921, 32839, 20921, 20921, 41196,
  /* 11925 */ 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921, 20921,
  /* 11940 */ 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 18333, 20921, 20921, 32858,
  /* 11955 */ 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 43993, 41200, 31016, 27274, 32878, 36926,
  /* 11970 */ 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151,
  /* 11985 */ 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921,
  /* 12000 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12015 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12030 */ 20921, 20921, 24919, 20921, 20921, 40496, 20921, 18269, 27124, 46925, 29137, 48368, 48372, 32899, 32915,
  /* 12045 */ 32929, 32942, 32951, 24940, 20921, 20921, 20921, 32967, 20921, 20921, 20921, 24497, 20921, 24187, 21642,
  /* 12060 */ 32983, 25108, 33019, 33043, 27405, 33077, 33099, 20921, 20921, 20921, 33775, 20921, 41082, 33126, 20921,
  /* 12075 */ 20921, 20921, 26588, 26866, 22389, 33145, 38169, 30382, 33198, 48010, 47745, 27274, 34091, 33251, 33275,
  /* 12090 */ 36715, 38126, 33323, 21955, 22030, 20921, 33356, 38912, 33376, 27376, 20921, 33408, 48333, 33340, 30136,
  /* 12105 */ 41199, 33428, 41200, 33448, 44741, 33464, 29406, 27274, 34388, 33489, 33523, 21973, 42054, 21937, 42863,
  /* 12120 */ 25653, 27477, 20921, 20921, 20921, 20921, 22311, 33569, 33592, 20921, 45943, 20921, 28136, 33626, 41200,
  /* 12135 */ 41200, 41200, 33642, 33661, 37734, 27274, 27274, 35435, 39692, 31803, 33307, 21937, 21937, 32290, 32681,
  /* 12150 */ 26097, 20921, 33677, 33711, 41174, 33748, 33764, 48152, 47594, 41200, 33791, 43240, 40628, 46120, 27274,
  /* 12165 */ 47666, 36229, 46451, 33819, 33843, 43196, 33861, 33896, 33940, 33213, 44190, 18411, 31475, 33973, 33993,
  /* 12180 */ 38251, 37141, 34014, 34054, 34080, 46326, 34107, 34136, 34169, 44819, 34203, 34232, 34266, 20921, 20921,
  /* 12195 */ 47770, 34289, 34313, 34342, 34363, 38795, 34384, 34404, 34425, 34453, 34473, 26759, 34297, 25750, 20921,
  /* 12210 */ 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 34494, 22521, 28138, 34521, 34541, 30687, 42288,
  /* 12225 */ 47540, 27064, 37227, 26988, 31633, 21937, 45499, 34577, 46364, 32482, 28137, 26987, 31635, 32883, 41193,
  /* 12240 */ 31151, 22925, 38047, 34593, 34634, 26802, 39093, 38115, 25900, 32513, 30913, 20921, 20921, 20921, 20921,
  /* 12255 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12270 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12285 */ 20921, 20921, 20921, 24919, 20921, 20921, 19113, 20921, 18269, 20921, 20921, 20921, 20921, 19118, 20541,
  /* 12300 */ 45299, 36265, 34668, 34677, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12315 */ 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921, 20921,
  /* 12330 */ 20921, 40311, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 30498, 27274, 39773,
  /* 12345 */ 21937, 21937, 45431, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12360 */ 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937,
  /* 12375 */ 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136, 41200,
  /* 12390 */ 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937,
  /* 12405 */ 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605,
  /* 12420 */ 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921,
  /* 12435 */ 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921,
  /* 12450 */ 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921,
  /* 12465 */ 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274,
  /* 12480 */ 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883,
  /* 12495 */ 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921,
  /* 12510 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12525 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12540 */ 20921, 20921, 20921, 20921, 24919, 20921, 20921, 43557, 20921, 18269, 20921, 20921, 20921, 20921, 20921,
  /* 12555 */ 20541, 20921, 39452, 27919, 39187, 24940, 20921, 20921, 20921, 18030, 20921, 34967, 20921, 20921, 20921,
  /* 12570 */ 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921,
  /* 12585 */ 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274,
  /* 12600 */ 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12615 */ 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937,
  /* 12630 */ 21937, 21937, 21937, 32823, 20921, 24596, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136,
  /* 12645 */ 46297, 41200, 41200, 41200, 41200, 31623, 34693, 27274, 27274, 27274, 27274, 34909, 34713, 21937, 21937,
  /* 12660 */ 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200,
  /* 12675 */ 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921,
  /* 12690 */ 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099,
  /* 12705 */ 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921,
  /* 12720 */ 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147,
  /* 12735 */ 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635,
  /* 12750 */ 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921,
  /* 12765 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12780 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 12795 */ 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 40136, 20921, 18269, 20921, 20878, 33957, 38297,
  /* 12810 */ 38301, 34731, 34762, 34770, 34786, 34795, 24940, 21479, 20921, 20921, 18030, 20921, 34811, 34822, 20921,
  /* 12825 */ 20921, 34844, 43533, 46045, 33129, 34861, 34884, 45533, 34931, 46216, 34947, 20921, 20921, 24292, 20921,
  /* 12840 */ 20921, 27431, 18383, 20921, 34983, 20921, 41325, 41941, 43060, 35017, 35034, 46786, 35071, 34146, 26539,
  /* 12855 */ 34556, 35108, 44126, 21937, 39257, 41494, 21955, 29598, 20921, 20921, 20921, 20921, 35134, 20921, 20921,
  /* 12870 */ 20921, 20921, 20921, 30114, 35151, 35173, 28332, 41200, 35195, 43351, 32764, 27274, 38216, 27759, 31970,
  /* 12885 */ 35228, 42739, 21937, 35252, 30027, 20921, 20921, 22154, 22982, 20921, 20921, 35271, 41589, 20921, 20921,
  /* 12900 */ 28136, 41200, 41200, 41200, 35292, 35328, 31623, 27274, 27274, 36908, 39228, 35354, 34909, 21937, 21937,
  /* 12915 */ 32075, 43399, 30021, 26097, 28825, 20921, 20921, 38596, 20921, 20921, 20921, 22390, 28534, 41200, 41200,
  /* 12930 */ 41200, 47605, 27274, 35378, 27274, 27274, 29345, 21937, 41487, 21937, 21937, 21938, 35584, 21902, 20921,
  /* 12945 */ 33998, 35397, 48293, 47440, 35415, 41200, 40330, 26056, 35434, 27274, 41237, 35451, 35484, 21937, 37644,
  /* 12960 */ 26099, 27384, 20921, 33686, 20921, 41197, 37334, 41200, 27272, 42029, 27274, 38124, 35236, 21937, 26759,
  /* 12975 */ 20921, 35501, 20921, 41195, 41200, 38784, 27274, 43132, 38120, 21937, 40278, 20921, 22521, 28138, 41200,
  /* 12990 */ 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987,
  /* 13005 */ 31635, 32883, 45326, 35520, 35570, 37668, 35618, 35640, 26802, 39093, 35664, 25900, 30905, 30913, 20921,
  /* 13020 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13035 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13050 */ 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 36387, 20921, 18269, 20921, 30347, 20921,
  /* 13065 */ 20921, 35699, 35719, 35753, 35767, 35780, 35789, 24940, 28665, 20921, 20921, 18030, 20921, 21729, 20921,
  /* 13080 */ 20921, 20921, 35805, 27848, 46991, 28664, 35822, 26807, 27623, 40270, 22600, 20921, 20921, 35848, 28516,
  /* 13095 */ 20921, 43790, 43652, 20921, 32614, 20921, 20921, 35868, 29259, 43469, 41200, 35888, 35928, 27532, 27274,
  /* 13110 */ 42376, 33182, 39773, 44156, 21937, 35976, 39721, 35992, 20921, 36008, 25423, 20921, 20921, 20921, 20921,
  /* 13125 */ 46559, 20921, 20921, 20921, 40466, 38176, 31756, 41200, 41200, 39178, 45469, 36032, 26439, 27274, 27274,
  /* 13140 */ 21973, 36051, 21937, 36087, 21937, 32823, 20921, 20921, 36105, 47700, 20921, 20921, 43986, 30078, 28357,
  /* 13155 */ 20921, 28136, 41200, 36125, 41200, 29827, 41200, 33172, 22891, 36149, 27274, 47518, 27274, 31301, 39649,
  /* 13170 */ 36169, 21937, 29167, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200,
  /* 13185 */ 41200, 41200, 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921,
  /* 13200 */ 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937,
  /* 13215 */ 21937, 41542, 20921, 20921, 20921, 20921, 41197, 36187, 41200, 40102, 27274, 27274, 31127, 21937, 21937,
  /* 13230 */ 26759, 20921, 20921, 24751, 41195, 41200, 26987, 27274, 40219, 38120, 35485, 21938, 20921, 22521, 28138,
  /* 13245 */ 41200, 31147, 27274, 38122, 21937, 45578, 22389, 40431, 44096, 39314, 32253, 42405, 42258, 36204, 28137,
  /* 13260 */ 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 36245, 26802, 39093, 38115, 25900, 30905, 30913,
  /* 13275 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13290 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13305 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 37202, 20921, 20903, 20921, 48031,
  /* 13320 */ 36281, 36318, 36367, 36403, 36439, 36453, 36466, 36475, 24940, 28706, 36491, 40392, 36521, 19924, 20921,
  /* 13335 */ 18014, 44937, 20921, 36572, 25798, 36557, 36623, 36639, 36686, 35534, 36702, 36737, 36766, 36764, 20921,
  /* 13350 */ 19518, 36782, 24712, 35737, 36798, 36824, 36846, 20921, 26248, 36862, 44585, 36886, 28234, 31701, 47148,
  /* 13365 */ 46153, 27274, 36905, 39773, 44814, 36924, 32561, 21939, 21955, 36942, 25414, 38560, 36962, 20921, 20921,
  /* 13380 */ 31519, 20921, 36979, 20921, 36996, 38092, 37013, 41200, 41200, 41200, 39178, 37032, 27274, 42958, 27274,
  /* 13395 */ 27274, 37072, 44678, 21937, 37119, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 39383, 20921, 41595,
  /* 13410 */ 46253, 22688, 28136, 37138, 41200, 41200, 29820, 34347, 34064, 27274, 27274, 27274, 41008, 42678, 32365,
  /* 13425 */ 21937, 21937, 21937, 37157, 22106, 33953, 43683, 37176, 37198, 46817, 20921, 37218, 37252, 36343, 34027,
  /* 13440 */ 37288, 37312, 37350, 47605, 34153, 37372, 37399, 37439, 29345, 30721, 37464, 33924, 37480, 21938, 26100,
  /* 13455 */ 37516, 37550, 18892, 37566, 22842, 37600, 47090, 37690, 43315, 37622, 33536, 46863, 45828, 37641, 37086,
  /* 13470 */ 46603, 42062, 26099, 37660, 20921, 20921, 47782, 37684, 39609, 37706, 37729, 41724, 37750, 37773, 37960,
  /* 13485 */ 37794, 46519, 20921, 20921, 18919, 43087, 37817, 37843, 37876, 37915, 31225, 37942, 37976, 38024, 38698,
  /* 13500 */ 38043, 45124, 31147, 38063, 27794, 21937, 27064, 38083, 38108, 41760, 47563, 46466, 38142, 32527, 38192,
  /* 13515 */ 28882, 43030, 25623, 35118, 41193, 31151, 22925, 22390, 31150, 32881, 31830, 38240, 38115, 25900, 30905,
  /* 13530 */ 38267, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13545 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13560 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 25268, 38293, 18269, 20921,
  /* 13575 */ 27586, 38317, 20921, 20921, 38337, 38353, 38369, 38382, 38391, 38407, 38437, 23049, 38489, 38519, 38541,
  /* 13590 */ 28112, 31866, 21883, 38576, 38612, 38646, 38670, 38724, 38771, 38811, 38855, 38885, 38901, 20921, 20579,
  /* 13605 */ 38935, 20726, 20921, 35595, 20718, 27997, 43007, 38953, 20921, 28640, 22389, 41200, 38970, 47977, 43115,
  /* 13620 */ 27274, 35624, 39008, 39030, 39773, 21937, 39067, 22501, 41831, 21955, 20921, 30942, 20921, 25432, 20921,
  /* 13635 */ 39119, 39149, 25118, 25450, 22764, 32109, 39169, 27643, 31003, 41200, 33645, 45993, 39203, 37926, 39222,
  /* 13650 */ 27274, 42818, 39244, 21937, 39273, 39312, 21937, 39330, 39368, 39405, 20921, 39428, 30868, 20921, 20921,
  /* 13665 */ 20921, 20921, 20921, 39448, 41200, 41200, 39468, 39487, 41200, 31623, 27274, 36035, 27274, 39509, 27274,
  /* 13680 */ 34909, 21937, 32033, 21937, 39528, 21937, 26097, 20921, 20921, 23656, 21162, 20921, 20921, 20921, 22390,
  /* 13695 */ 41200, 41200, 41200, 41200, 39546, 27274, 27274, 27274, 27274, 30458, 21937, 21937, 21937, 21937, 44161,
  /* 13710 */ 26100, 39573, 20921, 20921, 20921, 20921, 39603, 36188, 41200, 41200, 39625, 39206, 27274, 27274, 39645,
  /* 13725 */ 37122, 21937, 21937, 31376, 20921, 20921, 20921, 20921, 29266, 34368, 41200, 43341, 47390, 27274, 39665,
  /* 13740 */ 47112, 21937, 34645, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 27099,
  /* 13755 */ 22521, 33360, 45234, 45350, 39691, 39708, 21937, 30855, 39746, 39797, 39813, 39862, 46649, 28894, 29328,
  /* 13770 */ 38869, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 37423, 39900, 39825, 38115, 25900,
  /* 13785 */ 32321, 39921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13800 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 13815 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921, 40787, 18269,
  /* 13830 */ 20921, 20921, 39947, 36423, 43439, 39969, 40003, 40024, 40037, 40046, 24940, 20921, 31441, 20921, 18030,
  /* 13845 */ 20921, 20921, 37272, 20921, 40062, 20921, 20921, 20921, 20921, 32862, 40098, 38825, 22214, 40118, 20921,
  /* 13860 */ 40152, 20921, 28516, 20921, 40839, 24721, 40177, 24894, 40176, 20921, 20921, 22389, 46109, 47241, 35312,
  /* 13875 */ 26218, 30257, 40193, 27274, 40242, 39773, 45176, 32474, 35683, 45186, 40294, 20921, 26269, 33235, 20921,
  /* 13890 */ 39980, 40129, 40310, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 40327, 41200, 39178, 27274, 27274,
  /* 13905 */ 34561, 27274, 27274, 21973, 21937, 21937, 33300, 21937, 32823, 40346, 40388, 45654, 20921, 20921, 20921,
  /* 13920 */ 40408, 41307, 20921, 28816, 28136, 41200, 36889, 40425, 41200, 41200, 26429, 27274, 26922, 40447, 27274,
  /* 13935 */ 27274, 32465, 21937, 44844, 21937, 21937, 21937, 26097, 20525, 20921, 20921, 20921, 20921, 36830, 20921,
  /* 13950 */ 22390, 41200, 41200, 44069, 41200, 29746, 27274, 27274, 40226, 27274, 27037, 21937, 21937, 33845, 21937,
  /* 13965 */ 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274,
  /* 13980 */ 41458, 21937, 21937, 21937, 26099, 20921, 26313, 20921, 20921, 40464, 41200, 41200, 27272, 27274, 27274,
  /* 13995 */ 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938,
  /* 14010 */ 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 40482, 40519, 22134, 40567, 40583, 47812, 40602,
  /* 14025 */ 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115,
  /* 14040 */ 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14055 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14070 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921,
  /* 14085 */ 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921, 39452, 27919, 39187, 24940, 20921, 20921, 20921,
  /* 14100 */ 18030, 20921, 20921, 24823, 20921, 20921, 32012, 38755, 25731, 32010, 40621, 39760, 22194, 41043, 43924,
  /* 14115 */ 40644, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200,
  /* 14130 */ 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 44473,
  /* 14145 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200, 45811, 27274,
  /* 14160 */ 27274, 27274, 27274, 27274, 40663, 21937, 21937, 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921,
  /* 14175 */ 20921, 20921, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274,
  /* 14190 */ 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14205 */ 20921, 22390, 41200, 41200, 41200, 41200, 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937,
  /* 14220 */ 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274,
  /* 14235 */ 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274,
  /* 14250 */ 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 44359, 26987, 41701, 27274, 38120, 33873,
  /* 14265 */ 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429,
  /* 14280 */ 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093,
  /* 14295 */ 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14310 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14325 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921,
  /* 14340 */ 46953, 18061, 20921, 20921, 25511, 20921, 20921, 40683, 40719, 40735, 40748, 40757, 24940, 28438, 28497,
  /* 14355 */ 40819, 18030, 40773, 21501, 30633, 21624, 40808, 40836, 40855, 40888, 40910, 40944, 40993, 40256, 41029,
  /* 14370 */ 41064, 20921, 20921, 20921, 41880, 41098, 29386, 41124, 41144, 41164, 20921, 20921, 21249, 41190, 41201,
  /* 14385 */ 41217, 29791, 33027, 41234, 33500, 22273, 45820, 41253, 41460, 21937, 39781, 41292, 21955, 20921, 20921,
  /* 14400 */ 20921, 30058, 27215, 20921, 20747, 46712, 46272, 20921, 41341, 41359, 21920, 41200, 41200, 41382, 41421,
  /* 14415 */ 27274, 42021, 27274, 34697, 41437, 41476, 21937, 41510, 21937, 48074, 41529, 20921, 20921, 20921, 36587,
  /* 14430 */ 30972, 41576, 40698, 20921, 41611, 41647, 41682, 37327, 27252, 29735, 38157, 41200, 40534, 41698, 44784,
  /* 14445 */ 41717, 41740, 27274, 41784, 21937, 33880, 41800, 41822, 21937, 41856, 41876, 20921, 20921, 41896, 41921,
  /* 14460 */ 20921, 26158, 48256, 30561, 41200, 41957, 41200, 47605, 46386, 41976, 44779, 27274, 29345, 27776, 35548,
  /* 14475 */ 29185, 21937, 21938, 41993, 30160, 39389, 20921, 20921, 20921, 46541, 41200, 41200, 39493, 42012, 27274,
  /* 14490 */ 27274, 46885, 42045, 21937, 21937, 42230, 26099, 47641, 20921, 20921, 20921, 42078, 41200, 41200, 42101,
  /* 14505 */ 27274, 27274, 42121, 21937, 21937, 42141, 40792, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120,
  /* 14520 */ 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937, 29118, 40372, 42933, 42160, 42210,
  /* 14535 */ 43429, 41198, 27273, 21938, 46531, 42246, 42280, 42304, 42338, 31151, 22925, 22390, 31150, 32881, 42358,
  /* 14550 */ 42392, 38115, 39082, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14565 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14580 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921, 20921,
  /* 14595 */ 20921, 44507, 18269, 42478, 18111, 42509, 42428, 42463, 42495, 42533, 42547, 42560, 42572, 42588, 20921,
  /* 14610 */ 19814, 31934, 18030, 20921, 20921, 42615, 20921, 22795, 32744, 22801, 24440, 42635, 42651, 33803, 42694,
  /* 14625 */ 42730, 41840, 32708, 33603, 28173, 28516, 33732, 42763, 20921, 20921, 20921, 33110, 36748, 20921, 27725,
  /* 14640 */ 42781, 44313, 41200, 31701, 32662, 27275, 42834, 27274, 45269, 42854, 35960, 21937, 21939, 21955, 19291,
  /* 14655 */ 20921, 33061, 20694, 42879, 20921, 20921, 20921, 26006, 20921, 20921, 41199, 42903, 42926, 41200, 41200,
  /* 14670 */ 42949, 38008, 34409, 27274, 27274, 35381, 21973, 42982, 44645, 21937, 21937, 29476, 20921, 20921, 20921,
  /* 14685 */ 43004, 25677, 29877, 36980, 24924, 40503, 41626, 38919, 43023, 41200, 41200, 43046, 44591, 35832, 27274,
  /* 14700 */ 27274, 28252, 45006, 38224, 37888, 21937, 21937, 40667, 44652, 29178, 39341, 27316, 20921, 24860, 20921,
  /* 14715 */ 20921, 27235, 29647, 43083, 41200, 41200, 43103, 41200, 47605, 27274, 27274, 40545, 43131, 29345, 21937,
  /* 14730 */ 21937, 36071, 36065, 21938, 26100, 20921, 43148, 46841, 26762, 20921, 41196, 44366, 39471, 41200, 43173,
  /* 14745 */ 47883, 39512, 27274, 43192, 48056, 37160, 21937, 26099, 20921, 24996, 31423, 34273, 41197, 41200, 41200,
  /* 14760 */ 27272, 27274, 27274, 38124, 21937, 21937, 26759, 43212, 33695, 30874, 43232, 41200, 43256, 27274, 43176,
  /* 14775 */ 38120, 21937, 34437, 43285, 23643, 23662, 43307, 26712, 27274, 25909, 21937, 27064, 22389, 43331, 27015,
  /* 14790 */ 22114, 43429, 41198, 27273, 21938, 27335, 41960, 44386, 32883, 30108, 43367, 43415, 43455, 36653, 43491,
  /* 14805 */ 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14820 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 14835 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919, 20921,
  /* 14850 */ 20921, 20921, 33003, 18269, 20921, 20921, 22022, 22028, 21283, 43515, 43549, 43573, 43586, 43595, 43611,
  /* 14865 */ 20921, 43648, 27578, 43668, 20921, 43717, 43733, 43753, 43771, 43806, 23873, 43822, 23866, 43856, 43894,
  /* 14880 */ 43910, 43940, 25666, 36302, 41860, 38473, 28516, 43956, 20921, 41996, 25341, 43975, 44009, 37577, 44038,
  /* 14895 */ 28999, 44054, 38992, 25577, 26519, 45872, 45380, 45858, 44092, 44112, 44142, 22414, 39675, 31974, 44177,
  /* 14910 */ 39352, 44212, 25164, 18082, 30191, 20921, 20921, 45591, 30766, 44231, 20599, 44259, 44294, 44329, 41200,
  /* 14925 */ 45984, 39178, 36219, 37991, 38207, 27274, 44382, 44402, 44418, 44434, 44450, 31775, 32823, 20921, 47296,
  /* 14940 */ 20921, 43526, 25468, 44470, 36808, 44489, 20921, 25079, 43701, 22256, 44523, 44547, 41200, 44571, 42791,
  /* 14955 */ 39014, 44607, 27274, 27274, 44623, 22361, 30281, 35554, 21937, 21937, 44668, 26097, 44701, 20921, 20984,
  /* 14970 */ 24658, 20921, 29532, 44499, 44729, 41397, 34326, 44076, 35047, 34038, 35362, 26446, 44764, 46174, 29345,
  /* 14985 */ 44800, 31067, 44835, 44860, 44880, 29858, 20921, 44896, 22873, 44917, 28312, 26781, 44953, 41200, 32163,
  /* 15000 */ 30419, 44978, 45001, 42105, 34915, 45022, 45045, 44864, 26099, 29286, 45065, 45082, 45098, 45116, 44344,
  /* 15015 */ 33432, 37854, 47731, 42838, 45140, 45162, 45049, 42313, 45202, 20921, 29607, 45219, 40605, 45256, 25615,
  /* 15030 */ 34120, 26734, 36171, 38839, 45285, 27071, 45320, 45342, 45366, 45396, 45417, 46236, 27064, 22389, 26988,
  /* 15045 */ 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 41048, 23008, 45452, 45485, 45515, 45549,
  /* 15060 */ 45565, 45613, 39093, 38115, 25900, 42175, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15075 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15090 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 24919,
  /* 15105 */ 20921, 20921, 20921, 25380, 45634, 20921, 20921, 45670, 20921, 20921, 45690, 45706, 45720, 45733, 45742,
  /* 15120 */ 24940, 20921, 20921, 20921, 45758, 20921, 45782, 20921, 20921, 19855, 20921, 20921, 20921, 20921, 45802,
  /* 15135 */ 45844, 35212, 29505, 45905, 21119, 20921, 20921, 28516, 20921, 20921, 38937, 45932, 20921, 20921, 20921,
  /* 15150 */ 41343, 22389, 45966, 41200, 41200, 26032, 33473, 27274, 27274, 27274, 35943, 46009, 21937, 21937, 30300,
  /* 15165 */ 46031, 46061, 47944, 29678, 20921, 20921, 20921, 35001, 46079, 20921, 20921, 36382, 41199, 46305, 45975,
  /* 15180 */ 46095, 41200, 46136, 27274, 46169, 46190, 48107, 41013, 21973, 32784, 26341, 48065, 46232, 34618, 20921,
  /* 15195 */ 20921, 36418, 20921, 46252, 20921, 20921, 20921, 46269, 20921, 28136, 41200, 46288, 41200, 41200, 41200,
  /* 15210 */ 42661, 27274, 46321, 27274, 27274, 27274, 22097, 22909, 21937, 21937, 21937, 21937, 26949, 20921, 40928,
  /* 15225 */ 20921, 20921, 20921, 20921, 20921, 46342, 41200, 41200, 41200, 41200, 47605, 46380, 27274, 27274, 27274,
  /* 15240 */ 29345, 37953, 21937, 21937, 21937, 21938, 27841, 20921, 20921, 22641, 31484, 20921, 31403, 46402, 41200,
  /* 15255 */ 41200, 46436, 27274, 27274, 27274, 46492, 21937, 21937, 21937, 46557, 48362, 20921, 20921, 20921, 41197,
  /* 15270 */ 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987,
  /* 15285 */ 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 42910, 31147, 46575, 38122, 46597, 27064, 22389,
  /* 15300 */ 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 30552, 46619, 46635, 22390,
  /* 15315 */ 31150, 32881, 26802, 22466, 46665, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15330 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15345 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15360 */ 24919, 20921, 20921, 20921, 20921, 46681, 47327, 40869, 46709, 20921, 40872, 46728, 47324, 25818, 46744,
  /* 15375 */ 46753, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15390 */ 46769, 39905, 27623, 42224, 22600, 20921, 20921, 46802, 28516, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15405 */ 46840, 20921, 22389, 29782, 41200, 31682, 31701, 30477, 27274, 27274, 46857, 39773, 35461, 21937, 33083,
  /* 15420 */ 21939, 21955, 20921, 20921, 20921, 20921, 20921, 25441, 20921, 20921, 20921, 32998, 20921, 41199, 41200,
  /* 15435 */ 36133, 41200, 41200, 39178, 27274, 27274, 46879, 27274, 27274, 21973, 21937, 34457, 21937, 21937, 32823,
  /* 15450 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200,
  /* 15465 */ 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937, 21937, 21937, 26097, 20921,
  /* 15480 */ 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200, 47605, 27274, 27274, 27274,
  /* 15495 */ 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 25962, 20921, 20921, 20921, 41196, 41200,
  /* 15510 */ 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 46901, 20921, 20921,
  /* 15525 */ 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200,
  /* 15540 */ 26987, 27274, 27274, 38120, 21937, 21938, 26968, 46919, 28138, 41200, 31147, 27274, 38122, 21937, 27064,
  /* 15555 */ 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925,
  /* 15570 */ 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15585 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15600 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15615 */ 20921, 24919, 20921, 20921, 20921, 20921, 46941, 20921, 25767, 20921, 27966, 19430, 46977, 47007, 47023,
  /* 15630 */ 47036, 47045, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15645 */ 20921, 41199, 47061, 35912, 27494, 30605, 20921, 20921, 20921, 28516, 20921, 20921, 20921, 20921, 41553,
  /* 15660 */ 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274, 39773, 21937, 21937,
  /* 15675 */ 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199,
  /* 15690 */ 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937, 21937,
  /* 15705 */ 32823, 20921, 20921, 20921, 20921, 20921, 20921, 34828, 20921, 20921, 20921, 28136, 47081, 41200, 41200,
  /* 15720 */ 41200, 41200, 37827, 27274, 27274, 27274, 27274, 27274, 44635, 21937, 21937, 21937, 21937, 21937, 26097,
  /* 15735 */ 20921, 20659, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 37713, 41200, 37606, 47605, 27274, 38067,
  /* 15750 */ 27274, 41977, 29345, 21937, 21937, 47106, 21937, 47128, 26100, 20921, 20921, 20921, 20921, 20921, 41196,
  /* 15765 */ 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921, 20921,
  /* 15780 */ 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921, 41195,
  /* 15795 */ 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122, 21937,
  /* 15810 */ 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193, 31151,
  /* 15825 */ 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921, 20921,
  /* 15840 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15855 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15870 */ 20921, 20921, 25074, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541, 20921,
  /* 15885 */ 22740, 47164, 47173, 24940, 20921, 20921, 20921, 47189, 20921, 21615, 20921, 20921, 20921, 41148, 20921,
  /* 15900 */ 19939, 35399, 47224, 45618, 27623, 42708, 22600, 20921, 20921, 20921, 47257, 20921, 47294, 47312, 20921,
  /* 15915 */ 20921, 20921, 20921, 20921, 22389, 41200, 22174, 41200, 47348, 27274, 27274, 47384, 45889, 39773, 21937,
  /* 15930 */ 26122, 21937, 47406, 47456, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 15945 */ 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937, 21937, 21937,
  /* 15960 */ 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 47492, 20921, 20921, 28136, 41200, 41200,
  /* 15975 */ 46411, 41200, 41200, 30448, 27274, 27274, 47509, 27274, 27274, 43382, 21937, 21937, 47534, 21937, 21937,
  /* 15990 */ 26097, 42441, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 37296, 41200, 41200, 41200, 47605, 45401,
  /* 16005 */ 27274, 27274, 27274, 29345, 21937, 47556, 21937, 21937, 21938, 26100, 20921, 20921, 20921, 20921, 20921,
  /* 16020 */ 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099, 20921, 20921,
  /* 16035 */ 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921, 20921, 20921,
  /* 16050 */ 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147, 27274, 38122,
  /* 16065 */ 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883, 41193,
  /* 16080 */ 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921, 20921,
  /* 16095 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16110 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16125 */ 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921, 20541,
  /* 16140 */ 20921, 39452, 27919, 39187, 47579, 20921, 20921, 20921, 18030, 20921, 20921, 47640, 20921, 20921, 20921,
  /* 16155 */ 20921, 20921, 39153, 41199, 47657, 33553, 21937, 47682, 20921, 35135, 20921, 28516, 20921, 20921, 20921,
  /* 16170 */ 20921, 20921, 20921, 20921, 45786, 22389, 41200, 41200, 41200, 47716, 27274, 27274, 27274, 47368, 39773,
  /* 16185 */ 21937, 21937, 21937, 47798, 21955, 44215, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 30210, 20921,
  /* 16200 */ 20921, 41199, 47840, 41200, 32194, 41200, 39178, 42264, 27274, 27274, 47865, 27274, 21973, 39875, 21937,
  /* 16215 */ 28459, 21937, 32823, 20921, 20921, 32263, 20921, 20921, 20921, 20921, 20921, 29131, 20921, 28136, 41200,
  /* 16230 */ 35157, 41200, 41200, 41200, 35338, 27274, 42801, 27274, 27274, 27274, 37044, 21937, 47907, 21937, 21937,
  /* 16245 */ 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 47940, 22390, 41200, 41200, 47960, 41200, 47993,
  /* 16260 */ 27274, 27274, 47874, 27274, 37757, 21937, 21937, 44454, 21937, 34715, 26100, 20921, 20921, 48026, 20921,
  /* 16275 */ 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 33057, 20921,
  /* 16290 */ 20921, 19476, 20921, 39837, 41200, 41200, 31194, 27274, 27274, 48047, 21937, 21937, 26759, 20921, 19849,
  /* 16305 */ 20921, 41195, 34525, 26987, 27274, 48090, 38120, 40586, 21938, 20921, 22521, 28138, 41200, 31147, 27274,
  /* 16320 */ 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635, 32883,
  /* 16335 */ 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921, 20921,
  /* 16350 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16365 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16380 */ 20921, 20921, 20921, 20921, 24919, 20921, 20921, 20921, 20921, 18269, 20921, 20921, 20921, 20921, 20921,
  /* 16395 */ 20541, 48123, 39452, 27919, 39187, 24940, 20921, 20921, 20921, 18030, 20921, 20921, 20921, 20921, 20921,
  /* 16410 */ 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 22600, 20921, 20921, 20921, 28516, 20921, 20921,
  /* 16425 */ 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 31701, 27274, 27274, 27274, 27274,
  /* 16440 */ 39773, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16455 */ 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274, 27274, 27274, 21973, 21937,
  /* 16470 */ 21937, 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 28136,
  /* 16485 */ 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274, 34909, 21937, 21937, 21937,
  /* 16500 */ 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390, 41200, 41200, 41200, 41200,
  /* 16515 */ 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938, 26100, 20921, 20921, 20921,
  /* 16530 */ 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458, 21937, 21937, 21937, 26099,
  /* 16545 */ 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124, 21937, 21937, 26759, 20921,
  /* 16560 */ 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921, 22521, 28138, 41200, 31147,
  /* 16575 */ 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273, 21938, 28137, 26987, 31635,
  /* 16590 */ 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900, 30905, 30913, 20921, 20921,
  /* 16605 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16620 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16635 */ 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 47824, 36607, 36605, 36596, 36596,
  /* 16650 */ 41905, 48141, 20921, 40160, 48175, 48187, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 41659, 20921,
  /* 16665 */ 20921, 20921, 20921, 20921, 20921, 20257, 19333, 20117, 18970, 18704, 18052, 26012, 44929, 39133, 20921,
  /* 16680 */ 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 48203, 20112, 18285, 18308,
  /* 16695 */ 18826, 19716, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322, 20921,
  /* 16710 */ 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498, 19211,
  /* 16725 */ 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921, 18537,
  /* 16740 */ 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730, 18748,
  /* 16755 */ 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024, 20287,
  /* 16770 */ 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235, 20921,
  /* 16785 */ 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405, 19446,
  /* 16800 */ 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705, 19799,
  /* 16815 */ 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058, 20074,
  /* 16830 */ 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273, 20312,
  /* 16845 */ 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497, 20921,
  /* 16860 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16875 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 16890 */ 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20921, 20921, 43623,
  /* 16905 */ 20921, 20921, 20541, 41276, 48245, 20921, 48280, 20571, 20921, 20921, 20921, 18030, 20921, 35852, 20921,
  /* 16920 */ 20921, 20921, 20921, 21671, 20921, 21669, 20257, 18964, 18505, 18970, 19774, 18052, 26012, 44929, 39133,
  /* 16935 */ 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 18246, 20112, 18285,
  /* 16950 */ 18308, 18826, 20103, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332, 42322,
  /* 16965 */ 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970, 18498,
  /* 16980 */ 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921, 20921,
  /* 16995 */ 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818, 18730,
  /* 17010 */ 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986, 19024,
  /* 17025 */ 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712, 19235,
  /* 17040 */ 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375, 19405,
  /* 17055 */ 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683, 19705,
  /* 17070 */ 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042, 20058,
  /* 17085 */ 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970, 20273,
  /* 17100 */ 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485, 20497,
  /* 17115 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17130 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17145 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 21843, 20921, 20921,
  /* 17160 */ 20921, 20921, 20921, 48315, 43834, 43840, 20921, 48349, 20571, 20921, 20921, 20921, 18030, 20921, 35852,
  /* 17175 */ 26650, 20921, 20921, 21700, 20921, 20921, 21698, 20257, 18964, 18505, 18970, 18704, 18052, 26012, 44929,
  /* 17190 */ 39133, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222, 48388, 20112,
  /* 17205 */ 18285, 18308, 18826, 19577, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921, 20921, 36332,
  /* 17220 */ 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477, 48224, 18970,
  /* 17235 */ 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784, 43157, 20921,
  /* 17250 */ 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782, 18800, 18818,
  /* 17265 */ 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412, 18954, 18986,
  /* 17280 */ 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176, 19197, 18712,
  /* 17295 */ 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446, 48216, 19375,
  /* 17310 */ 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705, 19732, 19683,
  /* 17325 */ 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978, 20026, 20042,
  /* 17340 */ 20058, 20074, 20090, 20133, 20153, 20137, 20179, 20195, 20224, 20240, 20238, 19420, 20256, 18969, 18970,
  /* 17355 */ 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565, 20469, 20485,
  /* 17370 */ 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17385 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17400 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20522, 20921, 20921, 20921, 20921, 45766, 20921,
  /* 17415 */ 20921, 20921, 20921, 20921, 20541, 20921, 20921, 20921, 18547, 24940, 20921, 20921, 20921, 18030, 20921,
  /* 17430 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 41199, 31149, 27623, 21937, 43499, 20921, 20921,
  /* 17445 */ 20921, 28516, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22389, 41200, 41200, 41200, 22540,
  /* 17460 */ 27274, 27274, 27274, 27274, 47616, 21937, 21937, 21937, 21939, 21955, 20921, 20921, 20921, 20921, 20921,
  /* 17475 */ 20921, 20921, 20921, 20921, 20921, 20921, 41199, 41200, 41200, 41200, 41200, 39178, 27274, 27274, 27274,
  /* 17490 */ 27274, 27274, 21973, 21937, 21937, 21937, 21937, 32823, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17505 */ 20921, 20921, 20921, 28136, 41200, 41200, 41200, 41200, 41200, 31623, 27274, 27274, 27274, 27274, 27274,
  /* 17520 */ 34909, 21937, 21937, 21937, 21937, 21937, 26097, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 22390,
  /* 17535 */ 41200, 41200, 41200, 41200, 47605, 27274, 27274, 27274, 27274, 29345, 21937, 21937, 21937, 21937, 21938,
  /* 17550 */ 26100, 20921, 20921, 20921, 20921, 20921, 41196, 41200, 41200, 41200, 31631, 27274, 27274, 27274, 41458,
  /* 17565 */ 21937, 21937, 21937, 26099, 20921, 20921, 20921, 20921, 41197, 41200, 41200, 27272, 27274, 27274, 38124,
  /* 17580 */ 21937, 21937, 26759, 20921, 20921, 20921, 41195, 41200, 26987, 27274, 27274, 38120, 21937, 21938, 20921,
  /* 17595 */ 22521, 28138, 41200, 31147, 27274, 38122, 21937, 27064, 22389, 26988, 31633, 21937, 43429, 41198, 27273,
  /* 17610 */ 21938, 28137, 26987, 31635, 32883, 41193, 31151, 22925, 22390, 31150, 32881, 26802, 39093, 38115, 25900,
  /* 17625 */ 30905, 30913, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17640 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17655 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17670 */ 20921, 20921, 22849, 20921, 20921, 20921, 24199, 24205, 23098, 22854, 34961, 20921, 20921, 20921, 20921,
  /* 17685 */ 20921, 35852, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20257, 18964, 18505, 18970, 18704, 18052,
  /* 17700 */ 26012, 44929, 37266, 20921, 20921, 36259, 20921, 38747, 18077, 18098, 18127, 18146, 18461, 18206, 18222,
  /* 17715 */ 48203, 20112, 18285, 18308, 18826, 19716, 19219, 18292, 18315, 18833, 18331, 20921, 18349, 20921, 20921,
  /* 17730 */ 20921, 36332, 42322, 20921, 25033, 18375, 18399, 18435, 19629, 19039, 18457, 18441, 18645, 18970, 18477,
  /* 17745 */ 48224, 18970, 18498, 19211, 19689, 18482, 48229, 18970, 18503, 20921, 46961, 44713, 24794, 18521, 24784,
  /* 17760 */ 43157, 20921, 20921, 18537, 18563, 18230, 18590, 18605, 18636, 18661, 18694, 18728, 18746, 18764, 18782,
  /* 17775 */ 18800, 18818, 18730, 18748, 18766, 18784, 18802, 18849, 30949, 18865, 18881, 25812, 18908, 44243, 39412,
  /* 17790 */ 18954, 18986, 19024, 20287, 19055, 19071, 19087, 19139, 19160, 19181, 19103, 19082, 19134, 19155, 19176,
  /* 17805 */ 19197, 18712, 19235, 20921, 19272, 36109, 19307, 19323, 18161, 19389, 19359, 48216, 19375, 19405, 19446,
  /* 17820 */ 48216, 19375, 19405, 19446, 19462, 43291, 19498, 42517, 19534, 19550, 19593, 19618, 19645, 19683, 19705,
  /* 17835 */ 19732, 19683, 19705, 19799, 19835, 19871, 19909, 19955, 18620, 20208, 20003, 19971, 19994, 20010, 19978,
  /* 17850 */ 20026, 48419, 20058, 20074, 20090, 20133, 20153, 20137, 48403, 20195, 20224, 20240, 20238, 18261, 20256,
  /* 17865 */ 18969, 18970, 20273, 20312, 19667, 24561, 20343, 18998, 20372, 20388, 20433, 20437, 18574, 20453, 19565,
  /* 17880 */ 20469, 20485, 20497, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17895 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921,
  /* 17910 */ 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 20921, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0,
  /* 17930 */ 94465, 94465, 94465, 94465, 0, 98562, 98562, 73728, 77824, 98562, 98562, 98562, 98562, 98562, 98562,
  /* 17945 */ 69632, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 98562, 98562,
  /* 17964 */ 94465, 94465, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 0,
  /* 17979 */ 98562, 94465, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562, 98562,
  /* 17994 */ 98562, 98562, 98562, 98562, 324, 98562, 98562, 94465, 98562, 98562, 98562, 98562, 94465, 98562, 259, 260,
  /* 18010 */ 0, 2138112, 263, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0,
  /* 18039 */ 0, 0, 0, 0, 0, 0, 0, 0, 482, 504, 482, 504, 482, 0, 0, 0, 0, 2408448, 2416640, 0, 0, 2441216, 0, 0, 0, 0,
  /* 18065 */ 0, 0, 0, 0, 324, 0, 0, 253, 0, 0, 0, 307, 0, 0, 0, 0, 2408448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
  /* 18095 */ 0, 0, 0, 0, 2609152, 0, 2682880, 2699264, 0, 0, 2756608, 2789376, 2813952, 0, 2846720, 2904064, 0, 0, 0,
  /* 18114 */ 0, 0, 335, 0, 0, 0, 0, 327, 0, 344, 0, 310, 0, 0, 2789376, 2904064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18143 */ 0, 2006, 482, 0, 2904064, 0, 0, 0, 0, 0, 0, 0, 2715648, 2183168, 2183168, 2183168, 2408448, 2416640,
  /* 18161 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2535424, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18172 */ 2621440, 2183168, 2183168, 2183168, 2183168, 2130750, 2130750, 2130750, 2130750, 2130750, 2577214,
  /* 18183 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 3109694, 2130750, 2130750, 2130750, 2130750,
  /* 18194 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 3101502, 2130750, 2130750, 2130750, 2130750,
  /* 18205 */ 2130750, 2183168, 2183168, 2183168, 2682880, 2183168, 2699264, 2183168, 2707456, 2183168, 2715648,
  /* 18216 */ 2756608, 2183168, 2183168, 2789376, 2183168, 2813952, 2183168, 2183168, 2846720, 2183168, 2183168,
  /* 18227 */ 2183168, 2904064, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18238 */ 2445312, 2449408, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3100672,
  /* 18249 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 0, 831, 2129920,
  /* 18262 */ 0, 0, 0, 0, 0, 2732032, 2863104, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 253, 0, 0, 0, 0, 2129920, 2129920,
  /* 18287 */ 2609152, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2682880, 2129920, 2699264, 2129920,
  /* 18298 */ 2707456, 2129920, 2715648, 2756608, 2129920, 2129920, 2129920, 2789376, 2129920, 2813952, 2756608,
  /* 18309 */ 2129920, 2129920, 2129920, 2789376, 2129920, 2813952, 2129920, 2129920, 2846720, 2129920, 2129920,
  /* 18320 */ 2129920, 2129920, 2904064, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18331 */ 2129920, 2187264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2995, 0, 0, 0, 2600960, 0, 0, 0, 0, 0,
  /* 18358 */ 2772992, 0, 0, 0, 0, 0, 0, 0, 1, 16386, 3, 0, 0, 2187819, 0, 0, 0, 0, 0, 2568192, 0, 0, 0, 0, 2822144, 0,
  /* 18384 */ 0, 0, 0, 0, 0, 0, 0, 0, 1001, 1000, 0, 0, 0, 0, 0, 0, 0, 2875392, 0, 0, 0, 0, 2375680, 2396160, 0, 0,
  /* 18410 */ 2822144, 0, 0, 0, 0, 0, 0, 2593, 2594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818, 0, 0, 0, 0, 0, 2821, 0, 2183168,
  /* 18437 */ 2183168, 2183168, 2392064, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18448 */ 2183168, 2183168, 2183168, 3108864, 2183168, 2183168, 2183168, 2183168, 2183168, 2797568, 2183168,
  /* 18459 */ 2822144, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18470 */ 2183168, 2183168, 2183168, 2609152, 2183168, 2183168, 2183168, 2568192, 2129920, 2129920, 2129920,
  /* 18481 */ 2129920, 2129920, 2600960, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2646016, 2129920,
  /* 18492 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18503 */ 3108864, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18514 */ 2129920, 2129920, 2129920, 2129920, 0, 2129920, 2129920, 0, 0, 0, 3170304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18535 */ 0, 2781184, 0, 0, 0, 2895872, 0, 3190784, 2449408, 0, 0, 2703360, 0, 0, 0, 0, 0, 0, 0, 1, 16386, 3, 82171,
  /* 18558 */ 82171, 253, 0, 0, 0, 0, 0, 2998272, 3190784, 0, 2674688, 0, 0, 3198976, 0, 0, 0, 0, 0, 0, 2183168,
  /* 18579 */ 2510848, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 2510848, 2129920, 2129920, 2129920,
  /* 18590 */ 2506752, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2584576, 2183168,
  /* 18601 */ 2183168, 2183168, 2183168, 2625536, 2183168, 2183168, 2183168, 2183168, 2183168, 2703360, 2183168,
  /* 18612 */ 2183168, 2183168, 2183168, 2183168, 2752512, 2760704, 2781184, 2805760, 2183168, 2183168, 2183168,
  /* 18623 */ 2183168, 2572288, 2183168, 2596864, 2629632, 2183168, 2183168, 2678784, 2740224, 2183168, 2183168,
  /* 18634 */ 2183168, 2916352, 2183168, 2183168, 2867200, 2895872, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 18645 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 0, 2129920, 2129920, 2129920,
  /* 18657 */ 2392064, 2129920, 2129920, 2129920, 3022848, 2183168, 3047424, 2183168, 2183168, 2183168, 2183168,
  /* 18668 */ 3084288, 2183168, 2183168, 3117056, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2130750,
  /* 18679 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 18690 */ 2130750, 2130750, 2130750, 2130750, 2183168, 2183168, 2183168, 2183168, 3190784, 2183168, 0, 0, 0, 0,
  /* 18704 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18725 */ 0, 2801664, 2830336, 2129920, 2129920, 2129920, 2129920, 2445312, 2449408, 2129920, 2129920, 2129920,
  /* 18737 */ 2129920, 2129920, 2129920, 2506752, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18748 */ 2129920, 2129920, 2129920, 2584576, 2129920, 2129920, 2129920, 2129920, 2625536, 2129920, 2129920,
  /* 18759 */ 2129920, 2129920, 2129920, 2129920, 2703360, 2129920, 2703360, 2129920, 2129920, 2129920, 2129920,
  /* 18770 */ 2129920, 2752512, 2760704, 2129920, 2781184, 2805760, 2129920, 2129920, 2129920, 2867200, 2129920,
  /* 18781 */ 2895872, 2129920, 2895872, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18792 */ 2129920, 2129920, 2129920, 2129920, 3022848, 2129920, 3047424, 2129920, 3047424, 2129920, 2129920,
  /* 18803 */ 2129920, 2129920, 3084288, 2129920, 2129920, 3117056, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18814 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3190784, 2129920, 0, 0, 0, 0, 2129920, 2129920,
  /* 18828 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 3100672, 2129920, 2129920,
  /* 18839 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 3190784, 2129920,
  /* 18851 */ 2129920, 2129920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2457600, 2461696, 0, 2908160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18876 */ 3145728, 3153920, 0, 0, 3203072, 3018752, 0, 0, 0, 0, 0, 3055616, 2633728, 0, 0, 2793472, 0, 0, 0, 0, 0,
  /* 18897 */ 0, 0, 2608, 0, 2610, 0, 0, 0, 2613, 0, 0, 2670592, 2719744, 0, 0, 2514944, 2691072, 0, 3174400, 0, 0,
  /* 18918 */ 2560000, 0, 0, 0, 0, 0, 0, 0, 3012, 0, 0, 3015, 0, 0, 0, 0, 0, 0, 0, 115111, 423, 423, 423, 423, 423, 423,
  /* 18944 */ 423, 423, 115111, 423, 423, 0, 0, 0, 0, 0, 0, 2666496, 0, 0, 0, 0, 0, 0, 3096576, 2371584, 2183168,
  /* 18965 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 18976 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2183168,
  /* 18987 */ 2437120, 2183168, 2457600, 2465792, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2514944,
  /* 18998 */ 2183168, 2183168, 2183168, 2183168, 2129920, 2129920, 2129920, 2129920, 2129920, 2576384, 2129920,
  /* 19009 */ 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 2129920, 0, 0, 0, 259, 0, 0, 0, 2183168, 2183168,
  /* 19026 */ 2183168, 2588672, 2183168, 2613248, 2183168, 2183168, 2633728, 2183168, 2183168, 2183168, 2691072,
  /* 19037 */ 2183168, 2719744, 2183168, 2183168, 2183168, 2183168, 2646016, 2183168, 2183168, 2183168, 2183168,
  /* 19048 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2785280, 2183168, 2183168, 3018752, 2183168,
  /* 19059 */ 2183168, 3055616, 2183168, 2183168, 3104768, 2183168, 2183168, 3125248, 2183168, 2183168, 2183168,
  /* 19070 */ 3153920, 2183168, 2183168, 3174400, 3178496, 2183168, 0, 0, 0, 0, 0, 0, 2371584, 2129920, 2129920,
  /* 19085 */ 2404352, 2129920, 2129920, 2129920, 2129920, 2129920, 2437120, 2129920, 2457600, 2465792, 2129920,
  /* 19096 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2514944, 2129920, 3125248, 2129920, 2129920, 2129920,
  /* 19107 */ 3153920, 2129920, 2129920, 3174400, 3178496, 2129920, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19130 */ 293, 293, 0, 0, 2129920, 2129920, 2129920, 2514944, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19144 */ 2129920, 2588672, 2129920, 2613248, 2129920, 2129920, 2633728, 2129920, 2129920, 2129920, 2691072,
  /* 19155 */ 2633728, 2129920, 2129920, 2129920, 2691072, 2129920, 2719744, 2129920, 2129920, 2129920, 2129920,
  /* 19166 */ 2129920, 2129920, 2129920, 2129920, 2871296, 2129920, 2129920, 2908160, 2129920, 2129920, 2129920,
  /* 19177 */ 2129920, 2908160, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19188 */ 3018752, 2129920, 2129920, 3055616, 2129920, 2129920, 3104768, 2129920, 2129920, 2129920, 2129920,
  /* 19199 */ 3104768, 2129920, 2129920, 3125248, 2129920, 2129920, 2129920, 3153920, 2129920, 2129920, 3174400,
  /* 19210 */ 3178496, 2129920, 2129920, 0, 0, 2129920, 2129920, 2129920, 2392064, 2129920, 2129920, 2129920, 2129920,
  /* 19223 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2609152, 2129920, 2129920, 2129920,
  /* 19234 */ 2129920, 0, 2899968, 0, 0, 2985984, 0, 0, 3006464, 0, 0, 3129344, 0, 3186688, 0, 0, 0, 0, 0, 380, 414, 0,
  /* 19256 */ 414, 414, 414, 414, 414, 414, 414, 414, 477, 414, 414, 484, 506, 484, 506, 484, 0, 2711552, 0, 0, 0,
  /* 19277 */ 3067904, 0, 0, 0, 0, 3051520, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1471, 1472, 0, 0, 0,
  /* 19305 */ 0, 0, 0, 2428928, 0, 2826240, 0, 0, 0, 2621440, 0, 0, 0, 0, 2605056, 0, 3166208, 2883584, 0, 2945024, 0,
  /* 19326 */ 0, 2183168, 2183168, 2183168, 2183168, 2183168, 2428928, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 19338 */ 2183168, 2129920, 2130751, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0,
  /* 19351 */ 2129920, 0, 0, 0, 0, 0, 0, 260, 2985984, 2183168, 2183168, 3006464, 2183168, 3051520, 3067904, 3080192,
  /* 19367 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3207168, 2129920, 2129920, 2129920,
  /* 19378 */ 2535424, 2129920, 2129920, 2129920, 2129920, 2129920, 2621440, 2129920, 2129920, 2129920, 2129920,
  /* 19389 */ 2711552, 2736128, 2183168, 2183168, 2183168, 2826240, 2830336, 2183168, 2899968, 2183168, 2183168,
  /* 19400 */ 2928640, 2183168, 2183168, 2977792, 2183168, 2129920, 2129920, 2129920, 2129920, 2826240, 2830336,
  /* 19411 */ 2129920, 2879488, 2899968, 2129920, 2129920, 2928640, 2129920, 2129920, 2977792, 2129920, 0, 0, 0, 0, 0,
  /* 19426 */ 2732032, 2863104, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 320, 0, 321, 0, 0, 0, 0, 320, 0, 2985984, 2129920,
  /* 19448 */ 2129920, 3006464, 2129920, 3051520, 3067904, 3080192, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 19459 */ 2129920, 2129920, 3207168, 2129920, 2400256, 0, 0, 0, 0, 0, 0, 2494464, 2498560, 0, 0, 2531328, 2580480,
  /* 19476 */ 0, 0, 0, 0, 0, 2827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2912256, 0, 0, 0,
  /* 19506 */ 3043328, 0, 2527232, 2650112, 0, 2617344, 0, 0, 0, 0, 0, 2841, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
  /* 19531 */ 324, 324, 0, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3194880, 0, 0, 0, 2183168, 2183168,
  /* 19555 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2478080, 2183168, 2183168, 2498560, 2183168,
  /* 19566 */ 2183168, 2183168, 2183168, 3010560, 2387968, 2129920, 2129920, 2129920, 2129920, 3010560, 2387968,
  /* 19577 */ 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 903, 2129920, 2129920, 2129920, 2129920, 2408448,
  /* 19590 */ 2416640, 2129920, 2129920, 2183168, 2183168, 2527232, 2531328, 2183168, 2183168, 2580480, 2183168,
  /* 19601 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 1703, 2129920, 2129920,
  /* 19613 */ 2129920, 2392064, 2129920, 2129920, 2129920, 2183168, 2912256, 2183168, 2183168, 2183168, 2981888,
  /* 19624 */ 2183168, 2183168, 2183168, 2183168, 3043328, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 19635 */ 2183168, 2568192, 2183168, 2183168, 2183168, 2183168, 2183168, 2600960, 2183168, 2183168, 2183168,
  /* 19646 */ 3162112, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2478080, 2129920,
  /* 19657 */ 2129920, 2498560, 2129920, 2129920, 0, 1797, 2129920, 2129920, 2129920, 2392064, 2129920, 2129920,
  /* 19669 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2994176, 2129920, 2129920, 2129920,
  /* 19680 */ 2129920, 2486272, 2129920, 2129920, 2527232, 2531328, 2129920, 2129920, 2580480, 2129920, 2129920,
  /* 19691 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2568192, 2129920,
  /* 19702 */ 2129920, 2129920, 2129920, 2129920, 2912256, 2129920, 2129920, 2129920, 2981888, 2129920, 2129920,
  /* 19713 */ 2129920, 2129920, 3043328, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 0, 2129920, 2129920,
  /* 19726 */ 2129920, 2129920, 2408448, 2416640, 2129920, 2129920, 2129920, 3162112, 2129920, 2129920, 2129920,
  /* 19737 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2478080, 2129920, 2129920, 2498560, 2129920, 2129920,
  /* 19748 */ 2129920, 2129920, 2129920, 0, 0, 1348, 2129920, 2129920, 2129920, 2129920, 2408448, 2416640, 2129920,
  /* 19761 */ 2129920, 2129920, 2129920, 2129920, 0, 28672, 904, 2129920, 2129920, 2129920, 2129920, 2408448, 2416640,
  /* 19774 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 1126400, 2129920, 0, 0, 0, 0, 0, 0, 0, 1, 16386,
  /* 19792 */ 0, 0, 0, 2187264, 0, 0, 258048, 2129920, 3162112, 2129920, 2424832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2916352,
  /* 19813 */ 2949120, 0, 0, 0, 0, 591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213543, 213543, 213543, 213543, 0, 3059712,
  /* 19837 */ 0, 0, 2678784, 3158016, 2629632, 2596864, 2686976, 0, 0, 0, 0, 2961408, 0, 0, 0, 0, 0, 2997, 0, 0, 0, 0,
  /* 19859 */ 0, 0, 0, 0, 0, 0, 625, 0, 0, 0, 0, 0, 3031040, 3112960, 0, 2965504, 2379776, 0, 3137536, 0, 0, 0, 2723840,
  /* 19882 */ 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 159744, 0, 16386, 3, 0, 0, 2187264, 131072,
  /* 19907 */ 0, 0, 2777088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2453504, 2490368, 2740224, 0, 0, 0, 0, 637, 0, 639, 0, 0,
  /* 19933 */ 0, 0, 0, 0, 0, 647, 0, 0, 0, 0, 657, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 723, 0, 2564096, 0, 0, 0, 2379776,
  /* 19961 */ 2383872, 2183168, 2183168, 2424832, 2183168, 2453504, 2183168, 2183168, 2183168, 2502656, 2129920,
  /* 19972 */ 2129920, 2678784, 2740224, 2129920, 2129920, 2129920, 2129920, 2916352, 2129920, 2129920, 2129920,
  /* 19983 */ 2129920, 2129920, 2129920, 2129920, 3112960, 2129920, 2129920, 3137536, 3149824, 3158016, 2129920,
  /* 19994 */ 3112960, 2129920, 2129920, 3137536, 3149824, 3158016, 2379776, 2383872, 2129920, 2129920, 2424832,
  /* 20005 */ 2129920, 2453504, 2129920, 2129920, 2129920, 2502656, 2129920, 2129920, 2129920, 2129920, 2572288,
  /* 20016 */ 2129920, 2596864, 2629632, 2129920, 2129920, 2678784, 2740224, 2129920, 2129920, 2129920, 0, 2469888, 0,
  /* 20029 */ 0, 0, 0, 0, 2662400, 2838528, 2990080, 0, 3092480, 3182592, 0, 0, 3026944, 0, 3133440, 2920448, 0,
  /* 20046 */ 2744320, 2998, 0, 0, 0, 0, 2936832, 0, 0, 2809856, 3141632, 2420736, 0, 2768896, 0, 0, 0, 2412544, 0,
  /* 20065 */ 3002368, 2748416, 2555904, 0, 0, 3035136, 2183168, 2412544, 2420736, 2183168, 2469888, 2183168, 2183168,
  /* 20078 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2637824, 2662400, 2744320, 2748416, 2838528,
  /* 20089 */ 2953216, 2183168, 2990080, 2183168, 3002368, 2183168, 2183168, 2183168, 3133440, 2129920, 2412544,
  /* 20100 */ 2420736, 2129920, 2469888, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0, 904, 2129920, 2129920,
  /* 20113 */ 2129920, 2129920, 2408448, 2416640, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 20124 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 2129920, 2130824, 2129920, 2129920, 2129920,
  /* 20136 */ 2129920, 2129920, 2637824, 2662400, 2744320, 2748416, 2768896, 2838528, 2953216, 2129920, 2990080,
  /* 20147 */ 2129920, 3002368, 2129920, 2129920, 2129920, 3133440, 2129920, 2129920, 2129920, 3133440, 2129920,
  /* 20158 */ 2412544, 2420736, 2129920, 2469888, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 0, 0,
  /* 20171 */ 2129920, 0, 0, 0, 0, 979, 983, 0, 2129920, 0, 2473984, 2482176, 0, 0, 0, 0, 2859008, 0, 0, 0, 2998, 0, 0,
  /* 20194 */ 2818048, 0, 3211264, 2551808, 0, 0, 0, 0, 2547712, 0, 2924544, 2183168, 2183168, 2482176, 2183168,
  /* 20209 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3112960, 2183168, 2183168, 3137536, 3149824,
  /* 20220 */ 3158016, 2379776, 2383872, 2129920, 2539520, 2547712, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 20231 */ 2183168, 2183168, 2183168, 2183168, 3121152, 2129920, 2129920, 2482176, 2129920, 2129920, 2129920,
  /* 20242 */ 2539520, 2547712, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 20253 */ 3121152, 2129920, 2129920, 0, 0, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 20266 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 0, 2486272, 0, 0, 2994176, 0, 0, 0, 0, 0,
  /* 20283 */ 0, 0, 0, 2973696, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2871296, 2183168, 2908160,
  /* 20296 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2129920, 0, 2130750, 2130750, 2130750,
  /* 20308 */ 2392894, 2130750, 2130750, 2130750, 2486272, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 20319 */ 2183168, 2183168, 2183168, 2994176, 2183168, 2183168, 2129920, 2129920, 2486272, 2183168, 2183168,
  /* 20330 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2994176, 2183168, 2183168, 2130750,
  /* 20341 */ 2130750, 2487102, 0, 0, 0, 2576384, 0, 0, 0, 2183168, 2183168, 2183168, 2183168, 2183168, 2576384,
  /* 20356 */ 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 3112960, 2183168, 2183168, 3137536,
  /* 20367 */ 3149824, 3158016, 2380606, 2384702, 2130750, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 20378 */ 2576384, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2433024, 0, 2519040,
  /* 20390 */ 3014656, 0, 0, 0, 2842624, 0, 0, 2183168, 2433024, 2183168, 2519040, 2183168, 2592768, 2183168, 2183168,
  /* 20405 */ 2183168, 2183168, 3010560, 2388798, 2130750, 2130750, 2130750, 2130750, 3011390, 2388871, 2130823,
  /* 20416 */ 2130823, 2130823, 2130823, 2909063, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 20427 */ 2130823, 2130823, 3019655, 2130823, 2130823, 3056519, 2842624, 2183168, 2183168, 2183168, 3014656,
  /* 20438 */ 2129920, 2433024, 2129920, 2519040, 2129920, 2592768, 2129920, 2842624, 2129920, 2129920, 2129920,
  /* 20449 */ 3014656, 2129920, 2510848, 0, 2129920, 2129920, 2129920, 2510848, 2129920, 2129920, 2129920, 2129920,
  /* 20461 */ 2129920, 3076096, 0, 0, 0, 0, 3010560, 2387968, 3010560, 2523136, 0, 2932736, 0, 2183168, 2641920,
  /* 20476 */ 2957312, 2183168, 2129920, 2641920, 2957312, 2129920, 2129920, 2641920, 2957312, 2129920, 2695168, 0,
  /* 20488 */ 2543616, 2183168, 2543616, 2129920, 2543616, 2129920, 0, 2183168, 2129920, 2129920, 0, 2183168, 2129920,
  /* 20501 */ 2129920, 2969600, 2969600, 2969600, 2969600, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 265, 0, 0, 0, 0, 1, 16386,
  /* 20524 */ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2289, 0, 0, 0, 73728, 77824, 0, 0, 0, 0, 0, 0, 69632, 0, 0,
  /* 20554 */ 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 260, 0, 2138112, 263, 264, 0, 0, 0, 0,
  /* 20583 */ 0, 0, 0, 0, 0, 1013, 0, 0, 0, 0, 1017, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0,
  /* 20614 */ 1615, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 976, 0, 2129920, 0, 0, 0, 0, 0, 0, 0, 0, 324,
  /* 20633 */ 0, 0, 241664, 0, 0, 0, 0, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 259, 0, 263, 122880, 0, 0,
  /* 20661 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2301, 0, 0, 263, 123253, 77824, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0,
  /* 20690 */ 0, 0, 0, 180224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1517, 0, 1519, 0, 0, 0, 1523, 0, 0, 37421, 260, 0, 2138112,
  /* 20716 */ 53809, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 1045, 0, 0, 0, 0,
  /* 20746 */ 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1559, 0, 0, 0, 263, 0, 0, 0, 2408448, 2416640, 0, 0, 2441216,
  /* 20772 */ 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 259, 0, 0, 0, 0, 0, 2109688, 16386, 3, 0, 0, 254, 0, 0, 0, 0, 254, 0, 0,
  /* 20801 */ 0, 0, 0, 0, 0, 208896, 208896, 0, 0, 208896, 208896, 208896, 0, 0, 0, 0, 73728, 77824, 126976, 0, 0, 0, 0,
  /* 20824 */ 0, 69632, 0, 0, 0, 0, 126976, 126976, 126976, 126976, 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 126976, 0, 0,
  /* 20846 */ 126976, 0, 0, 126976, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324,
  /* 20873 */ 324, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 337, 0, 340, 0, 0, 0, 340, 0, 0, 0, 987, 991, 0, 2408448,
  /* 20899 */ 2416640, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 298, 253, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0,
  /* 20925 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 263, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168,
  /* 20952 */ 135168, 135168, 135168, 135168, 135168, 135168, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 73728, 77824,
  /* 20971 */ 0, 0, 139264, 139264, 0, 0, 69632, 139264, 0, 0, 0, 139264, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20997 */ 0, 2312, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0,
  /* 21016 */ 0, 0, 592, 593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1903, 0, 0, 0, 0, 0, 0, 0, 374, 374, 0, 0, 0, 0, 0, 0, 374,
  /* 21047 */ 0, 0, 0, 0, 0, 0, 0, 213416, 213416, 213416, 213416, 213416, 213416, 213416, 213416, 213416, 213416,
  /* 21064 */ 213416, 0, 0, 0, 0, 0, 0, 0, 558, 559, 0, 2138112, 562, 563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 1083, 0, 0,
  /* 21091 */ 0, 1087, 1551, 2183168, 2183168, 3100672, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 21104 */ 2183168, 2183168, 2183168, 0, 1257, 2129920, 0, 0, 0, 0, 0, 2732032, 2863104, 0, 3194, 0, 0, 0, 0, 0, 0,
  /* 21125 */ 0, 996, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 135168, 135168, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21154 */ 0, 0, 0, 143360, 260, 0, 264, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2327, 0, 0, 264, 73728,
  /* 21181 */ 143737, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1939, 0, 0, 0, 0,
  /* 21211 */ 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 264, 264, 264, 264, 264, 264, 1, 16386, 3, 0, 0, 2187264,
  /* 21238 */ 0, 0, 0, 0, 0, 259, 37424, 0, 2138112, 263, 53812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 1162, 0, 0,
  /* 21265 */ 0, 0, 0, 264, 2408448, 2416640, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0, 0, 0, 0, 0, 0, 0, 369,
  /* 21292 */ 315, 0, 356, 0, 0, 0, 0, 1, 16386, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 261, 261, 261, 261, 261,
  /* 21320 */ 261, 261, 147717, 261, 147717, 261, 0, 261, 0, 261, 261, 261, 261, 261, 147717, 261, 147717, 261, 261,
  /* 21339 */ 261, 261, 261, 261, 261, 261, 325, 261, 261, 0, 147717, 261, 261, 261, 147717, 147717, 147717, 147717,
  /* 21357 */ 261, 261, 261, 261, 261, 261, 147786, 147717, 147717, 147717, 261, 261, 0, 0, 261, 261, 147717, 261, 261,
  /* 21376 */ 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 147786, 261, 147786, 73728, 77824, 147717, 261, 261,
  /* 21394 */ 147717, 261, 261, 69632, 261, 261, 261, 261, 147717, 330, 261, 261, 261, 261, 261, 261, 261, 261, 261,
  /* 21413 */ 261, 261, 261, 261, 261, 261, 261, 147717, 147717, 147717, 147717, 147717, 261, 261, 147717, 147717, 261,
  /* 21430 */ 261, 261, 261, 147717, 147717, 147717, 147717, 147717, 147786, 147786, 147786, 147786, 147786, 147786,
  /* 21444 */ 147786, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
  /* 21473 */ 0, 0, 0, 2204270, 2204270, 2204270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 582, 583, 0, 0, 0, 0, 0, 0, 324, 324,
  /* 21500 */ 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21531 */ 0, 0, 0, 1574, 0, 0, 0, 0, 0, 73728, 77824, 0, 167936, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 237568,
  /* 21557 */ 237568, 237568, 237568, 237568, 237568, 237568, 237568, 237568, 237568, 237568, 0, 0, 0, 0, 0, 0, 0,
  /* 21574 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 242089,
  /* 21591 */ 242089, 242089, 242089, 242089, 242089, 242089, 242089, 242089, 242089, 242089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21610 */ 29198, 0, 0, 163840, 29198, 0, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 0, 0,
  /* 21640 */ 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 741, 0, 0, 73728, 77824, 0, 172032, 0, 0, 0, 0,
  /* 21668 */ 69632, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032,
  /* 21693 */ 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21716 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 654, 0,
  /* 21736 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2023, 0, 0, 0, 482, 0, 0, 0, 176128, 0, 176128, 176128, 0, 0, 0, 0, 0, 0, 0,
  /* 21765 */ 0, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 73728, 77824, 0, 176128, 0, 0, 0, 0, 69632, 0, 176128, 176128, 0, 0,
  /* 21790 */ 176128, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0,
  /* 21805 */ 0, 0, 0, 0, 1, 249, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1055, 0, 0, 0, 0, 0, 0, 0, 180224,
  /* 21835 */ 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 0, 0, 0, 0, 0, 0, 0, 1142784, 324, 0, 0,
  /* 21854 */ 0, 0, 0, 0, 0, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 180224, 180224, 180224, 180224, 180224, 180224,
  /* 21874 */ 180224, 1, 0, 3, 82171, 82171, 253, 0, 556, 0, 0, 0, 0, 682, 683, 0, 0, 0, 0, 0, 0, 0, 0, 695, 696, 0, 0,
  /* 21901 */ 1063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2585, 0, 482, 1206, 482, 482, 482, 482, 482, 482, 482,
  /* 21927 */ 482, 482, 482, 482, 482, 482, 482, 1645, 482, 1386, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 21948 */ 527, 527, 527, 527, 527, 503, 0, 503, 978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3005, 503, 503,
  /* 21975 */ 30019, 0, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 949, 527, 527, 527, 0, 0, 1911, 0,
  /* 21997 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2601, 0, 1986, 0, 0, 0, 0, 0, 0, 0, 0, 1995, 0, 0, 0, 0, 0, 0, 0,
  /* 22029 */ 356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1476, 0, 482, 482, 482, 482, 2031, 482, 482, 482, 482, 482,
  /* 22056 */ 482, 482, 482, 482, 482, 482, 1198, 482, 482, 482, 482, 2043, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 22077 */ 482, 482, 482, 482, 482, 482, 1238, 2114, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2126,
  /* 22097 */ 503, 503, 503, 503, 0, 0, 0, 2192, 527, 527, 527, 527, 527, 527, 527, 527, 2262, 527, 527, 527, 527, 527,
  /* 22119 */ 527, 527, 527, 3241, 527, 3243, 527, 527, 527, 527, 527, 482, 482, 482, 2394, 482, 482, 482, 482, 482,
  /* 22139 */ 482, 482, 482, 482, 482, 482, 482, 503, 3219, 503, 503, 0, 0, 0, 2605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22166 */ 0, 1917, 0, 1918, 482, 482, 482, 2682, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1216,
  /* 22187 */ 482, 482, 482, 503, 503, 503, 2730, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 901, 0,
  /* 22208 */ 527, 527, 527, 527, 527, 2778, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 951, 527, 527,
  /* 22229 */ 527, 0, 0, 0, 2825, 0, 0, 0, 2829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1571, 0, 0, 0, 0, 0, 0, 482, 2866, 482, 482,
  /* 22258 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2040, 482, 2906, 503, 503, 503, 503, 503, 503,
  /* 22279 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 1316, 2947, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 22300 */ 527, 527, 527, 527, 527, 957, 0, 0, 0, 0, 3009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1942, 0, 0, 0, 482,
  /* 22328 */ 482, 482, 482, 3033, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1214, 482, 482, 482, 482, 503,
  /* 22349 */ 503, 3052, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3060, 503, 503, 503, 503, 0, 0, 2191, 0, 527, 527,
  /* 22371 */ 527, 527, 527, 527, 527, 527, 2207, 527, 2209, 527, 527, 527, 527, 527, 527, 0, 0, 3125, 0, 0, 0, 0, 0, 0,
  /* 22395 */ 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 527, 3177, 527, 527, 527, 527, 3178, 3179, 527, 527, 527,
  /* 22417 */ 527, 527, 527, 527, 527, 1393, 527, 527, 527, 527, 1398, 527, 527, 3208, 482, 482, 482, 482, 482, 482,
  /* 22437 */ 3214, 482, 482, 482, 482, 503, 503, 503, 503, 3386, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3223,
  /* 22457 */ 503, 503, 503, 503, 503, 503, 3229, 503, 503, 503, 503, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 0,
  /* 22479 */ 3461, 0, 482, 527, 527, 527, 527, 3238, 527, 527, 527, 527, 527, 527, 3244, 527, 527, 527, 527, 527, 527,
  /* 22500 */ 2769, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1409, 527, 527, 1416, 527, 527, 527, 3248, 0, 0, 0, 0,
  /* 22522 */ 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3263, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 22549 */ 482, 482, 482, 482, 0, 831, 503, 482, 3278, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 22570 */ 503, 503, 1776, 503, 3293, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503,
  /* 22590 */ 1102, 503, 527, 527, 527, 527, 3398, 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 503, 82171, 978,
  /* 22611 */ 0, 0, 0, 0, 0, 188781, 188781, 188781, 188781, 188781, 188781, 188781, 1, 16386, 3, 0, 0, 2187264, 0, 0,
  /* 22631 */ 0, 0, 0, 662, 1083, 0, 0, 0, 0, 1087, 0, 0, 0, 0, 0, 0, 2607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 596, 0, 0, 0, 0,
  /* 22662 */ 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1955, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0, 0, 0,
  /* 22694 */ 0, 0, 0, 0, 0, 0, 0, 2012, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 269, 366, 366, 366,
  /* 22724 */ 366, 366, 366, 366, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22751 */ 502, 525, 502, 525, 502, 0, 0, 259, 260, 0, 262, 263, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1598, 0, 0, 0, 0, 0,
  /* 22779 */ 0, 503, 978, 1440, 0, 0, 0, 1446, 0, 0, 0, 1452, 0, 0, 0, 1458, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 709,
  /* 22808 */ 0, 0, 0, 0, 728, 0, 0, 0, 0, 1893, 0, 0, 0, 0, 1446, 1895, 0, 0, 0, 0, 1452, 1897, 0, 0, 0, 0, 0, 669, 0,
  /* 22837 */ 0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 0, 2635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 0, 0, 0, 0, 0, 2187264,
  /* 22867 */ 0, 0, 0, 0, 1458, 1899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2614, 0, 2433, 0, 503, 503, 503, 503,
  /* 22895 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2128, 503, 2497, 0, 527, 527, 527, 527, 527, 527, 527,
  /* 22916 */ 527, 527, 527, 527, 527, 527, 527, 2215, 527, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 22937 */ 527, 527, 503, 0, 0, 503, 82171, 978, 0, 0, 981, 985, 0, 0, 0, 0, 266, 0, 0, 196608, 0, 196608, 196608,
  /* 22960 */ 196608, 196608, 196608, 196608, 196608, 196608, 196608, 196874, 196874, 0, 0, 0, 0, 0, 0, 0, 259, 260,
  /* 22978 */ 155648, 2138112, 263, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2204271, 155648,
  /* 23003 */ 2204271, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 3373, 482, 482, 482, 482, 482, 2183168,
  /* 23025 */ 2183168, 3100672, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 23036 */ 2183168, 0, 831, 2130750, 0, 0, 0, 0, 0, 2732032, 2863104, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 594, 595, 0, 597,
  /* 23060 */ 598, 0, 0, 0, 0, 2757438, 2130750, 2130750, 2130750, 2790206, 2130750, 2814782, 2130750, 2130750, 2847550,
  /* 23075 */ 2130750, 2130750, 2130750, 2130750, 2904894, 2130750, 0, 2473984, 2482176, 0, 0, 0, 0, 2859008, 0, 0, 0,
  /* 23092 */ 2998, 0, 0, 2818048, 2130750, 2187264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 2569022,
  /* 23115 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2601790, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23126 */ 2130750, 2646846, 2130750, 2130750, 2130750, 2536254, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23137 */ 2622270, 2130750, 2130750, 2130750, 2130750, 2712382, 2736958, 2130823, 2601863, 2130823, 2130823,
  /* 23148 */ 2130823, 2130823, 2130823, 2130823, 2646919, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23159 */ 2130823, 2753415, 2761607, 2130823, 2782087, 2806663, 2130823, 2130823, 2130823, 2868103, 2130823,
  /* 23170 */ 2896775, 3109767, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23181 */ 2130823, 2130823, 2130823, 2130750, 2130750, 0, 0, 2130823, 2130823, 2130823, 2392967, 2130823, 2130823,
  /* 23194 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2610055, 2130823,
  /* 23205 */ 2130823, 2130823, 2130823, 2183168, 2183168, 2183168, 2183168, 3190784, 2183168, 0, 0, 0, 0, 2130750,
  /* 23219 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2589502, 2130750, 2614078, 2130750, 2130750, 2634558,
  /* 23230 */ 2130750, 2130750, 2130750, 2691902, 2130750, 2704190, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23241 */ 2753342, 2761534, 2130750, 2782014, 2806590, 2130750, 2130750, 2130750, 2868030, 2130750, 2896702,
  /* 23252 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23263 */ 2130750, 3023678, 2130750, 2130750, 2540350, 2548542, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23274 */ 2130750, 2130750, 2130750, 2130750, 3121982, 2130823, 2130823, 2847623, 2130823, 2130823, 2130823,
  /* 23285 */ 2130823, 2904967, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23296 */ 2130823, 2130823, 2569095, 2130823, 2130823, 2130823, 2130823, 3048254, 2130750, 2130750, 2130750,
  /* 23307 */ 2130750, 3085118, 2130750, 2130750, 3117886, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23318 */ 2130750, 3019582, 2130750, 2130750, 3056446, 2130750, 2130750, 3105598, 2130750, 2130750, 3191687,
  /* 23329 */ 2130823, 2130750, 2130750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2457600, 2461696, 2183168, 2183168, 3174400,
  /* 23347 */ 3178496, 2183168, 0, 0, 0, 0, 0, 0, 2372414, 2130750, 2130750, 2405182, 2130750, 2130750, 2609982,
  /* 23362 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2683710, 2130750, 2700094, 2130750, 2708286,
  /* 23373 */ 2130750, 2716478, 2130750, 2720574, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23384 */ 2130750, 2872126, 2130750, 2130750, 2908990, 2130750, 2130750, 2130750, 3134270, 2130823, 2413447,
  /* 23395 */ 2421639, 2130823, 2470791, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2446215,
  /* 23406 */ 2450311, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2507655, 2130823, 2130823, 2130823,
  /* 23417 */ 2130823, 2130823, 2827143, 2831239, 2130823, 2880391, 2900871, 2130823, 2130823, 2929543, 2130823,
  /* 23428 */ 2130823, 2978695, 2130823, 3126078, 2130750, 2130750, 2130750, 3154750, 2130750, 2130750, 3175230,
  /* 23439 */ 3179326, 2130750, 0, 0, 0, 0, 0, 0, 0, 570, 0, 0, 0, 0, 0, 0, 740, 0, 2372487, 2130823, 2130823, 2405255,
  /* 23461 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2438023, 2130823, 2458503, 2466695, 2130823, 2130823,
  /* 23472 */ 2130823, 2515847, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2589575, 2130823,
  /* 23483 */ 2614151, 2130823, 2130823, 2634631, 2130823, 2130823, 2130823, 2691975, 2130823, 2720647, 2130823,
  /* 23494 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2872199, 2130823, 2130823, 3105671,
  /* 23505 */ 2130823, 2130823, 3126151, 2130823, 2130823, 2130823, 3154823, 2130823, 2130823, 3175303, 3179399,
  /* 23516 */ 2130823, 2130750, 2130750, 2679614, 2741054, 2130750, 2130750, 2130750, 2130750, 2917182, 2130750,
  /* 23527 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2638654, 2663230, 2745150, 2749246, 2769726,
  /* 23538 */ 2839358, 2954046, 2130750, 2990910, 2130750, 3003198, 0, 0, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 23551 */ 2429758, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2995006,
  /* 23562 */ 2130750, 2130750, 2130823, 2130823, 2487175, 2130823, 2986814, 2130750, 2130750, 3007294, 2130750,
  /* 23573 */ 3052350, 3068734, 3081022, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 3207998, 0, 0,
  /* 23586 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2429831, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23597 */ 2130823, 2130823, 2130823, 2536327, 2130823, 2130823, 2130823, 2130823, 2130823, 2622343, 2130823,
  /* 23608 */ 2130823, 2130823, 2130823, 2712455, 2737031, 2986887, 2130823, 2130823, 3007367, 2130823, 3052423,
  /* 23619 */ 3068807, 3081095, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 3208071, 2130750,
  /* 23630 */ 2401086, 0, 0, 0, 0, 0, 0, 2494464, 2498560, 0, 0, 2531328, 2580480, 0, 0, 0, 0, 0, 2998, 0, 3119, 0, 0,
  /* 23653 */ 0, 0, 3123, 0, 0, 0, 0, 0, 2306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3130, 0, 482, 482, 482, 2183168,
  /* 23679 */ 3162112, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2478910, 2130750,
  /* 23690 */ 2130750, 2499390, 2130750, 2130750, 2130823, 2511751, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23701 */ 3076926, 0, 0, 0, 0, 3010560, 2387968, 2130750, 2528062, 2532158, 2130750, 2130750, 2581310, 2130750,
  /* 23715 */ 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2786110, 2798398,
  /* 23726 */ 2130750, 2822974, 2130750, 2130750, 2130750, 2130750, 2913086, 2130750, 2130750, 2130750, 2982718,
  /* 23737 */ 2130750, 2130750, 2130750, 2130750, 3044158, 2130750, 2130750, 2130750, 2130750, 2130750, 2585406,
  /* 23748 */ 2130750, 2130750, 2130750, 2130750, 2626366, 2130750, 2130750, 2130750, 2130750, 2130750, 0, 0, 904,
  /* 23761 */ 2130823, 2130823, 2130823, 2130823, 2409351, 2417543, 2130823, 2130823, 2130750, 3162942, 2130823,
  /* 23772 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2478983, 2130823, 2130823, 2499463,
  /* 23783 */ 2130823, 2130823, 2683783, 2130823, 2700167, 2130823, 2708359, 2130823, 2716551, 2757511, 2130823,
  /* 23794 */ 2130823, 2130823, 2790279, 2130823, 2814855, 2130823, 2528135, 2532231, 2130823, 2130823, 2581383,
  /* 23805 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23816 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130750, 2130823, 2913159, 2130823, 2130823, 2130823,
  /* 23827 */ 2982791, 2130823, 2130823, 2130823, 2130823, 3044231, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23838 */ 2585479, 2130823, 2130823, 2130823, 2130823, 2626439, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23849 */ 2130823, 2704263, 2130823, 3163015, 2130750, 2424832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2916352, 2949120, 0, 0,
  /* 23868 */ 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0, 0, 0, 725, 0, 730, 0, 716, 0, 2130750, 2425662, 2130750,
  /* 23892 */ 2454334, 2130750, 2130750, 2130750, 2503486, 2130750, 2130750, 2130750, 2130750, 2573118, 2130750,
  /* 23903 */ 2597694, 2630462, 3113790, 2130750, 2130750, 3138366, 3150654, 3158846, 2380679, 2384775, 2130823,
  /* 23914 */ 2130823, 2425735, 2130823, 2454407, 2130823, 2130823, 2130823, 3085191, 2130823, 2130823, 3117959,
  /* 23925 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 23936 */ 2130823, 3023751, 2130823, 3048327, 2130823, 2503559, 2130823, 2130823, 2130823, 2130823, 2573191,
  /* 23947 */ 2130823, 2597767, 2630535, 2130823, 2130823, 2679687, 2741127, 2130823, 2130823, 2130823, 3101575,
  /* 23958 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130750, 0, 0,
  /* 23971 */ 2130750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2801664, 2830336, 2130823, 2917255, 2130823, 2130823,
  /* 23991 */ 2130823, 2130823, 2130823, 2130823, 2130823, 3113863, 2130823, 2130823, 3138439, 3150727, 3158919,
  /* 24002 */ 2130750, 2130750, 3191614, 2130750, 0, 0, 0, 0, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 24016 */ 2130823, 2130823, 2786183, 2798471, 2130823, 2823047, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 24027 */ 2130823, 2130823, 2130823, 2995079, 2130823, 2130823, 2130750, 0, 0, 0, 0, 2183168, 2990080, 2183168,
  /* 24041 */ 3002368, 2183168, 2183168, 2183168, 3133440, 2130750, 2413374, 2421566, 2130750, 2470718, 2130750,
  /* 24052 */ 2130750, 2130750, 2130750, 2446142, 2450238, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 24063 */ 2507582, 2130750, 2130750, 2130750, 2130750, 2437950, 2130750, 2458430, 2466622, 2130750, 2130750,
  /* 24074 */ 2130750, 2130750, 2130750, 2130750, 2515774, 2130750, 2130823, 2638727, 2663303, 2745223, 2749319,
  /* 24085 */ 2769799, 2839431, 2954119, 2130823, 2990983, 2130823, 3003271, 2130823, 2130823, 2130823, 3134343,
  /* 24096 */ 2539520, 2547712, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 24107 */ 3121152, 2130750, 2130750, 2483006, 2130750, 2130823, 2130823, 2130823, 2130823, 2130823, 2577287,
  /* 24118 */ 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130750, 2433024, 2483079, 2130823,
  /* 24129 */ 2130823, 2130823, 2540423, 2548615, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823, 2130823,
  /* 24140 */ 2130823, 2130823, 3122055, 2842624, 2183168, 2183168, 2183168, 3014656, 2130750, 2433854, 2130750,
  /* 24151 */ 2519870, 2130750, 2593598, 2130750, 2843454, 2130750, 2130750, 2130750, 2130750, 2827070, 2831166,
  /* 24162 */ 2130750, 2880318, 2900798, 2130750, 2130750, 2929470, 2130750, 2130750, 2978622, 2130750, 3015486,
  /* 24173 */ 2130823, 2433927, 2130823, 2519943, 2130823, 2593671, 2130823, 2843527, 2130823, 2130823, 2130823,
  /* 24184 */ 3015559, 2130750, 2510848, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0, 0, 0, 0, 110592, 110592,
  /* 24207 */ 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24225 */ 2183168, 2510848, 2183168, 2183168, 2183168, 2183168, 2183168, 2130750, 2511678, 2130750, 2130750,
  /* 24236 */ 2130750, 2409278, 2417470, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750, 2130750,
  /* 24247 */ 2130750, 2130750, 2130750, 2130750, 2130750, 902, 2130823, 2130823, 3011463, 2523136, 0, 2932736, 0,
  /* 24260 */ 2183168, 2641920, 2957312, 2183168, 2130750, 2642750, 2958142, 2130750, 2130823, 2642823, 2958215,
  /* 24271 */ 2130823, 2695168, 0, 2543616, 2183168, 2544446, 2130750, 2544519, 2130823, 0, 2183168, 2130750, 2130823,
  /* 24284 */ 0, 2183168, 2130750, 2130823, 2969600, 2969600, 2970430, 2970503, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 1042,
  /* 24303 */ 0, 0, 324, 324, 0, 0, 0, 73728, 77824, 0, 208896, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 0, 2109688, 16386,
  /* 24328 */ 3, 0, 0, 2187264, 0, 0, 0, 0, 208896, 0, 0, 0, 0, 208896, 208896, 208896, 208896, 208896, 208896, 208896,
  /* 24348 */ 208896, 208896, 208896, 208896, 0, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 2646016, 0, 2797568, 0, 0, 0,
  /* 24371 */ 0, 2359296, 3108864, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 24383 */ 2129920, 2129920, 2129920, 2129920, 2129920, 259, 0, 0, 0, 259, 0, 260, 0, 0, 0, 260, 0, 263, 0, 0, 0,
  /* 24404 */ 263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 263, 263, 263, 263, 263, 263, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0,
  /* 24431 */ 264, 0, 0, 0, 264, 0, 0, 0, 2445312, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0, 709, 0, 0, 0, 0, 3190784, 2129920,
  /* 24458 */ 2129920, 2129920, 259, 0, 260, 0, 263, 0, 264, 0, 0, 0, 2457600, 2461696, 2183168, 2183168, 3174400,
  /* 24475 */ 3178496, 2183168, 831, 0, 0, 0, 831, 0, 2371584, 2129920, 2129920, 2404352, 2129920, 0, 0, 0, 0, 0,
  /* 24493 */ 2732032, 2863104, 0, 24576, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 689, 0, 0, 693, 0, 0, 3125248, 2129920,
  /* 24515 */ 2129920, 2129920, 3153920, 2129920, 2129920, 3174400, 3178496, 2129920, 904, 0, 0, 0, 904, 0, 2129920,
  /* 24530 */ 2129920, 2129920, 2129920, 2129920, 2428928, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920,
  /* 24541 */ 2129920, 2129920, 0, 0, 2129920, 0, 0, 184320, 0, 0, 0, 0, 831, 0, 2129920, 2129920, 2129920, 2129920,
  /* 24559 */ 2129920, 2428928, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2994176,
  /* 24570 */ 2129920, 2129920, 2129920, 0, 0, 0, 0, 213543, 213543, 213543, 213543, 213543, 213543, 213543, 1, 16386,
  /* 24586 */ 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1904, 0, 0, 0, 0, 1, 16386, 3, 0,
  /* 24616 */ 0, 0, 0, 237568, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 2622, 2623, 0, 0, 0, 0, 2628, 0, 0, 0, 0, 0, 259, 260,
  /* 24644 */ 0, 2138112, 263, 264, 0, 204800, 0, 0, 0, 0, 0, 0, 0, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2322, 0, 0, 0, 2326,
  /* 24672 */ 0, 0, 1, 16386, 3, 0, 0, 0, 0, 0, 241664, 0, 0, 0, 241664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2288, 0,
  /* 24702 */ 0, 0, 0, 259, 260, 0, 2138112, 263, 264, 192512, 0, 0, 0, 0, 0, 0, 0, 0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24729 */ 1085, 0, 0, 0, 1090, 0, 0, 0, 1, 16386, 2117882, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 256, 0, 0, 0, 0, 0, 3010,
  /* 24757 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2324, 0, 0, 0, 0, 0, 0, 73728, 77824, 0, 253952, 0, 0, 0, 0, 69632, 0, 0,
  /* 24786 */ 0, 0, 0, 0, 0, 2834432, 2850816, 0, 0, 2867200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3063808, 3084288, 3088384,
  /* 24809 */ 0, 0, 253952, 0, 0, 0, 0, 253952, 1, 16386, 2117882, 0, 0, 2187264, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 0, 0,
  /* 24835 */ 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 233472, 0, 0, 0, 0,
  /* 24864 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2311, 0, 0, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 233472, 0,
  /* 24884 */ 2129920, 0, 0, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
  /* 24914 */ 0, 0, 1136, 0, 0, 1, 16386, 3, 82171, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1982, 0, 0, 0, 0, 0, 259,
  /* 24943 */ 260, 0, 0, 263, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1966, 0, 0, 0, 0, 1551, 0, 1893, 0, 0, 0, 0, 0, 1895, 0,
  /* 24972 */ 0, 0, 0, 0, 1897, 0, 0, 0, 0, 0, 703, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 1899, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25004 */ 0, 0, 0, 0, 0, 0, 2820, 0, 0, 0, 2824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2994, 0, 0, 391, 0, 0, 0,
  /* 25036 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2392064, 482, 504, 482, 482, 528, 504, 504, 504, 528, 504, 504, 504,
  /* 25061 */ 504, 504, 504, 504, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 1, 16386, 3, 82172, 253, 0, 0, 0, 0, 0, 0, 0,
  /* 25086 */ 0, 0, 0, 0, 0, 2011, 0, 0, 0, 266240, 266240, 266240, 266240, 266240, 266240, 266240, 1, 16386, 3, 0, 0,
  /* 25107 */ 2187264, 0, 0, 0, 0, 0, 757, 717, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 1569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128,
  /* 25136 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3031040, 3112960, 0, 2965504, 2379776, 0, 3137536, 2998, 0, 0, 2723840, 0,
  /* 25158 */ 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1502, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 1, 16386,
  /* 25189 */ 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 1009, 0, 0, 0, 0, 0, 0, 0, 1016, 0, 0, 0, 3133440, 2920448, 0, 2744320,
  /* 25214 */ 3117, 0, 0, 0, 0, 2936832, 0, 0, 2809856, 3141632, 2420736, 2129920, 0, 2473984, 2482176, 0, 0, 0, 0,
  /* 25233 */ 2859008, 0, 0, 0, 3194, 0, 0, 2818048, 0, 0, 0, 268, 0, 0, 0, 0, 0, 267, 0, 267, 268, 0, 267, 267, 0, 0,
  /* 25259 */ 268, 267, 0, 0, 0, 267, 267, 268, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 267,
  /* 25288 */ 402, 0, 413, 426, 439, 439, 439, 439, 439, 439, 439, 439, 460, 439, 439, 439, 439, 439, 439, 439, 478,
  /* 25309 */ 478, 483, 505, 483, 505, 483, 483, 529, 505, 505, 505, 529, 505, 505, 505, 505, 505, 553, 553, 553, 553,
  /* 25330 */ 553, 553, 553, 553, 553, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25356 */ 0, 263, 0, 0, 0, 0, 0, 0, 0, 259, 260, 0, 0, 263, 264, 0, 0, 0, 0, 567, 0, 0, 570, 571, 0, 0, 0, 0, 0, 0,
  /* 25386 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 324, 324, 324, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 0, 0, 0,
  /* 25417 */ 0, 0, 0, 0, 0, 1485, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 0, 0, 0, 0, 0, 0, 0, 0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25449 */ 1547, 0, 0, 0, 0, 0, 0, 0, 0, 1585, 0, 0, 0, 0, 0, 0, 0, 0, 1597, 0, 0, 0, 0, 0, 0, 0, 0, 1938, 0, 0, 0,
  /* 25480 */ 0, 1943, 1944, 0, 633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 715, 0, 0, 0, 0, 0, 0, 719,
  /* 25511 */ 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 755, 715, 0, 0, 0, 0, 0, 759, 760, 0, 0, 0,
  /* 25542 */ 0, 0, 0, 2804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1596, 0, 0, 0, 1614, 1466, 715, 482, 482, 768, 772, 482, 482,
  /* 25569 */ 482, 482, 482, 797, 482, 802, 482, 808, 482, 482, 482, 482, 482, 1223, 482, 482, 482, 1230, 1232, 482,
  /* 25589 */ 482, 482, 482, 482, 0, 2433, 0, 0, 0, 0, 503, 503, 503, 503, 2437, 811, 482, 482, 825, 482, 482, 503, 503,
  /* 25612 */ 503, 838, 842, 503, 503, 503, 503, 503, 503, 3055, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3343, 503,
  /* 25633 */ 503, 3345, 527, 527, 527, 527, 503, 868, 503, 873, 503, 880, 503, 883, 503, 503, 897, 503, 503, 0, 527,
  /* 25654 */ 527, 527, 527, 527, 1866, 527, 527, 527, 527, 527, 527, 1874, 527, 527, 527, 527, 527, 975, 0, 0, 837,
  /* 25675 */ 82171, 978, 0, 0, 0, 0, 0, 0, 1936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 2375, 482, 482, 482, 527,
  /* 25701 */ 911, 915, 527, 527, 527, 527, 527, 527, 941, 527, 946, 527, 953, 527, 956, 527, 527, 970, 527, 527, 883,
  /* 25722 */ 0, 0, 503, 82171, 978, 0, 0, 980, 984, 0, 0, 0, 0, 722, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 988, 992,
  /* 25750 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3004, 0, 1077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320,
  /* 25783 */ 1420, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1329, 0, 0, 0, 0, 735, 0, 718, 0,
  /* 25806 */ 0, 737, 0, 589, 0, 714, 0, 0, 0, 0, 0, 3072000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 523, 500, 523, 500,
  /* 25834 */ 482, 482, 482, 482, 1637, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1233, 482, 482, 482, 482,
  /* 25855 */ 503, 503, 503, 1716, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1729, 503, 503, 0, 0, 0, 0, 0, 2793, 0,
  /* 25878 */ 0, 0, 0, 0, 0, 0, 2797, 503, 503, 30019, 1798, 527, 527, 527, 527, 1804, 527, 527, 527, 527, 527, 1810,
  /* 25900 */ 527, 0, 0, 0, 0, 482, 482, 482, 482, 503, 503, 503, 503, 527, 527, 527, 3168, 527, 527, 527, 3171, 527,
  /* 25922 */ 527, 527, 527, 527, 1862, 527, 527, 1865, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1877, 0, 0,
  /* 25943 */ 1899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1905, 0, 0, 0, 0, 0, 1129, 0, 1008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596, 0,
  /* 25973 */ 0, 0, 0, 0, 0, 0, 0, 0, 1961, 0, 1963, 0, 0, 0, 0, 0, 0, 0, 0, 1551, 0, 0, 0, 0, 756, 0, 0, 0, 0, 0, 0, 0,
  /* 26005 */ 710, 0, 0, 0, 0, 0, 1472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2715648, 0, 0, 0, 0, 482, 482, 482, 2046, 482,
  /* 26033 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1255, 1256, 831, 503, 2097, 482, 482, 482, 482,
  /* 26053 */ 482, 0, 0, 0, 0, 503, 503, 503, 503, 503, 503, 503, 2697, 503, 503, 503, 503, 503, 503, 527, 527, 527,
  /* 26075 */ 2203, 527, 527, 2206, 527, 527, 527, 527, 527, 527, 2214, 527, 527, 527, 527, 527, 1882, 527, 527, 527,
  /* 26095 */ 527, 527, 527, 527, 503, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 264, 527, 527, 527, 2233,
  /* 26122 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1397, 527, 527, 527, 0, 0, 0, 2342, 0, 0, 0,
  /* 26145 */ 0, 0, 0, 0, 0, 0, 0, 2352, 0, 0, 0, 0, 1008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2363, 0, 0, 0, 2379, 482,
  /* 26176 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2387, 482, 482, 482, 482, 482, 482, 1702, 1256, 0, 1707,
  /* 26197 */ 503, 1709, 503, 503, 1711, 503, 482, 2420, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 26217 */ 2429, 482, 482, 482, 482, 482, 1245, 482, 482, 482, 482, 482, 482, 482, 1256, 831, 503, 0, 0, 0, 0, 0, 0,
  /* 26240 */ 0, 0, 3191, 3192, 0, 2998, 0, 3196, 0, 0, 0, 0, 1043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 0, 1065,
  /* 26268 */ 1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1487, 0, 0, 0, 0, 503, 503, 503, 2441, 503, 503, 503, 503, 503,
  /* 26294 */ 503, 503, 503, 503, 503, 503, 2449, 503, 503, 503, 2493, 503, 503, 503, 503, 503, 503, 0, 2497, 0, 0, 0,
  /* 26316 */ 0, 0, 0, 2816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 527, 527, 527, 527, 2513, 527, 527, 527,
  /* 26344 */ 527, 527, 527, 527, 527, 527, 527, 527, 1839, 527, 527, 527, 527, 2576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26369 */ 0, 0, 0, 2586, 0, 0, 2642, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2653, 482, 482, 482, 482,
  /* 26392 */ 482, 1638, 482, 482, 482, 482, 1642, 482, 482, 482, 482, 1646, 482, 2657, 482, 482, 482, 482, 482, 482,
  /* 26412 */ 482, 482, 482, 482, 2666, 482, 482, 482, 482, 482, 482, 2033, 482, 482, 482, 482, 2037, 482, 482, 482,
  /* 26432 */ 482, 482, 482, 0, 2105, 0, 0, 503, 503, 503, 503, 503, 503, 1753, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 26454 */ 503, 2458, 503, 503, 503, 2461, 503, 503, 2433, 0, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2700,
  /* 26475 */ 503, 503, 2704, 2497, 0, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2748, 527, 527, 2752, 0, 0, 0,
  /* 26497 */ 2801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2336, 0, 0, 482, 482, 482, 482, 2867, 482, 482, 482, 482,
  /* 26523 */ 482, 482, 482, 482, 482, 482, 482, 1254, 482, 1256, 831, 1258, 503, 503, 503, 2907, 503, 503, 503, 503,
  /* 26543 */ 503, 503, 503, 503, 503, 503, 503, 503, 1313, 503, 503, 503, 527, 527, 527, 2948, 527, 527, 527, 527, 527,
  /* 26564 */ 527, 527, 527, 527, 527, 527, 527, 1415, 527, 527, 527, 503, 3249, 0, 3251, 0, 0, 0, 0, 0, 2998, 3255, 0,
  /* 26587 */ 3257, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 1146, 0, 0, 0, 482, 3264, 482, 3266, 482, 482, 482,
  /* 26613 */ 482, 482, 482, 482, 482, 482, 482, 2036, 482, 482, 482, 482, 482, 527, 3294, 527, 3296, 527, 527, 527,
  /* 26633 */ 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 1893, 0, 1895, 0, 1897, 0, 1899, 0, 0, 0, 0, 0, 0, 0,
  /* 26657 */ 1146880, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 126976, 126976, 0, 0, 0, 0, 0, 3311, 0, 0, 0, 3314, 0, 0,
  /* 26684 */ 0, 0, 0, 0, 482, 482, 3023, 482, 482, 482, 482, 482, 482, 482, 482, 1226, 482, 482, 482, 482, 482, 482,
  /* 26706 */ 482, 482, 482, 3323, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 3150, 503, 503, 503,
  /* 26727 */ 3153, 503, 3336, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 26748 */ 527, 3083, 3349, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26773 */ 0, 0, 0, 2629, 0, 3364, 0, 3366, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2652, 482, 2655,
  /* 26797 */ 0, 0, 0, 0, 3409, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503, 849, 503,
  /* 26821 */ 503, 863, 270, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 285, 0, 0, 73728, 77824, 0, 0, 0, 0,
  /* 26849 */ 380, 0, 69632, 0, 0, 0, 380, 0, 0, 0, 0, 1081, 663, 0, 0, 0, 1033, 0, 0, 0, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
  /* 26878 */ 0, 0, 0, 0, 0, 2637, 2638, 0, 0, 0, 0, 0, 484, 506, 484, 484, 530, 506, 506, 506, 530, 506, 506, 506, 506,
  /* 26903 */ 506, 506, 506, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 1778, 503, 503, 503, 503, 503, 1784, 503, 503,
  /* 26924 */ 503, 503, 503, 503, 503, 503, 503, 2138, 503, 503, 503, 503, 2142, 503, 527, 1878, 527, 527, 527, 527,
  /* 26944 */ 527, 527, 527, 527, 527, 527, 527, 503, 503, 0, 0, 0, 0, 0, 0, 0, 0, 2274, 0, 0, 0, 0, 0, 2303, 0, 0, 0,
  /* 26971 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3114, 0, 482, 482, 2380, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 26996 */ 482, 482, 482, 482, 503, 503, 503, 503, 2430, 482, 482, 482, 482, 0, 2433, 0, 0, 0, 0, 503, 503, 503, 503,
  /* 27019 */ 503, 503, 3226, 503, 3228, 503, 503, 503, 503, 503, 527, 527, 2438, 503, 503, 503, 503, 2442, 503, 503,
  /* 27039 */ 503, 503, 503, 503, 503, 503, 503, 503, 0, 0, 2191, 0, 0, 0, 527, 527, 527, 527, 3353, 527, 3355, 527,
  /* 27061 */ 527, 3357, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 3122, 0, 0, 0, 0, 0, 0, 272,
  /* 27090 */ 273, 274, 275, 276, 277, 278, 279, 280, 281, 0, 0, 0, 0, 0, 0, 3111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0,
  /* 27118 */ 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 0, 73728, 77824, 0, 275, 276,
  /* 27147 */ 276, 381, 382, 69632, 389, 382, 390, 381, 389, 390, 0, 272, 390, 403, 410, 415, 427, 440, 440, 440, 440,
  /* 27168 */ 440, 440, 440, 440, 462, 462, 462, 475, 475, 476, 476, 462, 462, 485, 507, 485, 507, 485, 485, 531, 507,
  /* 27189 */ 507, 507, 531, 507, 507, 507, 507, 507, 507, 507, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 0, 324,
  /* 27212 */ 324, 324, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1534, 0, 0, 0, 0, 0, 0, 0, 0, 745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27244 */ 0, 0, 0, 0, 2351, 0, 0, 624, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 27267 */ 2056, 812, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 27288 */ 503, 503, 1301, 0, 0, 0, 1007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2600, 0, 0, 0, 0, 0, 1049, 1007, 0,
  /* 27317 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2287, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27349 */ 3320, 482, 503, 1260, 503, 1263, 503, 503, 503, 503, 503, 503, 503, 503, 1277, 503, 1282, 503, 0, 0, 0, 0,
  /* 27371 */ 0, 0, 0, 3254, 2998, 0, 0, 0, 0, 0, 0, 0, 1546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2807, 0, 0, 0, 0, 0, 0, 503,
  /* 27401 */ 1286, 503, 503, 1289, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 900, 503, 0, 527, 527, 0, 0,
  /* 27423 */ 0, 1581, 0, 0, 0, 0, 0, 1586, 0, 0, 0, 0, 0, 0, 0, 1084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3000, 0, 0, 0, 0, 0,
  /* 27454 */ 0, 1813, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1825, 527, 527, 527, 527, 527, 527, 1867, 527, 527,
  /* 27475 */ 527, 1871, 527, 527, 527, 527, 527, 527, 1883, 1885, 527, 527, 527, 527, 527, 1780, 503, 0, 1861, 527,
  /* 27495 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 962, 2156, 503, 503, 503, 503, 503,
  /* 27516 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1339, 503, 503, 503, 2172, 2173, 503, 503, 503, 503,
  /* 27536 */ 503, 503, 503, 503, 503, 503, 503, 1273, 503, 503, 503, 503, 527, 2257, 2258, 527, 527, 527, 527, 527,
  /* 27556 */ 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 1440, 527, 527, 2272, 503, 1893, 0, 1895, 0, 1897, 0,
  /* 27577 */ 1899, 0, 0, 0, 0, 0, 0, 609, 610, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 2277, 0, 0, 0, 0,
  /* 27608 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 503, 503, 2480, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 27633 */ 503, 503, 503, 0, 527, 527, 0, 0, 0, 2643, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 27655 */ 1644, 482, 482, 482, 482, 482, 2670, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 503,
  /* 27676 */ 3049, 503, 2717, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1744, 2765,
  /* 27696 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1860, 0, 0, 0, 2839, 0, 0, 0,
  /* 27719 */ 0, 0, 0, 0, 0, 2848, 0, 0, 0, 0, 0, 1142, 1168, 1169, 0, 1142, 482, 482, 482, 482, 482, 1176, 2879, 482,
  /* 27743 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2068, 2920, 503, 503, 503, 503, 503,
  /* 27764 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1794, 2961, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 27785 */ 527, 527, 527, 527, 527, 527, 2509, 503, 3075, 503, 503, 503, 503, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 27806 */ 527, 527, 527, 3175, 3309, 0, 3310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 3321, 482, 3322, 482, 482, 482,
  /* 27831 */ 3326, 482, 482, 482, 482, 482, 482, 482, 503, 3334, 503, 0, 0, 0, 0, 0, 2568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27857 */ 584, 0, 0, 0, 0, 0, 0, 3335, 503, 503, 503, 3339, 503, 503, 503, 503, 503, 503, 503, 527, 3347, 527, 3348,
  /* 27880 */ 527, 527, 527, 3352, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2986,
  /* 27905 */ 3481, 0, 0, 482, 482, 503, 503, 527, 527, 0, 482, 503, 527, 0, 482, 503, 482, 482, 527, 503, 503, 503,
  /* 27927 */ 527, 503, 503, 503, 503, 503, 503, 503, 1, 16386, 3, 82171, 82474, 253, 0, 0, 0, 283, 283, 333, 0, 0, 0,
  /* 27950 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267, 268, 0, 0, 0, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0,
  /* 27983 */ 0, 73728, 77824, 0, 0, 0, 0, 333, 0, 69632, 0, 0, 0, 333, 0, 0, 0, 0, 1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28011 */ 1107, 0, 0, 0, 0, 1113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2024, 0, 0, 482, 0, 392, 398, 0, 404, 333,
  /* 28039 */ 416, 428, 441, 441, 441, 441, 441, 441, 441, 441, 463, 463, 463, 463, 463, 463, 463, 463, 463, 486, 508,
  /* 28060 */ 486, 508, 486, 486, 532, 508, 508, 508, 532, 508, 508, 508, 508, 508, 508, 508, 1, 16386, 3, 82171, 82171,
  /* 28081 */ 253, 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 726, 0, 0, 1021, 0, 1023, 1024, 0, 0, 0,
  /* 28110 */ 1026, 1027, 0, 0, 0, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213380, 0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
  /* 28140 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 1012, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
  /* 28170 */ 0, 0, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1028, 0, 0, 0, 0, 1164, 1026, 0, 0, 0, 0, 0, 0, 0, 0, 482,
  /* 28200 */ 482, 1173, 482, 482, 482, 482, 482, 482, 2049, 482, 2051, 482, 482, 482, 482, 482, 482, 482, 1248, 482,
  /* 28220 */ 482, 482, 482, 482, 1256, 831, 503, 1219, 482, 482, 1221, 482, 482, 1224, 482, 482, 482, 482, 482, 482,
  /* 28240 */ 482, 482, 482, 1228, 482, 482, 482, 482, 482, 482, 503, 1261, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 28261 */ 503, 503, 503, 503, 503, 2154, 2155, 503, 1287, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 28281 */ 503, 503, 1300, 1400, 527, 527, 1402, 527, 527, 527, 1406, 527, 527, 527, 527, 527, 527, 527, 527, 1869,
  /* 28301 */ 527, 527, 527, 527, 527, 527, 527, 0, 1509, 1510, 1511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2640, 0, 0,
  /* 28328 */ 482, 482, 482, 1682, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1675, 482, 482, 482, 0,
  /* 28349 */ 0, 1899, 0, 0, 0, 0, 0, 1902, 0, 0, 0, 0, 0, 0, 0, 0, 1994, 0, 0, 0, 0, 1999, 0, 0, 503, 503, 2116, 503,
  /* 28377 */ 503, 503, 503, 2120, 503, 503, 503, 503, 503, 503, 503, 503, 1268, 503, 503, 503, 503, 503, 503, 1283,
  /* 28397 */ 2201, 527, 527, 527, 527, 2205, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1394, 527, 527, 527,
  /* 28417 */ 527, 527, 0, 2340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 2353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28448 */ 0, 0, 0, 0, 0, 586, 527, 527, 527, 527, 2501, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1856,
  /* 28471 */ 527, 527, 527, 527, 527, 527, 527, 527, 2541, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1872,
  /* 28492 */ 527, 527, 527, 527, 2562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602, 0, 0, 2632, 0, 0, 0, 0, 0, 0,
  /* 28522 */ 0, 0, 0, 0, 0, 0, 0, 324, 324, 0, 482, 2680, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 28546 */ 482, 482, 2389, 482, 503, 2728, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 28566 */ 2182, 503, 527, 527, 527, 527, 2756, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1889, 527,
  /* 28586 */ 503, 503, 0, 527, 2776, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2241, 527,
  /* 28607 */ 503, 503, 3076, 503, 503, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2944, 527, 527, 527,
  /* 28627 */ 3185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3001,
  /* 28658 */ 0, 0, 0, 0, 286, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 584, 0, 0, 0, 0, 0, 284, 332, 287, 331, 0,
  /* 28689 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1599, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 585, 0,
  /* 28722 */ 287, 0, 73728, 77824, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28752 */ 0, 286, 0, 0, 0, 284, 0, 417, 429, 442, 442, 442, 442, 453, 455, 442, 442, 453, 442, 464, 464, 464, 464,
  /* 28775 */ 464, 464, 464, 479, 479, 487, 509, 487, 509, 487, 487, 533, 509, 509, 509, 533, 509, 509, 509, 509, 509,
  /* 28796 */ 509, 509, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 605, 606, 607, 0, 0, 0, 611, 0, 0, 0, 0, 0, 0, 0,
  /* 28823 */ 0, 2008, 0, 0, 0, 0, 0, 0, 0, 0, 2284, 0, 0, 0, 0, 0, 0, 0, 0, 2307, 0, 0, 0, 0, 0, 0, 0, 0, 2332, 0, 0,
  /* 28854 */ 0, 0, 0, 0, 0, 0, 1140, 0, 482, 482, 1172, 1174, 482, 482, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 0, 0, 629,
  /* 28881 */ 630, 0, 0, 0, 0, 0, 3312, 0, 0, 0, 0, 0, 3318, 0, 0, 482, 482, 482, 482, 482, 3268, 482, 482, 482, 3272,
  /* 28906 */ 482, 482, 482, 482, 482, 482, 1188, 482, 1193, 482, 482, 1197, 482, 482, 1200, 482, 0, 0, 0, 636, 0, 0, 0,
  /* 28929 */ 640, 0, 642, 0, 0, 0, 0, 0, 0, 0, 1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2333, 0, 0, 0, 0, 0, 0, 649, 0, 0, 0,
  /* 28960 */ 653, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0,
  /* 28993 */ 685, 0, 0, 0, 691, 692, 0, 0, 0, 0, 0, 1163, 0, 0, 1048, 1163, 1170, 482, 482, 482, 1175, 482, 0, 732, 0,
  /* 29018 */ 0, 0, 0, 0, 0, 712, 0, 724, 0, 738, 0, 0, 0, 0, 0, 1467, 1468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1572, 1573,
  /* 29047 */ 0, 0, 0, 0, 0, 732, 744, 0, 0, 0, 0, 0, 744, 744, 747, 0, 0, 0, 712, 0, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0,
  /* 29077 */ 0, 0, 0, 0, 0, 0, 2310, 0, 0, 0, 756, 482, 482, 769, 482, 775, 482, 482, 788, 482, 798, 482, 803, 482,
  /* 29101 */ 482, 810, 813, 818, 482, 826, 482, 482, 503, 503, 503, 839, 503, 845, 503, 503, 858, 503, 0, 0, 0, 0, 0,
  /* 29124 */ 3189, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 1991, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 503,
  /* 29154 */ 869, 503, 874, 503, 503, 882, 885, 890, 503, 898, 503, 503, 0, 527, 527, 527, 527, 527, 2247, 527, 527,
  /* 29175 */ 527, 527, 2252, 527, 527, 527, 527, 527, 527, 2261, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2530,
  /* 29195 */ 527, 527, 527, 527, 527, 527, 527, 912, 527, 918, 527, 527, 931, 527, 527, 942, 527, 947, 527, 527, 955,
  /* 29216 */ 958, 963, 527, 971, 527, 527, 885, 0, 0, 503, 82171, 978, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0, 0, 690, 0, 0,
  /* 29242 */ 694, 0, 1033, 0, 0, 1036, 1037, 0, 0, 0, 0, 1041, 0, 0, 0, 324, 324, 0, 0, 0, 0, 1167, 0, 0, 0, 0, 0, 482,
  /* 29270 */ 482, 482, 482, 482, 482, 482, 2861, 482, 482, 482, 482, 482, 0, 0, 0, 1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29296 */ 0, 0, 0, 2809, 0, 0, 482, 482, 1179, 482, 482, 482, 482, 482, 482, 1194, 482, 482, 482, 1199, 482, 482,
  /* 29318 */ 482, 482, 482, 482, 3327, 482, 3329, 482, 482, 3331, 482, 503, 503, 503, 503, 503, 3283, 503, 503, 503,
  /* 29338 */ 3287, 503, 503, 503, 503, 503, 2148, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 0, 0, 0, 0, 0, 0,
  /* 29361 */ 482, 482, 482, 1242, 482, 482, 482, 482, 482, 482, 1252, 482, 482, 1256, 831, 503, 0, 0, 0, 0, 2567, 0, 0,
  /* 29384 */ 0, 2571, 0, 0, 0, 0, 0, 0, 0, 1068, 0, 1070, 0, 0, 0, 0, 1075, 0, 503, 503, 503, 1288, 503, 503, 503, 503,
  /* 29410 */ 503, 503, 503, 503, 503, 503, 503, 503, 1727, 503, 503, 503, 503, 1303, 503, 503, 503, 503, 503, 503, 503,
  /* 29431 */ 503, 503, 503, 503, 503, 503, 503, 2918, 503, 1317, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 29451 */ 1333, 503, 503, 503, 503, 0, 0, 0, 0, 527, 527, 527, 527, 527, 527, 2199, 527, 503, 503, 1343, 503, 503,
  /* 29473 */ 30019, 1256, 904, 527, 527, 527, 527, 527, 527, 527, 527, 1886, 527, 527, 527, 527, 503, 503, 0, 527,
  /* 29493 */ 1359, 527, 527, 527, 527, 527, 527, 1374, 527, 527, 527, 1379, 527, 527, 527, 527, 527, 930, 527, 527,
  /* 29513 */ 527, 527, 527, 527, 527, 527, 527, 527, 2558, 527, 527, 527, 527, 503, 0, 0, 1464, 0, 1466, 0, 0, 0, 0, 0,
  /* 29537 */ 0, 0, 0, 0, 0, 0, 0, 2350, 0, 0, 0, 0, 1479, 0, 0, 0, 0, 0, 0, 0, 0, 1486, 0, 0, 1489, 1490, 1491, 0,
  /* 29565 */ 1493, 1494, 0, 0, 0, 0, 1499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2347, 0, 0, 0, 0, 0, 0, 1524, 0, 1526, 0, 0, 0,
  /* 29594 */ 0, 0, 1532, 1533, 0, 0, 0, 0, 0, 0, 0, 1469, 1470, 0, 0, 0, 0, 0, 0, 0, 0, 3013, 0, 0, 0, 0, 0, 0, 3017,
  /* 29623 */ 0, 0, 1542, 1543, 0, 0, 0, 0, 0, 0, 0, 0, 1549, 0, 0, 1551, 0, 1579, 1580, 0, 1582, 0, 1583, 1584, 0, 0,
  /* 29649 */ 0, 0, 0, 0, 0, 0, 0, 2362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1593, 0, 0, 1596, 0, 0, 0, 0, 0, 0, 1602, 1603, 0,
  /* 29679 */ 0, 0, 0, 1496, 1497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1507, 1466, 1616, 482, 1618, 482, 1619, 482, 1621, 482,
  /* 29703 */ 482, 482, 1625, 482, 482, 482, 482, 482, 482, 503, 503, 832, 503, 503, 503, 503, 503, 503, 862, 482, 1648,
  /* 29724 */ 482, 482, 482, 482, 482, 482, 482, 482, 1656, 1657, 1659, 482, 482, 482, 482, 482, 482, 2062, 482, 2064,
  /* 29744 */ 482, 2067, 482, 482, 482, 482, 482, 0, 0, 2106, 0, 0, 0, 503, 503, 503, 503, 503, 2160, 2161, 503, 503,
  /* 29766 */ 503, 503, 503, 503, 2168, 503, 503, 482, 482, 482, 1666, 1667, 482, 482, 1670, 1671, 482, 482, 482, 482,
  /* 29786 */ 482, 482, 482, 1192, 482, 482, 482, 482, 482, 482, 482, 482, 1225, 482, 482, 482, 482, 482, 482, 482,
  /* 29806 */ 1239, 1679, 482, 482, 482, 1683, 482, 482, 482, 482, 482, 482, 482, 1691, 482, 482, 482, 482, 482, 482,
  /* 29826 */ 2074, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2077, 482, 482, 482, 482, 2082, 482, 1713, 503, 503,
  /* 29846 */ 503, 1717, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1730, 503, 0, 0, 0, 2566, 0, 0, 2569, 2570, 0, 0,
  /* 29869 */ 2573, 2574, 0, 0, 0, 0, 0, 2621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920, 0, 0, 0, 0, 503, 503, 503, 1734,
  /* 29897 */ 503, 503, 503, 503, 1738, 503, 1740, 503, 503, 503, 503, 503, 503, 3341, 503, 503, 503, 503, 503, 527,
  /* 29917 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 3174, 527, 503, 503, 503, 1748, 1749, 1751, 503, 503, 503,
  /* 29937 */ 503, 503, 503, 503, 1759, 1760, 1761, 503, 503, 1764, 1765, 503, 503, 503, 503, 503, 503, 503, 1773, 503,
  /* 29957 */ 503, 503, 1777, 503, 1796, 30019, 0, 1801, 527, 1803, 527, 527, 1805, 527, 1807, 527, 527, 527, 1811, 527,
  /* 29977 */ 527, 527, 1832, 527, 1834, 527, 527, 527, 527, 527, 527, 527, 527, 1842, 1843, 1845, 527, 527, 527, 527,
  /* 29997 */ 527, 527, 527, 1853, 1854, 1855, 527, 527, 1858, 1859, 527, 0, 0, 0, 0, 3476, 482, 482, 482, 3478, 503,
  /* 30018 */ 503, 503, 3480, 527, 527, 527, 527, 527, 2260, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1888,
  /* 30038 */ 527, 527, 503, 503, 0, 527, 527, 1879, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1890, 503, 1892, 0, 0,
  /* 30060 */ 0, 0, 1512, 0, 0, 0, 0, 0, 1518, 0, 0, 0, 0, 0, 0, 1568, 0, 1570, 0, 0, 0, 0, 0, 0, 0, 0, 1978, 0, 0, 0,
  /* 30090 */ 0, 0, 1984, 0, 0, 0, 1899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1906, 0, 0, 0, 0, 0, 3368, 0, 482, 482, 482, 482,
  /* 30119 */ 482, 482, 482, 482, 482, 482, 482, 482, 1628, 1629, 482, 1909, 1910, 0, 0, 0, 1914, 0, 0, 0, 0, 0, 0, 0,
  /* 30143 */ 0, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 0, 1933, 0, 0, 0, 0, 1937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2582, 0, 2583, 0,
  /* 30173 */ 0, 0, 0, 0, 2003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2013, 0, 0, 0, 0, 1528, 1529, 0, 0, 0, 0, 0, 0,
  /* 30203 */ 1536, 0, 0, 0, 0, 0, 2592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1588, 0, 0, 0, 0, 482, 482, 2099, 2100, 482,
  /* 30231 */ 482, 0, 0, 0, 0, 503, 503, 503, 503, 503, 503, 527, 3077, 527, 527, 527, 3080, 527, 527, 527, 527, 503,
  /* 30253 */ 503, 2132, 503, 2134, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1275, 503, 503, 503, 503,
  /* 30273 */ 2184, 2185, 503, 503, 0, 0, 0, 0, 527, 527, 527, 527, 527, 527, 527, 527, 2208, 527, 527, 2212, 527, 527,
  /* 30295 */ 527, 2216, 2217, 527, 2219, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1437, 503, 0,
  /* 30316 */ 527, 527, 527, 2245, 2246, 527, 527, 527, 527, 527, 527, 2253, 527, 527, 527, 527, 527, 527, 2951, 527,
  /* 30336 */ 527, 527, 527, 527, 2957, 527, 527, 2960, 0, 2315, 2316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 297,
  /* 30362 */ 0, 0, 2354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2365, 2315, 482, 2392, 482, 482, 482, 482, 482, 482, 482,
  /* 30388 */ 482, 482, 482, 482, 482, 482, 482, 1236, 482, 482, 482, 482, 482, 482, 2407, 482, 482, 482, 2410, 482,
  /* 30408 */ 482, 482, 2415, 482, 482, 482, 482, 482, 482, 2102, 0, 0, 0, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 30430 */ 2699, 503, 2702, 503, 503, 482, 482, 482, 482, 2422, 482, 482, 482, 482, 482, 482, 482, 2427, 482, 482,
  /* 30450 */ 482, 482, 482, 482, 2103, 0, 0, 0, 503, 503, 503, 503, 503, 503, 2495, 503, 503, 503, 0, 0, 0, 2498, 0,
  /* 30473 */ 1799, 503, 503, 2440, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1281, 503, 503,
  /* 30493 */ 503, 503, 2452, 503, 2454, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1312, 503, 503, 503,
  /* 30513 */ 503, 503, 2479, 503, 503, 503, 503, 503, 503, 503, 2486, 503, 503, 503, 503, 503, 503, 1266, 503, 503,
  /* 30533 */ 503, 503, 503, 1278, 503, 503, 503, 503, 2491, 503, 503, 503, 503, 503, 503, 503, 503, 0, 2497, 0, 0, 0,
  /* 30555 */ 0, 0, 0, 3369, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2383, 482, 482, 482, 482, 482, 2388, 482, 482,
  /* 30577 */ 527, 527, 2538, 527, 527, 527, 2543, 527, 527, 527, 527, 527, 527, 527, 2550, 527, 0, 0, 0, 3475, 482,
  /* 30598 */ 482, 482, 3477, 503, 503, 503, 3479, 527, 527, 527, 527, 527, 889, 0, 0, 503, 82171, 978, 0, 0, 0, 0, 0,
  /* 30621 */ 0, 2006, 2007, 0, 0, 2009, 0, 0, 0, 0, 2014, 2603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 482,
  /* 30650 */ 482, 482, 2659, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2093, 482, 2095, 482, 482,
  /* 30670 */ 482, 482, 482, 2672, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2678, 503, 2706, 503, 503, 503,
  /* 30690 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3163, 503, 503, 503, 2719, 503, 503, 503, 503, 503,
  /* 30711 */ 503, 503, 503, 503, 503, 503, 503, 2726, 527, 2754, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 30732 */ 527, 527, 527, 2508, 527, 527, 527, 2767, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 30752 */ 2774, 0, 0, 2813, 2814, 0, 2815, 0, 2817, 0, 0, 0, 0, 2819, 0, 0, 0, 0, 0, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30780 */ 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2838, 0, 0, 2819, 0, 0, 2844, 2845, 0, 2847, 0, 0, 2850, 0,
  /* 30809 */ 0, 0, 0, 1544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1551, 0, 0, 2853, 482, 482, 482, 482, 482, 482, 2860, 482,
  /* 30835 */ 482, 482, 482, 482, 2864, 2893, 482, 503, 503, 503, 503, 503, 503, 2900, 503, 503, 503, 503, 503, 2904,
  /* 30855 */ 503, 0, 0, 0, 3187, 0, 0, 3190, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 1935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30885 */ 3016, 0, 0, 0, 0, 2934, 503, 527, 527, 527, 527, 527, 527, 2941, 527, 527, 527, 527, 527, 2945, 527, 0, 0,
  /* 30908 */ 482, 482, 503, 503, 527, 527, 0, 482, 503, 527, 0, 482, 503, 527, 0, 0, 0, 0, 0, 0, 0, 2975, 527, 503, 0,
  /* 30933 */ 0, 0, 0, 0, 0, 2982, 0, 0, 2985, 0, 0, 0, 0, 0, 1482, 1483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2588672, 0, 0,
  /* 30962 */ 0, 0, 2871296, 0, 3006, 3007, 3008, 0, 0, 3011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1940, 0, 0, 0, 0, 0, 3029,
  /* 30989 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3039, 482, 482, 482, 482, 482, 1651, 482,
  /* 31010 */ 482, 482, 1655, 482, 482, 1660, 482, 482, 482, 482, 482, 482, 3148, 482, 503, 503, 503, 503, 503, 503,
  /* 31030 */ 503, 503, 2163, 503, 503, 503, 503, 503, 503, 503, 3051, 503, 503, 503, 503, 503, 503, 503, 3056, 503,
  /* 31050 */ 503, 503, 503, 503, 503, 503, 884, 503, 503, 503, 503, 503, 0, 527, 527, 527, 3084, 527, 527, 527, 527,
  /* 31071 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2522, 527, 3095, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 31092 */ 527, 527, 527, 527, 527, 527, 3105, 0, 0, 0, 3116, 0, 2998, 3118, 0, 0, 3121, 0, 0, 0, 0, 0, 0, 0, 1515,
  /* 31117 */ 0, 0, 0, 0, 0, 1521, 0, 0, 503, 3165, 503, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 31140 */ 527, 527, 2946, 482, 482, 482, 3210, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503,
  /* 31161 */ 503, 503, 503, 503, 503, 503, 3277, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 31182 */ 3292, 482, 482, 482, 482, 3325, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 2899,
  /* 31202 */ 503, 503, 503, 503, 503, 503, 503, 503, 2925, 503, 2927, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 31222 */ 3338, 503, 503, 503, 503, 503, 503, 503, 503, 527, 527, 527, 527, 527, 527, 527, 3081, 3082, 527, 527,
  /* 31242 */ 527, 3351, 527, 527, 527, 527, 527, 527, 527, 527, 503, 3360, 3361, 0, 0, 0, 0, 0, 126976, 0, 0, 0, 0, 0,
  /* 31266 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3367, 0, 0, 3370, 3371, 3372, 482, 482, 482, 3375, 482, 3377, 482, 482, 482,
  /* 31291 */ 482, 3382, 3383, 3384, 503, 503, 503, 3387, 503, 3389, 503, 503, 503, 503, 0, 2189, 0, 0, 527, 527, 527,
  /* 31312 */ 527, 527, 527, 527, 527, 3180, 527, 527, 527, 527, 527, 527, 527, 503, 3394, 3395, 3396, 527, 527, 527,
  /* 31332 */ 3399, 527, 3401, 527, 527, 527, 527, 3406, 0, 0, 0, 0, 1553, 1554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1535,
  /* 31358 */ 0, 0, 0, 0, 0, 0, 0, 3439, 482, 482, 3441, 482, 482, 482, 3445, 503, 503, 3447, 503, 503, 0, 0, 2790, 0,
  /* 31382 */ 0, 0, 0, 0, 0, 0, 0, 0, 2796, 0, 503, 3451, 527, 527, 3453, 527, 527, 527, 3457, 503, 0, 0, 0, 0, 0, 482,
  /* 31408 */ 482, 482, 2647, 482, 482, 482, 482, 482, 482, 2654, 482, 0, 0, 288, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31434 */ 0, 0, 2834, 2835, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 328, 0, 0, 0, 336,
  /* 31465 */ 338, 0, 0, 0, 0, 0, 0, 0, 0, 2806, 0, 0, 0, 0, 0, 0, 0, 0, 2609, 0, 0, 0, 0, 0, 0, 0, 0, 2624, 0, 0, 0, 0,
  /* 31497 */ 0, 0, 0, 0, 2636, 0, 0, 2639, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 1556, 0,
  /* 31528 */ 0, 0, 0, 0, 0, 0, 0, 0, 3316, 0, 0, 0, 0, 482, 482, 0, 371, 73728, 77824, 0, 0, 328, 328, 0, 383, 69632,
  /* 31554 */ 328, 383, 383, 289, 328, 383, 0, 0, 383, 0, 411, 383, 0, 383, 449, 449, 449, 454, 449, 449, 449, 454, 449,
  /* 31577 */ 383, 383, 383, 383, 383, 383, 383, 383, 383, 488, 510, 488, 510, 488, 488, 534, 510, 510, 510, 534, 510,
  /* 31598 */ 510, 510, 510, 510, 510, 510, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 482, 763, 482, 482, 482, 482,
  /* 31620 */ 482, 482, 792, 482, 482, 482, 482, 482, 482, 0, 0, 0, 0, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 31643 */ 503, 503, 503, 503, 527, 527, 527, 527, 905, 527, 527, 527, 527, 527, 527, 935, 527, 527, 527, 527, 527,
  /* 31664 */ 527, 527, 527, 2505, 527, 527, 527, 527, 527, 527, 527, 1177, 482, 482, 482, 482, 482, 1189, 482, 482,
  /* 31684 */ 482, 482, 482, 482, 482, 482, 482, 1231, 482, 482, 482, 482, 482, 482, 482, 482, 1681, 482, 482, 482, 482,
  /* 31705 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 1256, 831, 503, 0, 0, 2004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31731 */ 0, 0, 570, 0, 0, 2419, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2096,
  /* 31753 */ 482, 3030, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1661, 482, 482, 527, 527,
  /* 31774 */ 3085, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1875, 1876, 527, 0, 0, 0, 0, 3440,
  /* 31796 */ 482, 482, 482, 482, 482, 482, 3446, 503, 503, 503, 503, 0, 0, 0, 0, 527, 527, 527, 527, 527, 2198, 527,
  /* 31818 */ 527, 503, 503, 3452, 527, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 0, 482, 482, 482, 3442, 3443, 482,
  /* 31840 */ 482, 503, 503, 503, 3448, 3449, 0, 0, 73728, 77824, 0, 0, 0, 0, 0, 384, 69632, 0, 384, 384, 0, 0, 0, 0, 0,
  /* 31865 */ 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 568, 674, 675, 676, 0, 384, 393, 0, 384, 0, 0, 384, 430, 443,
  /* 31891 */ 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 489, 511, 489, 511, 489, 489, 511, 489, 489, 535, 511,
  /* 31912 */ 511, 511, 535, 511, 511, 511, 511, 511, 511, 511, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 989, 993, 0,
  /* 31935 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0, 0, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3003,
  /* 31968 */ 0, 0, 503, 503, 30019, 1799, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1436, 527, 503,
  /* 31989 */ 0, 0, 1932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 617, 0, 0, 1971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32022 */ 0, 0, 722, 0, 0, 0, 527, 527, 527, 527, 2234, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2226,
  /* 32045 */ 527, 527, 527, 527, 482, 482, 482, 482, 2683, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1674,
  /* 32066 */ 482, 482, 1677, 482, 527, 527, 527, 527, 2779, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 32086 */ 2238, 527, 527, 527, 527, 2798, 0, 0, 0, 2802, 0, 0, 0, 0, 0, 2808, 0, 0, 0, 0, 0, 0, 704, 0, 0, 0, 0, 0,
  /* 32114 */ 0, 0, 0, 0, 0, 1483, 0, 0, 0, 0, 0, 0, 2823, 0, 0, 2826, 0, 0, 0, 0, 0, 2831, 0, 0, 0, 0, 0, 0, 708, 0, 0,
  /* 32145 */ 0, 0, 0, 0, 0, 0, 0, 0, 1953, 0, 0, 0, 0, 1957, 0, 0, 0, 2854, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 32171 */ 482, 482, 482, 482, 2688, 482, 482, 482, 482, 482, 2880, 482, 482, 482, 482, 482, 482, 482, 482, 2888,
  /* 32191 */ 482, 482, 2891, 482, 482, 482, 482, 482, 1668, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2884,
  /* 32211 */ 482, 2886, 482, 482, 482, 482, 482, 482, 482, 482, 2894, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 32232 */ 503, 503, 503, 1775, 503, 503, 503, 503, 2921, 503, 503, 503, 503, 503, 503, 503, 503, 2929, 503, 503,
  /* 32252 */ 2932, 503, 0, 0, 0, 3252, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 1915, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
  /* 32282 */ 0, 0, 0, 159744, 0, 503, 503, 2935, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2254,
  /* 32304 */ 527, 527, 527, 527, 2962, 527, 527, 527, 527, 527, 527, 527, 527, 2970, 527, 527, 2973, 527, 0, 0, 482,
  /* 32325 */ 482, 503, 503, 527, 527, 0, 482, 503, 527, 3490, 3491, 3492, 3040, 482, 3042, 482, 482, 482, 482, 482,
  /* 32345 */ 482, 482, 482, 482, 482, 503, 503, 3050, 3062, 503, 503, 503, 503, 503, 503, 503, 503, 3068, 503, 3070,
  /* 32365 */ 503, 503, 503, 503, 0, 0, 0, 0, 527, 527, 527, 527, 2197, 527, 527, 527, 527, 527, 3096, 527, 3098, 527,
  /* 32387 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 1893, 0, 1895, 0, 1897, 0, 1899, 0, 0, 2275, 0, 0,
  /* 32410 */ 0, 0, 0, 3126, 0, 0, 3128, 0, 0, 0, 0, 0, 0, 482, 482, 482, 3024, 482, 482, 482, 482, 482, 482, 482, 3144,
  /* 32435 */ 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 861, 503, 503, 3156, 503,
  /* 32456 */ 503, 503, 503, 503, 503, 503, 503, 503, 3162, 503, 503, 503, 503, 0, 2190, 0, 0, 527, 527, 527, 527, 527,
  /* 32478 */ 527, 527, 527, 1390, 527, 527, 527, 527, 527, 527, 527, 527, 3301, 527, 3303, 3304, 527, 3306, 527, 3308,
  /* 32498 */ 482, 3463, 3464, 482, 482, 503, 503, 3467, 3468, 503, 503, 527, 527, 3471, 3472, 527, 0, 0, 482, 482, 503,
  /* 32519 */ 503, 527, 527, 3486, 3487, 3488, 3489, 0, 482, 503, 503, 3280, 503, 503, 503, 503, 3285, 503, 503, 503,
  /* 32539 */ 503, 3290, 503, 503, 503, 503, 876, 503, 503, 503, 503, 503, 503, 503, 503, 0, 527, 527, 527, 527, 527,
  /* 32560 */ 2221, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1410, 527, 527, 527, 527, 527, 0, 572, 0, 0, 0, 0,
  /* 32583 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0, 680, 0, 0, 0, 0, 0, 680, 680, 0, 0, 750, 0, 0, 0, 0, 0, 1513,
  /* 32614 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 1122, 0, 0, 482, 482, 482, 773, 482, 482, 482, 482, 482, 482,
  /* 32641 */ 482, 482, 482, 482, 482, 2053, 482, 482, 482, 482, 482, 482, 482, 482, 827, 482, 503, 503, 503, 503, 843,
  /* 32662 */ 503, 503, 503, 503, 503, 1265, 503, 503, 503, 1269, 503, 503, 1280, 503, 503, 1284, 527, 527, 916, 527,
  /* 32682 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2268, 527, 527, 527, 527, 527, 972, 527, 503,
  /* 32703 */ 0, 0, 503, 82171, 978, 0, 0, 0, 0, 0, 0, 995, 0, 0, 997, 0, 0, 0, 0, 0, 0, 0, 2345, 0, 0, 0, 0, 0, 0, 0,
  /* 32733 */ 0, 0, 2308, 0, 0, 0, 0, 0, 2313, 0, 1125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 503, 503, 503,
  /* 32763 */ 1324, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1742, 503, 503, 503, 1795, 503, 30019,
  /* 32783 */ 0, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1826, 527, 527, 527, 527, 527, 527, 527,
  /* 32804 */ 2204, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2266, 527, 527, 2269, 2270, 527, 2552, 527,
  /* 32824 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 0, 0, 0, 2604, 0, 0, 0, 0, 0, 0, 0,
  /* 32849 */ 0, 0, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 3020, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 32875 */ 806, 482, 482, 503, 503, 3166, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0,
  /* 32897 */ 0, 0, 0, 0, 73728, 77824, 0, 0, 378, 378, 0, 0, 69632, 378, 0, 0, 0, 378, 0, 394, 0, 0, 0, 378, 291, 431,
  /* 32923 */ 444, 444, 444, 444, 444, 444, 444, 444, 465, 473, 473, 473, 473, 473, 473, 480, 480, 490, 512, 490, 512,
  /* 32944 */ 490, 490, 536, 512, 512, 512, 536, 512, 512, 512, 512, 512, 512, 512, 1, 16386, 3, 82171, 82171, 253, 0,
  /* 32965 */ 0, 0, 619, 620, 0, 324, 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 632, 0, 0, 741, 0, 0, 0, 0, 0, 741, 741, 0,
  /* 32994 */ 0, 0, 0, 721, 0, 0, 0, 0, 1594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 314, 315, 316, 0, 0, 482, 482, 482,
  /* 33023 */ 482, 776, 482, 784, 482, 482, 482, 482, 482, 482, 482, 482, 1250, 1251, 482, 482, 482, 1256, 831, 503,
  /* 33043 */ 482, 482, 482, 482, 828, 482, 503, 503, 503, 503, 503, 846, 503, 854, 503, 503, 0, 2789, 0, 0, 0, 0, 0, 0,
  /* 33067 */ 0, 0, 0, 0, 0, 0, 1504, 0, 0, 0, 527, 527, 527, 919, 527, 927, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 33091 */ 527, 527, 1413, 527, 527, 527, 527, 527, 527, 527, 527, 973, 527, 503, 0, 0, 503, 82171, 978, 0, 0, 0, 0,
  /* 33114 */ 0, 0, 997, 1130, 0, 0, 0, 0, 0, 0, 1137, 0, 0, 0, 1079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664, 583,
  /* 33144 */ 0, 482, 482, 482, 482, 1182, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1201, 482, 482, 482, 482, 482,
  /* 33165 */ 1684, 482, 482, 482, 482, 482, 1690, 482, 482, 482, 482, 482, 482, 0, 2104, 0, 0, 503, 503, 503, 503, 503,
  /* 33187 */ 503, 1328, 503, 503, 503, 503, 503, 1335, 503, 503, 503, 1240, 482, 482, 482, 482, 482, 1246, 482, 482,
  /* 33207 */ 482, 1253, 482, 482, 1256, 831, 503, 0, 0, 2565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2575, 0, 0, 0, 0, 0, 176128,
  /* 33233 */ 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1501, 0, 0, 0, 0, 0, 0, 503, 503, 1344, 503, 503, 30019, 1256, 904,
  /* 33259 */ 527, 527, 527, 527, 527, 527, 527, 527, 2557, 527, 527, 527, 527, 527, 527, 503, 527, 527, 527, 1362, 527,
  /* 33280 */ 527, 527, 527, 527, 527, 527, 527, 527, 1381, 527, 527, 527, 527, 527, 2502, 527, 527, 527, 527, 2506,
  /* 33300 */ 527, 527, 527, 527, 527, 527, 1850, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2210, 527, 527, 527, 527,
  /* 33321 */ 527, 527, 527, 1422, 527, 527, 527, 527, 527, 1428, 527, 527, 527, 1435, 527, 527, 503, 0, 2977, 0, 0, 0,
  /* 33343 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 1492, 0, 0, 1495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3131,
  /* 33374 */ 482, 482, 0, 1525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1537, 0, 0, 0, 0, 0, 159744, 159744, 0, 0, 0, 0, 0, 0,
  /* 33403 */ 0, 0, 0, 0, 0, 1561, 1562, 0, 1564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 482,
  /* 33429 */ 482, 482, 1635, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2889, 482, 482, 482, 482, 482,
  /* 33450 */ 1664, 482, 482, 482, 1669, 482, 482, 482, 482, 482, 482, 482, 482, 1678, 1695, 1697, 482, 482, 482, 482,
  /* 33470 */ 482, 1256, 0, 503, 503, 503, 503, 503, 503, 503, 1267, 503, 503, 503, 1276, 503, 503, 503, 503, 503, 1763,
  /* 33491 */ 503, 503, 503, 503, 503, 503, 503, 503, 1772, 503, 503, 503, 503, 503, 1292, 1294, 503, 503, 503, 503,
  /* 33511 */ 503, 503, 503, 503, 503, 2722, 503, 503, 503, 503, 503, 503, 503, 1780, 503, 503, 503, 503, 503, 503, 503,
  /* 33532 */ 503, 503, 1789, 1791, 503, 503, 503, 503, 503, 2709, 503, 503, 2712, 503, 503, 503, 503, 503, 503, 503,
  /* 33552 */ 1329, 503, 503, 503, 503, 503, 503, 503, 503, 894, 503, 503, 503, 503, 0, 527, 527, 1945, 0, 0, 0, 0, 0,
  /* 33575 */ 1951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2299, 0, 0, 0, 0, 0, 0, 1959, 0, 0, 0, 0, 0, 0, 0, 0, 1967, 0, 0, 0,
  /* 33606 */ 0, 0, 0, 1010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 2376, 482, 482, 482, 482, 482, 2030, 482,
  /* 33631 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2042, 482, 2084, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 33652 */ 482, 482, 482, 482, 482, 482, 1692, 482, 482, 482, 2098, 482, 482, 482, 482, 0, 0, 0, 0, 503, 503, 503,
  /* 33674 */ 503, 503, 2113, 0, 0, 2291, 2292, 0, 0, 2295, 0, 2297, 0, 0, 0, 0, 0, 0, 0, 0, 2830, 0, 0, 0, 0, 0, 0, 0,
  /* 33702 */ 0, 2999, 0, 0, 0, 3002, 0, 0, 0, 0, 2302, 0, 0, 2305, 0, 0, 0, 0, 0, 0, 2309, 0, 0, 0, 0, 0, 0, 118784,
  /* 33730 */ 229376, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 1053, 0, 0, 0, 0, 0, 1059, 0, 0, 0, 0, 2330, 0, 0, 0, 0, 0, 0, 0,
  /* 33759 */ 2334, 2335, 0, 0, 2338, 0, 0, 2341, 0, 0, 0, 0, 0, 0, 0, 2348, 0, 0, 0, 0, 0, 0, 1038, 1039, 0, 0, 0, 0,
  /* 33787 */ 0, 324, 324, 0, 482, 482, 482, 482, 2395, 482, 482, 482, 482, 482, 482, 2400, 482, 482, 482, 482, 482,
  /* 33808 */ 482, 503, 503, 836, 503, 503, 503, 503, 503, 503, 865, 503, 503, 2492, 503, 503, 503, 503, 503, 503, 503,
  /* 33829 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2795, 0, 0, 0, 0, 527, 2499, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 33855 */ 527, 527, 527, 527, 2535, 527, 527, 527, 527, 2526, 527, 527, 527, 527, 527, 527, 527, 2532, 527, 527,
  /* 33875 */ 527, 527, 527, 527, 3089, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2224, 527, 527, 527, 527, 527, 527,
  /* 33896 */ 527, 527, 2539, 527, 527, 527, 527, 527, 527, 2546, 527, 527, 527, 527, 527, 527, 527, 2966, 527, 2968,
  /* 33916 */ 527, 527, 527, 527, 527, 527, 527, 2952, 527, 527, 527, 527, 527, 527, 527, 527, 2529, 527, 527, 527, 527,
  /* 33937 */ 527, 527, 527, 527, 527, 527, 2553, 527, 527, 527, 2556, 527, 527, 527, 527, 527, 527, 527, 503, 2273, 0,
  /* 33958 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 2619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33990 */ 180224, 180224, 180224, 2631, 0, 0, 0, 2633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2612, 0, 0, 0, 482, 482,
  /* 34016 */ 482, 2671, 482, 482, 482, 482, 482, 482, 482, 482, 2676, 482, 482, 482, 482, 482, 482, 2382, 482, 482,
  /* 34036 */ 2385, 2386, 482, 482, 482, 482, 482, 0, 0, 0, 0, 0, 0, 503, 503, 2436, 503, 503, 2679, 482, 2681, 482,
  /* 34058 */ 482, 482, 482, 482, 482, 2685, 482, 482, 482, 482, 482, 482, 0, 0, 0, 0, 503, 503, 503, 503, 2112, 503, 0,
  /* 34081 */ 0, 503, 503, 2693, 503, 503, 503, 503, 503, 2698, 503, 503, 503, 503, 503, 1327, 503, 503, 1331, 503, 503,
  /* 34102 */ 503, 503, 503, 1337, 503, 503, 2718, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2724, 503, 503,
  /* 34122 */ 503, 503, 503, 3065, 503, 503, 503, 503, 503, 503, 3071, 503, 3073, 503, 2727, 503, 2729, 503, 503, 503,
  /* 34142 */ 503, 503, 503, 2733, 503, 503, 503, 503, 503, 503, 1293, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 34162 */ 2444, 503, 503, 2447, 2448, 503, 503, 0, 0, 527, 527, 2741, 527, 527, 527, 527, 527, 2746, 527, 527, 527,
  /* 34183 */ 527, 527, 527, 2248, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1408, 527, 527, 527, 527, 527, 527, 527,
  /* 34204 */ 2766, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2772, 527, 527, 527, 527, 527, 1368, 527, 1373,
  /* 34224 */ 527, 527, 1377, 527, 527, 1380, 527, 527, 2775, 527, 2777, 527, 527, 527, 527, 527, 527, 2781, 527, 527,
  /* 34244 */ 527, 527, 527, 527, 527, 3240, 527, 527, 527, 527, 527, 527, 527, 527, 2263, 527, 2265, 527, 527, 527,
  /* 34264 */ 527, 527, 503, 503, 2788, 0, 0, 2791, 2792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2846, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34293 */ 2840, 0, 0, 2843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2990, 2991, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 2858,
  /* 34321 */ 482, 482, 482, 482, 2862, 482, 482, 482, 482, 482, 482, 2396, 482, 482, 482, 2399, 482, 482, 2401, 482,
  /* 34341 */ 2402, 482, 482, 482, 482, 2868, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2092, 482, 482,
  /* 34361 */ 482, 482, 482, 482, 482, 482, 2882, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2874, 482, 482,
  /* 34382 */ 482, 482, 503, 503, 503, 2908, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1757, 503, 503,
  /* 34403 */ 503, 503, 503, 503, 503, 2923, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1741, 503, 503, 503,
  /* 34424 */ 503, 503, 503, 527, 527, 527, 527, 2939, 527, 527, 527, 527, 2943, 527, 527, 527, 527, 527, 527, 3100,
  /* 34444 */ 527, 527, 527, 527, 527, 527, 527, 527, 503, 527, 527, 527, 2949, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 34465 */ 527, 527, 527, 527, 1840, 527, 527, 527, 527, 527, 527, 527, 2964, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 34486 */ 527, 527, 527, 2520, 527, 527, 527, 527, 0, 0, 0, 0, 3109, 0, 0, 0, 0, 0, 3112, 0, 0, 0, 0, 0, 0, 1051, 0,
  /* 34513 */ 0, 0, 0, 1056, 0, 0, 0, 0, 482, 482, 482, 3134, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 34536 */ 482, 3037, 482, 482, 482, 482, 482, 3145, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503, 3152,
  /* 34556 */ 503, 503, 503, 503, 1326, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1756, 503, 503, 503, 503,
  /* 34577 */ 3261, 0, 482, 482, 482, 482, 482, 482, 482, 482, 3271, 482, 3273, 3274, 482, 3276, 482, 3417, 482, 482,
  /* 34597 */ 482, 503, 503, 503, 503, 503, 503, 3423, 503, 3424, 503, 503, 503, 503, 503, 30019, 1256, 904, 527, 527,
  /* 34617 */ 1352, 527, 527, 527, 527, 527, 527, 1884, 527, 527, 527, 527, 527, 527, 1891, 503, 0, 503, 527, 527, 527,
  /* 34638 */ 527, 527, 527, 3430, 527, 3431, 527, 527, 527, 503, 0, 0, 0, 2979, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
  /* 34664 */ 0, 0, 0, 0, 482, 513, 482, 482, 537, 513, 513, 513, 537, 513, 513, 513, 513, 513, 513, 513, 1, 16386, 3,
  /* 34687 */ 82171, 82171, 253, 0, 0, 0, 503, 503, 503, 2117, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 34708 */ 503, 1774, 503, 503, 503, 527, 2202, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 34729 */ 2560, 503, 340, 0, 73728, 77824, 362, 0, 0, 0, 0, 385, 69632, 0, 385, 385, 0, 0, 0, 0, 0, 208896, 208896,
  /* 34752 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 399, 385, 0, 0, 385, 432, 445, 445, 445, 445, 445, 445, 445, 445,
  /* 34778 */ 445, 445, 445, 491, 514, 491, 514, 491, 491, 514, 491, 491, 538, 514, 514, 514, 538, 514, 514, 514, 514,
  /* 34799 */ 514, 514, 514, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664,
  /* 34826 */ 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1968, 0, 0, 0, 0, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34859 */ 0, 680, 0, 482, 764, 482, 482, 482, 778, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1689, 482, 482, 482,
  /* 34881 */ 482, 482, 1694, 814, 482, 482, 482, 482, 482, 503, 503, 833, 503, 503, 503, 848, 503, 503, 503, 503, 503,
  /* 34902 */ 3159, 503, 503, 503, 503, 3160, 3161, 503, 503, 503, 503, 0, 0, 0, 0, 527, 527, 527, 527, 527, 527, 527,
  /* 34924 */ 527, 527, 2747, 527, 2750, 527, 527, 906, 527, 527, 527, 921, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 34945 */ 527, 959, 0, 989, 993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000, 1001, 0, 0, 0, 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 0,
  /* 34974 */ 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 1001, 0, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 0, 0, 0, 0, 1901, 0, 0, 0, 0, 0,
  /* 35006 */ 0, 0, 0, 0, 1557, 0, 0, 0, 0, 0, 0, 1204, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 35031 */ 482, 482, 2390, 482, 482, 482, 482, 1222, 482, 482, 482, 482, 482, 482, 482, 1235, 482, 482, 482, 482,
  /* 35051 */ 482, 482, 2423, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3047, 482, 482, 482, 482, 503, 503, 503,
  /* 35071 */ 1259, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1272, 1279, 503, 503, 503, 503, 503, 3225, 503,
  /* 35091 */ 503, 503, 503, 503, 503, 503, 503, 527, 527, 527, 3079, 527, 527, 527, 527, 527, 527, 1340, 503, 503, 503,
  /* 35112 */ 503, 30019, 1256, 904, 527, 1350, 527, 527, 527, 527, 527, 527, 527, 3356, 527, 527, 3358, 503, 0, 0, 0,
  /* 35133 */ 0, 1540, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1018, 482, 482, 482, 1636, 482, 482, 482, 482, 482,
  /* 35160 */ 482, 482, 482, 482, 482, 482, 482, 2052, 482, 2054, 482, 482, 482, 482, 482, 482, 1650, 482, 482, 482,
  /* 35180 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 2066, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1700, 482,
  /* 35201 */ 482, 1256, 1705, 503, 503, 503, 503, 503, 503, 503, 1295, 503, 503, 503, 503, 503, 503, 503, 503, 893,
  /* 35221 */ 503, 503, 503, 503, 0, 527, 527, 527, 1814, 1815, 527, 527, 527, 527, 1822, 527, 527, 527, 527, 527, 527,
  /* 35242 */ 527, 527, 2953, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1863, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 35263 */ 527, 527, 527, 527, 527, 2534, 527, 527, 0, 0, 1960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
  /* 35291 */ 0, 2069, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2080, 482, 482, 482, 482, 482, 482, 2661,
  /* 35312 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 1229, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2085, 482,
  /* 35333 */ 482, 482, 482, 482, 2090, 482, 482, 482, 482, 482, 482, 0, 0, 0, 0, 503, 503, 503, 2111, 503, 503, 503,
  /* 35355 */ 2170, 503, 503, 503, 503, 503, 2175, 503, 503, 503, 503, 503, 503, 503, 503, 2443, 503, 503, 503, 503,
  /* 35375 */ 503, 503, 503, 503, 2451, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1792, 503,
  /* 35396 */ 503, 0, 2617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 761, 0, 482, 482, 2658, 482, 482, 482, 482, 482,
  /* 35423 */ 482, 482, 482, 482, 482, 482, 482, 482, 2039, 482, 2041, 2705, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 35443 */ 503, 503, 503, 503, 503, 503, 503, 2169, 0, 0, 527, 527, 527, 527, 527, 527, 527, 2745, 527, 527, 527,
  /* 35464 */ 527, 527, 527, 1372, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3090, 527, 527, 527, 527, 527, 527,
  /* 35484 */ 2753, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3094, 0, 0, 2996, 0, 0,
  /* 35506 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 710, 0, 712, 3378, 482, 482, 482, 503, 503, 503, 503, 503, 503, 503,
  /* 35531 */ 3388, 503, 3390, 503, 503, 503, 503, 877, 503, 503, 503, 503, 895, 503, 503, 503, 0, 527, 527, 527, 527,
  /* 35552 */ 527, 2514, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2225, 527, 527, 2228, 527, 527, 503, 527,
  /* 35572 */ 527, 527, 527, 527, 527, 527, 3400, 527, 3402, 527, 527, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2572, 0, 0,
  /* 35597 */ 0, 0, 0, 0, 1067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2146304, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 3420,
  /* 35624 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1297, 503, 503, 503, 503, 503, 503, 3427, 527, 527, 527,
  /* 35645 */ 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 503, 251, 978, 0, 0, 0, 0, 0, 3462, 482, 482, 482, 482,
  /* 35669 */ 503, 3466, 503, 503, 503, 503, 527, 3470, 527, 527, 527, 527, 527, 1369, 527, 527, 527, 527, 527, 527,
  /* 35689 */ 527, 527, 527, 527, 1411, 527, 527, 527, 527, 527, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35716 */ 217088, 0, 0, 345, 0, 73728, 77824, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
  /* 35744 */ 0, 0, 0, 1086, 0, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 418, 433, 418, 418, 418, 418, 418, 418, 418, 418, 466,
  /* 35770 */ 466, 466, 466, 466, 466, 466, 466, 466, 492, 515, 492, 515, 492, 492, 539, 515, 515, 515, 539, 515, 515,
  /* 35791 */ 515, 515, 515, 515, 515, 1, 16386, 3, 82171, 82474, 253, 0, 0, 0, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35818 */ 0, 0, 0, 1032, 0, 482, 482, 482, 482, 482, 779, 482, 482, 793, 482, 482, 482, 482, 482, 482, 0, 0, 0, 0,
  /* 35842 */ 503, 503, 2110, 503, 503, 503, 0, 0, 0, 1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 0, 0, 0, 0,
  /* 35870 */ 0, 1151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138774, 0, 0, 482, 1220, 482, 482, 482, 482, 482, 482,
  /* 35896 */ 482, 482, 482, 482, 482, 482, 1237, 482, 482, 482, 482, 482, 1701, 482, 1256, 0, 503, 503, 503, 503, 503,
  /* 35917 */ 503, 503, 889, 503, 503, 503, 503, 503, 0, 527, 527, 482, 482, 482, 482, 1244, 482, 482, 482, 482, 482,
  /* 35938 */ 482, 482, 482, 1256, 831, 503, 503, 503, 503, 1346, 30019, 1256, 904, 527, 527, 527, 527, 527, 527, 527,
  /* 35958 */ 527, 2236, 527, 527, 527, 527, 527, 527, 527, 527, 1392, 527, 527, 527, 1396, 527, 527, 527, 527, 1401,
  /* 35978 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1419, 503, 978, 0, 1442, 0, 0, 0, 1448,
  /* 36000 */ 0, 0, 0, 1454, 0, 0, 0, 1460, 1478, 0, 0, 0, 1481, 0, 0, 1484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3014, 0, 0, 0,
  /* 36029 */ 0, 0, 0, 503, 503, 1733, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2141, 503, 503,
  /* 36051 */ 527, 527, 527, 1816, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1827, 527, 527, 527, 527, 527, 2542,
  /* 36071 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2531, 527, 527, 527, 527, 527, 527, 1847, 527, 527, 527,
  /* 36092 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2959, 527, 0, 0, 0, 1912, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36117 */ 0, 0, 0, 0, 0, 2879488, 0, 0, 482, 482, 2045, 482, 482, 482, 482, 2050, 482, 482, 482, 482, 482, 482, 482,
  /* 36140 */ 482, 1654, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 2133, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 36161 */ 503, 503, 503, 503, 2152, 503, 503, 503, 527, 2218, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 36182 */ 527, 527, 527, 3093, 527, 2865, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 36203 */ 2669, 527, 527, 527, 527, 3297, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 503, 503,
  /* 36223 */ 1718, 503, 503, 503, 503, 1724, 503, 503, 503, 503, 503, 503, 2468, 503, 503, 503, 503, 503, 503, 2475,
  /* 36243 */ 503, 503, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3434, 0, 0, 0, 0, 0, 2142208,
  /* 36265 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 513, 482, 513, 482, 347, 349, 299, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0,
  /* 36294 */ 298, 0, 0, 0, 0, 0, 2142208, 1082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 998, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
  /* 36324 */ 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 2785280, 0, 0, 0, 0, 2146304, 0, 0, 0, 0, 0, 0, 0, 2372, 0, 482,
  /* 36353 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1627, 482, 482, 482, 0, 0, 299, 0, 0, 0, 0, 346, 0, 0,
  /* 36377 */ 0, 0, 349, 299, 346, 0, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 73728,
  /* 36406 */ 77824, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 298, 0, 0, 0, 0, 1913, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
  /* 36436 */ 364, 0, 0, 0, 0, 400, 0, 406, 298, 0, 434, 434, 450, 450, 450, 450, 450, 450, 450, 434, 434, 434, 434,
  /* 36459 */ 434, 434, 434, 434, 434, 493, 516, 493, 516, 493, 493, 540, 516, 516, 516, 540, 516, 516, 516, 516, 516,
  /* 36480 */ 516, 516, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 588, 589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 0, 0,
  /* 36507 */ 0, 0, 0, 2785280, 0, 0, 0, 0, 2146304, 0, 0, 0, 102400, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 0, 628, 0,
  /* 36534 */ 0, 0, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 36551 */ 159744, 0, 0, 0, 0, 159744, 0, 0, 0, 714, 737, 0, 737, 735, 0, 0, 0, 749, 0, 0, 0, 585, 0, 714, 0, 0, 0,
  /* 36578 */ 0, 0, 0, 718, 0, 0, 0, 0, 727, 0, 0, 0, 0, 1922, 1923, 0, 1925, 1926, 0, 0, 0, 0, 0, 0, 0, 0, 1118208, 0,
  /* 36606 */ 0, 0, 0, 0, 0, 1118208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1118208, 752, 0, 714, 0, 0, 0, 0, 0, 758, 0, 0, 0,
  /* 36635 */ 0, 718, 585, 762, 0, 482, 765, 482, 482, 482, 780, 482, 482, 794, 482, 482, 482, 805, 482, 482, 482, 482,
  /* 36657 */ 482, 503, 503, 3421, 503, 3422, 503, 503, 503, 503, 503, 503, 2149, 503, 503, 503, 503, 503, 503, 503,
  /* 36677 */ 503, 503, 2151, 503, 503, 503, 503, 503, 503, 482, 482, 823, 482, 482, 482, 503, 503, 834, 503, 503, 503,
  /* 36698 */ 850, 503, 503, 864, 907, 527, 527, 527, 923, 527, 527, 937, 527, 527, 527, 527, 950, 527, 527, 527, 527,
  /* 36719 */ 527, 1389, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1838, 527, 527, 527, 527, 527, 527, 968, 527,
  /* 36740 */ 527, 527, 503, 0, 0, 834, 82171, 978, 0, 0, 0, 0, 0, 0, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 1148, 1004, 1005, 0,
  /* 36767 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1002, 1003, 1046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
  /* 36798 */ 0, 1003, 0, 0, 0, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 0, 0, 0, 1965, 0, 0, 0, 0, 0, 1969, 0, 0, 1109, 0, 0, 0,
  /* 36828 */ 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2349, 0, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36860 */ 0, 1138, 0, 0, 0, 1166, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 3269, 482, 482, 482, 482, 482,
  /* 36884 */ 482, 482, 482, 482, 1207, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2055, 482, 482,
  /* 36905 */ 503, 1319, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2153, 503, 503, 527,
  /* 36925 */ 1387, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3184, 527, 0, 0, 0, 1465, 0,
  /* 36947 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 283, 0, 0, 1508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
  /* 36979 */ 1578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1091, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37011 */ 0, 1093, 482, 482, 1634, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2416, 482, 482,
  /* 37032 */ 503, 503, 1715, 503, 503, 503, 503, 503, 503, 503, 503, 1726, 503, 503, 503, 503, 0, 0, 0, 0, 527, 527,
  /* 37054 */ 527, 2196, 527, 527, 527, 527, 527, 527, 3299, 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 503,
  /* 37074 */ 30019, 0, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1809, 527, 527, 527, 527, 527, 2757, 527, 527,
  /* 37094 */ 2760, 527, 527, 527, 527, 527, 527, 527, 934, 527, 527, 527, 527, 527, 527, 527, 527, 1823, 527, 527, 527,
  /* 37115 */ 527, 527, 527, 527, 527, 527, 1848, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2764,
  /* 37136 */ 527, 527, 482, 482, 2029, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2667, 2668,
  /* 37156 */ 482, 527, 527, 2244, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2773, 527, 527,
  /* 37176 */ 2290, 0, 0, 0, 2293, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2611, 0, 0, 0, 0, 0, 0, 0, 2304, 0, 0, 0, 0,
  /* 37206 */ 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 300, 0, 2339, 0, 0, 0, 0, 0, 0, 0, 2346, 0, 0, 0, 0, 0, 0, 0, 0, 3202,
  /* 37236 */ 0, 482, 482, 482, 482, 482, 482, 482, 482, 791, 482, 482, 482, 482, 482, 482, 0, 0, 2355, 0, 0, 0, 0, 0,
  /* 37260 */ 2361, 0, 0, 0, 0, 2364, 0, 0, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 2391,
  /* 37289 */ 482, 2393, 482, 482, 482, 482, 2397, 482, 482, 482, 482, 482, 482, 482, 482, 2384, 482, 482, 482, 482,
  /* 37309 */ 482, 482, 482, 2403, 482, 482, 482, 482, 482, 482, 2409, 482, 482, 482, 482, 482, 482, 2417, 482, 482,
  /* 37329 */ 482, 482, 482, 2032, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2872, 482, 482, 482, 482, 482, 482,
  /* 37350 */ 482, 482, 482, 2421, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2413, 482, 482, 482, 482,
  /* 37371 */ 482, 503, 503, 503, 2453, 503, 2455, 503, 503, 503, 503, 2459, 503, 503, 503, 503, 503, 1719, 503, 503,
  /* 37391 */ 503, 503, 503, 503, 503, 503, 503, 1731, 503, 503, 503, 2465, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 37411 */ 2473, 503, 503, 503, 503, 503, 3340, 503, 3342, 503, 503, 3344, 503, 527, 527, 527, 527, 527, 527, 527,
  /* 37431 */ 527, 527, 527, 527, 527, 503, 0, 3435, 503, 503, 503, 2481, 503, 503, 503, 503, 2485, 503, 503, 503, 503,
  /* 37452 */ 503, 503, 503, 1309, 503, 503, 1311, 503, 503, 503, 1315, 503, 527, 2511, 2512, 527, 527, 527, 527, 527,
  /* 37472 */ 2517, 527, 2519, 527, 527, 527, 527, 2523, 527, 2537, 527, 527, 527, 527, 527, 527, 2545, 527, 527, 527,
  /* 37492 */ 527, 2549, 527, 527, 527, 527, 527, 3088, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1378, 527,
  /* 37512 */ 527, 527, 527, 527, 0, 0, 2577, 0, 0, 0, 0, 0, 2581, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0,
  /* 37541 */ 0, 324, 266240, 0, 0, 0, 0, 0, 0, 2587, 2588, 2589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2602, 2616, 0, 0,
  /* 37569 */ 0, 0, 0, 0, 0, 0, 0, 2626, 0, 0, 0, 0, 0, 0, 1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 580, 581, 0, 0, 0, 0, 0, 0,
  /* 37601 */ 0, 0, 0, 2644, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2426, 482, 482, 482, 482, 482, 0, 0,
  /* 37624 */ 2691, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2181, 503, 503, 0, 0, 2739, 527,
  /* 37645 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2785, 527, 527, 0, 2799, 2800, 0, 0, 0, 0,
  /* 37667 */ 2805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3413, 482, 482, 482, 482, 482, 482, 2851, 0, 0, 482, 482, 2856, 482, 482,
  /* 37692 */ 482, 482, 482, 482, 482, 482, 482, 482, 2675, 482, 482, 482, 482, 482, 482, 482, 482, 2881, 482, 482,
  /* 37712 */ 2883, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2398, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503,
  /* 37733 */ 2896, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2125, 503, 503, 503, 503, 503, 503, 503,
  /* 37753 */ 2922, 503, 503, 2924, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2496, 0, 0, 0, 0, 0, 0, 503, 503, 527,
  /* 37776 */ 527, 2937, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3104, 527, 527, 527, 503, 527, 527, 527,
  /* 37797 */ 2963, 527, 527, 2965, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1870, 527, 527, 527, 527, 527, 527,
  /* 37817 */ 482, 482, 3031, 3032, 482, 482, 482, 482, 482, 3036, 482, 482, 482, 482, 482, 482, 0, 0, 0, 0, 503, 2109,
  /* 37839 */ 503, 503, 503, 503, 482, 3041, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 2897,
  /* 37860 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2187, 2497, 0, 0, 0, 0, 503, 503, 503, 503, 3053, 3054,
  /* 37882 */ 503, 503, 503, 503, 3058, 3059, 503, 503, 503, 503, 0, 0, 0, 0, 527, 527, 2195, 527, 527, 527, 527, 527,
  /* 37904 */ 527, 2555, 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 3063, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 37925 */ 3069, 503, 503, 503, 503, 503, 1736, 503, 503, 503, 503, 503, 503, 503, 503, 1743, 503, 527, 527, 527,
  /* 37945 */ 3086, 3087, 527, 527, 527, 527, 527, 3091, 527, 527, 527, 527, 527, 527, 2503, 527, 527, 527, 527, 527,
  /* 37965 */ 527, 527, 527, 527, 2954, 527, 2956, 527, 527, 527, 527, 527, 527, 527, 3097, 527, 527, 527, 527, 527,
  /* 37985 */ 527, 527, 527, 527, 527, 527, 503, 503, 503, 503, 1735, 503, 503, 503, 503, 1739, 503, 503, 503, 503, 503,
  /* 38006 */ 503, 2484, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1723, 503, 503, 503, 503, 503, 503, 0, 0, 3107, 0,
  /* 38028 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724, 0, 729, 3124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482,
  /* 38059 */ 482, 482, 482, 3416, 503, 503, 503, 3157, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 38079 */ 2460, 503, 503, 503, 0, 0, 0, 0, 3199, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 482, 1623, 482,
  /* 38103 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3212, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503,
  /* 38124 */ 503, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1418, 527, 0, 0, 482, 482,
  /* 38146 */ 3265, 482, 482, 482, 482, 3270, 482, 482, 482, 482, 3275, 482, 482, 482, 482, 482, 2073, 482, 482, 482,
  /* 38166 */ 482, 482, 2079, 482, 482, 482, 482, 482, 482, 1209, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1641,
  /* 38186 */ 482, 482, 482, 482, 482, 482, 527, 527, 3295, 527, 527, 527, 527, 3300, 527, 527, 527, 527, 3305, 527,
  /* 38206 */ 527, 503, 503, 503, 503, 1750, 503, 503, 503, 1755, 503, 503, 503, 503, 503, 503, 503, 1769, 503, 503,
  /* 38226 */ 503, 503, 503, 503, 503, 503, 2176, 503, 503, 503, 503, 503, 503, 503, 503, 503, 527, 527, 527, 3454,
  /* 38246 */ 3455, 527, 527, 503, 0, 0, 0, 0, 0, 482, 482, 2646, 482, 482, 482, 482, 482, 2651, 482, 482, 482, 527,
  /* 38268 */ 3494, 3495, 3496, 3497, 0, 482, 503, 527, 0, 0, 0, 0, 0, 0, 0, 0, 188416, 0, 0, 0, 0, 0, 0, 0, 0, 302,
  /* 38294 */ 303, 304, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
  /* 38326 */ 0, 0, 0, 0, 0, 0, 0, 366, 366, 366, 366, 0, 0, 73728, 77824, 0, 0, 0, 0, 305, 304, 69632, 303, 304, 304,
  /* 38351 */ 305, 303, 304, 0, 303, 304, 407, 412, 419, 435, 446, 446, 446, 452, 446, 446, 452, 452, 446, 452, 467,
  /* 38372 */ 467, 467, 467, 467, 467, 467, 467, 467, 494, 517, 494, 517, 494, 494, 541, 517, 517, 517, 541, 517, 517,
  /* 38393 */ 517, 517, 517, 517, 517, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 259, 260, 0, 0, 263, 264, 0, 0, 0,
  /* 38418 */ 0, 0, 568, 0, 0, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 0, 2204271, 0, 0, 0, 573, 574, 575, 576, 577, 578,
  /* 38445 */ 579, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
  /* 38476 */ 0, 0, 0, 0, 0, 1025, 0, 0, 0, 1029, 1030, 0, 0, 0, 604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0,
  /* 38507 */ 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 621, 324, 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2992,
  /* 38537 */ 0, 0, 0, 0, 0, 634, 0, 0, 0, 638, 0, 0, 641, 0, 643, 0, 645, 0, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38568 */ 0, 0, 0, 1503, 0, 0, 1506, 0, 0, 0, 700, 701, 0, 597, 0, 0, 0, 707, 0, 0, 0, 0, 683, 0, 0, 0, 0, 1934, 0,
  /* 38597 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2325, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 0, 0, 0,
  /* 38629 */ 1498, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 0, 0, 0, 731, 0, 0, 614, 0, 0, 0, 683, 0, 0, 0, 0, 0, 0,
  /* 38660 */ 0, 0, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 676, 743, 0, 0, 0, 676, 0, 0, 746, 621,
  /* 38680 */ 0, 0, 0, 751, 0, 0, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 2998, 0, 0, 3120, 0, 0, 0,
  /* 38710 */ 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 614, 621, 0, 0, 614, 751, 751, 0, 0, 0, 0,
  /* 38740 */ 0, 0, 253952, 0, 0, 253952, 253952, 0, 0, 0, 0, 0, 0, 0, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
  /* 38768 */ 0, 0, 0, 0, 482, 482, 770, 774, 777, 482, 785, 482, 482, 799, 801, 804, 482, 482, 482, 482, 482, 482,
  /* 38790 */ 3046, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 2898, 503, 503, 503, 503, 2902, 503, 503, 503,
  /* 38810 */ 503, 815, 819, 482, 482, 482, 482, 503, 503, 503, 840, 844, 847, 503, 855, 503, 503, 503, 503, 878, 503,
  /* 38831 */ 503, 503, 503, 896, 503, 503, 503, 0, 527, 527, 527, 527, 527, 3099, 527, 3101, 527, 527, 527, 527, 527,
  /* 38852 */ 527, 527, 503, 503, 870, 872, 875, 503, 503, 503, 887, 891, 503, 503, 503, 503, 0, 527, 527, 527, 527,
  /* 38873 */ 527, 3298, 527, 527, 527, 3302, 527, 527, 527, 527, 527, 503, 527, 913, 917, 920, 527, 928, 527, 527, 527,
  /* 38894 */ 943, 945, 948, 527, 527, 527, 960, 964, 527, 527, 527, 527, 887, 0, 0, 503, 82171, 978, 0, 0, 0, 0, 0, 0,
  /* 38918 */ 1514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2022, 0, 0, 2025, 0, 482, 0, 1020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38949 */ 0, 0, 1092, 0, 1124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1108, 482, 482, 482, 482, 1208, 482,
  /* 38976 */ 482, 482, 482, 482, 482, 482, 482, 482, 1218, 482, 482, 482, 482, 482, 2087, 2088, 482, 482, 482, 482,
  /* 38996 */ 482, 482, 482, 482, 482, 1213, 482, 482, 482, 1217, 482, 482, 503, 503, 1304, 503, 503, 1308, 503, 503,
  /* 39016 */ 503, 503, 503, 503, 503, 503, 503, 503, 2123, 503, 503, 2127, 503, 503, 1318, 503, 503, 1325, 503, 503,
  /* 39036 */ 503, 503, 503, 503, 503, 503, 503, 503, 1338, 503, 503, 503, 503, 1766, 1767, 503, 503, 503, 503, 503,
  /* 39056 */ 503, 503, 503, 503, 503, 0, 2497, 0, 0, 0, 0, 527, 527, 527, 1388, 527, 527, 527, 527, 527, 527, 527,
  /* 39078 */ 1395, 527, 527, 1399, 527, 0, 3474, 0, 0, 482, 482, 482, 482, 503, 503, 503, 503, 527, 527, 527, 527, 527,
  /* 39100 */ 527, 527, 503, 0, 0, 0, 0, 0, 482, 3022, 482, 482, 482, 3025, 482, 482, 482, 482, 482, 0, 1541, 0, 0, 0,
  /* 39124 */ 0, 0, 0, 0, 0, 0, 1548, 0, 1550, 0, 0, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 324, 324, 0, 0, 1552, 0,
  /* 39152 */ 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 569, 0, 0, 0, 0, 482, 1617, 482, 482, 482, 482, 482, 1622, 482,
  /* 39179 */ 482, 482, 482, 482, 482, 482, 1256, 0, 503, 503, 503, 503, 503, 503, 503, 1, 16386, 3, 82171, 82171, 253,
  /* 39200 */ 0, 0, 0, 503, 1714, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2716, 503, 503,
  /* 39222 */ 503, 503, 1747, 503, 503, 1752, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2165, 503, 503, 503,
  /* 39242 */ 503, 503, 503, 503, 30019, 0, 527, 1802, 527, 527, 527, 527, 527, 527, 1808, 527, 527, 527, 527, 527,
  /* 39262 */ 1404, 527, 527, 527, 527, 527, 527, 527, 1417, 527, 527, 1830, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 39282 */ 1837, 527, 527, 527, 1841, 527, 527, 527, 527, 527, 3354, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 0, 0,
  /* 39305 */ 0, 2983, 0, 0, 0, 0, 0, 1846, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 39328 */ 3247, 527, 527, 527, 527, 1880, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 503, 0, 1444, 0, 1450,
  /* 39349 */ 0, 1456, 0, 1462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474, 0, 0, 0, 0, 0, 1894, 0, 981, 0, 0, 0, 1896, 0,
  /* 39378 */ 985, 0, 0, 0, 1898, 0, 0, 0, 0, 1949, 1950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2598, 0, 0, 0, 0, 989, 0, 0,
  /* 39408 */ 0, 1900, 0, 993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3104768, 3125248, 0, 0, 0, 2908160, 0, 0, 0, 1921, 0, 0, 0,
  /* 39435 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 2017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 503, 482,
  /* 39466 */ 503, 482, 482, 2058, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2677, 482, 482,
  /* 39487 */ 482, 482, 482, 482, 2072, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2686, 482, 482, 482, 482,
  /* 39508 */ 482, 503, 503, 2157, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2725, 503, 503,
  /* 39528 */ 2242, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3307, 503, 482, 2431,
  /* 39548 */ 482, 482, 482, 0, 0, 0, 2434, 0, 1705, 503, 503, 503, 503, 503, 2118, 503, 503, 2121, 503, 503, 503, 503,
  /* 39570 */ 503, 503, 2129, 0, 0, 0, 2578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2584, 0, 0, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0,
  /* 39599 */ 0, 2204270, 2204270, 0, 2641, 0, 0, 0, 482, 2645, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2873,
  /* 39620 */ 482, 2875, 482, 482, 482, 0, 0, 503, 2692, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 39641 */ 2488, 503, 503, 503, 0, 0, 527, 2740, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2213,
  /* 39662 */ 527, 527, 527, 503, 503, 527, 527, 527, 527, 527, 527, 527, 2942, 527, 527, 527, 527, 527, 527, 1405, 527,
  /* 39683 */ 527, 527, 1412, 1414, 527, 527, 527, 527, 3154, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 39703 */ 503, 503, 503, 503, 2183, 503, 503, 503, 503, 3167, 527, 527, 527, 527, 527, 527, 527, 3172, 527, 527,
  /* 39723 */ 527, 527, 527, 1426, 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 832, 82171, 978, 0, 0, 0, 0, 0, 0,
  /* 39747 */ 0, 0, 3198, 0, 0, 0, 0, 0, 0, 482, 482, 482, 3205, 482, 482, 482, 482, 482, 829, 503, 503, 503, 503, 503,
  /* 39771 */ 503, 851, 503, 503, 503, 503, 503, 30019, 1256, 904, 527, 527, 527, 527, 527, 527, 527, 527, 1407, 527,
  /* 39791 */ 527, 527, 527, 527, 527, 527, 482, 482, 3209, 482, 482, 482, 482, 482, 3215, 482, 482, 482, 503, 503, 503,
  /* 39812 */ 3220, 503, 503, 503, 503, 3224, 503, 503, 503, 503, 503, 3230, 503, 503, 503, 527, 527, 527, 527, 527,
  /* 39832 */ 527, 527, 503, 0, 3459, 0, 0, 0, 482, 482, 482, 482, 482, 2859, 482, 482, 482, 482, 482, 482, 482, 3328,
  /* 39854 */ 482, 482, 482, 482, 482, 503, 503, 503, 527, 3235, 527, 527, 527, 527, 3239, 527, 527, 527, 527, 527,
  /* 39874 */ 3245, 527, 527, 527, 527, 527, 1819, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2516, 527, 2518,
  /* 39894 */ 527, 527, 527, 527, 527, 527, 0, 3437, 0, 0, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503,
  /* 39916 */ 503, 852, 503, 503, 503, 3493, 0, 482, 503, 527, 0, 482, 503, 527, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0,
  /* 39941 */ 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 352, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 126976, 126976,
  /* 39968 */ 126976, 306, 0, 73728, 77824, 0, 0, 0, 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39996 */ 283, 357, 0, 0, 0, 0, 0, 0, 396, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3319, 0, 482, 482, 0, 461,
  /* 40026 */ 468, 468, 468, 468, 468, 468, 468, 468, 468, 495, 518, 495, 518, 495, 495, 542, 518, 518, 518, 542, 518,
  /* 40047 */ 518, 518, 518, 518, 518, 518, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40073 */ 601, 0, 0, 0, 0, 0, 0, 270336, 0, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336, 270336,
  /* 40091 */ 270336, 270336, 0, 0, 0, 0, 0, 482, 482, 824, 482, 482, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 40113 */ 503, 503, 503, 503, 2905, 527, 969, 527, 527, 527, 503, 0, 0, 977, 82171, 978, 0, 0, 0, 0, 0, 0, 1545, 0,
  /* 40137 */ 0, 0, 0, 0, 0, 0, 0, 0, 295, 296, 0, 0, 0, 0, 0, 0, 0, 1006, 0, 0, 0, 0, 1011, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40169 */ 1118208, 1118208, 0, 0, 1118208, 0, 0, 0, 0, 1006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1285, 503,
  /* 40195 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1299, 503, 503, 503, 503, 1783, 503, 503, 503,
  /* 40216 */ 503, 503, 1788, 503, 503, 503, 503, 503, 503, 3066, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2471,
  /* 40236 */ 503, 503, 503, 503, 503, 503, 503, 1320, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1336, 503,
  /* 40257 */ 503, 503, 503, 879, 881, 503, 503, 892, 503, 503, 503, 503, 0, 527, 527, 527, 527, 922, 527, 527, 936,
  /* 40278 */ 527, 527, 527, 527, 527, 527, 527, 527, 3102, 527, 527, 527, 527, 527, 527, 503, 1439, 978, 0, 1443, 0, 0,
  /* 40300 */ 0, 1449, 0, 0, 0, 1455, 0, 0, 0, 1461, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1123, 482, 1663,
  /* 40329 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2689, 482, 482, 0, 1444, 0, 0, 0, 0,
  /* 40352 */ 0, 1450, 0, 0, 0, 0, 0, 1456, 0, 0, 0, 0, 284, 0, 0, 331, 331, 361, 0, 287, 0, 0, 0, 0, 0, 0, 3201, 0, 0,
  /* 40381 */ 0, 3203, 482, 482, 482, 482, 3207, 0, 0, 0, 1462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 0, 0, 1958,
  /* 40409 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1147, 482, 482, 2059, 482, 2061, 482, 482, 482, 482, 482,
  /* 40435 */ 482, 482, 482, 482, 482, 482, 3217, 482, 503, 503, 503, 503, 2144, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 40456 */ 503, 503, 503, 503, 503, 503, 503, 2477, 0, 2852, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 40477 */ 482, 482, 482, 482, 1630, 503, 3186, 0, 0, 0, 3188, 0, 0, 0, 0, 0, 0, 2998, 3195, 0, 0, 0, 0, 290, 291,
  /* 40502 */ 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996, 0, 0, 0, 0, 0, 3197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482, 3204, 482,
  /* 40532 */ 482, 3206, 482, 482, 482, 482, 482, 2101, 0, 0, 0, 0, 2108, 503, 503, 503, 503, 503, 2467, 503, 503, 503,
  /* 40554 */ 503, 503, 503, 503, 503, 503, 503, 2178, 503, 2180, 503, 503, 503, 3221, 503, 503, 503, 503, 503, 503,
  /* 40574 */ 503, 503, 503, 503, 503, 503, 503, 527, 3234, 527, 527, 3236, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 40595 */ 527, 527, 527, 527, 3092, 527, 527, 0, 3262, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 40616 */ 482, 482, 3038, 482, 482, 0, 482, 482, 482, 482, 482, 781, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 40637 */ 2425, 482, 482, 482, 2428, 482, 482, 0, 990, 994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1058, 0, 0, 503,
  /* 40664 */ 503, 30019, 1800, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2239, 2240, 527, 527, 0, 0,
  /* 40685 */ 73728, 77824, 0, 0, 0, 0, 309, 307, 69632, 0, 307, 307, 309, 0, 0, 0, 0, 1962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40712 */ 0, 0, 0, 188781, 188781, 188781, 188781, 307, 0, 0, 307, 0, 309, 307, 0, 307, 307, 307, 307, 307, 307,
  /* 40733 */ 307, 307, 459, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 496, 519, 496, 519, 496, 496, 543, 519,
  /* 40754 */ 519, 519, 543, 519, 519, 519, 519, 519, 519, 519, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 635, 0,
  /* 40777 */ 0, 0, 0, 0, 0, 0, 0, 644, 0, 646, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2993, 0, 0, 0, 0,
  /* 40809 */ 698, 0, 0, 0, 0, 0, 705, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1477, 0, 0, 602, 0, 0,
  /* 40841 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1074, 0, 0, 0, 0, 733, 734, 0, 0, 0, 0, 0, 0, 677, 0, 0, 739, 0, 0, 0, 0,
  /* 40873 */ 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 739, 0, 586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40905 */ 208896, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 2283, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40936 */ 0, 2298, 0, 0, 0, 0, 0, 0, 0, 482, 482, 771, 482, 482, 482, 482, 789, 482, 482, 482, 482, 807, 809, 482,
  /* 40960 */ 482, 482, 482, 482, 2102, 2433, 0, 0, 0, 0, 503, 503, 503, 503, 503, 503, 2721, 503, 503, 503, 503, 503,
  /* 40982 */ 503, 503, 503, 503, 2122, 503, 2124, 503, 503, 503, 503, 482, 820, 482, 482, 482, 482, 503, 503, 835, 841,
  /* 41003 */ 503, 503, 503, 503, 859, 503, 503, 503, 503, 2159, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 41024 */ 1790, 503, 503, 503, 503, 908, 914, 527, 527, 527, 527, 932, 527, 527, 527, 527, 527, 952, 954, 527, 527,
  /* 41045 */ 527, 527, 924, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3359, 0, 0, 3362, 3363, 965, 527,
  /* 41066 */ 527, 527, 527, 503, 0, 0, 835, 82171, 978, 0, 0, 0, 0, 0, 0, 1567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
  /* 41094 */ 0, 0, 0, 0, 0, 1047, 0, 0, 0, 1050, 0, 1052, 0, 1054, 0, 0, 0, 0, 0, 0, 0, 2296, 0, 0, 0, 0, 0, 2300, 0,
  /* 41123 */ 0, 0, 0, 0, 1080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 366, 0, 0, 0, 0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
  /* 41155 */ 0, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 1111, 1112, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 0, 2320, 0, 0, 0, 0,
  /* 41186 */ 0, 0, 0, 2328, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 41211 */ 482, 482, 482, 482, 482, 1203, 1205, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 41232 */ 482, 2878, 503, 503, 1262, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2737, 503,
  /* 41252 */ 503, 1341, 1342, 503, 503, 503, 30019, 1256, 904, 527, 527, 527, 1353, 527, 527, 527, 527, 527, 884, 0, 0,
  /* 41273 */ 503, 82171, 978, 0, 0, 0, 0, 0, 0, 422, 1130934, 422, 422, 422, 422, 422, 422, 422, 422, 1421, 527, 527,
  /* 41295 */ 527, 527, 527, 527, 527, 527, 1432, 1433, 527, 527, 527, 1438, 0, 0, 0, 0, 1974, 0, 0, 0, 0, 0, 1980, 0,
  /* 41319 */ 0, 0, 0, 0, 0, 1555, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159, 1160, 0, 0, 1000, 0, 0, 1606, 0, 0, 0, 0, 0, 0,
  /* 41349 */ 0, 0, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 482, 482, 482, 482, 482, 1620, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 41374 */ 482, 2674, 482, 482, 482, 482, 482, 482, 482, 1680, 482, 482, 482, 1685, 482, 482, 482, 482, 482, 482,
  /* 41394 */ 482, 482, 1693, 482, 482, 482, 482, 482, 2381, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3035,
  /* 41414 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1699, 482, 482, 482, 1256, 0, 503, 503, 503, 503, 503,
  /* 41435 */ 503, 1712, 1779, 503, 503, 503, 503, 503, 503, 503, 503, 1787, 503, 503, 503, 503, 1793, 503, 503, 503,
  /* 41455 */ 503, 2187, 0, 0, 0, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1383, 1385, 503,
  /* 41477 */ 503, 30019, 0, 527, 527, 527, 527, 527, 527, 1806, 527, 527, 527, 527, 527, 527, 2515, 527, 527, 527, 527,
  /* 41498 */ 527, 527, 527, 527, 527, 1431, 527, 527, 527, 527, 503, 0, 527, 527, 1831, 527, 527, 527, 527, 527, 527,
  /* 41519 */ 527, 527, 527, 527, 527, 527, 527, 3183, 527, 527, 527, 527, 527, 527, 1881, 527, 527, 527, 527, 1887,
  /* 41539 */ 527, 527, 527, 503, 503, 0, 0, 0, 0, 0, 0, 0, 0, 2794, 0, 0, 0, 0, 0, 0, 1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41569 */ 612, 613, 0, 0, 0, 0, 618, 0, 0, 0, 1948, 0, 0, 0, 0, 0, 1952, 0, 0, 1954, 0, 0, 0, 0, 0, 1975, 0, 0, 0,
  /* 41598 */ 0, 0, 0, 0, 0, 0, 0, 0, 1981, 0, 0, 0, 0, 0, 1987, 0, 1989, 1990, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2000, 0, 0,
  /* 41628 */ 0, 0, 2005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 2002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2010,
  /* 41659 */ 0, 0, 0, 0, 0, 0, 1122304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 2015, 2016, 0, 0, 0, 0, 0,
  /* 41689 */ 2020, 0, 0, 0, 0, 0, 0, 0, 2026, 503, 2115, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 41712 */ 503, 503, 3061, 503, 503, 503, 503, 2145, 503, 2147, 503, 2150, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 41732 */ 503, 2913, 503, 2915, 503, 503, 503, 503, 503, 503, 503, 2158, 503, 503, 503, 503, 503, 2164, 503, 503,
  /* 41752 */ 503, 503, 503, 503, 1768, 503, 503, 1771, 503, 503, 503, 503, 503, 503, 503, 3227, 503, 503, 503, 503,
  /* 41772 */ 503, 503, 527, 527, 3078, 527, 527, 527, 527, 527, 527, 527, 503, 503, 503, 2186, 0, 0, 0, 0, 2193, 527,
  /* 41794 */ 527, 527, 527, 527, 527, 2200, 2230, 527, 2232, 527, 2235, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 41814 */ 527, 527, 2211, 527, 527, 527, 527, 527, 527, 2243, 527, 527, 527, 527, 527, 2249, 527, 527, 527, 527,
  /* 41834 */ 527, 527, 527, 527, 1429, 527, 527, 527, 527, 527, 527, 503, 0, 0, 836, 82171, 978, 0, 0, 0, 0, 0, 527,
  /* 41857 */ 2271, 503, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1015, 0, 0, 0, 0, 0, 2278, 2279, 0, 0, 0, 0, 0, 0, 0,
  /* 41887 */ 0, 0, 0, 0, 0, 1044, 324, 324, 0, 2314, 0, 0, 2317, 0, 0, 0, 0, 2321, 0, 0, 0, 0, 0, 0, 0, 0, 1118208, 0,
  /* 41915 */ 1118208, 0, 0, 0, 0, 0, 0, 0, 2329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2337, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
  /* 41945 */ 0, 0, 0, 0, 0, 0, 482, 1171, 482, 482, 482, 482, 482, 2404, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 41968 */ 482, 482, 482, 482, 482, 3333, 503, 503, 2450, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 41989 */ 503, 503, 503, 2490, 503, 2563, 2564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1091, 0, 1094, 0, 0, 503,
  /* 42015 */ 503, 503, 503, 2695, 503, 2696, 503, 503, 503, 503, 503, 503, 503, 1737, 503, 503, 503, 503, 503, 503,
  /* 42035 */ 503, 503, 2912, 503, 503, 503, 503, 503, 503, 503, 0, 0, 527, 527, 527, 527, 2743, 527, 2744, 527, 527,
  /* 42056 */ 527, 527, 527, 527, 527, 1821, 527, 527, 527, 527, 527, 527, 527, 527, 2780, 527, 527, 2783, 527, 527,
  /* 42076 */ 2786, 527, 0, 0, 0, 482, 2855, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3048, 482, 482, 482,
  /* 42098 */ 503, 503, 503, 482, 482, 503, 2895, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2736, 503,
  /* 42119 */ 503, 503, 503, 503, 527, 2936, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2267, 527, 527,
  /* 42140 */ 527, 527, 527, 2976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 503, 3222, 503, 503, 503, 503,
  /* 42166 */ 503, 503, 503, 503, 503, 3231, 503, 503, 3233, 527, 0, 3482, 482, 3483, 503, 3484, 527, 3485, 0, 482, 503,
  /* 42187 */ 527, 0, 482, 503, 3279, 503, 3281, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 899, 503, 0,
  /* 42208 */ 527, 527, 527, 527, 527, 3237, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3246, 527, 527, 527, 527, 925,
  /* 42229 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2782, 527, 527, 527, 527, 527, 482, 482, 482, 3324,
  /* 42250 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 3282, 503, 503, 503, 503, 503, 503, 503,
  /* 42271 */ 503, 503, 503, 1725, 503, 503, 503, 503, 503, 503, 503, 3337, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 42292 */ 527, 527, 527, 527, 527, 527, 3170, 527, 527, 527, 527, 527, 527, 3350, 527, 527, 527, 527, 527, 527, 527,
  /* 42313 */ 527, 527, 503, 0, 0, 0, 0, 0, 2981, 0, 0, 0, 0, 0, 0, 0, 0, 2646016, 0, 2797568, 0, 0, 0, 0, 2359296, 0,
  /* 42339 */ 3365, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2863, 482, 482, 0, 0, 3438, 0, 482,
  /* 42363 */ 482, 482, 482, 482, 3444, 482, 503, 503, 503, 503, 503, 503, 3284, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 42384 */ 1310, 503, 503, 503, 503, 503, 503, 503, 3450, 503, 527, 527, 527, 527, 527, 3456, 527, 503, 3458, 0,
  /* 42404 */ 3460, 0, 0, 482, 482, 482, 482, 3267, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2065, 482, 482, 482,
  /* 42425 */ 482, 482, 482, 0, 355, 0, 0, 360, 0, 0, 0, 0, 0, 327, 335, 363, 0, 0, 0, 0, 0, 2281, 0, 0, 0, 0, 0, 0, 0,
  /* 42454 */ 0, 0, 0, 331, 0, 0, 332, 0, 0, 327, 0, 0, 310, 0, 0, 327, 0, 368, 370, 0, 355, 0, 0, 0, 327, 0, 0, 0, 0,
  /* 42483 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1539, 335, 0, 73728, 77824, 368, 0, 0, 0, 0, 386, 69632, 0, 386, 386, 0,
  /* 42510 */ 0, 0, 0, 353, 354, 0, 355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940928, 0, 0, 0, 0, 0, 0, 386, 0, 370, 386, 409, 0,
  /* 42539 */ 420, 0, 447, 447, 447, 447, 447, 447, 447, 447, 469, 469, 469, 469, 469, 469, 469, 481, 481, 497, 520,
  /* 42560 */ 497, 520, 497, 497, 544, 520, 520, 520, 544, 550, 550, 550, 520, 520, 520, 520, 520, 520, 520, 1, 16386,
  /* 42581 */ 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 259, 260, 0, 0, 263, 264, 0, 0, 565, 0, 0, 0, 0, 0, 0, 1610, 0, 0,
  /* 42608 */ 1611, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1057, 0, 0, 0, 728, 0, 0, 0,
  /* 42639 */ 0, 0, 0, 0, 728, 0, 0, 0, 0, 709, 0, 728, 0, 482, 766, 482, 482, 482, 482, 482, 482, 795, 482, 482, 482,
  /* 42664 */ 482, 482, 482, 0, 0, 0, 2107, 503, 503, 503, 503, 503, 503, 2119, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 42686 */ 503, 2177, 503, 503, 503, 503, 503, 503, 867, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 42707 */ 0, 527, 527, 527, 527, 926, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3103, 527, 527, 527,
  /* 42728 */ 527, 503, 909, 527, 527, 527, 527, 527, 527, 938, 940, 527, 527, 527, 527, 527, 527, 527, 1836, 527, 527,
  /* 42749 */ 527, 527, 527, 527, 527, 527, 2967, 2969, 527, 527, 527, 2972, 527, 2974, 1061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42773 */ 0, 0, 0, 0, 0, 0, 1551, 0, 482, 482, 482, 1180, 482, 482, 1191, 482, 482, 1195, 482, 482, 482, 482, 482,
  /* 42796 */ 482, 0, 0, 2106, 0, 503, 503, 503, 503, 503, 503, 2135, 503, 2137, 503, 503, 503, 503, 503, 503, 503,
  /* 42817 */ 2911, 503, 503, 503, 503, 503, 503, 503, 503, 1786, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 42837 */ 1305, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2930, 503, 503, 503, 527, 527, 1360,
  /* 42857 */ 527, 527, 1371, 527, 527, 1375, 527, 527, 527, 527, 527, 527, 527, 1851, 527, 527, 527, 527, 1857, 527,
  /* 42877 */ 527, 527, 0, 0, 0, 1527, 0, 0, 0, 1531, 0, 0, 0, 0, 0, 0, 0, 0, 266, 266, 266, 0, 0, 0, 0, 0, 1631, 482,
  /* 42905 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3140, 482, 482, 482, 482, 482, 482,
  /* 42926 */ 482, 482, 1649, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3216, 482, 482, 3218,
  /* 42946 */ 503, 503, 503, 482, 482, 1698, 482, 482, 482, 482, 1256, 0, 503, 503, 503, 503, 503, 503, 503, 1754, 503,
  /* 42967 */ 503, 503, 503, 503, 503, 503, 503, 2470, 503, 503, 503, 503, 2474, 503, 503, 527, 527, 527, 527, 1817,
  /* 42987 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2237, 527, 527, 527, 527, 527, 1919, 0, 1920, 0, 0,
  /* 43009 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1121, 0, 0, 482, 2028, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 43035 */ 482, 482, 482, 482, 3330, 482, 482, 3332, 503, 503, 503, 482, 2070, 2071, 482, 482, 482, 482, 482, 482,
  /* 43055 */ 482, 482, 482, 482, 2081, 482, 482, 482, 482, 482, 1183, 1190, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 43075 */ 482, 2035, 482, 482, 2038, 482, 482, 482, 0, 0, 0, 2368, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482,
  /* 43099 */ 3026, 3027, 482, 482, 482, 482, 2405, 482, 482, 482, 482, 482, 482, 482, 482, 2414, 482, 482, 482, 482,
  /* 43119 */ 482, 482, 1247, 482, 482, 482, 482, 482, 482, 1256, 831, 503, 2478, 503, 503, 503, 503, 503, 503, 503,
  /* 43139 */ 503, 503, 503, 503, 503, 503, 503, 503, 3074, 0, 0, 0, 2590, 0, 0, 0, 0, 2595, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43165 */ 3039232, 0, 0, 0, 3117056, 0, 0, 0, 0, 2106, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 43187 */ 503, 503, 3072, 503, 503, 0, 2191, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 43208 */ 2521, 527, 527, 527, 0, 0, 2988, 2989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073, 0, 0, 0, 0, 0, 3019, 0,
  /* 43236 */ 3021, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2411, 482, 482, 482, 482, 482, 482, 2418,
  /* 43256 */ 482, 482, 482, 482, 3044, 482, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 30019, 1256,
  /* 43276 */ 904, 527, 527, 527, 527, 527, 527, 527, 1357, 3106, 0, 0, 0, 0, 3110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43302 */ 3162112, 2654208, 0, 2727936, 0, 3132, 482, 482, 482, 3135, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 43321 */ 482, 482, 2684, 482, 482, 2687, 482, 482, 2690, 482, 482, 482, 482, 482, 3211, 482, 3213, 482, 482, 482,
  /* 43341 */ 482, 482, 503, 503, 503, 503, 503, 503, 503, 2901, 503, 503, 503, 503, 503, 503, 1720, 1721, 503, 503,
  /* 43361 */ 503, 503, 1728, 503, 503, 503, 482, 3379, 482, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 43381 */ 3391, 503, 503, 503, 503, 2188, 0, 0, 0, 527, 527, 527, 527, 527, 527, 527, 527, 2504, 527, 527, 527, 527,
  /* 43403 */ 527, 527, 527, 527, 2250, 527, 527, 527, 527, 527, 527, 2255, 503, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 43424 */ 527, 527, 3403, 527, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0,
  /* 43453 */ 364, 0, 3407, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 3414, 482, 3415, 482, 482, 482, 482, 482, 1184, 482, 482,
  /* 43477 */ 482, 482, 482, 482, 482, 482, 482, 482, 2078, 482, 482, 482, 482, 482, 503, 527, 527, 3428, 527, 3429,
  /* 43497 */ 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 503, 82171, 0, 0, 0, 0, 0, 0, 0, 0, 73728, 77824, 369, 0, 0,
  /* 43522 */ 0, 0, 0, 69632, 0, 0, 0, 0, 0, 0, 1924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 583, 0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
  /* 43553 */ 313, 0, 0, 436, 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 470, 474, 474, 474, 474, 474,
  /* 43582 */ 470, 470, 498, 521, 498, 521, 498, 498, 545, 521, 521, 521, 545, 521, 521, 521, 521, 521, 521, 521, 1,
  /* 43603 */ 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0, 259, 260, 0, 0, 263, 264, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0,
  /* 43629 */ 1130496, 0, 1130496, 0, 0, 0, 0, 0, 0, 0, 0, 3039232, 0, 0, 0, 3117056, 0, 102400, 0, 587, 0, 0, 590, 0,
  /* 43653 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0,
  /* 43685 */ 0, 0, 2280, 0, 2282, 0, 0, 2285, 0, 0, 0, 0, 0, 0, 0, 1977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2021, 0, 0, 0, 0,
  /* 43715 */ 0, 482, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 660, 0, 0, 0, 566, 660, 0, 666, 667, 566, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43745 */ 0, 0, 0, 0, 1105, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1522, 0, 0, 699, 0, 0, 0, 0,
  /* 43777 */ 0, 0, 0, 0, 587, 0, 566, 0, 0, 0, 0, 0, 2358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
  /* 43809 */ 716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 730, 742, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0,
  /* 43840 */ 1142784, 1142784, 1142784, 1142784, 1142784, 1142784, 1142784, 1142784, 1142784, 1142784, 1142784, 0, 0,
  /* 43853 */ 0, 0, 0, 716, 482, 767, 482, 482, 482, 482, 786, 790, 796, 800, 482, 482, 482, 482, 482, 0, 2433, 0, 0, 0,
  /* 43877 */ 0, 503, 503, 503, 503, 503, 503, 2910, 503, 503, 503, 503, 503, 2916, 503, 503, 2919, 816, 482, 482, 482,
  /* 43898 */ 482, 482, 503, 503, 837, 503, 503, 503, 503, 856, 860, 866, 503, 871, 503, 503, 503, 503, 503, 888, 503,
  /* 43919 */ 503, 503, 503, 503, 0, 527, 527, 527, 527, 974, 503, 0, 0, 503, 82171, 978, 0, 0, 982, 986, 0, 910, 527,
  /* 43942 */ 527, 527, 527, 929, 933, 939, 527, 944, 527, 527, 527, 527, 527, 961, 0, 0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43967 */ 0, 0, 0, 0, 0, 1145, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 0, 0, 0, 1118, 0, 0, 0, 0, 0, 0, 1964, 0, 0, 0, 0, 0,
  /* 43998 */ 0, 0, 0, 0, 0, 3129, 0, 0, 482, 482, 482, 0, 0, 0, 1127, 0, 0, 998, 0, 0, 0, 1133, 0, 1135, 0, 0, 0, 0, 0,
  /* 44027 */ 2370, 0, 0, 0, 482, 482, 482, 482, 482, 482, 2378, 1149, 1099, 0, 1133, 1152, 0, 1155, 0, 0, 0, 1029, 0,
  /* 44050 */ 0, 0, 0, 1163, 482, 482, 482, 1181, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1202, 482, 482, 482,
  /* 44072 */ 482, 482, 2408, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2412, 482, 482, 482, 482, 482, 482, 503,
  /* 44093 */ 1321, 1323, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3232, 503, 527, 527, 503,
  /* 44113 */ 503, 503, 1345, 503, 30019, 1256, 904, 1349, 527, 527, 527, 527, 1355, 527, 527, 527, 527, 1363, 1370,
  /* 44132 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 1384, 527, 527, 1361, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 44153 */ 527, 527, 1382, 527, 527, 527, 527, 1364, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2559,
  /* 44173 */ 527, 527, 527, 503, 503, 978, 0, 0, 1444, 0, 0, 0, 1450, 0, 0, 0, 1456, 0, 0, 0, 0, 0, 2579, 0, 0, 0, 0,
  /* 44200 */ 0, 0, 0, 0, 0, 0, 0, 1941, 0, 0, 0, 0, 0, 0, 1480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
  /* 44231 */ 1591, 1592, 0, 0, 0, 1595, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 0, 0, 0, 2404352, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44258 */ 2371584, 1591, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1626, 482, 482, 482, 482, 482, 482, 1639,
  /* 44278 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 1211, 482, 482, 482, 482, 482, 482, 1632, 482, 482, 482, 482,
  /* 44299 */ 482, 482, 482, 482, 482, 482, 1643, 482, 482, 482, 482, 482, 482, 1652, 482, 482, 482, 482, 482, 482, 482,
  /* 44320 */ 482, 482, 1212, 482, 482, 1215, 482, 482, 482, 1647, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 44340 */ 1658, 482, 482, 1662, 482, 482, 482, 482, 482, 2869, 482, 482, 482, 482, 482, 482, 482, 482, 2877, 482,
  /* 44360 */ 482, 482, 482, 482, 3034, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2664, 482, 482, 482, 482, 482,
  /* 44381 */ 482, 503, 503, 1781, 1782, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3346, 527, 527,
  /* 44401 */ 527, 503, 503, 30019, 0, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1812, 527, 527, 527, 527,
  /* 44422 */ 1818, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1829, 527, 527, 527, 527, 1833, 527, 527, 527,
  /* 44442 */ 527, 527, 527, 527, 527, 527, 527, 1844, 527, 527, 527, 1849, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 44463 */ 527, 527, 527, 2533, 527, 527, 527, 0, 1946, 1947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
  /* 44490 */ 0, 1972, 1973, 0, 0, 0, 0, 0, 1979, 0, 0, 0, 0, 0, 0, 0, 2360, 0, 0, 0, 0, 0, 0, 0, 0, 310, 311, 312, 0,
  /* 44519 */ 0, 0, 0, 0, 482, 2044, 482, 482, 482, 2048, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2871, 482,
  /* 44541 */ 482, 482, 482, 482, 482, 482, 2057, 482, 482, 2060, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 44562 */ 482, 2885, 2887, 482, 482, 482, 2890, 482, 2892, 482, 482, 482, 482, 2086, 482, 482, 482, 2089, 482, 482,
  /* 44582 */ 482, 482, 2094, 482, 482, 482, 482, 482, 1185, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2091,
  /* 44602 */ 482, 482, 482, 482, 482, 503, 2131, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2140, 503, 503,
  /* 44622 */ 2143, 503, 503, 2171, 503, 503, 503, 2174, 503, 503, 503, 503, 2179, 503, 503, 503, 503, 0, 0, 0, 0, 527,
  /* 44644 */ 2194, 527, 527, 527, 527, 527, 527, 1835, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2251, 527, 527,
  /* 44664 */ 527, 527, 527, 527, 2256, 527, 527, 527, 2259, 527, 527, 527, 527, 2264, 527, 527, 527, 527, 527, 527,
  /* 44684 */ 1820, 527, 527, 527, 527, 527, 527, 527, 527, 527, 1824, 527, 527, 527, 527, 1828, 527, 2276, 0, 0, 0, 0,
  /* 44706 */ 0, 0, 0, 0, 0, 0, 2286, 0, 0, 0, 0, 0, 0, 2584576, 0, 2658304, 0, 2752512, 2760704, 2764800, 0, 2805760,
  /* 44728 */ 0, 0, 0, 2367, 0, 0, 0, 0, 0, 0, 482, 482, 2374, 482, 482, 482, 482, 482, 482, 1686, 482, 482, 482, 482,
  /* 44752 */ 482, 482, 482, 482, 482, 1672, 1673, 482, 482, 482, 482, 482, 2463, 503, 2464, 503, 503, 503, 503, 503,
  /* 44772 */ 503, 503, 503, 2472, 503, 503, 2476, 503, 503, 503, 503, 2466, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 44792 */ 503, 503, 503, 2139, 503, 503, 503, 503, 527, 527, 2500, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 44813 */ 2507, 527, 527, 527, 527, 1365, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2762, 2763, 527,
  /* 44833 */ 527, 527, 527, 527, 2525, 527, 527, 2527, 527, 2528, 527, 527, 527, 527, 527, 527, 527, 527, 2223, 527,
  /* 44853 */ 527, 527, 527, 2227, 527, 2229, 527, 2536, 527, 527, 2540, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 44873 */ 527, 527, 527, 2784, 527, 527, 527, 2551, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 44894 */ 527, 2561, 0, 0, 0, 0, 2591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 266240, 266240, 266240, 0, 0,
  /* 44919 */ 2618, 0, 2620, 0, 0, 0, 0, 2625, 0, 2627, 0, 0, 0, 0, 0, 0, 2887680, 2891776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44946 */ 688, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 2660, 482, 482, 482, 2663, 482, 482, 482, 482, 482, 482, 482,
  /* 44969 */ 1256, 1704, 503, 503, 503, 503, 1710, 503, 503, 503, 503, 2707, 503, 503, 503, 2710, 503, 503, 503, 503,
  /* 44989 */ 503, 503, 503, 503, 503, 3057, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2720, 503, 503, 503, 503, 503,
  /* 45010 */ 503, 503, 503, 503, 503, 503, 503, 2166, 503, 503, 503, 503, 527, 527, 2755, 527, 527, 527, 2758, 527,
  /* 45030 */ 527, 527, 527, 527, 527, 527, 527, 527, 2770, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2768, 527, 527,
  /* 45051 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2971, 527, 527, 527, 2811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45076 */ 0, 0, 0, 0, 0, 1604, 2822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2836, 0, 2837, 0, 0, 0, 0, 0, 0, 0,
  /* 45107 */ 0, 0, 0, 0, 0, 0, 0, 1538, 0, 0, 0, 0, 482, 482, 482, 2857, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 45132 */ 3139, 482, 482, 482, 482, 482, 482, 482, 503, 503, 527, 527, 527, 2938, 527, 527, 527, 527, 527, 527, 527,
  /* 45153 */ 527, 527, 527, 2547, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2950, 527, 527, 527, 527, 527, 527, 527,
  /* 45174 */ 527, 2958, 527, 527, 527, 527, 1366, 527, 527, 527, 527, 1376, 527, 527, 527, 527, 527, 527, 1427, 527,
  /* 45194 */ 527, 527, 527, 527, 527, 527, 503, 0, 2987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1930, 3018, 0, 0,
  /* 45222 */ 0, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3028, 482, 482, 482, 482, 482, 3136, 482, 482, 482,
  /* 45243 */ 482, 482, 482, 482, 482, 482, 482, 3141, 482, 482, 482, 3142, 3143, 482, 482, 482, 3043, 482, 3045, 482,
  /* 45263 */ 482, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 30019, 1256, 904, 527, 527, 527, 527, 527, 527,
  /* 45283 */ 1356, 527, 0, 0, 0, 3108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3113, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45314 */ 0, 0, 2833, 0, 0, 0, 0, 0, 0, 0, 3127, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 3376,
  /* 45341 */ 482, 482, 482, 3133, 482, 482, 482, 3137, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3149, 503, 503,
  /* 45361 */ 503, 503, 503, 503, 503, 482, 482, 482, 482, 3146, 482, 482, 482, 503, 503, 503, 503, 503, 3151, 503, 503,
  /* 45382 */ 503, 503, 1291, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1302, 503, 3155, 503, 503, 503, 503,
  /* 45402 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2446, 503, 503, 503, 503, 3164, 503, 503, 503, 527, 527,
  /* 45423 */ 527, 527, 527, 3169, 527, 527, 527, 3173, 527, 527, 527, 527, 1403, 527, 527, 527, 527, 527, 527, 527,
  /* 45443 */ 527, 527, 527, 527, 2548, 527, 527, 527, 527, 482, 482, 482, 3381, 503, 503, 503, 3385, 503, 503, 503,
  /* 45463 */ 503, 503, 503, 503, 503, 1785, 503, 503, 503, 503, 503, 503, 503, 503, 1722, 503, 503, 503, 503, 503, 503,
  /* 45484 */ 503, 3393, 527, 527, 527, 3397, 527, 527, 527, 527, 527, 527, 527, 527, 3405, 503, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45508 */ 2998, 0, 0, 0, 0, 0, 3260, 0, 0, 0, 3408, 0, 3410, 0, 3411, 3412, 482, 482, 482, 482, 482, 482, 482, 1256,
  /* 45532 */ 1705, 503, 503, 503, 503, 503, 503, 503, 886, 503, 503, 503, 503, 503, 0, 527, 527, 482, 482, 3418, 3419,
  /* 45553 */ 482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3425, 3426, 503, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 45574 */ 527, 3432, 3433, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3193, 2998, 0, 0, 0, 0, 0, 1566, 0, 0, 0, 0, 0,
  /* 45602 */ 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 3436, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 503, 503, 503, 503,
  /* 45628 */ 503, 503, 853, 503, 503, 503, 318, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 253, 0, 0, 0, 0, 0, 266, 0, 266, 0, 0,
  /* 45656 */ 0, 0, 0, 0, 0, 0, 0, 1916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
  /* 45689 */ 0, 0, 0, 73728, 77824, 0, 0, 379, 379, 0, 0, 69632, 379, 0, 0, 0, 379, 0, 0, 401, 0, 0, 379, 0, 437, 0, 0,
  /* 45716 */ 318, 318, 318, 456, 318, 318, 437, 437, 437, 437, 437, 437, 437, 437, 437, 499, 522, 499, 522, 499, 499,
  /* 45737 */ 546, 522, 522, 522, 546, 522, 522, 522, 522, 522, 522, 522, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 0,
  /* 45760 */ 0, 324, 324, 324, 0, 625, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 652, 0, 0, 0, 0, 0,
  /* 45791 */ 0, 0, 0, 0, 0, 0, 0, 1161, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 787, 482, 482, 482, 482, 482, 482,
  /* 45816 */ 482, 482, 1256, 1706, 503, 503, 503, 503, 503, 503, 503, 1330, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 45836 */ 2732, 503, 503, 2735, 503, 503, 2738, 503, 482, 821, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503,
  /* 45856 */ 503, 857, 503, 503, 503, 503, 1307, 503, 503, 503, 503, 503, 503, 503, 503, 1314, 503, 503, 503, 503,
  /* 45876 */ 1264, 503, 503, 503, 503, 1270, 503, 503, 503, 503, 503, 503, 2456, 503, 503, 503, 503, 503, 503, 503,
  /* 45896 */ 503, 503, 1332, 503, 503, 503, 503, 503, 503, 966, 527, 527, 527, 527, 503, 0, 0, 503, 82171, 978, 0, 0,
  /* 45918 */ 0, 0, 0, 0, 1976, 0, 0, 0, 0, 0, 0, 1983, 0, 1985, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
  /* 45948 */ 0, 1992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2323, 0, 0, 0, 0, 0, 482, 1178, 482, 482, 482, 1187, 482, 482, 482,
  /* 45975 */ 482, 482, 482, 482, 482, 482, 482, 1653, 482, 482, 482, 482, 482, 482, 482, 482, 1687, 1688, 482, 482,
  /* 45995 */ 482, 482, 482, 482, 482, 1256, 0, 503, 1708, 503, 503, 503, 503, 503, 1358, 527, 527, 527, 1367, 527, 527,
  /* 46016 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 2761, 527, 527, 527, 527, 527, 503, 978, 0, 0, 0, 1445, 0, 0,
  /* 46039 */ 0, 1451, 0, 0, 0, 1457, 0, 0, 0, 0, 583, 0, 583, 0, 0, 0, 0, 748, 0, 0, 0, 583, 0, 1463, 0, 0, 0, 0, 0, 0,
  /* 46069 */ 0, 0, 0, 0, 0, 0, 0, 0, 1560, 0, 0, 0, 1563, 0, 1565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1577, 482, 482, 1665,
  /* 46098 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1676, 482, 482, 482, 482, 482, 1186, 482, 482, 482, 482,
  /* 46119 */ 1196, 482, 482, 482, 482, 482, 0, 0, 0, 0, 0, 0, 503, 2435, 503, 503, 503, 1696, 482, 482, 482, 482, 482,
  /* 46142 */ 482, 1256, 0, 503, 503, 503, 503, 503, 503, 503, 2136, 503, 503, 503, 503, 503, 503, 503, 503, 1296, 503,
  /* 46163 */ 503, 503, 503, 503, 503, 503, 503, 1732, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 46184 */ 503, 2487, 503, 503, 503, 503, 1745, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1758, 503,
  /* 46204 */ 503, 503, 503, 503, 30019, 1256, 904, 527, 527, 1351, 527, 1354, 527, 527, 527, 527, 527, 886, 0, 0, 833,
  /* 46225 */ 251, 978, 0, 0, 981, 985, 0, 527, 527, 527, 1864, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 46247 */ 527, 3182, 527, 527, 527, 1931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2001, 0, 0, 1988, 0, 0, 0, 0,
  /* 46276 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1518, 0, 0, 482, 482, 482, 482, 2047, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 46301 */ 482, 482, 482, 2034, 482, 482, 482, 482, 482, 482, 482, 482, 1640, 482, 482, 482, 482, 482, 482, 482,
  /* 46321 */ 2130, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2714, 2715, 503, 503,
  /* 46341 */ 503, 2366, 0, 0, 0, 0, 0, 0, 0, 0, 482, 482, 482, 482, 482, 2377, 482, 482, 482, 482, 482, 3147, 482, 482,
  /* 46365 */ 503, 503, 503, 503, 503, 503, 503, 503, 3286, 503, 3288, 3289, 503, 3291, 503, 503, 2439, 503, 503, 503,
  /* 46385 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2445, 503, 503, 503, 503, 503, 2656, 482, 482, 482,
  /* 46406 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2063, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 46427 */ 2075, 2076, 482, 482, 482, 482, 482, 482, 2083, 0, 0, 503, 503, 503, 2694, 503, 503, 503, 503, 503, 503,
  /* 46448 */ 2701, 503, 2703, 503, 503, 503, 503, 2482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2489, 503, 0,
  /* 46468 */ 3250, 0, 0, 3253, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 1993, 0, 0, 0, 0, 1998, 0, 0, 0, 0, 0, 527, 527,
  /* 46496 */ 527, 2742, 527, 527, 527, 527, 527, 527, 2749, 527, 2751, 527, 527, 527, 527, 1424, 527, 527, 527, 527,
  /* 46516 */ 527, 527, 1434, 527, 527, 503, 0, 0, 2978, 0, 2980, 0, 0, 0, 2984, 0, 0, 0, 0, 0, 0, 3313, 0, 3315, 0, 0,
  /* 46542 */ 0, 0, 0, 482, 482, 482, 482, 2648, 482, 2649, 482, 482, 482, 482, 482, 2787, 503, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46567 */ 0, 0, 0, 0, 0, 0, 1576, 0, 503, 503, 503, 503, 3158, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 46590 */ 503, 2713, 503, 503, 503, 503, 503, 3176, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 46611 */ 527, 527, 2771, 527, 527, 527, 527, 527, 482, 482, 3380, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503,
  /* 46632 */ 503, 503, 3392, 503, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3404, 527, 503, 0, 0, 0, 0, 0,
  /* 46655 */ 0, 0, 0, 2998, 0, 0, 0, 0, 3259, 0, 482, 482, 482, 3465, 482, 503, 503, 503, 503, 3469, 503, 527, 527,
  /* 46678 */ 527, 527, 3473, 0, 319, 0, 0, 0, 0, 0, 0, 324, 0, 0, 253, 0, 0, 0, 0, 0, 267, 367, 268, 0, 0, 0, 0, 0, 0,
  /* 46707 */ 268, 372, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1575, 0, 0, 0, 0, 73728, 77824, 0, 0, 329,
  /* 46735 */ 329, 0, 0, 69632, 329, 0, 0, 0, 329, 500, 523, 500, 500, 547, 523, 523, 523, 547, 523, 523, 523, 523, 523,
  /* 46758 */ 523, 523, 1, 16386, 3, 82171, 82171, 253, 0, 0, 0, 0, 482, 482, 482, 482, 482, 782, 482, 482, 482, 482,
  /* 46780 */ 482, 482, 482, 482, 482, 2424, 482, 482, 482, 482, 482, 482, 482, 482, 1249, 482, 482, 482, 482, 1256,
  /* 46800 */ 831, 503, 1019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1031, 0, 0, 0, 0, 2318, 0, 2319, 0, 0, 0, 0, 0, 0,
  /* 46830 */ 0, 0, 0, 0, 3317, 0, 0, 0, 482, 482, 1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2615, 503, 1322,
  /* 46859 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2723, 503, 503, 503, 503, 503, 503,
  /* 46880 */ 1746, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2734, 503, 503, 503, 503, 503,
  /* 46901 */ 0, 2812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1590, 0, 3115, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0,
  /* 46932 */ 0, 0, 0, 290, 341, 343, 0, 0, 0, 0, 0, 320, 321, 322, 323, 0, 0, 324, 0, 0, 253, 0, 0, 0, 0, 0, 307, 308,
  /* 46960 */ 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 0, 0, 0, 0, 0, 0, 0, 0, 73728, 77824, 0, 0, 0, 0, 0, 387, 69632,
  /* 46988 */ 0, 387, 387, 0, 0, 0, 0, 584, 0, 584, 0, 0, 0, 0, 0, 0, 0, 0, 584, 387, 0, 321, 387, 0, 0, 421, 0, 448,
  /* 47016 */ 448, 451, 451, 451, 451, 457, 458, 451, 451, 471, 471, 471, 471, 471, 471, 471, 471, 471, 501, 524, 501,
  /* 47037 */ 524, 501, 501, 548, 524, 524, 524, 548, 524, 524, 524, 524, 524, 524, 524, 1, 16386, 3, 82171, 82171, 253,
  /* 47058 */ 0, 0, 0, 817, 482, 482, 482, 482, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2903, 503, 503,
  /* 47080 */ 503, 2027, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 2662, 482, 482,
  /* 47100 */ 2665, 482, 482, 482, 482, 482, 527, 2524, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 47121 */ 527, 2955, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2554, 527, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 47142 */ 527, 503, 503, 503, 503, 2708, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1274, 503, 503, 503,
  /* 47163 */ 503, 502, 525, 502, 502, 549, 525, 525, 525, 549, 525, 525, 525, 525, 525, 525, 525, 1, 16386, 3, 82171,
  /* 47184 */ 82171, 253, 0, 0, 0, 0, 0, 0, 324, 324, 324, 0, 0, 0, 0, 627, 0, 0, 0, 0, 0, 0, 2019, 0, 0, 0, 0, 0, 0, 0,
  /* 47214 */ 0, 482, 482, 482, 482, 3374, 482, 482, 482, 482, 0, 482, 482, 482, 482, 482, 783, 482, 482, 482, 482, 482,
  /* 47236 */ 482, 482, 482, 482, 2673, 482, 482, 482, 482, 482, 482, 482, 482, 1210, 482, 482, 482, 482, 482, 482, 482,
  /* 47257 */ 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 324, 0, 0, 0, 0, 2343, 2344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47288 */ 0, 1134, 0, 0, 0, 0, 0, 1062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 1908, 0, 1078, 0, 0, 0, 0,
  /* 47318 */ 0, 0, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1558, 0, 0, 0, 0, 482,
  /* 47349 */ 1241, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 1256, 831, 503, 503, 503, 503, 2731, 503,
  /* 47369 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1334, 503, 503, 503, 503, 503, 503, 503, 1306, 503, 503,
  /* 47390 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2914, 503, 503, 503, 503, 503, 527, 527, 1423, 527, 527,
  /* 47411 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 3258, 0, 0, 0, 0,
  /* 47438 */ 0, 3200, 0, 0, 0, 0, 482, 482, 482, 482, 482, 482, 482, 2650, 482, 482, 482, 482, 503, 978, 1441, 0, 0, 0,
  /* 47462 */ 1447, 0, 0, 0, 1453, 0, 0, 0, 1459, 0, 0, 0, 0, 2357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2599, 0, 0, 0,
  /* 47492 */ 1970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2630, 503, 503, 503, 2146, 503, 503, 503, 503, 503,
  /* 47518 */ 503, 503, 503, 503, 503, 503, 503, 2162, 503, 503, 503, 503, 2167, 503, 503, 503, 527, 2231, 527, 527,
  /* 47538 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3181, 527, 527, 527, 527, 527, 2510, 527, 527,
  /* 47559 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 3242, 527, 527, 527, 527, 527, 527, 0, 0,
  /* 47581 */ 259, 260, 0, 0, 263, 264, 0, 0, 0, 0, 0, 0, 569, 0, 0, 0, 0, 2369, 0, 0, 0, 0, 482, 2373, 482, 482, 482,
  /* 47608 */ 482, 482, 0, 0, 0, 0, 0, 0, 503, 503, 503, 503, 503, 0, 0, 904, 527, 527, 527, 527, 527, 527, 527, 527,
  /* 47632 */ 1391, 527, 527, 527, 527, 527, 527, 527, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2810, 482, 822,
  /* 47659 */ 482, 482, 482, 482, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2457, 503, 503, 503, 503, 503, 503,
  /* 47680 */ 2462, 503, 967, 527, 527, 527, 527, 503, 0, 0, 503, 82171, 978, 0, 0, 0, 0, 0, 0, 2331, 0, 0, 0, 0, 0, 0,
  /* 47706 */ 0, 0, 0, 0, 1928, 1929, 0, 0, 0, 0, 482, 482, 482, 1243, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 47729 */ 1256, 831, 503, 503, 503, 503, 2909, 503, 503, 503, 503, 503, 503, 503, 503, 2917, 503, 503, 503, 503,
  /* 47749 */ 1290, 503, 503, 503, 503, 503, 503, 503, 1298, 503, 503, 503, 503, 503, 2494, 503, 503, 503, 503, 0, 2497,
  /* 47770 */ 0, 0, 0, 0, 0, 0, 2828, 0, 0, 0, 0, 2832, 0, 0, 0, 0, 0, 0, 2842, 0, 0, 0, 0, 0, 0, 2849, 0, 0, 527, 527,
  /* 47800 */ 527, 527, 1425, 527, 527, 527, 527, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 3256,
  /* 47824 */ 0, 0, 0, 0, 0, 0, 1118208, 0, 324, 0, 0, 0, 0, 1118208, 0, 0, 482, 1633, 482, 482, 482, 482, 482, 482,
  /* 47848 */ 482, 482, 482, 482, 482, 482, 482, 482, 2870, 482, 482, 482, 482, 482, 2876, 482, 482, 1762, 503, 503,
  /* 47868 */ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 2469, 503, 503, 503, 503, 503, 503, 503,
  /* 47889 */ 503, 2711, 503, 503, 503, 503, 503, 503, 503, 503, 2926, 2928, 503, 503, 503, 2931, 503, 2933, 527, 527,
  /* 47909 */ 527, 527, 2220, 527, 2222, 527, 527, 527, 527, 527, 527, 527, 527, 527, 2544, 527, 527, 527, 527, 527,
  /* 47929 */ 527, 527, 527, 1430, 527, 527, 527, 527, 527, 503, 0, 0, 0, 0, 2356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47956 */ 1488, 0, 0, 0, 482, 482, 482, 2406, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 3138, 482,
  /* 47978 */ 482, 482, 482, 482, 482, 482, 482, 1227, 482, 482, 1234, 482, 482, 482, 482, 482, 482, 482, 482, 2432, 0,
  /* 47999 */ 0, 0, 0, 0, 0, 503, 503, 503, 503, 503, 2483, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 1271, 503,
  /* 48022 */ 503, 503, 503, 503, 0, 0, 0, 0, 2606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 346, 503, 503, 527,
  /* 48050 */ 527, 527, 527, 527, 2940, 527, 527, 527, 527, 527, 527, 527, 527, 2759, 527, 527, 527, 527, 527, 527, 527,
  /* 48071 */ 527, 1852, 527, 527, 527, 527, 527, 527, 527, 527, 1868, 527, 527, 527, 1873, 527, 527, 527, 527, 503,
  /* 48091 */ 503, 503, 503, 3064, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 3067, 503, 503, 503, 503, 503,
  /* 48112 */ 503, 503, 503, 1770, 503, 503, 503, 503, 503, 503, 503, 0, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48139 */ 1956, 0, 0, 1118208, 1118583, 1118583, 1118208, 0, 0, 0, 0, 0, 1118583, 0, 0, 0, 0, 0, 0, 2359, 0, 0, 0,
  /* 48162 */ 0, 0, 0, 0, 0, 0, 0, 2597, 0, 0, 0, 0, 0, 1118208, 0, 0, 1118208, 0, 1118208, 1118208, 0, 0, 0, 0, 0,
  /* 48187 */ 1118760, 1118760, 1118760, 1118760, 1118760, 1118760, 1118760, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0,
  /* 48203 */ 2183168, 2183168, 3100672, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 48214 */ 2183168, 2183168, 0, 0, 2129920, 2129920, 2129920, 2129920, 2129920, 2428928, 2129920, 2129920, 2129920,
  /* 48227 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2785280, 2797568, 2129920, 2822144, 2129920,
  /* 48238 */ 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 2129920, 422, 422, 1130968, 1130968, 1130968,
  /* 48250 */ 1130968, 1130968, 1130968, 1130968, 1130968, 1130968, 0, 0, 0, 0, 0, 0, 2371, 0, 0, 482, 482, 482, 482,
  /* 48269 */ 482, 482, 482, 482, 482, 1624, 482, 482, 482, 482, 482, 0, 0, 0, 422, 0, 0, 0, 1, 16386, 3, 0, 0, 2187264,
  /* 48293 */ 0, 0, 0, 0, 0, 2634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1997, 0, 0, 0, 0, 0, 1142784, 376, 376, 0, 0, 0, 0,
  /* 48323 */ 0, 0, 376, 0, 0, 0, 0, 0, 0, 2580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1587, 0, 1589, 0, 0, 0, 0, 0, 0, 0,
  /* 48353 */ 1142784, 1142784, 0, 1, 16386, 3, 0, 0, 2187264, 0, 0, 0, 0, 0, 2803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
  /* 48379 */ 0, 0, 0, 0, 0, 0, 0, 0, 290, 2183168, 2183168, 3100672, 2183168, 2183168, 2183168, 2183168, 2183168,
  /* 48396 */ 2183168, 2183168, 2183168, 2183168, 2183168, 0, 830, 2129920, 0, 2473984, 2482176, 0, 0, 0, 0, 2859008, 0,
  /* 48413 */ 0, 0, 0, 0, 0, 2818048, 0, 3133440, 2920448, 0, 2744320, 0, 0, 0, 0, 0, 2936832, 0, 0, 2809856, 3141632,
  /* 48434 */ 2420736
];

JSONiqParser.EXPECTED =
[
  /*    0 */ 984, 991, 992, 991, 987, 996, 1000, 1004, 1008, 1050, 1013, 2916, 1018, 2240, 1050, 1024, 1125, 1032, 1050,
  /*   19 */ 1039, 1083, 1203, 1050, 2230, 1093, 1094, 1062, 1062, 1126, 1127, 1045, 1049, 1050, 1009, 1055, 1050, 2905,
  /*   37 */ 1093, 1093, 1061, 1062, 1062, 1066, 1127, 1067, 1071, 1050, 1050, 1281, 1050, 2455, 1093, 1093, 1026, 1062,
  /*   55 */ 1062, 2461, 1127, 1127, 1081, 1050, 1051, 1050, 2906, 1093, 1095, 1062, 1062, 1108, 1127, 1128, 1087, 1088,
  /*   73 */ 1050, 1092, 1093, 1062, 1062, 1127, 1127, 1100, 2828, 2895, 1093, 1105, 1107, 1127, 1112, 1283, 1118, 1096,
  /*   91 */ 1028, 1128, 1427, 1117, 1122, 2461, 1132, 1146, 2463, 1135, 1139, 2458, 1143, 1150, 1154, 1158, 1162, 1166,
  /*  109 */ 1169, 1173, 1174, 1178, 1181, 1185, 1189, 1193, 1197, 1050, 1200, 1050, 2347, 1057, 1050, 1050, 1050, 1209,
  /*  127 */ 1050, 1050, 1050, 1904, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 2688, 1050, 1050, 1050, 2889, 1050,
  /*  145 */ 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
  /*  163 */ 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
  /*  181 */ 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
  /*  199 */ 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
  /*  217 */ 1050, 1050, 2315, 1050, 1077, 1216, 1221, 1225, 1229, 1233, 1237, 1050, 1050, 1242, 1255, 1268, 1259, 1304,
  /*  235 */ 1305, 1272, 1050, 1050, 1963, 1584, 2326, 1278, 1050, 1339, 1050, 2241, 1288, 1050, 1293, 1050, 1050, 2194,
  /*  253 */ 2322, 1297, 1301, 1050, 1727, 1309, 1050, 1433, 1315, 1050, 2294, 1581, 1050, 1496, 2042, 2325, 1320, 1050,
  /*  271 */ 1101, 1327, 1050, 1113, 1337, 1050, 1783, 1343, 1050, 1348, 1352, 1357, 1050, 2523, 1050, 1050, 1356, 1050,
  /*  289 */ 1508, 1050, 2055, 1361, 1322, 2752, 1050, 2752, 1050, 1514, 1050, 1365, 1369, 2703, 1050, 2705, 2079, 1807,
  /*  307 */ 1570, 1574, 1573, 2792, 1553, 2866, 1375, 1854, 2878, 1379, 1274, 1383, 1390, 1399, 1408, 2023, 1404, 1402,
  /*  325 */ 1412, 1425, 1050, 1050, 1431, 1050, 1606, 1437, 1653, 1444, 1447, 2854, 1050, 2087, 1456, 1460, 1464, 1468,
  /*  343 */ 1472, 1473, 2340, 1477, 2086, 1482, 1486, 1490, 1525, 1494, 1050, 1500, 1050, 1245, 1050, 1050, 1506, 1595,
  /*  361 */ 1512, 1518, 1522, 1289, 1532, 1050, 2141, 1537, 1050, 1974, 1050, 1050, 2340, 1542, 1547, 2608, 1646, 1284,
  /*  379 */ 1551, 1050, 2433, 1557, 1050, 1590, 1562, 1050, 2501, 2431, 1567, 1616, 1020, 1495, 1050, 1578, 1050, 1019,
  /*  397 */ 1588, 1050, 1594, 1599, 2789, 1996, 1050, 2020, 1050, 2020, 1050, 1603, 1613, 1620, 1624, 2006, 1323, 2008,
  /*  415 */ 1629, 1634, 1986, 1985, 1478, 1638, 1643, 1650, 2163, 1668, 1657, 1790, 1661, 1665, 1674, 1678, 2176, 1682,
  /*  433 */ 1686, 1690, 1694, 1698, 1050, 2098, 1050, 1710, 2615, 1714, 1718, 1722, 1050, 1726, 2360, 2364, 1731, 2061,
  /*  451 */ 1735, 1739, 1745, 1050, 1749, 2048, 2363, 1758, 2707, 2448, 1838, 1050, 1238, 1767, 1050, 1772, 1050, 2009,
  /*  469 */ 1543, 1778, 1787, 1639, 1794, 2593, 1800, 1050, 1251, 1050, 1050, 2580, 1050, 1050, 2555, 2117, 2630, 1768,
  /*  487 */ 1805, 1452, 1050, 1050, 2842, 1050, 1050, 1812, 1050, 2303, 2067, 2120, 2179, 1816, 2030, 1050, 1926, 1821,
  /*  505 */ 1050, 2029, 1050, 2805, 1828, 1832, 1050, 1836, 2092, 1842, 2092, 1842, 2275, 1848, 1852, 1074, 2135, 1860,
  /*  523 */ 1858, 1865, 2718, 1869, 1822, 1872, 1858, 1877, 1881, 1873, 2822, 1265, 1959, 2583, 1808, 1887, 1961, 1956,
  /*  541 */ 1885, 1212, 2288, 1891, 1895, 1050, 1050, 1902, 1908, 1913, 2733, 1917, 1921, 1925, 2388, 1861, 1949, 1395,
  /*  559 */ 1930, 2763, 1934, 1938, 1939, 1944, 1943, 1948, 2126, 1953, 1967, 1050, 1971, 1050, 1999, 1050, 2225, 1978,
  /*  577 */ 1050, 1983, 2913, 1990, 2003, 2013, 1050, 2017, 1050, 1050, 2034, 1050, 2281, 2040, 1050, 1909, 2152, 2046,
  /*  595 */ 1528, 1796, 1050, 2052, 1050, 1050, 2059, 1050, 1050, 2065, 1050, 2071, 2077, 1386, 2083, 1050, 2091, 1050,
  /*  613 */ 2036, 1050, 1050, 2096, 1801, 2860, 2795, 2102, 1754, 1050, 2407, 1050, 2407, 2726, 2108, 2114, 1979, 1050,
  /*  631 */ 2124, 2308, 1563, 2130, 2134, 2139, 2540, 2308, 2073, 2145, 2139, 2151, 2156, 2160, 2185, 2169, 2173, 2183,
  /*  649 */ 2191, 2200, 2187, 2202, 1050, 1050, 1050, 1050, 1502, 1763, 2206, 1440, 2210, 2214, 2217, 1050, 2223, 2425,
  /*  667 */ 2229, 2234, 1898, 2238, 2245, 2246, 1050, 2250, 2424, 2259, 2265, 2269, 2273, 1344, 2280, 1050, 2279, 1050,
  /*  685 */ 2285, 1050, 1774, 2401, 2292, 2664, 2298, 2302, 1817, 2307, 1050, 1205, 2280, 1050, 1824, 1050, 1050, 2312,
  /*  703 */ 1609, 2319, 2330, 2334, 1823, 2369, 1050, 2816, 2339, 1050, 2147, 1800, 1774, 2349, 2344, 2353, 1050, 2357,
  /*  721 */ 1050, 1050, 2368, 1050, 1741, 2280, 2374, 2378, 2382, 1538, 2386, 1538, 2386, 1538, 2386, 2392, 2396, 2400,
  /*  739 */ 2405, 1844, 1050, 2405, 2411, 2415, 2196, 2335, 2423, 2429, 2437, 2418, 1418, 2419, 2441, 1248, 2445, 2452,
  /*  757 */ 2467, 2471, 2475, 2479, 2483, 2487, 2491, 2495, 1050, 1050, 2499, 2261, 2505, 2509, 2513, 2517, 1050, 2679,
  /*  775 */ 2527, 2534, 2538, 2544, 2548, 2552, 2561, 2565, 2041, 2570, 2530, 2577, 2587, 1371, 1050, 2835, 1050, 2834,
  /*  793 */ 1050, 1014, 2591, 1050, 2597, 2601, 2605, 2612, 1450, 1050, 2848, 1050, 1050, 1035, 1050, 1050, 2619, 1050,
  /*  811 */ 2370, 2623, 2627, 2634, 2638, 1050, 2782, 1050, 1050, 2644, 1050, 1050, 2648, 2652, 2657, 2661, 2668, 2672,
  /*  829 */ 1050, 2677, 1050, 2720, 2725, 1050, 2683, 2640, 2573, 2687, 2692, 2165, 1050, 2165, 1050, 1670, 2872, 2697,
  /*  847 */ 2054, 2566, 1050, 2701, 2566, 2711, 2715, 2254, 2724, 2730, 2653, 2737, 2253, 2741, 2746, 1050, 1630, 2750,
  /*  865 */ 1050, 1704, 1050, 1761, 1316, 1050, 1752, 1781, 1050, 1050, 1050, 2673, 2756, 2760, 2767, 2771, 2775, 1050,
  /*  883 */ 1050, 2779, 1558, 1701, 2786, 2799, 2693, 2026, 2803, 1050, 1421, 1050, 2927, 2110, 1993, 1050, 1050, 2810,
  /*  901 */ 1050, 2809, 1050, 1415, 1050, 1041, 2883, 2557, 2104, 2814, 1050, 1050, 2820, 1050, 1050, 2826, 1050, 1625,
  /*  919 */ 2832, 1050, 2839, 1217, 1393, 2520, 1050, 1050, 2846, 1050, 1050, 2852, 1050, 1050, 2858, 1706, 1843, 2864,
  /*  937 */ 2870, 1050, 2219, 1050, 1050, 1262, 1050, 1050, 2876, 2882, 2929, 2887, 1050, 2893, 1050, 2893, 1050, 2899,
  /*  955 */ 2903, 2910, 1050, 1331, 1329, 1050, 2920, 1311, 1050, 1333, 2742, 1050, 2924, 2930, 1050, 1050, 2255, 1050,
  /*  973 */ 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1534, 2934, 2937, 2941, 2962, 2958, 2962, 2963,
  /*  991 */ 2962, 2962, 2962, 2962, 2951, 2960, 2944, 2967, 2947, 2954, 2971, 2971, 2975, 2979, 2983, 2987, 2991, 3001,
  /* 1009 */ 3403, 3403, 3403, 3041, 3005, 3403, 3403, 3403, 3219, 3435, 3403, 3403, 3403, 3272, 3814, 5185, 4628, 5186,
  /* 1027 */ 5189, 5189, 5189, 5190, 3095, 3054, 3028, 3020, 3403, 3008, 4968, 3727, 3403, 4944, 3403, 3403, 3022, 5274,
  /* 1045 */ 3095, 3096, 3036, 3031, 3021, 3403, 3403, 3403, 3403, 3167, 3045, 4826, 3403, 3403, 3194, 3403, 3078, 5189,
  /* 1063 */ 5189, 5189, 5189, 3052, 3095, 3095, 3095, 5194, 3037, 3018, 3032, 3403, 3023, 4187, 3403, 3048, 4027, 4750,
  /* 1081 */ 3015, 3020, 3403, 3403, 3225, 4909, 3070, 3403, 3403, 3403, 3435, 4626, 4628, 4628, 4628, 4628, 3079, 5189,
  /* 1099 */ 5189, 3063, 3403, 3403, 3403, 3462, 5188, 5189, 5189, 5189, 5192, 3095, 3095, 3069, 3403, 3403, 3403, 3463,
  /* 1117 */ 3403, 5183, 4628, 4628, 4628, 4628, 5189, 5189, 5189, 3012, 3095, 3095, 3095, 3095, 5193, 3070, 4827, 3403,
  /* 1135 */ 4627, 4628, 3081, 5189, 3095, 5193, 3403, 4625, 3095, 3055, 4044, 4628, 5187, 5189, 5190, 5187, 5189, 3094,
  /* 1153 */ 3096, 3403, 5185, 3079, 5189, 3094, 3054, 4626, 3080, 5192, 3056, 3079, 3093, 3075, 3092, 3085, 3089, 3100,
  /* 1171 */ 3106, 3113, 3110, 3130, 3130, 3130, 3130, 3117, 3121, 3125, 3130, 3130, 3175, 3141, 3129, 3134, 3138, 3145,
  /* 1189 */ 3149, 3153, 3157, 3160, 3164, 3172, 3179, 3183, 5090, 4241, 3187, 3403, 3065, 3796, 3403, 3167, 3403, 3403,
  /* 1207 */ 3071, 4614, 3403, 4539, 3950, 3403, 3188, 3935, 3684, 3209, 3403, 3403, 3403, 3672, 3835, 3216, 3937, 3223,
  /* 1225 */ 3229, 3235, 3239, 3243, 3246, 3250, 3253, 3256, 3260, 3264, 3403, 3556, 3327, 3403, 3403, 3403, 3709, 3269,
  /* 1243 */ 3569, 4738, 3403, 3189, 3724, 3753, 4960, 4964, 3403, 3211, 4099, 4105, 3281, 3288, 3292, 5230, 3403, 4744,
  /* 1261 */ 4786, 3403, 3212, 5318, 3403, 3230, 5201, 3403, 3298, 3403, 4039, 3555, 3326, 3554, 3403, 3553, 3403, 3358,
  /* 1279 */ 3369, 3376, 3403, 3299, 3064, 3403, 3403, 3403, 3577, 3385, 3403, 3403, 3403, 3744, 4392, 3403, 3294, 3202,
  /* 1297 */ 3395, 3403, 3403, 3401, 3410, 3414, 3418, 3403, 3303, 3403, 3403, 3320, 3424, 3428, 3403, 3403, 3359, 3403,
  /* 1315 */ 3416, 3403, 3403, 3403, 3758, 3451, 3455, 3419, 3403, 3403, 3403, 3803, 3453, 3417, 3403, 3403, 3363, 5338,
  /* 1333 */ 3403, 3403, 3365, 3403, 3454, 3418, 3403, 3403, 3373, 3377, 3328, 3403, 3403, 3403, 3785, 3936, 3403, 3403,
  /* 1351 */ 3459, 5135, 3753, 3403, 3467, 3463, 3479, 3429, 3403, 3403, 4289, 3753, 4533, 3499, 3936, 3403, 3508, 3518,
  /* 1369 */ 4451, 3531, 3403, 3403, 3406, 3403, 3543, 3403, 3403, 4237, 3403, 5289, 3403, 5288, 4210, 3403, 5257, 3403,
  /* 1387 */ 3361, 4356, 4427, 3560, 3403, 5258, 3403, 3362, 3403, 4693, 3430, 4280, 3573, 3403, 5259, 4348, 3188, 3581,
  /* 1405 */ 3403, 4825, 3581, 3574, 5288, 3204, 5199, 3672, 4349, 3673, 3403, 3403, 5264, 3403, 3403, 5280, 3403, 3403,
  /* 1423 */ 5305, 5239, 3586, 4349, 3403, 3403, 3434, 3403, 4480, 3733, 3403, 3403, 3461, 3442, 5340, 5320, 3596, 4170,
  /* 1441 */ 3843, 4471, 4477, 3615, 3619, 3622, 3630, 3630, 3625, 3403, 3405, 3403, 3403, 4459, 4101, 3511, 3403, 3684,
  /* 1459 */ 4829, 5122, 4544, 4226, 3634, 5144, 3403, 3643, 3316, 3654, 3660, 4983, 3667, 3671, 3403, 3190, 3403, 3403,
  /* 1477 */ 3678, 3403, 3403, 3403, 3861, 4595, 3511, 3403, 5019, 4315, 3996, 4044, 4898, 3699, 3705, 3403, 3713, 3719,
  /* 1495 */ 5040, 3403, 3403, 3403, 3934, 3195, 3720, 3403, 3403, 3475, 4620, 4305, 3732, 3403, 3403, 3487, 3204, 3403,
  /* 1513 */ 4597, 3403, 3403, 3504, 3554, 4828, 3851, 3759, 5142, 3737, 3874, 4083, 3403, 3436, 3637, 3403, 3433, 5307,
  /* 1531 */ 4822, 3748, 3752, 3403, 3403, 3522, 5039, 3403, 3403, 3403, 3961, 3775, 3403, 3403, 3403, 4016, 4169, 3403,
  /* 1549 */ 3403, 4154, 3277, 3753, 3403, 3403, 3539, 3403, 3770, 3403, 3403, 3403, 4021, 3771, 3403, 3403, 3403, 4047,
  /* 1567 */ 4597, 3064, 4564, 3758, 3102, 3684, 3535, 3204, 3403, 3403, 3684, 4406, 3789, 3793, 3403, 3447, 3554, 3403,
  /* 1585 */ 3339, 3349, 3353, 3814, 5040, 3403, 3403, 3576, 3276, 4481, 3403, 3403, 3527, 3403, 3403, 4597, 3754, 3420,
  /* 1603 */ 4977, 4397, 3526, 3403, 3592, 4182, 3403, 3403, 5356, 3662, 4596, 5260, 3680, 5141, 4027, 3663, 4086, 3738,
  /* 1621 */ 3818, 3403, 3823, 3827, 3403, 3403, 3403, 4048, 3656, 3403, 4171, 3403, 4170, 3756, 3839, 4027, 3848, 3865,
  /* 1639 */ 3403, 3403, 3403, 4092, 3872, 3403, 3757, 4046, 3867, 3637, 4085, 3878, 3684, 3688, 3403, 3600, 3607, 3611,
  /* 1657 */ 3872, 3902, 3738, 3687, 3689, 3655, 3755, 5143, 4552, 3684, 3911, 3655, 3896, 3403, 3403, 3588, 5061, 4553,
  /* 1675 */ 4295, 3916, 4550, 3690, 3909, 3403, 4551, 3910, 3655, 4553, 4296, 3655, 3922, 3920, 3655, 3922, 3927, 3933,
  /* 1693 */ 3945, 3755, 5066, 5295, 3494, 3943, 3949, 3954, 3403, 3674, 3360, 3403, 3680, 3403, 3403, 4636, 3342, 4027,
  /* 1711 */ 4362, 4372, 3965, 3403, 4416, 5137, 3969, 3973, 3977, 3981, 3985, 3989, 3989, 3989, 3992, 4686, 3403, 3403,
  /* 1729 */ 3403, 4095, 4129, 5285, 3403, 4918, 5227, 4020, 4762, 4891, 4025, 4032, 3403, 3403, 3602, 4614, 4033, 3403,
  /* 1747 */ 3403, 4033, 3403, 4685, 3753, 3403, 3681, 3403, 3403, 4696, 3403, 5243, 3390, 5286, 3403, 3682, 3403, 3403,
  /* 1765 */ 4655, 3403, 4062, 3403, 3403, 3403, 4133, 4066, 4070, 3403, 3403, 3626, 4378, 4002, 3403, 4610, 3403, 3683,
  /* 1783 */ 3403, 3403, 4717, 3293, 5139, 4128, 5284, 3403, 3686, 3690, 3685, 4713, 3205, 3403, 3403, 3662, 3403, 4594,
  /* 1801 */ 3403, 3403, 3403, 4163, 3403, 4715, 3403, 3403, 3691, 3403, 3934, 3403, 4458, 4100, 4153, 4693, 3403, 3403,
  /* 1819 */ 3403, 4198, 4149, 3554, 3403, 3403, 3403, 4199, 4203, 4375, 4181, 4610, 4160, 4195, 3403, 3403, 5208, 4175,
  /* 1837 */ 3204, 3403, 3403, 3708, 4061, 4176, 3403, 3403, 3403, 4348, 4648, 4180, 4348, 4160, 5287, 3403, 5097, 3204,
  /* 1855 */ 3403, 3397, 4239, 3403, 4576, 3473, 3403, 3403, 3403, 4349, 3403, 4716, 3403, 3890, 5209, 3403, 3403, 3024,
  /* 1873 */ 3554, 3403, 3403, 4729, 3403, 4718, 4141, 5017, 3403, 4820, 3403, 4183, 3693, 3684, 3403, 3692, 3403, 4824,
  /* 1891 */ 3693, 4208, 3934, 3935, 4217, 4075, 4077, 3403, 3694, 4530, 4538, 3284, 4389, 3403, 3403, 3842, 3403, 4044,
  /* 1909 */ 3403, 3403, 3403, 4387, 4437, 4947, 5140, 4221, 4245, 4249, 4253, 4257, 4261, 4265, 4269, 4270, 4274, 3403,
  /* 1927 */ 3403, 3403, 4406, 4293, 5199, 3403, 2994, 3047, 3438, 3483, 4304, 3403, 5032, 4313, 3403, 3403, 4337, 3403,
  /* 1945 */ 3403, 3403, 4408, 4349, 4343, 4347, 3493, 3403, 4283, 4319, 4823, 3403, 3694, 4823, 3403, 3694, 3403, 3693,
  /* 1963 */ 3403, 3936, 3511, 3332, 5177, 2997, 4915, 4869, 3363, 4324, 4532, 3403, 3695, 3746, 3750, 3311, 3403, 3403,
  /* 1981 */ 3403, 4508, 4407, 4336, 3403, 3403, 3857, 3828, 3403, 3495, 3403, 4519, 3403, 3715, 5067, 3403, 3802, 3807,
  /* 1999 */ 3403, 3475, 4328, 3204, 4353, 4276, 4087, 3403, 3803, 3833, 3403, 3403, 3403, 4081, 3994, 4883, 4917, 4361,
  /* 2017 */ 3403, 4366, 4405, 3403, 3812, 3808, 3403, 3582, 5288, 3403, 3403, 5213, 3403, 3403, 5233, 4145, 3403, 4831,
  /* 2035 */ 4369, 3403, 3403, 3884, 3204, 4383, 3403, 3403, 3403, 4519, 3492, 3549, 4532, 3403, 3403, 3888, 4000, 3403,
  /* 2053 */ 4402, 3403, 3403, 3936, 3403, 3491, 4830, 3309, 3403, 3403, 4012, 4514, 3306, 3310, 3403, 3403, 4014, 4137,
  /* 2071 */ 3403, 4413, 3403, 3403, 4045, 5002, 4716, 4140, 3403, 3403, 4057, 3203, 3188, 3403, 3753, 3403, 3819, 3403,
  /* 2089 */ 3403, 4595, 3886, 3403, 3403, 3403, 4575, 3403, 4432, 3403, 3403, 4106, 3960, 3188, 3662, 3403, 3403, 4120,
  /* 2107 */ 3403, 3403, 5001, 3403, 3403, 4121, 3403, 3432, 3882, 4397, 3403, 3888, 3546, 3601, 4610, 5014, 5113, 3403,
  /* 2125 */ 4795, 3403, 3403, 4122, 3431, 4169, 3601, 3403, 3880, 4449, 3403, 3403, 3403, 4576, 3403, 4509, 3403, 3403,
  /* 2143 */ 4189, 3767, 3431, 3868, 3403, 3403, 4197, 4201, 4794, 3403, 3403, 3403, 4603, 4796, 3403, 5270, 3360, 3315,
  /* 2161 */ 3403, 4396, 3403, 3894, 3403, 3403, 3588, 5055, 5216, 3314, 3403, 4397, 3312, 3403, 4394, 3403, 3915, 4550,
  /* 2179 */ 3690, 3403, 3403, 5208, 3312, 3403, 4395, 3403, 4394, 3403, 3314, 3313, 3314, 3403, 4396, 3403, 3934, 3403,
  /* 2197 */ 3403, 3354, 4671, 3315, 4395, 3403, 3315, 3313, 3403, 3403, 4362, 5353, 4463, 3639, 4863, 4485, 4489, 4492,
  /* 2215 */ 4496, 4500, 4501, 4505, 3403, 3403, 4305, 4309, 4467, 4379, 3403, 3403, 4305, 4332, 4472, 3403, 3403, 3403,
  /* 2233 */ 4627, 4513, 3057, 4518, 4524, 4543, 4548, 5068, 3403, 3403, 3403, 3381, 4557, 3403, 3403, 4561, 4435, 3403,
  /* 2251 */ 4466, 4378, 3403, 3935, 3403, 3403, 3403, 5311, 3636, 3523, 3403, 3403, 4391, 4784, 3937, 4168, 3761, 4720,
  /* 2269 */ 3460, 3403, 3693, 4574, 4580, 4393, 3403, 3403, 4392, 4015, 3785, 4584, 3403, 3403, 3403, 4666, 3403, 4589,
  /* 2287 */ 4593, 3403, 3935, 5200, 3935, 4993, 3638, 3403, 3403, 4393, 3403, 4601, 3403, 4607, 3898, 4392, 3403, 3403,
  /* 2305 */ 3403, 4716, 4202, 3403, 3403, 3403, 4795, 3403, 4619, 4959, 3403, 3937, 3199, 3203, 3524, 3403, 3939, 3403,
  /* 2323 */ 3956, 3509, 3389, 3396, 3403, 3403, 3603, 3763, 4601, 4525, 4609, 4624, 3403, 3403, 3403, 4878, 4204, 3403,
  /* 2341 */ 3403, 3403, 4977, 3522, 3403, 3514, 3403, 4008, 3403, 3403, 3265, 4993, 3058, 4896, 4526, 4633, 3403, 4357,
  /* 2359 */ 4615, 3403, 4028, 4000, 4181, 3403, 4006, 4661, 5242, 4640, 4203, 3403, 3403, 3403, 4972, 3602, 4378, 3403,
  /* 2377 */ 3873, 5357, 3522, 3513, 3739, 3762, 4896, 3923, 4393, 4644, 4584, 3403, 3403, 4409, 3460, 4428, 3482, 3403,
  /* 2395 */ 5224, 4567, 3938, 3403, 4894, 3391, 3403, 3403, 3403, 4989, 4348, 4648, 3403, 3403, 4441, 3403, 4765, 3403,
  /* 2413 */ 4652, 4660, 4224, 5313, 4737, 4665, 3403, 5278, 5282, 3230, 5281, 3403, 3403, 3403, 4991, 3636, 3754, 4670,
  /* 2431 */ 3403, 3525, 3403, 3403, 3575, 3275, 4182, 4675, 3955, 4735, 4680, 5314, 3403, 4961, 4963, 3231, 4418, 3403,
  /* 2449 */ 4043, 4055, 4052, 4962, 3403, 4690, 3403, 4044, 4628, 4628, 3079, 5189, 5191, 3095, 3095, 3095, 3070, 3436,
  /* 2467 */ 4963, 4707, 4420, 4960, 4964, 4088, 5283, 4961, 3520, 4710, 4960, 5283, 4213, 3403, 4725, 4733, 4087, 4742,
  /* 2485 */ 4213, 4087, 4748, 4754, 4212, 4755, 4759, 4769, 4770, 4774, 4776, 3905, 4628, 4629, 3403, 4780, 3403, 3363,
  /* 2503 */ 3782, 3403, 4790, 3403, 4793, 4800, 3322, 4807, 4811, 4815, 4835, 4839, 4843, 4847, 4854, 4852, 4848, 3403,
  /* 2521 */ 4073, 3955, 3403, 4094, 3443, 3417, 3047, 4717, 3168, 5098, 3567, 4907, 4913, 3567, 4858, 4862, 5096, 3402,
  /* 2539 */ 5051, 3403, 3403, 4455, 3403, 4423, 3403, 4867, 3929, 3829, 3403, 4286, 4873, 3403, 5041, 4877, 3403, 4107,
  /* 2557 */ 3403, 3403, 3673, 3430, 3740, 4882, 3403, 3740, 4888, 3403, 3403, 3403, 5084, 4902, 3437, 4717, 3168, 5080,
  /* 2575 */ 3950, 4818, 4596, 3403, 5051, 3403, 4111, 4115, 3403, 3692, 3403, 5217, 3403, 4423, 3403, 5250, 4930, 4934,
  /* 2593 */ 3403, 3403, 4458, 4113, 4519, 4941, 3048, 4719, 5276, 3565, 3345, 4656, 4884, 4156, 3403, 4821, 4826, 3851,
  /* 2611 */ 3681, 3403, 4422, 3312, 4182, 4394, 3673, 3335, 4305, 4952, 4957, 5267, 3844, 4391, 4721, 5069, 4982, 4987,
  /* 2629 */ 4998, 3403, 4119, 4126, 4703, 3511, 3403, 3403, 5006, 3403, 5011, 3403, 3403, 4519, 5050, 3403, 4444, 5024,
  /* 2647 */ 4958, 3403, 4445, 5025, 4959, 3760, 3403, 3403, 3403, 5085, 4519, 4975, 4717, 4721, 3565, 3950, 5029, 3403,
  /* 2665 */ 4166, 3403, 3059, 4820, 3403, 3403, 5007, 3404, 3403, 3403, 3403, 5102, 4803, 5046, 3403, 3403, 4520, 4903,
  /* 2683 */ 3403, 4802, 5045, 3680, 4819, 3403, 3403, 3403, 5143, 3693, 3403, 3403, 3403, 5205, 5079, 3776, 4959, 3510,
  /* 2701 */ 3403, 5084, 3403, 3403, 4534, 3471, 3403, 3403, 3420, 4037, 3760, 3403, 5089, 3563, 5094, 3403, 3512, 3403,
  /* 2719 */ 4193, 3403, 3403, 3728, 5036, 4585, 3727, 3403, 3403, 3403, 5141, 3403, 4473, 5055, 3403, 4230, 5075, 4234,
  /* 2737 */ 3403, 4699, 3460, 3510, 5253, 3403, 3403, 3403, 5350, 5255, 3403, 3403, 4937, 3403, 4994, 3403, 3403, 4534,
  /* 2755 */ 3500, 3778, 4701, 3777, 5124, 3064, 5106, 5110, 3403, 4300, 3753, 3798, 3853, 3344, 5119, 5128, 5132, 5148,
  /* 2773 */ 5152, 5156, 5160, 5170, 5163, 5166, 4314, 5306, 5327, 3403, 4305, 5023, 4957, 3403, 5174, 3403, 4045, 4027,
  /* 2791 */ 4570, 3403, 3469, 3554, 3403, 3360, 4355, 4320, 4398, 5181, 5198, 5330, 3403, 5221, 3403, 3403, 4719, 3403,
  /* 2809 */ 3403, 5247, 3403, 3403, 3403, 3224, 5293, 3403, 3403, 4720, 4200, 3403, 5299, 3403, 3403, 4727, 3204, 3646,
  /* 2827 */ 3650, 3403, 3403, 4828, 3403, 5300, 3403, 3403, 3403, 4922, 4926, 3403, 3403, 5304, 5346, 3403, 4305, 5235,
  /* 2845 */ 4152, 4305, 3648, 3403, 3403, 4951, 4956, 4306, 3649, 3403, 3403, 4978, 3679, 4307, 3650, 3403, 3403, 5002,
  /* 2863 */ 3403, 3403, 5311, 3403, 3403, 5064, 4348, 3403, 4683, 3403, 3403, 5073, 3403, 4308, 3403, 3403, 3403, 5115,
  /* 2881 */ 3403, 5324, 5329, 3403, 3403, 3403, 4676, 3403, 3403, 3403, 5140, 3753, 5334, 3403, 3403, 3403, 5184, 4628,
  /* 2899 */ 5334, 3403, 3403, 4154, 3343, 3403, 3403, 3403, 5185, 4628, 4628, 3361, 3403, 3937, 3403, 4341, 4345, 3403,
  /* 2917 */ 3701, 5057, 3362, 3363, 5338, 3403, 5344, 3364, 3403, 4155, 3403, 4348, 3403, 3432, 3403, 3403, 3403, 5385,
  /* 2935 */ 5361, 5457, 5632, 5367, 5628, 6227, 5370, 5379, 5372, 5689, 5371, 5392, 5689, 5398, 5689, 5929, 5688, 6228,
  /* 2953 */ 5392, 5689, 5689, 5929, 5401, 5399, 5391, 5392, 5392, 5689, 5689, 5689, 5689, 5394, 5682, 5396, 5372, 5689,
  /* 2971 */ 5419, 5419, 5419, 5419, 5402, 5403, 5421, 5423, 5425, 5424, 5428, 5430, 5432, 5426, 5434, 5443, 5434, 5434,
  /* 2989 */ 5443, 5435, 5701, 5459, 5457, 5632, 5374, 6014, 5629, 5632, 5632, 6041, 5681, 5452, 5817, 5938, 5632, 5955,
  /* 3007 */ 5751, 5632, 5374, 6056, 5983, 5448, 5448, 5409, 6028, 5448, 5452, 5452, 5562, 5938, 5938, 5632, 5632, 5632,
  /* 3025 */ 5376, 5705, 5969, 5455, 5551, 5452, 5452, 5938, 5938, 5938, 5939, 5465, 5452, 5452, 5452, 5452, 5520, 6031,
  /* 3043 */ 5632, 5514, 5518, 5518, 5632, 5632, 5374, 5632, 5632, 5448, 5410, 6028, 6028, 5450, 5632, 5632, 5811, 5462,
  /* 3061 */ 5632, 5632, 5448, 5632, 5632, 5632, 5405, 5564, 6028, 5691, 5632, 5632, 5632, 5385, 5411, 5632, 5811, 5981,
  /* 3079 */ 5981, 5981, 5982, 5448, 5448, 5448, 5411, 5811, 5982, 5449, 5411, 5982, 5411, 5982, 5448, 5449, 6028, 6028,
  /* 3097 */ 6028, 6028, 5691, 5411, 5632, 5632, 6193, 5632, 5368, 5777, 6192, 5777, 5768, 5857, 5559, 5479, 5709, 5703,
  /* 3115 */ 5472, 5439, 5575, 5709, 5481, 5942, 5438, 5540, 5441, 5484, 5534, 5486, 5488, 5489, 5560, 5709, 5709, 5709,
  /* 3133 */ 5709, 5770, 5440, 5482, 5536, 5709, 5713, 5711, 5437, 5439, 5502, 5533, 5709, 5714, 5436, 5539, 5547, 5556,
  /* 3151 */ 5541, 5542, 5558, 5567, 5574, 5579, 5581, 5582, 5582, 5582, 5583, 5584, 5587, 5585, 5589, 5698, 5698, 5632,
  /* 3169 */ 5632, 5632, 5381, 5941, 5710, 5712, 5709, 5709, 5711, 5440, 6082, 5591, 5593, 5596, 5597, 5595, 5596, 5599,
  /* 3187 */ 5672, 6195, 5632, 5632, 5632, 5414, 5874, 5604, 5632, 5632, 5632, 5415, 5549, 5511, 5976, 6108, 5884, 6192,
  /* 3205 */ 5632, 5632, 5632, 5462, 5521, 5613, 5632, 5632, 5374, 5894, 5806, 5620, 5517, 5519, 5632, 5374, 6056, 6161,
  /* 3223 */ 5612, 5632, 5632, 5632, 5468, 6031, 5477, 5632, 5632, 6019, 5632, 5388, 5642, 5635, 6042, 6019, 5641, 6109,
  /* 3241 */ 5646, 5648, 5650, 5652, 5652, 5652, 5653, 5655, 5656, 5657, 5659, 5660, 5663, 5662, 5661, 5665, 5665, 5665,
  /* 3259 */ 5667, 5670, 5670, 5669, 5670, 5671, 5632, 5632, 5632, 5506, 5676, 5632, 5644, 5632, 5376, 5693, 5406, 5814,
  /* 3277 */ 6052, 5763, 5749, 6226, 5632, 5677, 5787, 5632, 5376, 5693, 5522, 5632, 6232, 5632, 5679, 5684, 5632, 5632,
  /* 3295 */ 5632, 5510, 5976, 5733, 5632, 5632, 5632, 5515, 5632, 5744, 5741, 5632, 5376, 5806, 6194, 5783, 6114, 5632,
  /* 3313 */ 5632, 5632, 5860, 5632, 5632, 5632, 5870, 5632, 5746, 5632, 5632, 5374, 5945, 5510, 5460, 5513, 6020, 6133,
  /* 3331 */ 5632, 5632, 6042, 6109, 5632, 5376, 5906, 5629, 5632, 5936, 5837, 5632, 5381, 5707, 5632, 5632, 5405, 5939,
  /* 3349 */ 5632, 5632, 6233, 5773, 5404, 5632, 5632, 5447, 6072, 5758, 5632, 5632, 5632, 5530, 5632, 5632, 5632, 5374,
  /* 3367 */ 5381, 5632, 5924, 5632, 5693, 5772, 5692, 6081, 5475, 5509, 5497, 5775, 5902, 5632, 5632, 5693, 6051, 5508,
  /* 3385 */ 5494, 5498, 5776, 5903, 6234, 5564, 5632, 5632, 5632, 5623, 5447, 6229, 5632, 5632, 5632, 5525, 5707, 5819,
  /* 3403 */ 5632, 5632, 5632, 5632, 5361, 5632, 5632, 5923, 5925, 5856, 5504, 5493, 5497, 6183, 5977, 6044, 5780, 5632,
  /* 3421 */ 5632, 5632, 5672, 5526, 5494, 5498, 6184, 5777, 5970, 5632, 5632, 5632, 5685, 5632, 5632, 5405, 5632, 5632,
  /* 3439 */ 5632, 5375, 5632, 5503, 5937, 5493, 5497, 6178, 5685, 5980, 5513, 6020, 5380, 5856, 5526, 5494, 5498, 5801,
  /* 3457 */ 5977, 6044, 5794, 5787, 5632, 5632, 5632, 5693, 5793, 5526, 5632, 5692, 5856, 5526, 5510, 5878, 6175, 6192,
  /* 3475 */ 5632, 5632, 5374, 6049, 5494, 5498, 5681, 5777, 5632, 5632, 5632, 6023, 5632, 5960, 5797, 5884, 5632, 5837,
  /* 3493 */ 5632, 5632, 5632, 5691, 5632, 5632, 5526, 5494, 5748, 6044, 5780, 5632, 5817, 5510, 6020, 5672, 5787, 5632,
  /* 3511 */ 5632, 6191, 5632, 5632, 5632, 5522, 5519, 5939, 5877, 5388, 5632, 5387, 5632, 5362, 5632, 5632, 5632, 5955,
  /* 3529 */ 5632, 5632, 5493, 5748, 6044, 6133, 5799, 5493, 5748, 6186, 5632, 5797, 5884, 6192, 5526, 5797, 6133, 5632,
  /* 3547 */ 5381, 5900, 5955, 5632, 5512, 6109, 5807, 6133, 5632, 5632, 5632, 5517, 5510, 5632, 5820, 5826, 5632, 5381,
  /* 3565 */ 6098, 5707, 5524, 5373, 5632, 5632, 5755, 6192, 5632, 5826, 5632, 5632, 5632, 5696, 5406, 5814, 5632, 5820,
  /* 3583 */ 6195, 5632, 5632, 5820, 5632, 5632, 5820, 5562, 5617, 5956, 5817, 5824, 6225, 5632, 5632, 6192, 6109, 5632,
  /* 3601 */ 6019, 5632, 5632, 5632, 5707, 5754, 5632, 6032, 5698, 5831, 5537, 5834, 5836, 5840, 5843, 5845, 5850, 5851,
  /* 3619 */ 5849, 5851, 5846, 5847, 5847, 5847, 5853, 5632, 5632, 5632, 5708, 5853, 5853, 5853, 5853, 5405, 5863, 5632,
  /* 3637 */ 5632, 5387, 5632, 5632, 5362, 5530, 5632, 5832, 5865, 5632, 5382, 5385, 5408, 5794, 5632, 5632, 5632, 5365,
  /* 3655 */ 5632, 5632, 5632, 5720, 5632, 5872, 5364, 5632, 5632, 5388, 5632, 5685, 5363, 5632, 5632, 5414, 5874, 5632,
  /* 3673 */ 5632, 5632, 5721, 5632, 5632, 5881, 6185, 5632, 5632, 5632, 5718, 5632, 5632, 5632, 5719, 5507, 5613, 5935,
  /* 3691 */ 5632, 5632, 5632, 5694, 5632, 5632, 5632, 5695, 5632, 5876, 5632, 5632, 5445, 5632, 5632, 5761, 5572, 5632,
  /* 3709 */ 5383, 5959, 5492, 5569, 5632, 5756, 5632, 5632, 5446, 5719, 5415, 5762, 6172, 6174, 5885, 5416, 6171, 6173,
  /* 3727 */ 6175, 5632, 5632, 5632, 6180, 5720, 6102, 5681, 6109, 5632, 5887, 5632, 5519, 5632, 5632, 5632, 5728, 5632,
  /* 3745 */ 5695, 5697, 5544, 6052, 5762, 5881, 5750, 6186, 5388, 5632, 5632, 5632, 5447, 5632, 5632, 5672, 5632, 5632,
  /* 3763 */ 5632, 5461, 5632, 5632, 5815, 5625, 5763, 5749, 6226, 5388, 5632, 5632, 5881, 5373, 5632, 5632, 5632, 5731,
  /* 3781 */ 5632, 5855, 5823, 6103, 5632, 5385, 6070, 6119, 5702, 5821, 5815, 5637, 6035, 6226, 5388, 5632, 5413, 5632,
  /* 3799 */ 5632, 5374, 5760, 5632, 5894, 5720, 5814, 5637, 6052, 5763, 5687, 5388, 5632, 5894, 5720, 5814, 6052, 5763,
  /* 3817 */ 5750, 5510, 5632, 5632, 5632, 5752, 5376, 5693, 5821, 5624, 5763, 5687, 5632, 5632, 5632, 5758, 5861, 5956,
  /* 3835 */ 5632, 5632, 5516, 5632, 5632, 5718, 5632, 5811, 5632, 5388, 5632, 5632, 5375, 5632, 5685, 6195, 5632, 5447,
  /* 3853 */ 5564, 5632, 5405, 5731, 5632, 5693, 5507, 6170, 5632, 5692, 5720, 5476, 5896, 5956, 5632, 5632, 5519, 5632,
  /* 3871 */ 6034, 5720, 5632, 5632, 5632, 5761, 5388, 5607, 5632, 5530, 5632, 5405, 5519, 5632, 5707, 5498, 5867, 5632,
  /* 3889 */ 5632, 5519, 5887, 5530, 6109, 5632, 5720, 5476, 6008, 5632, 5632, 5551, 5672, 5691, 5632, 5672, 5812, 5812,
  /* 3907 */ 5812, 5981, 5632, 5719, 5525, 6008, 5632, 5632, 5720, 5447, 5632, 5812, 5632, 5632, 5720, 6107, 5632, 5632,
  /* 3925 */ 5632, 5764, 5719, 5691, 5632, 5632, 5552, 5632, 5898, 5632, 5632, 5719, 5632, 5632, 5632, 5520, 5523, 5632,
  /* 3943 */ 5939, 5632, 5939, 5632, 5632, 5898, 5939, 5632, 5632, 5939, 5632, 5939, 5939, 5632, 5632, 5632, 5794, 5368,
  /* 3961 */ 5632, 5632, 5632, 5806, 5632, 5894, 5900, 5785, 5632, 6154, 5742, 6153, 5576, 5908, 5577, 5742, 6165, 5910,
  /* 3979 */ 5912, 5913, 5915, 5913, 5915, 5917, 5918, 5918, 5919, 5920, 5921, 5921, 5921, 5921, 5922, 5632, 5632, 5564,
  /* 3997 */ 5632, 5632, 5672, 5632, 5692, 5447, 5530, 5956, 6109, 5860, 5721, 5632, 5632, 5601, 5387, 5904, 5927, 5632,
  /* 4015 */ 5632, 5607, 5376, 5632, 5692, 5602, 5632, 5632, 5632, 5808, 5632, 5829, 5632, 5632, 5607, 5632, 5887, 5632,
  /* 4033 */ 5950, 5952, 5632, 5632, 5570, 5954, 5632, 5632, 5639, 5389, 5500, 5632, 5632, 5632, 5811, 5632, 5632, 5632,
  /* 4051 */ 5383, 5633, 5632, 5377, 5632, 5463, 5632, 5632, 5685, 5797, 5569, 5460, 5466, 5632, 5632, 5382, 5769, 5491,
  /* 4069 */ 5673, 5570, 5614, 5467, 5632, 5468, 5632, 5694, 5632, 5694, 5747, 5632, 5814, 5388, 5632, 5632, 5685, 5890,
  /* 4087 */ 5632, 5632, 5632, 5747, 6124, 5571, 6192, 5632, 5632, 5692, 5856, 5474, 5697, 5491, 5674, 6103, 5804, 5971,
  /* 4105 */ 5605, 5632, 5632, 5632, 5814, 5388, 5828, 5704, 5490, 5608, 5456, 5809, 5606, 5632, 5615, 5632, 5632, 5632,
  /* 4123 */ 5816, 5632, 5632, 5520, 5632, 6104, 5632, 5568, 5632, 5632, 5632, 5632, 6188, 6099, 5632, 5692, 5900, 5955,
  /* 4141 */ 5632, 6109, 5632, 5632, 5622, 5803, 6175, 6192, 5705, 5608, 6103, 5804, 5971, 5632, 5632, 5632, 5819, 5632,
  /* 4159 */ 5632, 5632, 5632, 6187, 5632, 5520, 5626, 5632, 5520, 6112, 5632, 5632, 5632, 5956, 5632, 5632, 5965, 5491,
  /* 4177 */ 5967, 6175, 6192, 5900, 5956, 6109, 5632, 5632, 5632, 5705, 5969, 6133, 5632, 5632, 5696, 5543, 6132, 5632,
  /* 4195 */ 5747, 5935, 5632, 5632, 5692, 6050, 6071, 5627, 5618, 6044, 5606, 5632, 5632, 5719, 5632, 5632, 5747, 6192,
  /* 4213 */ 5632, 5747, 6126, 5388, 5719, 5632, 5632, 6195, 6193, 5812, 6042, 5632, 5522, 5632, 5632, 5723, 5632, 5447,
  /* 4231 */ 5373, 5632, 6092, 6129, 6093, 5781, 5632, 5525, 5979, 6186, 6192, 5632, 5405, 5632, 5447, 5632, 5632, 5816,
  /* 4249 */ 5936, 5975, 5936, 5961, 5990, 5610, 5992, 5995, 5994, 5996, 5994, 5997, 5998, 5998, 5998, 5998, 6000, 6000,
  /* 4267 */ 6002, 6001, 6000, 6004, 6004, 6004, 6004, 6004, 6004, 5632, 5632, 5707, 6054, 5632, 6110, 5935, 5632, 5548,
  /* 4285 */ 5935, 5632, 5554, 5638, 5632, 5563, 5632, 5877, 5707, 6012, 5632, 5632, 5719, 5721, 5691, 6016, 5632, 5632,
  /* 4303 */ 6018, 5766, 5632, 5632, 5632, 5828, 5385, 5408, 5718, 5632, 5767, 5632, 5632, 5632, 5831, 5447, 5632, 6034,
  /* 4321 */ 6192, 5632, 5632, 6039, 6047, 5765, 5784, 6040, 5526, 6236, 5882, 6027, 6047, 5765, 5784, 5505, 6010, 5787,
  /* 4339 */ 5632, 5632, 5820, 5632, 5706, 5956, 6188, 6185, 6113, 5632, 5632, 5632, 5820, 5632, 5685, 5632, 5632, 5548,
  /* 4357 */ 5632, 5632, 5707, 6051, 5760, 5632, 5632, 5632, 5887, 5632, 6056, 5474, 6235, 6063, 6192, 5632, 5629, 5632,
  /* 4375 */ 5607, 5376, 5632, 5900, 5687, 6186, 5632, 5632, 5408, 5937, 6236, 6114, 5894, 5522, 5626, 5804, 5632, 5632,
  /* 4393 */ 5706, 5632, 5632, 5632, 5551, 5632, 5632, 5632, 5565, 5376, 5525, 5498, 6063, 5632, 5632, 5632, 5894, 6006,
  /* 4411 */ 5505, 6010, 5520, 5626, 5787, 5632, 5629, 5632, 6031, 5811, 5880, 5632, 5632, 5553, 5632, 5632, 6054, 5632,
  /* 4429 */ 5632, 5632, 5900, 6059, 5783, 6099, 5632, 5630, 5632, 5632, 5721, 5706, 6059, 5783, 6192, 5632, 5632, 5828,
  /* 4447 */ 5408, 5814, 5632, 6034, 5632, 5632, 5719, 5799, 5632, 5707, 6237, 5632, 5632, 5828, 5704, 5491, 5820, 6177,
  /* 4465 */ 5935, 5632, 5632, 5828, 5708, 5900, 5685, 6188, 5632, 5632, 5632, 5928, 6132, 5632, 6188, 5632, 5632, 5828,
  /* 4483 */ 5720, 6102, 5707, 6076, 6068, 6066, 6075, 6078, 6080, 6084, 6084, 6084, 6086, 6088, 6088, 6088, 6088, 6089,
  /* 4501 */ 6090, 6090, 6090, 6090, 6090, 6090, 6091, 5632, 5632, 5866, 5632, 5632, 5636, 5632, 5632, 5632, 5931, 5531,
  /* 4519 */ 5632, 5632, 5632, 5936, 5621, 6095, 5632, 5632, 5632, 5940, 5632, 5632, 5957, 5810, 5632, 5632, 5632, 5856,
  /* 4537 */ 5526, 5957, 5632, 5632, 5632, 5948, 6097, 5718, 5632, 5632, 5812, 6101, 5787, 5632, 5632, 5720, 5800, 5935,
  /* 4555 */ 5632, 5632, 5632, 5788, 5790, 5631, 5632, 5789, 5791, 5632, 5632, 5892, 5632, 5388, 5362, 5632, 5388, 5685,
  /* 4573 */ 5890, 6116, 5632, 5632, 5632, 5965, 5491, 6097, 5672, 5632, 5412, 5838, 5632, 5632, 5632, 5977, 5632, 5692,
  /* 4591 */ 6069, 6118, 6120, 5606, 5632, 5632, 5632, 5813, 5632, 6191, 5692, 5787, 5632, 5632, 5721, 5817, 5632, 5940,
  /* 4609 */ 5643, 5632, 5632, 5860, 5721, 6051, 6072, 5681, 5619, 5838, 5707, 5473, 5686, 5777, 6187, 5527, 5632, 5632,
  /* 4627 */ 5632, 5981, 5981, 5981, 5981, 5812, 5632, 5764, 5706, 5632, 5632, 5906, 5491, 5632, 6050, 6071, 5627, 5474,
  /* 4645 */ 6072, 5681, 5619, 6122, 5976, 5777, 6045, 5632, 5761, 5813, 5632, 5632, 5934, 5632, 5632, 5458, 5632, 5632,
  /* 4663 */ 5632, 6031, 5623, 5632, 5632, 5632, 6049, 6072, 5777, 6099, 5388, 5632, 5453, 5632, 5632, 5520, 5694, 5387,
  /* 4681 */ 5632, 5632, 6031, 5694, 5632, 5632, 5813, 6137, 5388, 5747, 6124, 6134, 5632, 5632, 5936, 5632, 5498, 6237,
  /* 4699 */ 5632, 5499, 5632, 5381, 5564, 5632, 5632, 6060, 5632, 5778, 5632, 6031, 5811, 6192, 5632, 5632, 5937, 5632,
  /* 4717 */ 5632, 5632, 5817, 5632, 5632, 5632, 5692, 5632, 5980, 6134, 5632, 5632, 5724, 5973, 6192, 5632, 5388, 5520,
  /* 4735 */ 5811, 6192, 6098, 5632, 5632, 5632, 6043, 6126, 5388, 5632, 5632, 5735, 5737, 6126, 5388, 5632, 5520, 5520,
  /* 4753 */ 5519, 6126, 5632, 5632, 5980, 6192, 5632, 6007, 6192, 5632, 5632, 5944, 5632, 5447, 5901, 6109, 5980, 6192,
  /* 4771 */ 5632, 5980, 6192, 5520, 5812, 5747, 5812, 5747, 5812, 6030, 5497, 5626, 6021, 5374, 5692, 5632, 5632, 5739,
  /* 4789 */ 5741, 5632, 5805, 5519, 6128, 5632, 5632, 5632, 6062, 5632, 5632, 5374, 5545, 5632, 5374, 5821, 5528, 5550,
  /* 4807 */ 6131, 6128, 5632, 6136, 5632, 5945, 6132, 6187, 5819, 6176, 5819, 6176, 5632, 5632, 5632, 6192, 5632, 5632,
  /* 4825 */ 5747, 5632, 5632, 5632, 5698, 5632, 5632, 5376, 5806, 5474, 6218, 5496, 6105, 6139, 5984, 5985, 6141, 5985,
  /* 4843 */ 5986, 5987, 5988, 5988, 6143, 6147, 6147, 6147, 5632, 6145, 6146, 6147, 6147, 6147, 6147, 6196, 5632, 5632,
  /* 4861 */ 6107, 5469, 5632, 5632, 5632, 6065, 5632, 5841, 5632, 5632, 5759, 5632, 6149, 5632, 5632, 5470, 5729, 5632,
  /* 4879 */ 5632, 5632, 6122, 5730, 5632, 5632, 5632, 6132, 5632, 5730, 5632, 6152, 5632, 5632, 5947, 5632, 5461, 5632,
  /* 4897 */ 5787, 5632, 5632, 5722, 5632, 5621, 5498, 6010, 5388, 5632, 5405, 5939, 5632, 5934, 5518, 5519, 5469, 5632,
  /* 4915 */ 5632, 6132, 5387, 5632, 5632, 5632, 5876, 5632, 5828, 5408, 6162, 5609, 5802, 6158, 6187, 5494, 5801, 5618,
  /* 4933 */ 6159, 5632, 5632, 6238, 5632, 5632, 5955, 5868, 5621, 5498, 6021, 5632, 5632, 5955, 5956, 5782, 6185, 5883,
  /* 4951 */ 5828, 5408, 6106, 5494, 5881, 5881, 5618, 6044, 6187, 5632, 5632, 5632, 5980, 5879, 5388, 5632, 5632, 5529,
  /* 4969 */ 5622, 5681, 5619, 5632, 6030, 5497, 6167, 5388, 5632, 5374, 5855, 5823, 5881, 6057, 5632, 5632, 5405, 5698,
  /* 4987 */ 5939, 5934, 5632, 5632, 5761, 5820, 5813, 5632, 5632, 5632, 5978, 6132, 5632, 5819, 5632, 5632, 5956, 6019,
  /* 5005 */ 5632, 5632, 5860, 6109, 5632, 5632, 5632, 5719, 5362, 5632, 5632, 5963, 6187, 5747, 5632, 5632, 5702, 5632,
  /* 5023 */ 5408, 5814, 5529, 5622, 5618, 6044, 5632, 6187, 5813, 5632, 5632, 6026, 6024, 5814, 5529, 6103, 5777, 5885,
  /* 5041 */ 5632, 5632, 5632, 5727, 5550, 5977, 6044, 6187, 5632, 6167, 5632, 5632, 5632, 6191, 5786, 6187, 5632, 5632,
  /* 5059 */ 5795, 5632, 5786, 6187, 5632, 5672, 5632, 5632, 6193, 5632, 5632, 5632, 5787, 6169, 5632, 5936, 5499, 5632,
  /* 5077 */ 5690, 5632, 5381, 5632, 5787, 5806, 5373, 5820, 5977, 6175, 5632, 5718, 6182, 5632, 5632, 5632, 6193, 5373,
  /* 5095 */ 5632, 6132, 5632, 5632, 5632, 6098, 5707, 5376, 5561, 5491, 5680, 5632, 5887, 5632, 5362, 6190, 5632, 5632,
  /* 5113 */ 5731, 5632, 5632, 5747, 5884, 6192, 5495, 5564, 5376, 5698, 5859, 5632, 5632, 5386, 5564, 5888, 6198, 5564,
  /* 5131 */ 5384, 5820, 6199, 5407, 5692, 5563, 5632, 5877, 5520, 5632, 5632, 5632, 5812, 5632, 5632, 5632, 5417, 5616,
  /* 5149 */ 5822, 5692, 6201, 6203, 6205, 6205, 6207, 6205, 6209, 6209, 6209, 6210, 6211, 6213, 6212, 6212, 6216, 6216,
  /* 5167 */ 6220, 6222, 6217, 6214, 6213, 6213, 6214, 5632, 5632, 6224, 5632, 5632, 6037, 5673, 5632, 6231, 5632, 5632,
  /* 5185 */ 5811, 5981, 5981, 5981, 5448, 5448, 5448, 5448, 6028, 6028, 6028, 5450, 5451, 6240, 5632, 5632, 5632, 6195,
  /* 5203 */ 5632, 5632, 5632, 5715, 5717, 5632, 5632, 6099, 5632, 5632, 5632, 5716, 5718, 5632, 5632, 6109, 5632, 5747,
  /* 5221 */ 5632, 5716, 5718, 5761, 5721, 5819, 5632, 5632, 5933, 5632, 5447, 5726, 5632, 5376, 5704, 5491, 5674, 6103,
  /* 5239 */ 5692, 5632, 5707, 5632, 5632, 6150, 5632, 5405, 5700, 6029, 5718, 5632, 5632, 6156, 5632, 5632, 5955, 5787,
  /* 5257 */ 5632, 5632, 5807, 6192, 5632, 5632, 5691, 5699, 6027, 5794, 5632, 5632, 6164, 5632, 5632, 5955, 6019, 5561,
  /* 5275 */ 5491, 5632, 5381, 5632, 5632, 5759, 6073, 6044, 6134, 5632, 5632, 5632, 6060, 5632, 5632, 5632, 5807, 6133,
  /* 5293 */ 5632, 5719, 6193, 5632, 5632, 6193, 5383, 5806, 5474, 5718, 5632, 5632, 5831, 5814, 5519, 5632, 5632, 6034,
  /* 5311 */ 5685, 5632, 5632, 5632, 5811, 6192, 5623, 6244, 5632, 5632, 5632, 5817, 5860, 5632, 5813, 5706, 5381, 5632,
  /* 5329 */ 5707, 5632, 5632, 5632, 6242, 5632, 5632, 6246, 6248, 5385, 5632, 5632, 5632, 5818, 5632, 5632, 5813, 5692,
  /* 5347 */ 5632, 5386, 5632, 5632, 5632, 6246, 5632, 5632, 6187, 5499, 5721, 5819, 5632, 5632, 16, 524288, 0,
  /* 5364 */ -1799356416, 0, -1665138688, -2143289344, 4194304, 0x80000000, 8389120, 8392704, 1082130432, 8388608, 0, 1,
  /* 5376 */ 0, 2, -801112064, 541065216, 4194304, 4, 0, 3, 4, 4, 8, 0, 0x80000000, 0, -2079326208, 75497472,
  /* 5392 */ 1082130432, 1082130432, 8396288, 8392704, 553803776, 17080320, 16850976, 8388608, 8388864, 75497472,
  /* 5402 */ 478150656, 343932928, 9437184, 0, 32, 64, 64, 128, 64, 192, 0, 48, 0, 62, 16192, 262144, -1879048192,
  /* 5419 */ 343932928, 343932928, 128, 9437184, 4194432, 9441280, 1083179008, 8388736, 8388736, 8388800, 8388736,
  /* 5430 */ 1082130560, 8388736, 1082130624, 8388736, 8396416, 8396416, 4, 40, 33, 33, 40, 40, 48, 8396416, 75505280,
  /* 5445 */ 3072, 3584, 0, 128, 128, 192, 128, 256, 256, 0x80000000, 128, 524288, 2097152, 0x80000000, 524288, 524288,
  /* 5461 */ 1048576, -1073741824, 0, -1073741824, 128, 2097152, -121634816, 0, 3072, 0, 785, 67125248, 32, 128, 1024,
  /* 5476 */ 6144, 8192, 10256, 262176, 33554464, 67125248, 40, 537133856, 1120, 536871008, 131104, 131104, 262176,
  /* 5489 */ 262176, 32, 512, 8192, 16384, 32768, 65536, 256, 65536, 131072, 262144, 0, 5120, 1120, 96, 128, 4096,
  /* 5506 */ 262144, 64, 6144, 24576, 32768, 131072, 524288, 8388608, 16777216, 16777216, 8192, 2048, 8192, 8192, 0,
  /* 5521 */ 2048, 2048, 4096, 8192, 64, 4096, 16384, 512, 4096, 32768, 0, 136, 394272, 263200, 393248, 394272, 32, 592,
  /* 5539 */ 537134880, 34, 34, 1056, 32, 320, 512, 4128, 42, 32, 8192, 32768, 2097152, 0, 768, 0, 784, 32, 20447232,
  /* 5558 */ 42, 1056, 131104, 32, 256, 4096, 65536, 0, 3648, -2147221472, 32, 65536, 262144, 524288, 268435456,
  /* 5573 */ 0x80000000, 132128, 32, 65568, 65568, 16908288, 42, 296032, 516697768, 516719712, 516719712, 516722400,
  /* 5585 */ 516722400, 516730600, 516722400, 1053593312, 1053724512, 1053724520, 42, 43, 106, 18358315, 555231803,
  /* 5596 */ 18360891, 18360891, 18360955, 18360891, 555231867, 19922944, 0, 5408, 12582912, 402653184, -536870912, 0,
  /* 5608 */ 8192, 65536, 1048576, 132096, 8208, 8192, 1048576, 2097152, 64, 32768, 8388608, 50331648, 67108864, 2048,
  /* 5622 */ 65536, 2097152, 512, 14336, 262144, 1048576, 4194304, 4194304, 0, -268435456, 0, 0, -805306368, 1073905664,
  /* 5636 */ 0, 14336, 1572864, 0, 14732, 1073905664, 134217728, 134217728, 0, 10256, 1048576, 67110912, 268452864,
  /* 5649 */ 1208123392, 76625926, -2141192063, 68237446, 68237446, 68237710, -2079246202, -2079246202, -2075051898,
  /* 5658 */ -2072954746, -2072430457, -2079246186, 1995962612, 1995962612, 1995963636, 1995962612, 1995963636,
  /* 5666 */ 1995963636, 1995963637, 1995963637, 1995964151, 1995964149, 1995964149, 0, 16384, 65536, 524288, 8208, 0,
  /* 5678 */ 17408, 14340, 65536, 4194304, 8388608, 8392704, 76546048, 0, 32768, 16777216, 33554432, 8388608, 8388608,
  /* 5691 */ 128, 0, 4, 16, 0, 6, 24, 32, 0, 7, 8, 16, 32, 4, 24, 512, 0, 8, 32, 32, 41, 40, 32, 56, 0, 15, 1216, 16384,
  /* 5719 */ 0, 16, 64, 0, 18, 0, 24, -2141192192, 0, 37827, 66125824, 872415232, 0, 65536, 14468, 68157440,
  /* 5735 */ -2075131904, -2073034752, 589824, 14484, 30964, 491520, 1995440128, 0, 65568, 31988, 491520, 32500, 0,
  /* 5748 */ 131072, 4194304, 25165824, 33554432, 33554432, 576, 384, 0, 163840, 201326592, -2080374784, 0, 196608, 0,
  /* 5762 */ 262144, 1572864, 2097152, 16384, 458752, 409993216, 1073741824, 4, 56, 41, 224, 6144, 65536, 262144,
  /* 5776 */ 15728640, 33554432, 67108864, 0x80000000, 1610612736, 0, 524800, 262144, 3145728, 4194304, 33554432,
  /* 5787 */ 268435456, 0, 252, 1246208, 130023424, -268435456, 96, 1024, 16384, 16785408, 131072, 67108864, 96, 4096,
  /* 5801 */ 1048576, 6291456, 8388608, 134217728, 268435456, 8, 64, 131072, 8388608, 402653184, 0, 1048576, 0, 256,
  /* 5815 */ 512, 1024, 0, 512, 256, 0, 64, 256, 64, 512, 576, 131072, 1073741824, 1, 2, -800587776, 2, 32, 172544, 2,
  /* 5835 */ 8388640, 65664, 16384, 268435456, -536870912, 32, 3145728, 67108864, 594, 79700512, -1878786048, 482517536,
  /* 5847 */ -1799085536, -1799085536, -1664966112, 482517536, 482517536, 1556259360, -1208205442, -1208205442, 2, 16,
  /* 5857 */ 96, 160, 65664, 0, 2097152, 16777216, 8704, 79691776, 482344960, 0, 3145728, 268435456, 16384, 0,
  /* 5871 */ 1556086784, 32, 270848, 1851200, -1210056704, 8704, 0, 4194304, 67108864, 1073741824, 2097152, 4194304,
  /* 5883 */ 402653184, 134217728, 536870912, 0x80000000, 2, 0, 4259840, 131072, 134217728, 128, 65536, 2, 4, 1572864,
  /* 5897 */ 16777216, 16, 4096, 128, 32768, 33554432, 1946157056, 0, 278528, 2, 256, 512, 545267712, -2147418080,
  /* 5911 */ 1342980096, -2147139552, -2147134432, -2147134432, -2147134176, -2147134432, -1072873440, -804437984,
  /* 5919 */ -804437984, -800243678, -117611969, -117611969, 0, 5242880, 7340032, 4, 1342701568, 0, 8388608, 1082130432,
  /* 5931 */ 344064, 0x80000000, 5152, 0, 16777216, 0, 1024, 4096, 4096, 0, 96, 32, 97, -1073217536, 0, 16781312,
  /* 5947 */ -804782080, 0, 17825792, 3, 8764, 344064, -117964800, 1342177280, 0, 33554432, 0, 116, 56, 512, 32768,
  /* 5962 */ 16785440, 2048, 8388608, 2, 24, 2097152, 134217728, 8192, 268435456, 1610612736, 0x80000000, 512,
  /* 5974 */ 536870912, 1024, 1048576, 8388608, 33554432, 16384, 131072, 1048576, 1048576, 128, 768, -2147482880,
  /* 5986 */ -2147482880, 68682512, 70779664, 70779664, 1024, 1210056712, 4276481, 4343041, -1606269695, 541213953,
  /* 5996 */ 541213953, -1606269695, 4408577, 4408577, 410473923, 1484215755, 410473923, 410473923, 1484215755,
  /* 6005 */ 1484215755, 16, 2048, 1048576, 16777216, 1048576, 134217728, 136314880, 1073741824, 16640, 65536, 1, 17664,
  /* 6018 */ 541065216, 0, 67108864, 134217728, 0x80000000, 3, 21952, 458752, 3, 8, 192, 192, 1024, 2048, 0, 592, 8,
  /* 6035 */ 2097152, 25165824, 1, 256, 2, 192, 1280, 0, 134217728, 67108864, 268435456, -1073741824, 1280, 4096, 2, 8,
  /* 6051 */ 224, 1024, 14336, 2097152, 1073741824, 2, 64, 8388608, 8, 131072, 16777216, 8, 3145728, 402653184,
  /* 6065 */ 67108992, 16777248, 14336, 67108992, 8, 240, 1024, 196608, 1048576, 33554432, 8, 16777248, 16777248,
  /* 6078 */ -1072693248, 67109000, 285212708, 16, 224, 40, 419430516, 419430516, 421527668, 419446900, 285213236,
  /* 6089 */ 285213236, -137165572, -137165572, 0, 134217732, 8388608, 36, 268435456, 18874368, 0, 268435456,
  /* 6100 */ 1073741824, 52, 512, 2097152, 8388608, 536870912, 768, 4096, 16777216, 67108864, 0, 8224, 12288, 0,
  /* 6114 */ 402653184, 1073741824, 112, 402653184, 1024, 1245184, 130023424, 268435456, 128, 196608, 1048576, 67108864,
  /* 6126 */ 1048576, 1073741824, 8388672, 0, 402653188, 265216, 0, 536870912, 1073741824, 0x80000000, 1, 512, 4194304,
  /* 6139 */ 70254592, 768, -2080374016, -2147482880, 68682513, 68682513, 938595267, 938595267, 938578883, 938578883,
  /* 6149 */ 3670016, 0, 545259520, 54211, 0, 545267712, 545267712, 2097152, 67108864, 50331648, 335544320, 536870912,
  /* 6161 */ 128, 4864, 32768, 20480, 0, 545268224, 262144, 134217728, 8, 8192, 1572864, 6291456, 25165824, 100663296,
  /* 6175 */ 268435456, 536870912, 256, 262144, 4194304, 1, 64, 1024, 262144, 7340032, 8388608, 67108864, 536870912, 0,
  /* 6189 */ 524288, 589824, 0, 1073741824, 0, 4096, 131072, 0, 4128, 8585216, 8585216, 4, 6292544, 5767168, 6295104,
  /* 6204 */ 6295104, 6295120, 6295120, 6299216, 6303312, 7873600, 7873600, 7939136, 17615, 17615, 83151, 17615, 345295,
  /* 6217 */ 345295, 0, 1074007040, 345295, 2442447, 4539599, 4539599, 1088, 2097152, 33554432, 536870912, 8388864,
  /* 6229 */ 6291456, 0x80000000, 3664, 0, 1207959552, 4, 4096, 458752, 3145728, 0, 21248, 7760, 11856, 9280, 3145728,
  /* 6244 */ 128, 16384, 1, 4, 8, 16384
];

JSONiqParser.TOKEN =
[
  "(0)",
  "END",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'/>'",
  "':'",
  "':)'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

                                                            // line 1184 "JSONiqParser.ebnf"
                                                            });
                                                            // line 27185 "JSONiqParser.js"
// End
