// This file was generated on Thu Mar 20, 2014 12:01 (UTC+01) by REx v5.30 which is Copyright (c) 1979-2014 by Gunther Rademacher <grd@gmx.net>
// REx command line: JSONiqParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "JSONiqParser.ebnf"
                                                            var JSONiqParser = exports.JSONiqParser = function JSONiqParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "JSONiqParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? JSONiqParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = JSONiqParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [JSONiqParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(279);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Module();
    shift(25);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 170:                       // 'jsoniq'
      lookahead2W(169);             // S^WS | '#' | '(' | '(:' | 'encoding' | 'version'
      break;
    default:
      lk = l1;
    }
    if (lk == 64682                 // 'jsoniq' 'encoding'
     || lk == 137898)               // 'jsoniq' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(279);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 185:                       // 'module'
      lookahead2W(144);             // S^WS | '#' | '(' | '(:' | 'namespace'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 95929:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(170);                     // 'jsoniq'
    lookahead1W(117);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      break;
    default:
      shift(269);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      lookahead1W(110);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 126)                // 'encoding'
      {
        shift(126);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
    }
    lookahead1W(29);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(140);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(185);                     // 'module'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(241);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(30);                // S^WS | '(:' | '='
    shift(61);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(29);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(279);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(208);           // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
                                    // 'construction' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'ft-option' | 'function' | 'index' | 'integrity' | 'namespace' | 'option' |
                                    // 'ordering' | 'revalidation' | 'updating' | 'variable'
        break;
      case 155:                     // 'import'
        lookahead2W(170);           // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
        break;
      default:
        lk = l1;
      }
      if (lk != 43117               // 'declare' 'base-uri'
       && lk != 44141               // 'declare' 'boundary-space'
       && lk != 50797               // 'declare' 'construction'
       && lk != 53869               // 'declare' 'copy-namespaces'
       && lk != 54893               // 'declare' 'decimal-format'
       && lk != 56429               // 'declare' 'default'
       && lk != 73325               // 'declare' 'ft-option'
       && lk != 94875               // 'import' 'module'
       && lk != 95853               // 'declare' 'namespace'
       && lk != 106093              // 'declare' 'ordering'
       && lk != 115821              // 'declare' 'revalidation'
       && lk != 117403)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(199);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 56429)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 95853:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 155:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 73325:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(29);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(279);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(201);           // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      if (lk != 17005               // 'declare' '%'
       && lk != 49261               // 'declare' 'collection'
       && lk != 52333               // 'declare' 'context'
       && lk != 75373               // 'declare' 'function'
       && lk != 80493               // 'declare' 'index'
       && lk != 83565               // 'declare' 'integrity'
       && lk != 104045              // 'declare' 'option'
       && lk != 134765              // 'declare' 'updating'
       && lk != 137325)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(197);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 52333:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 104045:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(29);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(54);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 109:                       // 'declare'
      lookahead2W(195);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 56429)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 44141:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 43117:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50797:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 106093:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 115821:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53869:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    shift(86);                      // 'boundary-space'
    lookahead1W(135);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 218:                       // 'preserve'
      shift(218);                   // 'preserve'
      break;
    default:
      shift(246);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(41);                // S^WS | '(:' | 'collation'
    shift(95);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(41);                // S^WS | '(:' | 'collation'
    shiftT(95);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    shift(84);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'construction'
    shift(99);                      // 'construction'
    lookahead1W(135);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 246:                       // 'strip'
      shift(246);                   // 'strip'
      break;
    default:
      shift(218);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(70);                // S^WS | '(:' | 'ordering'
    shift(207);                     // 'ordering'
    lookahead1W(133);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    default:
      shift(262);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    shift(205);                     // 'order'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shift(124);                     // 'empty'
    lookahead1W(122);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 149:                       // 'greatest'
      shift(149);                   // 'greatest'
      break;
    default:
      shift(176);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    shiftT(205);                    // 'order'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shiftT(124);                    // 'empty'
    lookahead1W(122);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 149:                       // 'greatest'
      shiftT(149);                  // 'greatest'
      break;
    default:
      shiftT(176);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(47);                // S^WS | '(:' | 'copy-namespaces'
    shift(105);                     // 'copy-namespaces'
    lookahead1W(130);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(42);                      // ','
    lookahead1W(124);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 218:                       // 'preserve'
      shift(218);                   // 'preserve'
      break;
    default:
      shift(193);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 159:                       // 'inherit'
      shift(159);                   // 'inherit'
      break;
    default:
      shift(192);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(115);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_EQName();
      break;
    default:
      shift(110);                   // 'default'
      lookahead1W(48);              // S^WS | '(:' | 'decimal-format'
      shift(107);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(203);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 54)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 108:                       // 'decimal-separator'
      shift(108);                   // 'decimal-separator'
      break;
    case 151:                       // 'grouping-separator'
      shift(151);                   // 'grouping-separator'
      break;
    case 158:                       // 'infinity'
      shift(158);                   // 'infinity'
      break;
    case 182:                       // 'minus-sign'
      shift(182);                   // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      shift(68);                    // 'NaN'
      break;
    case 213:                       // 'percent'
      shift(213);                   // 'percent'
      break;
    case 212:                       // 'per-mille'
      shift(212);                   // 'per-mille'
      break;
    case 280:                       // 'zero-digit'
      shift(280);                   // 'zero-digit'
      break;
    case 117:                       // 'digit'
      shift(117);                   // 'digit'
      break;
    default:
      shift(211);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 155:                       // 'import'
      lookahead2W(128);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 117403:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(155);                     // 'import'
    lookahead1W(74);                // S^WS | '(:' | 'schema'
    shift(229);                     // 'schema'
    lookahead1W(139);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(109);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(104);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      lookahead1W(241);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
      break;
    default:
      shift(110);                   // 'default'
      lookahead1W(50);              // S^WS | '(:' | 'element'
      shift(122);                   // 'element'
      lookahead1W(63);              // S^WS | '(:' | 'namespace'
      shift(187);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(155);                     // 'import'
    lookahead1W(62);                // S^WS | '(:' | 'module'
    shift(185);                     // 'module'
    lookahead1W(91);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 187)                  // 'namespace'
    {
      shift(187);                   // 'namespace'
      lookahead1W(241);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(109);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(104);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(241);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(30);                // S^WS | '(:' | '='
    shift(61);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(116);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    default:
      shift(147);                   // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(116);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    default:
      shiftT(147);                  // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shiftT(187);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'ft-option'
    shift(143);                     // 'ft-option'
    lookahead1W(82);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(109);                     // 'declare'
    for (;;)
    {
      lookahead1W(193);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 263)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 263:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 268:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 147:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 96:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 157:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(263);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(33);                      // '%'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(194);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(191);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(191);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        whitespace();
        parse_Literal();
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(33);                     // '%'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_EQName();
    lookahead1W(194);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(191);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
      try_Literal();
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(191);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        try_Literal();
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(268);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(156);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(107);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      shift(53);                    // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(134);                   // 'external'
      lookahead1W(105);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'context'
    shift(102);                     // 'context'
    lookahead1W(58);                // S^WS | '(:' | 'item'
    shift(167);                     // 'item'
    lookahead1W(156);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(107);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      shift(53);                    // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(134);                   // 'external'
      lookahead1W(105);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(102);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(102);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(152);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_EQName();
    lookahead1W(152);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'option'
    shift(203);                     // 'option'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(200);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(200);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(150);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
      parse_ForClause();
      break;
    case 177:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(150);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
      try_ForClause();
      break;
    case 177:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 272:                       // 'where'
      parse_WhereClause();
      break;
    case 150:                       // 'group'
      parse_GroupByClause();
      break;
    case 205:                       // 'order'
    case 241:                       // 'stable'
      parse_OrderByClause();
      break;
    case 106:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_InitialClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 272:                       // 'where'
      try_WhereClause();
      break;
    case 150:                       // 'group'
      try_GroupByClause();
      break;
    case 205:                       // 'order'
    case 241:                       // 'stable'
      try_OrderByClause();
      break;
    case 106:                       // 'count'
      try_CountClause();
      break;
    default:
      try_InitialClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    default:
      shift(142);                   // 'from'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    default:
      shiftT(142);                  // 'from'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(182);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(173);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(123);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 232)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(182);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(173);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(123);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 232)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(73);                      // 'allowing'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shift(124);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(73);                     // 'allowing'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shiftT(124);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(82);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(82);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(232);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(232);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(177);                     // 'let'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(97);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(177);                    // 'let'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(97);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(106);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(106);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    default:
      shift(142);                   // 'from'
    }
    lookahead1W(137);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    default:
      shiftT(142);                  // 'from'
    }
    lookahead1W(137);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(257);                     // 'tumbling'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shift(275);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(111);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 202)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(257);                    // 'tumbling'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shiftT(275);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(111);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 202)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(239);                     // 'sliding'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shift(275);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(111);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(239);                    // 'sliding'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shiftT(275);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(111);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(242);                     // 'start'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shift(271);                     // 'when'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(242);                    // 'start'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shiftT(271);                    // 'when'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 202)                  // 'only'
    {
      shift(202);                   // 'only'
    }
    lookahead1W(53);                // S^WS | '(:' | 'end'
    shift(127);                     // 'end'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shift(271);                     // 'when'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 202)                  // 'only'
    {
      shiftT(202);                  // 'only'
    }
    lookahead1W(53);                // S^WS | '(:' | 'end'
    shiftT(127);                    // 'end'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shiftT(271);                    // 'when'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(174);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(162);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 219)                  // 'previous'
    {
      shift(219);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(129);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 190)                  // 'next'
    {
      shift(190);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_CurrentItem();
    }
    lookahead1W(174);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(162);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 219)                  // 'previous'
    {
      shiftT(219);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_PreviousItem();
    }
    lookahead1W(129);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 190)                  // 'next'
    {
      shiftT(190);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(106);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(106);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(272);                     // 'where'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(272);                    // 'where'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(150);                     // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    shift(88);                      // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(150);                    // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    shiftT(88);                     // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(202);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(202);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(207);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'from' |
                                    // 'group' | 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 53                    // ':='
     || l1 == 80)                   // 'as'
    {
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(28);              // S^WS | '(:' | ':='
      shift(53);                    // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 95)                   // 'collation'
    {
      shift(95);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(207);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'from' |
                                    // 'group' | 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 53                    // ':='
     || l1 == 80)                   // 'as'
    {
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(28);              // S^WS | '(:' | ':='
      shiftT(53);                   // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 95)                   // 'collation'
    {
      shiftT(95);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 205:                       // 'order'
      shift(205);                   // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shift(88);                    // 'by'
      break;
    default:
      shift(241);                   // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      shift(205);                   // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shift(88);                    // 'by'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shiftT(88);                   // 'by'
      break;
    default:
      shiftT(241);                  // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      shiftT(205);                  // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shiftT(88);                   // 'by'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(202);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(202);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        shift(81);                  // 'ascending'
        break;
      default:
        shift(114);                 // 'descending'
      }
    }
    lookahead1W(206);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'from' | 'group' |
                                    // 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 124)                  // 'empty'
    {
      shift(124);                   // 'empty'
      lookahead1W(122);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 149:                     // 'greatest'
        shift(149);                 // 'greatest'
        break;
      default:
        shift(176);                 // 'least'
      }
    }
    lookahead1W(205);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'from' | 'group' | 'let' |
                                    // 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      shift(95);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        shiftT(81);                 // 'ascending'
        break;
      default:
        shiftT(114);                // 'descending'
      }
    }
    lookahead1W(206);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'from' | 'group' |
                                    // 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 124)                  // 'empty'
    {
      shiftT(124);                  // 'empty'
      lookahead1W(122);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 149:                     // 'greatest'
        shiftT(149);                // 'greatest'
        break;
      default:
        shiftT(176);                // 'least'
      }
    }
    lookahead1W(205);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'from' | 'group' | 'let' |
                                    // 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      shiftT(95);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    default:
      shift(130);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(111);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(111);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shift(156);                   // 'in'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(228);                     // 'satisfies'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    default:
      shiftT(130);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(111);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(111);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shiftT(156);                  // 'in'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
    }
    shiftT(228);                    // 'satisfies'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(248);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(248);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(89);                    // 'case'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(89);                   // 'case'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(259);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(149);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
    }
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(259);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(149);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
    }
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(89);                      // 'case'
    lookahead1W(259);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
    }
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceTypeUnion();
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(89);                     // 'case'
    lookahead1W(259);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
    }
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceTypeUnion();
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'return' | 'select' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shift(284);                   // '|'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'return' | 'select' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shiftT(284);                  // '|'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(154);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shift(250);                     // 'then'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(123);                     // 'else'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(154);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shiftT(250);                    // 'then'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    shiftT(123);                    // 'else'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(209);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'from' | 'group' | 'into' |
                                    // 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(209);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'from' | 'group' | 'into' |
                                    // 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(256);                     // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(256);                    // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_TryTargetExpr();
    shiftT(287);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(92);                      // 'catch'
    lookahead1W(250);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_CatchErrorList();
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(92);                     // 'catch'
    lookahead1W(250);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_CatchErrorList();
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | '{' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shift(284);                   // '|'
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | '{' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shiftT(284);                  // '|'
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 204)                // 'or'
      {
        break;
      }
      shift(204);                   // 'or'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 204)                // 'or'
      {
        break;
      }
      shiftT(204);                  // 'or'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_NotExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      shift(76);                    // 'and'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_NotExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_NotExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      shiftT(76);                   // 'and'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_NotExpr();
    }
  }

  function parse_NotExpr()
  {
    eventHandler.startNonterminal("NotExpr", e0);
    for (;;)
    {
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shift(196);                   // 'not'
    }
    whitespace();
    parse_ComparisonExpr();
    eventHandler.endNonterminal("NotExpr", e0);
  }

  function try_NotExpr()
  {
    for (;;)
    {
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shiftT(196);                  // 'not'
    }
    try_ComparisonExpr();
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 148                   // 'ge'
     || l1 == 152                   // 'gt'
     || l1 == 166                   // 'is'
     || l1 == 175                   // 'le'
     || l1 == 181                   // 'lt'
     || l1 == 189)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 148:                     // 'ge'
      case 152:                     // 'gt'
      case 175:                     // 'le'
      case 181:                     // 'lt'
      case 189:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 64:                      // '>>'
      case 166:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 148                   // 'ge'
     || l1 == 152                   // 'gt'
     || l1 == 166                   // 'is'
     || l1 == 175                   // 'le'
     || l1 == 181                   // 'lt'
     || l1 == 189)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 148:                     // 'ge'
      case 152:                     // 'gt'
      case 175:                     // 'le'
      case 181:                     // 'lt'
      case 189:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 64:                      // '>>'
      case 166:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      shift(100);                   // 'contains'
      lookahead1W(77);              // S^WS | '(:' | 'text'
      shift(249);                   // 'text'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 277)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      shiftT(100);                  // 'contains'
      lookahead1W(77);              // S^WS | '(:' | 'text'
      shiftT(249);                  // 'text'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 277)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 285)                // '||'
      {
        break;
      }
      shift(285);                   // '||'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 285)                // '||'
      {
        break;
      }
      shiftT(285);                  // '||'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 253)                  // 'to'
    {
      shift(253);                   // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 253)                  // 'to'
    {
      shiftT(253);                  // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shift(41);                  // '+'
        break;
      default:
        shift(43);                  // '-'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shiftT(41);                 // '+'
        break;
      default:
        shiftT(43);                 // '-'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 153                 // 'idiv'
       && l1 != 183)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shift(39);                  // '*'
        break;
      case 119:                     // 'div'
        shift(119);                 // 'div'
        break;
      case 153:                     // 'idiv'
        shift(153);                 // 'idiv'
        break;
      default:
        shift(183);                 // 'mod'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 153                 // 'idiv'
       && l1 != 183)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shiftT(39);                 // '*'
        break;
      case 119:                     // 'div'
        shiftT(119);                // 'div'
        break;
      case 153:                     // 'idiv'
        shiftT(153);                // 'idiv'
        break;
      default:
        shiftT(183);                // 'mod'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 284)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        shift(260);                 // 'union'
        break;
      default:
        shift(284);                 // '|'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 284)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        shiftT(260);                // 'union'
        break;
      default:
        shiftT(284);                // '|'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 132                 // 'except'
       && l1 != 164)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 164:                     // 'intersect'
        shift(164);                 // 'intersect'
        break;
      default:
        shift(132);                 // 'except'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 132                 // 'except'
       && l1 != 164)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 164:                     // 'intersect'
        shiftT(164);                // 'intersect'
        break;
      default:
        shiftT(132);                // 'except'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 162)                  // 'instance'
    {
      shift(162);                   // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shift(200);                   // 'of'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 162)                  // 'instance'
    {
      shiftT(162);                  // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shiftT(200);                  // 'of'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 254)                  // 'treat'
    {
      shift(254);                   // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 254)                  // 'treat'
    {
      shiftT(254);                  // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 91)                   // 'castable'
    {
      shift(91);                    // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 91)                   // 'castable'
    {
      shiftT(91);                   // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 90)                   // 'cast'
    {
      shift(90);                    // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 90)                   // 'cast'
    {
      shiftT(90);                   // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shift(43);                  // '-'
        break;
      default:
        shift(41);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shiftT(43);                 // '-'
        break;
      default:
        shiftT(41);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(189);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 89354:                     // 'validate' 'lax'
    case 125706:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144138:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(189);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 89354:                     // 'validate' 'lax'
    case 125706:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144138:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shift(26);                    // '!'
      lookahead1W(264);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shiftT(26);                   // '!'
      lookahead1W(264);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      shift(61);                    // '='
      break;
    case 27:                        // '!='
      shift(27);                    // '!='
      break;
    case 55:                        // '<'
      shift(55);                    // '<'
      break;
    case 59:                        // '<='
      shift(59);                    // '<='
      break;
    case 62:                        // '>'
      shift(62);                    // '>'
      break;
    default:
      shift(63);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      shiftT(61);                   // '='
      break;
    case 27:                        // '!='
      shiftT(27);                   // '!='
      break;
    case 55:                        // '<'
      shiftT(55);                   // '<'
      break;
    case 59:                        // '<='
      shiftT(59);                   // '<='
      break;
    case 62:                        // '>'
      shiftT(62);                   // '>'
      break;
    default:
      shiftT(63);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    default:
      shift(148);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    default:
      shiftT(148);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 58:                        // '<<'
      shift(58);                    // '<<'
      break;
    default:
      shift(64);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 58:                        // '<<'
      shiftT(58);                   // '<<'
      break;
    default:
      shiftT(64);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(266);                     // 'validate'
    lookahead1W(175);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 281)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        shift(258);                 // 'type'
        lookahead1W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(266);                    // 'validate'
    lookahead1W(175);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 281)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        shiftT(258);                // 'type'
        lookahead1W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    default:
      shift(245);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    default:
      shiftT(245);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(101);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(281);                     // '{'
    lookahead1W(276);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(101);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(281);                    // '{'
    lookahead1W(276);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      try_Expr();
    }
    shiftT(287);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(36);                      // '(#'
    lookahead1(244);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(0);                // PragmaContents
      shift(1);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(30);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(36);                     // '(#'
    lookahead1(244);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(1);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(30);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 47:                        // '/'
      shift(47);                    // '/'
      lookahead1W(290);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 209:                     // 'paragraphs'
      case 237:                     // 'sentences'
      case 252:                     // 'times'
      case 279:                     // 'words'
      case 284:                     // '|'
      case 285:                     // '||'
      case 286:                     // '|}'
      case 287:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      shift(48);                    // '//'
      lookahead1W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 47:                        // '/'
      shiftT(47);                   // '/'
      lookahead1W(290);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 209:                     // 'paragraphs'
      case 237:                     // 'sentences'
      case 252:                     // 'times'
      case 279:                     // 'words'
      case 284:                     // '|'
      case 285:                     // '||'
      case 286:                     // '|}'
      case 287:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      shiftT(48);                   // '//'
      lookahead1W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_PostfixExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 139                 // 'for'
       && lk != 142                 // 'from'
       && lk != 148                 // 'ge'
       && lk != 150                 // 'group'
       && lk != 152                 // 'gt'
       && lk != 153                 // 'idiv'
       && lk != 162                 // 'instance'
       && lk != 164                 // 'intersect'
       && lk != 165                 // 'into'
       && lk != 166                 // 'is'
       && lk != 175                 // 'le'
       && lk != 177                 // 'let'
       && lk != 181                 // 'lt'
       && lk != 183                 // 'mod'
       && lk != 184                 // 'modify'
       && lk != 189                 // 'ne'
       && lk != 202                 // 'only'
       && lk != 204                 // 'or'
       && lk != 205                 // 'order'
       && lk != 209                 // 'paragraphs'
       && lk != 224                 // 'return'
       && lk != 228                 // 'satisfies'
       && lk != 233                 // 'select'
       && lk != 237                 // 'sentences'
       && lk != 241                 // 'stable'
       && lk != 242                 // 'start'
       && lk != 252                 // 'times'
       && lk != 253                 // 'to'
       && lk != 254                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 284                 // '|'
       && lk != 285                 // '||'
       && lk != 286                 // '|}'
       && lk != 287                 // '}'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 24090               // '!' '/'
       && lk != 24602               // '!' '//'
       && lk != 34330)              // '!' '@'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              shiftT(47);           // '/'
              break;
            case 48:                // '//'
              shiftT(48);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(265);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 34330)              // '!' '@'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        shift(47);                  // '/'
        break;
      case 48:                      // '//'
        shift(48);                  // '//'
        break;
      default:
        shift(26);                  // '!'
      }
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_PostfixExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 139                 // 'for'
       && lk != 142                 // 'from'
       && lk != 148                 // 'ge'
       && lk != 150                 // 'group'
       && lk != 152                 // 'gt'
       && lk != 153                 // 'idiv'
       && lk != 162                 // 'instance'
       && lk != 164                 // 'intersect'
       && lk != 165                 // 'into'
       && lk != 166                 // 'is'
       && lk != 175                 // 'le'
       && lk != 177                 // 'let'
       && lk != 181                 // 'lt'
       && lk != 183                 // 'mod'
       && lk != 184                 // 'modify'
       && lk != 189                 // 'ne'
       && lk != 202                 // 'only'
       && lk != 204                 // 'or'
       && lk != 205                 // 'order'
       && lk != 209                 // 'paragraphs'
       && lk != 224                 // 'return'
       && lk != 228                 // 'satisfies'
       && lk != 233                 // 'select'
       && lk != 237                 // 'sentences'
       && lk != 241                 // 'stable'
       && lk != 242                 // 'start'
       && lk != 252                 // 'times'
       && lk != 253                 // 'to'
       && lk != 254                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 284                 // '|'
       && lk != 285                 // '||'
       && lk != 286                 // '|}'
       && lk != 287                 // '}'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 24090               // '!' '/'
       && lk != 24602               // '!' '//'
       && lk != 34330)              // '!' '@'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              shiftT(47);           // '/'
              break;
            case 48:                // '//'
              shiftT(48);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(265);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 34330)              // '!' '@'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        shiftT(47);                 // '/'
        break;
      case 48:                      // '//'
        shiftT(48);                 // '//'
        break;
      default:
        shiftT(26);                 // '!'
      }
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(289);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 122:                       // 'element'
      lookahead2W(288);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 187:                       // 'namespace'
    case 220:                       // 'processing-instruction'
      lookahead2W(286);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 97:                        // 'comment'
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 249:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' |
                                    // '}'
      break;
    case 79:                        // 'array'
    case 125:                       // 'empty-sequence'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 234:                       // 'self'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 121:                       // 'document-node'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 188:                       // 'namespace-node'
    case 189:                       // 'ne'
    case 194:                       // 'node'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12935                 // 'false' EOF
     || lk == 12997                 // 'null' EOF
     || lk == 13055                 // 'true' EOF
     || lk == 13447                 // 'false' '!'
     || lk == 13509                 // 'null' '!'
     || lk == 13567                 // 'true' '!'
     || lk == 13959                 // 'false' '!='
     || lk == 14021                 // 'null' '!='
     || lk == 14079                 // 'true' '!='
     || lk == 19591                 // 'false' ')'
     || lk == 19653                 // 'null' ')'
     || lk == 19711                 // 'true' ')'
     || lk == 20103                 // 'false' '*'
     || lk == 20165                 // 'null' '*'
     || lk == 20223                 // 'true' '*'
     || lk == 21127                 // 'false' '+'
     || lk == 21189                 // 'null' '+'
     || lk == 21247                 // 'true' '+'
     || lk == 21639                 // 'false' ','
     || lk == 21701                 // 'null' ','
     || lk == 21759                 // 'true' ','
     || lk == 22151                 // 'false' '-'
     || lk == 22213                 // 'null' '-'
     || lk == 22271                 // 'true' '-'
     || lk == 24199                 // 'false' '/'
     || lk == 24261                 // 'null' '/'
     || lk == 24319                 // 'true' '/'
     || lk == 24711                 // 'false' '//'
     || lk == 24773                 // 'null' '//'
     || lk == 24831                 // 'true' '//'
     || lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855                 // 'true' ':'
     || lk == 27783                 // 'false' ';'
     || lk == 27845                 // 'null' ';'
     || lk == 27903                 // 'true' ';'
     || lk == 28295                 // 'false' '<'
     || lk == 28357                 // 'null' '<'
     || lk == 28415                 // 'true' '<'
     || lk == 29831                 // 'false' '<<'
     || lk == 29893                 // 'null' '<<'
     || lk == 29951                 // 'true' '<<'
     || lk == 30343                 // 'false' '<='
     || lk == 30405                 // 'null' '<='
     || lk == 30463                 // 'true' '<='
     || lk == 31367                 // 'false' '='
     || lk == 31429                 // 'null' '='
     || lk == 31487                 // 'true' '='
     || lk == 31879                 // 'false' '>'
     || lk == 31941                 // 'null' '>'
     || lk == 31999                 // 'true' '>'
     || lk == 32391                 // 'false' '>='
     || lk == 32453                 // 'null' '>='
     || lk == 32511                 // 'true' '>='
     || lk == 32903                 // 'false' '>>'
     || lk == 32965                 // 'null' '>>'
     || lk == 33023                 // 'true' '>>'
     || lk == 35463                 // 'false' '['
     || lk == 35525                 // 'null' '['
     || lk == 35583                 // 'true' '['
     || lk == 35975                 // 'false' ']'
     || lk == 36037                 // 'null' ']'
     || lk == 36095                 // 'true' ']'
     || lk == 36435                 // 'attribute' 'after'
     || lk == 36474                 // 'element' 'after'
     || lk == 36487                 // 'false' 'after'
     || lk == 36539                 // 'namespace' 'after'
     || lk == 36549                 // 'null' 'after'
     || lk == 36572                 // 'processing-instruction' 'after'
     || lk == 36607                 // 'true' 'after'
     || lk == 38995                 // 'attribute' 'and'
     || lk == 39034                 // 'element' 'and'
     || lk == 39047                 // 'false' 'and'
     || lk == 39099                 // 'namespace' 'and'
     || lk == 39109                 // 'null' 'and'
     || lk == 39132                 // 'processing-instruction' 'and'
     || lk == 39167                 // 'true' 'and'
     || lk == 41043                 // 'attribute' 'as'
     || lk == 41082                 // 'element' 'as'
     || lk == 41095                 // 'false' 'as'
     || lk == 41147                 // 'namespace' 'as'
     || lk == 41157                 // 'null' 'as'
     || lk == 41180                 // 'processing-instruction' 'as'
     || lk == 41215                 // 'true' 'as'
     || lk == 41555                 // 'attribute' 'ascending'
     || lk == 41594                 // 'element' 'ascending'
     || lk == 41607                 // 'false' 'ascending'
     || lk == 41659                 // 'namespace' 'ascending'
     || lk == 41669                 // 'null' 'ascending'
     || lk == 41692                 // 'processing-instruction' 'ascending'
     || lk == 41727                 // 'true' 'ascending'
     || lk == 42067                 // 'attribute' 'at'
     || lk == 42106                 // 'element' 'at'
     || lk == 42119                 // 'false' 'at'
     || lk == 42171                 // 'namespace' 'at'
     || lk == 42181                 // 'null' 'at'
     || lk == 42204                 // 'processing-instruction' 'at'
     || lk == 42239                 // 'true' 'at'
     || lk == 43603                 // 'attribute' 'before'
     || lk == 43642                 // 'element' 'before'
     || lk == 43655                 // 'false' 'before'
     || lk == 43707                 // 'namespace' 'before'
     || lk == 43717                 // 'null' 'before'
     || lk == 43740                 // 'processing-instruction' 'before'
     || lk == 43775                 // 'true' 'before'
     || lk == 45191                 // 'false' 'by'
     || lk == 45253                 // 'null' 'by'
     || lk == 45311                 // 'true' 'by'
     || lk == 45651                 // 'attribute' 'case'
     || lk == 45690                 // 'element' 'case'
     || lk == 45703                 // 'false' 'case'
     || lk == 45755                 // 'namespace' 'case'
     || lk == 45765                 // 'null' 'case'
     || lk == 45788                 // 'processing-instruction' 'case'
     || lk == 45823                 // 'true' 'case'
     || lk == 46163                 // 'attribute' 'cast'
     || lk == 46202                 // 'element' 'cast'
     || lk == 46215                 // 'false' 'cast'
     || lk == 46267                 // 'namespace' 'cast'
     || lk == 46277                 // 'null' 'cast'
     || lk == 46300                 // 'processing-instruction' 'cast'
     || lk == 46335                 // 'true' 'cast'
     || lk == 46675                 // 'attribute' 'castable'
     || lk == 46714                 // 'element' 'castable'
     || lk == 46727                 // 'false' 'castable'
     || lk == 46779                 // 'namespace' 'castable'
     || lk == 46789                 // 'null' 'castable'
     || lk == 46812                 // 'processing-instruction' 'castable'
     || lk == 46847                 // 'true' 'castable'
     || lk == 48723                 // 'attribute' 'collation'
     || lk == 48762                 // 'element' 'collation'
     || lk == 48775                 // 'false' 'collation'
     || lk == 48827                 // 'namespace' 'collation'
     || lk == 48837                 // 'null' 'collation'
     || lk == 48860                 // 'processing-instruction' 'collation'
     || lk == 48895                 // 'true' 'collation'
     || lk == 51335                 // 'false' 'contains'
     || lk == 51397                 // 'null' 'contains'
     || lk == 51455                 // 'true' 'contains'
     || lk == 54355                 // 'attribute' 'count'
     || lk == 54394                 // 'element' 'count'
     || lk == 54407                 // 'false' 'count'
     || lk == 54459                 // 'namespace' 'count'
     || lk == 54469                 // 'null' 'count'
     || lk == 54492                 // 'processing-instruction' 'count'
     || lk == 54527                 // 'true' 'count'
     || lk == 56403                 // 'attribute' 'default'
     || lk == 56442                 // 'element' 'default'
     || lk == 56455                 // 'false' 'default'
     || lk == 56507                 // 'namespace' 'default'
     || lk == 56517                 // 'null' 'default'
     || lk == 56540                 // 'processing-instruction' 'default'
     || lk == 56575                 // 'true' 'default'
     || lk == 58451                 // 'attribute' 'descending'
     || lk == 58490                 // 'element' 'descending'
     || lk == 58503                 // 'false' 'descending'
     || lk == 58555                 // 'namespace' 'descending'
     || lk == 58565                 // 'null' 'descending'
     || lk == 58588                 // 'processing-instruction' 'descending'
     || lk == 58623                 // 'true' 'descending'
     || lk == 61011                 // 'attribute' 'div'
     || lk == 61050                 // 'element' 'div'
     || lk == 61063                 // 'false' 'div'
     || lk == 61115                 // 'namespace' 'div'
     || lk == 61125                 // 'null' 'div'
     || lk == 61148                 // 'processing-instruction' 'div'
     || lk == 61183                 // 'true' 'div'
     || lk == 63059                 // 'attribute' 'else'
     || lk == 63098                 // 'element' 'else'
     || lk == 63111                 // 'false' 'else'
     || lk == 63163                 // 'namespace' 'else'
     || lk == 63173                 // 'null' 'else'
     || lk == 63196                 // 'processing-instruction' 'else'
     || lk == 63231                 // 'true' 'else'
     || lk == 63571                 // 'attribute' 'empty'
     || lk == 63610                 // 'element' 'empty'
     || lk == 63623                 // 'false' 'empty'
     || lk == 63675                 // 'namespace' 'empty'
     || lk == 63685                 // 'null' 'empty'
     || lk == 63708                 // 'processing-instruction' 'empty'
     || lk == 63743                 // 'true' 'empty'
     || lk == 65107                 // 'attribute' 'end'
     || lk == 65146                 // 'element' 'end'
     || lk == 65159                 // 'false' 'end'
     || lk == 65211                 // 'namespace' 'end'
     || lk == 65221                 // 'null' 'end'
     || lk == 65244                 // 'processing-instruction' 'end'
     || lk == 65279                 // 'true' 'end'
     || lk == 66131                 // 'attribute' 'eq'
     || lk == 66170                 // 'element' 'eq'
     || lk == 66183                 // 'false' 'eq'
     || lk == 66235                 // 'namespace' 'eq'
     || lk == 66245                 // 'null' 'eq'
     || lk == 66268                 // 'processing-instruction' 'eq'
     || lk == 66303                 // 'true' 'eq'
     || lk == 67667                 // 'attribute' 'except'
     || lk == 67706                 // 'element' 'except'
     || lk == 67719                 // 'false' 'except'
     || lk == 67771                 // 'namespace' 'except'
     || lk == 67781                 // 'null' 'except'
     || lk == 67804                 // 'processing-instruction' 'except'
     || lk == 67839                 // 'true' 'except'
     || lk == 71251                 // 'attribute' 'for'
     || lk == 71290                 // 'element' 'for'
     || lk == 71303                 // 'false' 'for'
     || lk == 71355                 // 'namespace' 'for'
     || lk == 71365                 // 'null' 'for'
     || lk == 71388                 // 'processing-instruction' 'for'
     || lk == 71423                 // 'true' 'for'
     || lk == 72787                 // 'attribute' 'from'
     || lk == 72826                 // 'element' 'from'
     || lk == 72839                 // 'false' 'from'
     || lk == 72891                 // 'namespace' 'from'
     || lk == 72901                 // 'null' 'from'
     || lk == 72924                 // 'processing-instruction' 'from'
     || lk == 72959                 // 'true' 'from'
     || lk == 75859                 // 'attribute' 'ge'
     || lk == 75898                 // 'element' 'ge'
     || lk == 75911                 // 'false' 'ge'
     || lk == 75963                 // 'namespace' 'ge'
     || lk == 75973                 // 'null' 'ge'
     || lk == 75996                 // 'processing-instruction' 'ge'
     || lk == 76031                 // 'true' 'ge'
     || lk == 76883                 // 'attribute' 'group'
     || lk == 76922                 // 'element' 'group'
     || lk == 76935                 // 'false' 'group'
     || lk == 76987                 // 'namespace' 'group'
     || lk == 76997                 // 'null' 'group'
     || lk == 77020                 // 'processing-instruction' 'group'
     || lk == 77055                 // 'true' 'group'
     || lk == 77907                 // 'attribute' 'gt'
     || lk == 77946                 // 'element' 'gt'
     || lk == 77959                 // 'false' 'gt'
     || lk == 78011                 // 'namespace' 'gt'
     || lk == 78021                 // 'null' 'gt'
     || lk == 78044                 // 'processing-instruction' 'gt'
     || lk == 78079                 // 'true' 'gt'
     || lk == 78419                 // 'attribute' 'idiv'
     || lk == 78458                 // 'element' 'idiv'
     || lk == 78471                 // 'false' 'idiv'
     || lk == 78523                 // 'namespace' 'idiv'
     || lk == 78533                 // 'null' 'idiv'
     || lk == 78556                 // 'processing-instruction' 'idiv'
     || lk == 78591                 // 'true' 'idiv'
     || lk == 83027                 // 'attribute' 'instance'
     || lk == 83066                 // 'element' 'instance'
     || lk == 83079                 // 'false' 'instance'
     || lk == 83131                 // 'namespace' 'instance'
     || lk == 83141                 // 'null' 'instance'
     || lk == 83164                 // 'processing-instruction' 'instance'
     || lk == 83199                 // 'true' 'instance'
     || lk == 84051                 // 'attribute' 'intersect'
     || lk == 84090                 // 'element' 'intersect'
     || lk == 84103                 // 'false' 'intersect'
     || lk == 84155                 // 'namespace' 'intersect'
     || lk == 84165                 // 'null' 'intersect'
     || lk == 84188                 // 'processing-instruction' 'intersect'
     || lk == 84223                 // 'true' 'intersect'
     || lk == 84563                 // 'attribute' 'into'
     || lk == 84602                 // 'element' 'into'
     || lk == 84615                 // 'false' 'into'
     || lk == 84667                 // 'namespace' 'into'
     || lk == 84677                 // 'null' 'into'
     || lk == 84700                 // 'processing-instruction' 'into'
     || lk == 84735                 // 'true' 'into'
     || lk == 85075                 // 'attribute' 'is'
     || lk == 85114                 // 'element' 'is'
     || lk == 85127                 // 'false' 'is'
     || lk == 85179                 // 'namespace' 'is'
     || lk == 85189                 // 'null' 'is'
     || lk == 85212                 // 'processing-instruction' 'is'
     || lk == 85247                 // 'true' 'is'
     || lk == 89683                 // 'attribute' 'le'
     || lk == 89722                 // 'element' 'le'
     || lk == 89735                 // 'false' 'le'
     || lk == 89787                 // 'namespace' 'le'
     || lk == 89797                 // 'null' 'le'
     || lk == 89820                 // 'processing-instruction' 'le'
     || lk == 89855                 // 'true' 'le'
     || lk == 90707                 // 'attribute' 'let'
     || lk == 90746                 // 'element' 'let'
     || lk == 90759                 // 'false' 'let'
     || lk == 90811                 // 'namespace' 'let'
     || lk == 90821                 // 'null' 'let'
     || lk == 90844                 // 'processing-instruction' 'let'
     || lk == 90879                 // 'true' 'let'
     || lk == 92755                 // 'attribute' 'lt'
     || lk == 92794                 // 'element' 'lt'
     || lk == 92807                 // 'false' 'lt'
     || lk == 92859                 // 'namespace' 'lt'
     || lk == 92869                 // 'null' 'lt'
     || lk == 92892                 // 'processing-instruction' 'lt'
     || lk == 92927                 // 'true' 'lt'
     || lk == 93779                 // 'attribute' 'mod'
     || lk == 93818                 // 'element' 'mod'
     || lk == 93831                 // 'false' 'mod'
     || lk == 93883                 // 'namespace' 'mod'
     || lk == 93893                 // 'null' 'mod'
     || lk == 93916                 // 'processing-instruction' 'mod'
     || lk == 93951                 // 'true' 'mod'
     || lk == 94291                 // 'attribute' 'modify'
     || lk == 94330                 // 'element' 'modify'
     || lk == 94343                 // 'false' 'modify'
     || lk == 94395                 // 'namespace' 'modify'
     || lk == 94405                 // 'null' 'modify'
     || lk == 94428                 // 'processing-instruction' 'modify'
     || lk == 94463                 // 'true' 'modify'
     || lk == 96851                 // 'attribute' 'ne'
     || lk == 96890                 // 'element' 'ne'
     || lk == 96903                 // 'false' 'ne'
     || lk == 96955                 // 'namespace' 'ne'
     || lk == 96965                 // 'null' 'ne'
     || lk == 96988                 // 'processing-instruction' 'ne'
     || lk == 97023                 // 'true' 'ne'
     || lk == 103507                // 'attribute' 'only'
     || lk == 103546                // 'element' 'only'
     || lk == 103559                // 'false' 'only'
     || lk == 103611                // 'namespace' 'only'
     || lk == 103621                // 'null' 'only'
     || lk == 103644                // 'processing-instruction' 'only'
     || lk == 103679                // 'true' 'only'
     || lk == 104531                // 'attribute' 'or'
     || lk == 104570                // 'element' 'or'
     || lk == 104583                // 'false' 'or'
     || lk == 104635                // 'namespace' 'or'
     || lk == 104645                // 'null' 'or'
     || lk == 104668                // 'processing-instruction' 'or'
     || lk == 104703                // 'true' 'or'
     || lk == 105043                // 'attribute' 'order'
     || lk == 105082                // 'element' 'order'
     || lk == 105095                // 'false' 'order'
     || lk == 105147                // 'namespace' 'order'
     || lk == 105157                // 'null' 'order'
     || lk == 105180                // 'processing-instruction' 'order'
     || lk == 105215                // 'true' 'order'
     || lk == 107143                // 'false' 'paragraphs'
     || lk == 107205                // 'null' 'paragraphs'
     || lk == 107263                // 'true' 'paragraphs'
     || lk == 114771                // 'attribute' 'return'
     || lk == 114810                // 'element' 'return'
     || lk == 114823                // 'false' 'return'
     || lk == 114875                // 'namespace' 'return'
     || lk == 114885                // 'null' 'return'
     || lk == 114908                // 'processing-instruction' 'return'
     || lk == 114943                // 'true' 'return'
     || lk == 116819                // 'attribute' 'satisfies'
     || lk == 116858                // 'element' 'satisfies'
     || lk == 116871                // 'false' 'satisfies'
     || lk == 116923                // 'namespace' 'satisfies'
     || lk == 116933                // 'null' 'satisfies'
     || lk == 116956                // 'processing-instruction' 'satisfies'
     || lk == 116991                // 'true' 'satisfies'
     || lk == 119379                // 'attribute' 'select'
     || lk == 119418                // 'element' 'select'
     || lk == 119431                // 'false' 'select'
     || lk == 119483                // 'namespace' 'select'
     || lk == 119493                // 'null' 'select'
     || lk == 119516                // 'processing-instruction' 'select'
     || lk == 119551                // 'true' 'select'
     || lk == 121479                // 'false' 'sentences'
     || lk == 121541                // 'null' 'sentences'
     || lk == 121599                // 'true' 'sentences'
     || lk == 123475                // 'attribute' 'stable'
     || lk == 123514                // 'element' 'stable'
     || lk == 123527                // 'false' 'stable'
     || lk == 123579                // 'namespace' 'stable'
     || lk == 123589                // 'null' 'stable'
     || lk == 123612                // 'processing-instruction' 'stable'
     || lk == 123647                // 'true' 'stable'
     || lk == 123987                // 'attribute' 'start'
     || lk == 124026                // 'element' 'start'
     || lk == 124039                // 'false' 'start'
     || lk == 124091                // 'namespace' 'start'
     || lk == 124101                // 'null' 'start'
     || lk == 124124                // 'processing-instruction' 'start'
     || lk == 124159                // 'true' 'start'
     || lk == 129159                // 'false' 'times'
     || lk == 129221                // 'null' 'times'
     || lk == 129279                // 'true' 'times'
     || lk == 129619                // 'attribute' 'to'
     || lk == 129658                // 'element' 'to'
     || lk == 129671                // 'false' 'to'
     || lk == 129723                // 'namespace' 'to'
     || lk == 129733                // 'null' 'to'
     || lk == 129756                // 'processing-instruction' 'to'
     || lk == 129791                // 'true' 'to'
     || lk == 130131                // 'attribute' 'treat'
     || lk == 130170                // 'element' 'treat'
     || lk == 130183                // 'false' 'treat'
     || lk == 130235                // 'namespace' 'treat'
     || lk == 130245                // 'null' 'treat'
     || lk == 130268                // 'processing-instruction' 'treat'
     || lk == 130303                // 'true' 'treat'
     || lk == 133203                // 'attribute' 'union'
     || lk == 133242                // 'element' 'union'
     || lk == 133255                // 'false' 'union'
     || lk == 133307                // 'namespace' 'union'
     || lk == 133317                // 'null' 'union'
     || lk == 133340                // 'processing-instruction' 'union'
     || lk == 133375                // 'true' 'union'
     || lk == 139347                // 'attribute' 'where'
     || lk == 139386                // 'element' 'where'
     || lk == 139399                // 'false' 'where'
     || lk == 139451                // 'namespace' 'where'
     || lk == 139461                // 'null' 'where'
     || lk == 139484                // 'processing-instruction' 'where'
     || lk == 139519                // 'true' 'where'
     || lk == 141395                // 'attribute' 'with'
     || lk == 141434                // 'element' 'with'
     || lk == 141447                // 'false' 'with'
     || lk == 141499                // 'namespace' 'with'
     || lk == 141509                // 'null' 'with'
     || lk == 141532                // 'processing-instruction' 'with'
     || lk == 141567                // 'true' 'with'
     || lk == 142983                // 'false' 'words'
     || lk == 143045                // 'null' 'words'
     || lk == 143103                // 'true' 'words'
     || lk == 145543                // 'false' '|'
     || lk == 145605                // 'null' '|'
     || lk == 145663                // 'true' '|'
     || lk == 146055                // 'false' '||'
     || lk == 146117                // 'null' '||'
     || lk == 146175                // 'true' '||'
     || lk == 146567                // 'false' '|}'
     || lk == 146629                // 'null' '|}'
     || lk == 146687                // 'true' '|}'
     || lk == 147079                // 'false' '}'
     || lk == 147141                // 'null' '}'
     || lk == 147199)               // 'true' '}'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 281:                       // '{'
    case 283:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9915:                      // 'namespace' NCName^Token
    case 9948:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14927:                     // 'array' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14969:                     // 'document-node' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14973:                     // 'empty-sequence' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14995:                     // 'function' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15002:                     // 'if' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15015:                     // 'item' '#'
    case 15016:                     // 'json' '#'
    case 15017:                     // 'json-item' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15036:                     // 'namespace-node' '#'
    case 15037:                     // 'ne' '#'
    case 15042:                     // 'node' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15078:                     // 'schema-attribute' '#'
    case 15079:                     // 'schema-element' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15095:                     // 'structured-item' '#'
    case 15096:                     // 'switch' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15107:                     // 'typeswitch' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18055:                     // 'false' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18067:                     // 'function' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18117:                     // 'null' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18175:                     // 'true' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37563:                     // 'namespace' 'allowing'
    case 37596:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38075:                     // 'namespace' 'ancestor'
    case 38108:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 38620:                     // 'processing-instruction' 'ancestor-or-self'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40123:                     // 'namespace' 'append'
    case 40156:                     // 'processing-instruction' 'append'
    case 40531:                     // 'attribute' 'array'
    case 40570:                     // 'element' 'array'
    case 42579:                     // 'attribute' 'attribute'
    case 42618:                     // 'element' 'attribute'
    case 42683:                     // 'namespace' 'attribute'
    case 42716:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43195:                     // 'namespace' 'base-uri'
    case 43228:                     // 'processing-instruction' 'base-uri'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44252:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44731:                     // 'namespace' 'break'
    case 44764:                     // 'processing-instruction' 'break'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47291:                     // 'namespace' 'catch'
    case 47324:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48315:                     // 'namespace' 'child'
    case 48348:                     // 'processing-instruction' 'child'
    case 49747:                     // 'attribute' 'comment'
    case 49786:                     // 'element' 'comment'
    case 49851:                     // 'namespace' 'comment'
    case 49884:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50363:                     // 'namespace' 'constraint'
    case 50396:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50875:                     // 'namespace' 'construction'
    case 50908:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52411:                     // 'namespace' 'context'
    case 52444:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52923:                     // 'namespace' 'continue'
    case 52956:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53435:                     // 'namespace' 'copy'
    case 53468:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 53980:                     // 'processing-instruction' 'copy-namespaces'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55004:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55995:                     // 'namespace' 'declare'
    case 56028:                     // 'processing-instruction' 'declare'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57019:                     // 'namespace' 'delete'
    case 57052:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57531:                     // 'namespace' 'descendant'
    case 57564:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58076:                     // 'processing-instruction' 'descendant-or-self'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61627:                     // 'namespace' 'document'
    case 61660:                     // 'processing-instruction' 'document'
    case 62035:                     // 'attribute' 'document-node'
    case 62074:                     // 'element' 'document-node'
    case 62139:                     // 'namespace' 'document-node'
    case 62172:                     // 'processing-instruction' 'document-node'
    case 62547:                     // 'attribute' 'element'
    case 62586:                     // 'element' 'element'
    case 62651:                     // 'namespace' 'element'
    case 62684:                     // 'processing-instruction' 'element'
    case 64083:                     // 'attribute' 'empty-sequence'
    case 64122:                     // 'element' 'empty-sequence'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64220:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64699:                     // 'namespace' 'encoding'
    case 64732:                     // 'processing-instruction' 'encoding'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66747:                     // 'namespace' 'every'
    case 66780:                     // 'processing-instruction' 'every'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68283:                     // 'namespace' 'exit'
    case 68316:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68795:                     // 'namespace' 'external'
    case 68828:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'false'
    case 69242:                     // 'element' 'false'
    case 69307:                     // 'namespace' 'false'
    case 69340:                     // 'processing-instruction' 'false'
    case 69715:                     // 'attribute' 'first'
    case 69754:                     // 'element' 'first'
    case 69819:                     // 'namespace' 'first'
    case 69852:                     // 'processing-instruction' 'first'
    case 70227:                     // 'attribute' 'following'
    case 70266:                     // 'element' 'following'
    case 70331:                     // 'namespace' 'following'
    case 70364:                     // 'processing-instruction' 'following'
    case 70739:                     // 'attribute' 'following-sibling'
    case 70778:                     // 'element' 'following-sibling'
    case 70843:                     // 'namespace' 'following-sibling'
    case 70876:                     // 'processing-instruction' 'following-sibling'
    case 73299:                     // 'attribute' 'ft-option'
    case 73338:                     // 'element' 'ft-option'
    case 73403:                     // 'namespace' 'ft-option'
    case 73436:                     // 'processing-instruction' 'ft-option'
    case 75347:                     // 'attribute' 'function'
    case 75386:                     // 'element' 'function'
    case 75451:                     // 'namespace' 'function'
    case 75484:                     // 'processing-instruction' 'function'
    case 78931:                     // 'attribute' 'if'
    case 78970:                     // 'element' 'if'
    case 79035:                     // 'namespace' 'if'
    case 79068:                     // 'processing-instruction' 'if'
    case 79443:                     // 'attribute' 'import'
    case 79482:                     // 'element' 'import'
    case 79547:                     // 'namespace' 'import'
    case 79580:                     // 'processing-instruction' 'import'
    case 79955:                     // 'attribute' 'in'
    case 79994:                     // 'element' 'in'
    case 80059:                     // 'namespace' 'in'
    case 80092:                     // 'processing-instruction' 'in'
    case 80467:                     // 'attribute' 'index'
    case 80506:                     // 'element' 'index'
    case 80571:                     // 'namespace' 'index'
    case 80604:                     // 'processing-instruction' 'index'
    case 82515:                     // 'attribute' 'insert'
    case 82554:                     // 'element' 'insert'
    case 82619:                     // 'namespace' 'insert'
    case 82652:                     // 'processing-instruction' 'insert'
    case 83539:                     // 'attribute' 'integrity'
    case 83578:                     // 'element' 'integrity'
    case 83643:                     // 'namespace' 'integrity'
    case 83676:                     // 'processing-instruction' 'integrity'
    case 85587:                     // 'attribute' 'item'
    case 85626:                     // 'element' 'item'
    case 85691:                     // 'namespace' 'item'
    case 85724:                     // 'processing-instruction' 'item'
    case 86099:                     // 'attribute' 'json'
    case 86138:                     // 'element' 'json'
    case 86203:                     // 'namespace' 'json'
    case 86236:                     // 'processing-instruction' 'json'
    case 86611:                     // 'attribute' 'json-item'
    case 86650:                     // 'element' 'json-item'
    case 87123:                     // 'attribute' 'jsoniq'
    case 87162:                     // 'element' 'jsoniq'
    case 87227:                     // 'namespace' 'jsoniq'
    case 87260:                     // 'processing-instruction' 'jsoniq'
    case 88659:                     // 'attribute' 'last'
    case 88698:                     // 'element' 'last'
    case 88763:                     // 'namespace' 'last'
    case 88796:                     // 'processing-instruction' 'last'
    case 89171:                     // 'attribute' 'lax'
    case 89210:                     // 'element' 'lax'
    case 89275:                     // 'namespace' 'lax'
    case 89308:                     // 'processing-instruction' 'lax'
    case 91731:                     // 'attribute' 'loop'
    case 91770:                     // 'element' 'loop'
    case 91835:                     // 'namespace' 'loop'
    case 91868:                     // 'processing-instruction' 'loop'
    case 94803:                     // 'attribute' 'module'
    case 94842:                     // 'element' 'module'
    case 94907:                     // 'namespace' 'module'
    case 94940:                     // 'processing-instruction' 'module'
    case 95827:                     // 'attribute' 'namespace'
    case 95866:                     // 'element' 'namespace'
    case 95931:                     // 'namespace' 'namespace'
    case 95964:                     // 'processing-instruction' 'namespace'
    case 96339:                     // 'attribute' 'namespace-node'
    case 96378:                     // 'element' 'namespace-node'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96476:                     // 'processing-instruction' 'namespace-node'
    case 99411:                     // 'attribute' 'node'
    case 99450:                     // 'element' 'node'
    case 99515:                     // 'namespace' 'node'
    case 99548:                     // 'processing-instruction' 'node'
    case 99923:                     // 'attribute' 'nodes'
    case 99962:                     // 'element' 'nodes'
    case 100027:                    // 'namespace' 'nodes'
    case 100060:                    // 'processing-instruction' 'nodes'
    case 100947:                    // 'attribute' 'null'
    case 100986:                    // 'element' 'null'
    case 101051:                    // 'namespace' 'null'
    case 101084:                    // 'processing-instruction' 'null'
    case 101459:                    // 'attribute' 'object'
    case 101498:                    // 'element' 'object'
    case 101563:                    // 'namespace' 'object'
    case 101596:                    // 'processing-instruction' 'object'
    case 104019:                    // 'attribute' 'option'
    case 104058:                    // 'element' 'option'
    case 104123:                    // 'namespace' 'option'
    case 104156:                    // 'processing-instruction' 'option'
    case 105555:                    // 'attribute' 'ordered'
    case 105594:                    // 'element' 'ordered'
    case 105659:                    // 'namespace' 'ordered'
    case 105692:                    // 'processing-instruction' 'ordered'
    case 106067:                    // 'attribute' 'ordering'
    case 106106:                    // 'element' 'ordering'
    case 106171:                    // 'namespace' 'ordering'
    case 106204:                    // 'processing-instruction' 'ordering'
    case 107603:                    // 'attribute' 'parent'
    case 107642:                    // 'element' 'parent'
    case 107707:                    // 'namespace' 'parent'
    case 107740:                    // 'processing-instruction' 'parent'
    case 110675:                    // 'attribute' 'preceding'
    case 110714:                    // 'element' 'preceding'
    case 110779:                    // 'namespace' 'preceding'
    case 110812:                    // 'processing-instruction' 'preceding'
    case 111187:                    // 'attribute' 'preceding-sibling'
    case 111226:                    // 'element' 'preceding-sibling'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 111324:                    // 'processing-instruction' 'preceding-sibling'
    case 112723:                    // 'attribute' 'processing-instruction'
    case 112762:                    // 'element' 'processing-instruction'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 112860:                    // 'processing-instruction' 'processing-instruction'
    case 113747:                    // 'attribute' 'rename'
    case 113786:                    // 'element' 'rename'
    case 113851:                    // 'namespace' 'rename'
    case 113884:                    // 'processing-instruction' 'rename'
    case 114259:                    // 'attribute' 'replace'
    case 114298:                    // 'element' 'replace'
    case 114363:                    // 'namespace' 'replace'
    case 114396:                    // 'processing-instruction' 'replace'
    case 115283:                    // 'attribute' 'returning'
    case 115322:                    // 'element' 'returning'
    case 115387:                    // 'namespace' 'returning'
    case 115420:                    // 'processing-instruction' 'returning'
    case 115795:                    // 'attribute' 'revalidation'
    case 115834:                    // 'element' 'revalidation'
    case 115899:                    // 'namespace' 'revalidation'
    case 115932:                    // 'processing-instruction' 'revalidation'
    case 117331:                    // 'attribute' 'schema'
    case 117370:                    // 'element' 'schema'
    case 117435:                    // 'namespace' 'schema'
    case 117468:                    // 'processing-instruction' 'schema'
    case 117843:                    // 'attribute' 'schema-attribute'
    case 117882:                    // 'element' 'schema-attribute'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 117980:                    // 'processing-instruction' 'schema-attribute'
    case 118355:                    // 'attribute' 'schema-element'
    case 118394:                    // 'element' 'schema-element'
    case 118459:                    // 'namespace' 'schema-element'
    case 118492:                    // 'processing-instruction' 'schema-element'
    case 118867:                    // 'attribute' 'score'
    case 118906:                    // 'element' 'score'
    case 118971:                    // 'namespace' 'score'
    case 119004:                    // 'processing-instruction' 'score'
    case 119891:                    // 'attribute' 'self'
    case 119930:                    // 'element' 'self'
    case 119995:                    // 'namespace' 'self'
    case 120028:                    // 'processing-instruction' 'self'
    case 122451:                    // 'attribute' 'sliding'
    case 122490:                    // 'element' 'sliding'
    case 122555:                    // 'namespace' 'sliding'
    case 122588:                    // 'processing-instruction' 'sliding'
    case 122963:                    // 'attribute' 'some'
    case 123002:                    // 'element' 'some'
    case 123067:                    // 'namespace' 'some'
    case 123100:                    // 'processing-instruction' 'some'
    case 125523:                    // 'attribute' 'strict'
    case 125562:                    // 'element' 'strict'
    case 125627:                    // 'namespace' 'strict'
    case 125660:                    // 'processing-instruction' 'strict'
    case 126547:                    // 'attribute' 'structured-item'
    case 126586:                    // 'element' 'structured-item'
    case 127059:                    // 'attribute' 'switch'
    case 127098:                    // 'element' 'switch'
    case 127163:                    // 'namespace' 'switch'
    case 127196:                    // 'processing-instruction' 'switch'
    case 127571:                    // 'attribute' 'text'
    case 127610:                    // 'element' 'text'
    case 127675:                    // 'namespace' 'text'
    case 127708:                    // 'processing-instruction' 'text'
    case 130643:                    // 'attribute' 'true'
    case 130682:                    // 'element' 'true'
    case 130747:                    // 'namespace' 'true'
    case 130780:                    // 'processing-instruction' 'true'
    case 131155:                    // 'attribute' 'try'
    case 131194:                    // 'element' 'try'
    case 131259:                    // 'namespace' 'try'
    case 131292:                    // 'processing-instruction' 'try'
    case 131667:                    // 'attribute' 'tumbling'
    case 131706:                    // 'element' 'tumbling'
    case 131771:                    // 'namespace' 'tumbling'
    case 131804:                    // 'processing-instruction' 'tumbling'
    case 132179:                    // 'attribute' 'type'
    case 132218:                    // 'element' 'type'
    case 132283:                    // 'namespace' 'type'
    case 132316:                    // 'processing-instruction' 'type'
    case 132691:                    // 'attribute' 'typeswitch'
    case 132730:                    // 'element' 'typeswitch'
    case 132795:                    // 'namespace' 'typeswitch'
    case 132828:                    // 'processing-instruction' 'typeswitch'
    case 134227:                    // 'attribute' 'unordered'
    case 134266:                    // 'element' 'unordered'
    case 134331:                    // 'namespace' 'unordered'
    case 134364:                    // 'processing-instruction' 'unordered'
    case 134739:                    // 'attribute' 'updating'
    case 134778:                    // 'element' 'updating'
    case 134843:                    // 'namespace' 'updating'
    case 134876:                    // 'processing-instruction' 'updating'
    case 136275:                    // 'attribute' 'validate'
    case 136314:                    // 'element' 'validate'
    case 136379:                    // 'namespace' 'validate'
    case 136412:                    // 'processing-instruction' 'validate'
    case 136787:                    // 'attribute' 'value'
    case 136826:                    // 'element' 'value'
    case 136891:                    // 'namespace' 'value'
    case 136924:                    // 'processing-instruction' 'value'
    case 137299:                    // 'attribute' 'variable'
    case 137338:                    // 'element' 'variable'
    case 137403:                    // 'namespace' 'variable'
    case 137436:                    // 'processing-instruction' 'variable'
    case 137811:                    // 'attribute' 'version'
    case 137850:                    // 'element' 'version'
    case 137915:                    // 'namespace' 'version'
    case 137948:                    // 'processing-instruction' 'version'
    case 139859:                    // 'attribute' 'while'
    case 139898:                    // 'element' 'while'
    case 139963:                    // 'namespace' 'while'
    case 139996:                    // 'processing-instruction' 'while'
    case 143955:                    // 'attribute' '{'
    case 143969:                    // 'comment' '{'
    case 143992:                    // 'document' '{'
    case 143994:                    // 'element' '{'
    case 144059:                    // 'namespace' '{'
    case 144078:                    // 'ordered' '{'
    case 144092:                    // 'processing-instruction' '{'
    case 144121:                    // 'text' '{'
    case 144134:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(289);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 122:                       // 'element'
      lookahead2W(288);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 187:                       // 'namespace'
    case 220:                       // 'processing-instruction'
      lookahead2W(286);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 97:                        // 'comment'
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 249:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' |
                                    // '}'
      break;
    case 79:                        // 'array'
    case 125:                       // 'empty-sequence'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 234:                       // 'self'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 121:                       // 'document-node'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 188:                       // 'namespace-node'
    case 189:                       // 'ne'
    case 194:                       // 'node'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12935                 // 'false' EOF
     || lk == 12997                 // 'null' EOF
     || lk == 13055                 // 'true' EOF
     || lk == 13447                 // 'false' '!'
     || lk == 13509                 // 'null' '!'
     || lk == 13567                 // 'true' '!'
     || lk == 13959                 // 'false' '!='
     || lk == 14021                 // 'null' '!='
     || lk == 14079                 // 'true' '!='
     || lk == 19591                 // 'false' ')'
     || lk == 19653                 // 'null' ')'
     || lk == 19711                 // 'true' ')'
     || lk == 20103                 // 'false' '*'
     || lk == 20165                 // 'null' '*'
     || lk == 20223                 // 'true' '*'
     || lk == 21127                 // 'false' '+'
     || lk == 21189                 // 'null' '+'
     || lk == 21247                 // 'true' '+'
     || lk == 21639                 // 'false' ','
     || lk == 21701                 // 'null' ','
     || lk == 21759                 // 'true' ','
     || lk == 22151                 // 'false' '-'
     || lk == 22213                 // 'null' '-'
     || lk == 22271                 // 'true' '-'
     || lk == 24199                 // 'false' '/'
     || lk == 24261                 // 'null' '/'
     || lk == 24319                 // 'true' '/'
     || lk == 24711                 // 'false' '//'
     || lk == 24773                 // 'null' '//'
     || lk == 24831                 // 'true' '//'
     || lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855                 // 'true' ':'
     || lk == 27783                 // 'false' ';'
     || lk == 27845                 // 'null' ';'
     || lk == 27903                 // 'true' ';'
     || lk == 28295                 // 'false' '<'
     || lk == 28357                 // 'null' '<'
     || lk == 28415                 // 'true' '<'
     || lk == 29831                 // 'false' '<<'
     || lk == 29893                 // 'null' '<<'
     || lk == 29951                 // 'true' '<<'
     || lk == 30343                 // 'false' '<='
     || lk == 30405                 // 'null' '<='
     || lk == 30463                 // 'true' '<='
     || lk == 31367                 // 'false' '='
     || lk == 31429                 // 'null' '='
     || lk == 31487                 // 'true' '='
     || lk == 31879                 // 'false' '>'
     || lk == 31941                 // 'null' '>'
     || lk == 31999                 // 'true' '>'
     || lk == 32391                 // 'false' '>='
     || lk == 32453                 // 'null' '>='
     || lk == 32511                 // 'true' '>='
     || lk == 32903                 // 'false' '>>'
     || lk == 32965                 // 'null' '>>'
     || lk == 33023                 // 'true' '>>'
     || lk == 35463                 // 'false' '['
     || lk == 35525                 // 'null' '['
     || lk == 35583                 // 'true' '['
     || lk == 35975                 // 'false' ']'
     || lk == 36037                 // 'null' ']'
     || lk == 36095                 // 'true' ']'
     || lk == 36435                 // 'attribute' 'after'
     || lk == 36474                 // 'element' 'after'
     || lk == 36487                 // 'false' 'after'
     || lk == 36539                 // 'namespace' 'after'
     || lk == 36549                 // 'null' 'after'
     || lk == 36572                 // 'processing-instruction' 'after'
     || lk == 36607                 // 'true' 'after'
     || lk == 38995                 // 'attribute' 'and'
     || lk == 39034                 // 'element' 'and'
     || lk == 39047                 // 'false' 'and'
     || lk == 39099                 // 'namespace' 'and'
     || lk == 39109                 // 'null' 'and'
     || lk == 39132                 // 'processing-instruction' 'and'
     || lk == 39167                 // 'true' 'and'
     || lk == 41043                 // 'attribute' 'as'
     || lk == 41082                 // 'element' 'as'
     || lk == 41095                 // 'false' 'as'
     || lk == 41147                 // 'namespace' 'as'
     || lk == 41157                 // 'null' 'as'
     || lk == 41180                 // 'processing-instruction' 'as'
     || lk == 41215                 // 'true' 'as'
     || lk == 41555                 // 'attribute' 'ascending'
     || lk == 41594                 // 'element' 'ascending'
     || lk == 41607                 // 'false' 'ascending'
     || lk == 41659                 // 'namespace' 'ascending'
     || lk == 41669                 // 'null' 'ascending'
     || lk == 41692                 // 'processing-instruction' 'ascending'
     || lk == 41727                 // 'true' 'ascending'
     || lk == 42067                 // 'attribute' 'at'
     || lk == 42106                 // 'element' 'at'
     || lk == 42119                 // 'false' 'at'
     || lk == 42171                 // 'namespace' 'at'
     || lk == 42181                 // 'null' 'at'
     || lk == 42204                 // 'processing-instruction' 'at'
     || lk == 42239                 // 'true' 'at'
     || lk == 43603                 // 'attribute' 'before'
     || lk == 43642                 // 'element' 'before'
     || lk == 43655                 // 'false' 'before'
     || lk == 43707                 // 'namespace' 'before'
     || lk == 43717                 // 'null' 'before'
     || lk == 43740                 // 'processing-instruction' 'before'
     || lk == 43775                 // 'true' 'before'
     || lk == 45191                 // 'false' 'by'
     || lk == 45253                 // 'null' 'by'
     || lk == 45311                 // 'true' 'by'
     || lk == 45651                 // 'attribute' 'case'
     || lk == 45690                 // 'element' 'case'
     || lk == 45703                 // 'false' 'case'
     || lk == 45755                 // 'namespace' 'case'
     || lk == 45765                 // 'null' 'case'
     || lk == 45788                 // 'processing-instruction' 'case'
     || lk == 45823                 // 'true' 'case'
     || lk == 46163                 // 'attribute' 'cast'
     || lk == 46202                 // 'element' 'cast'
     || lk == 46215                 // 'false' 'cast'
     || lk == 46267                 // 'namespace' 'cast'
     || lk == 46277                 // 'null' 'cast'
     || lk == 46300                 // 'processing-instruction' 'cast'
     || lk == 46335                 // 'true' 'cast'
     || lk == 46675                 // 'attribute' 'castable'
     || lk == 46714                 // 'element' 'castable'
     || lk == 46727                 // 'false' 'castable'
     || lk == 46779                 // 'namespace' 'castable'
     || lk == 46789                 // 'null' 'castable'
     || lk == 46812                 // 'processing-instruction' 'castable'
     || lk == 46847                 // 'true' 'castable'
     || lk == 48723                 // 'attribute' 'collation'
     || lk == 48762                 // 'element' 'collation'
     || lk == 48775                 // 'false' 'collation'
     || lk == 48827                 // 'namespace' 'collation'
     || lk == 48837                 // 'null' 'collation'
     || lk == 48860                 // 'processing-instruction' 'collation'
     || lk == 48895                 // 'true' 'collation'
     || lk == 51335                 // 'false' 'contains'
     || lk == 51397                 // 'null' 'contains'
     || lk == 51455                 // 'true' 'contains'
     || lk == 54355                 // 'attribute' 'count'
     || lk == 54394                 // 'element' 'count'
     || lk == 54407                 // 'false' 'count'
     || lk == 54459                 // 'namespace' 'count'
     || lk == 54469                 // 'null' 'count'
     || lk == 54492                 // 'processing-instruction' 'count'
     || lk == 54527                 // 'true' 'count'
     || lk == 56403                 // 'attribute' 'default'
     || lk == 56442                 // 'element' 'default'
     || lk == 56455                 // 'false' 'default'
     || lk == 56507                 // 'namespace' 'default'
     || lk == 56517                 // 'null' 'default'
     || lk == 56540                 // 'processing-instruction' 'default'
     || lk == 56575                 // 'true' 'default'
     || lk == 58451                 // 'attribute' 'descending'
     || lk == 58490                 // 'element' 'descending'
     || lk == 58503                 // 'false' 'descending'
     || lk == 58555                 // 'namespace' 'descending'
     || lk == 58565                 // 'null' 'descending'
     || lk == 58588                 // 'processing-instruction' 'descending'
     || lk == 58623                 // 'true' 'descending'
     || lk == 61011                 // 'attribute' 'div'
     || lk == 61050                 // 'element' 'div'
     || lk == 61063                 // 'false' 'div'
     || lk == 61115                 // 'namespace' 'div'
     || lk == 61125                 // 'null' 'div'
     || lk == 61148                 // 'processing-instruction' 'div'
     || lk == 61183                 // 'true' 'div'
     || lk == 63059                 // 'attribute' 'else'
     || lk == 63098                 // 'element' 'else'
     || lk == 63111                 // 'false' 'else'
     || lk == 63163                 // 'namespace' 'else'
     || lk == 63173                 // 'null' 'else'
     || lk == 63196                 // 'processing-instruction' 'else'
     || lk == 63231                 // 'true' 'else'
     || lk == 63571                 // 'attribute' 'empty'
     || lk == 63610                 // 'element' 'empty'
     || lk == 63623                 // 'false' 'empty'
     || lk == 63675                 // 'namespace' 'empty'
     || lk == 63685                 // 'null' 'empty'
     || lk == 63708                 // 'processing-instruction' 'empty'
     || lk == 63743                 // 'true' 'empty'
     || lk == 65107                 // 'attribute' 'end'
     || lk == 65146                 // 'element' 'end'
     || lk == 65159                 // 'false' 'end'
     || lk == 65211                 // 'namespace' 'end'
     || lk == 65221                 // 'null' 'end'
     || lk == 65244                 // 'processing-instruction' 'end'
     || lk == 65279                 // 'true' 'end'
     || lk == 66131                 // 'attribute' 'eq'
     || lk == 66170                 // 'element' 'eq'
     || lk == 66183                 // 'false' 'eq'
     || lk == 66235                 // 'namespace' 'eq'
     || lk == 66245                 // 'null' 'eq'
     || lk == 66268                 // 'processing-instruction' 'eq'
     || lk == 66303                 // 'true' 'eq'
     || lk == 67667                 // 'attribute' 'except'
     || lk == 67706                 // 'element' 'except'
     || lk == 67719                 // 'false' 'except'
     || lk == 67771                 // 'namespace' 'except'
     || lk == 67781                 // 'null' 'except'
     || lk == 67804                 // 'processing-instruction' 'except'
     || lk == 67839                 // 'true' 'except'
     || lk == 71251                 // 'attribute' 'for'
     || lk == 71290                 // 'element' 'for'
     || lk == 71303                 // 'false' 'for'
     || lk == 71355                 // 'namespace' 'for'
     || lk == 71365                 // 'null' 'for'
     || lk == 71388                 // 'processing-instruction' 'for'
     || lk == 71423                 // 'true' 'for'
     || lk == 72787                 // 'attribute' 'from'
     || lk == 72826                 // 'element' 'from'
     || lk == 72839                 // 'false' 'from'
     || lk == 72891                 // 'namespace' 'from'
     || lk == 72901                 // 'null' 'from'
     || lk == 72924                 // 'processing-instruction' 'from'
     || lk == 72959                 // 'true' 'from'
     || lk == 75859                 // 'attribute' 'ge'
     || lk == 75898                 // 'element' 'ge'
     || lk == 75911                 // 'false' 'ge'
     || lk == 75963                 // 'namespace' 'ge'
     || lk == 75973                 // 'null' 'ge'
     || lk == 75996                 // 'processing-instruction' 'ge'
     || lk == 76031                 // 'true' 'ge'
     || lk == 76883                 // 'attribute' 'group'
     || lk == 76922                 // 'element' 'group'
     || lk == 76935                 // 'false' 'group'
     || lk == 76987                 // 'namespace' 'group'
     || lk == 76997                 // 'null' 'group'
     || lk == 77020                 // 'processing-instruction' 'group'
     || lk == 77055                 // 'true' 'group'
     || lk == 77907                 // 'attribute' 'gt'
     || lk == 77946                 // 'element' 'gt'
     || lk == 77959                 // 'false' 'gt'
     || lk == 78011                 // 'namespace' 'gt'
     || lk == 78021                 // 'null' 'gt'
     || lk == 78044                 // 'processing-instruction' 'gt'
     || lk == 78079                 // 'true' 'gt'
     || lk == 78419                 // 'attribute' 'idiv'
     || lk == 78458                 // 'element' 'idiv'
     || lk == 78471                 // 'false' 'idiv'
     || lk == 78523                 // 'namespace' 'idiv'
     || lk == 78533                 // 'null' 'idiv'
     || lk == 78556                 // 'processing-instruction' 'idiv'
     || lk == 78591                 // 'true' 'idiv'
     || lk == 83027                 // 'attribute' 'instance'
     || lk == 83066                 // 'element' 'instance'
     || lk == 83079                 // 'false' 'instance'
     || lk == 83131                 // 'namespace' 'instance'
     || lk == 83141                 // 'null' 'instance'
     || lk == 83164                 // 'processing-instruction' 'instance'
     || lk == 83199                 // 'true' 'instance'
     || lk == 84051                 // 'attribute' 'intersect'
     || lk == 84090                 // 'element' 'intersect'
     || lk == 84103                 // 'false' 'intersect'
     || lk == 84155                 // 'namespace' 'intersect'
     || lk == 84165                 // 'null' 'intersect'
     || lk == 84188                 // 'processing-instruction' 'intersect'
     || lk == 84223                 // 'true' 'intersect'
     || lk == 84563                 // 'attribute' 'into'
     || lk == 84602                 // 'element' 'into'
     || lk == 84615                 // 'false' 'into'
     || lk == 84667                 // 'namespace' 'into'
     || lk == 84677                 // 'null' 'into'
     || lk == 84700                 // 'processing-instruction' 'into'
     || lk == 84735                 // 'true' 'into'
     || lk == 85075                 // 'attribute' 'is'
     || lk == 85114                 // 'element' 'is'
     || lk == 85127                 // 'false' 'is'
     || lk == 85179                 // 'namespace' 'is'
     || lk == 85189                 // 'null' 'is'
     || lk == 85212                 // 'processing-instruction' 'is'
     || lk == 85247                 // 'true' 'is'
     || lk == 89683                 // 'attribute' 'le'
     || lk == 89722                 // 'element' 'le'
     || lk == 89735                 // 'false' 'le'
     || lk == 89787                 // 'namespace' 'le'
     || lk == 89797                 // 'null' 'le'
     || lk == 89820                 // 'processing-instruction' 'le'
     || lk == 89855                 // 'true' 'le'
     || lk == 90707                 // 'attribute' 'let'
     || lk == 90746                 // 'element' 'let'
     || lk == 90759                 // 'false' 'let'
     || lk == 90811                 // 'namespace' 'let'
     || lk == 90821                 // 'null' 'let'
     || lk == 90844                 // 'processing-instruction' 'let'
     || lk == 90879                 // 'true' 'let'
     || lk == 92755                 // 'attribute' 'lt'
     || lk == 92794                 // 'element' 'lt'
     || lk == 92807                 // 'false' 'lt'
     || lk == 92859                 // 'namespace' 'lt'
     || lk == 92869                 // 'null' 'lt'
     || lk == 92892                 // 'processing-instruction' 'lt'
     || lk == 92927                 // 'true' 'lt'
     || lk == 93779                 // 'attribute' 'mod'
     || lk == 93818                 // 'element' 'mod'
     || lk == 93831                 // 'false' 'mod'
     || lk == 93883                 // 'namespace' 'mod'
     || lk == 93893                 // 'null' 'mod'
     || lk == 93916                 // 'processing-instruction' 'mod'
     || lk == 93951                 // 'true' 'mod'
     || lk == 94291                 // 'attribute' 'modify'
     || lk == 94330                 // 'element' 'modify'
     || lk == 94343                 // 'false' 'modify'
     || lk == 94395                 // 'namespace' 'modify'
     || lk == 94405                 // 'null' 'modify'
     || lk == 94428                 // 'processing-instruction' 'modify'
     || lk == 94463                 // 'true' 'modify'
     || lk == 96851                 // 'attribute' 'ne'
     || lk == 96890                 // 'element' 'ne'
     || lk == 96903                 // 'false' 'ne'
     || lk == 96955                 // 'namespace' 'ne'
     || lk == 96965                 // 'null' 'ne'
     || lk == 96988                 // 'processing-instruction' 'ne'
     || lk == 97023                 // 'true' 'ne'
     || lk == 103507                // 'attribute' 'only'
     || lk == 103546                // 'element' 'only'
     || lk == 103559                // 'false' 'only'
     || lk == 103611                // 'namespace' 'only'
     || lk == 103621                // 'null' 'only'
     || lk == 103644                // 'processing-instruction' 'only'
     || lk == 103679                // 'true' 'only'
     || lk == 104531                // 'attribute' 'or'
     || lk == 104570                // 'element' 'or'
     || lk == 104583                // 'false' 'or'
     || lk == 104635                // 'namespace' 'or'
     || lk == 104645                // 'null' 'or'
     || lk == 104668                // 'processing-instruction' 'or'
     || lk == 104703                // 'true' 'or'
     || lk == 105043                // 'attribute' 'order'
     || lk == 105082                // 'element' 'order'
     || lk == 105095                // 'false' 'order'
     || lk == 105147                // 'namespace' 'order'
     || lk == 105157                // 'null' 'order'
     || lk == 105180                // 'processing-instruction' 'order'
     || lk == 105215                // 'true' 'order'
     || lk == 107143                // 'false' 'paragraphs'
     || lk == 107205                // 'null' 'paragraphs'
     || lk == 107263                // 'true' 'paragraphs'
     || lk == 114771                // 'attribute' 'return'
     || lk == 114810                // 'element' 'return'
     || lk == 114823                // 'false' 'return'
     || lk == 114875                // 'namespace' 'return'
     || lk == 114885                // 'null' 'return'
     || lk == 114908                // 'processing-instruction' 'return'
     || lk == 114943                // 'true' 'return'
     || lk == 116819                // 'attribute' 'satisfies'
     || lk == 116858                // 'element' 'satisfies'
     || lk == 116871                // 'false' 'satisfies'
     || lk == 116923                // 'namespace' 'satisfies'
     || lk == 116933                // 'null' 'satisfies'
     || lk == 116956                // 'processing-instruction' 'satisfies'
     || lk == 116991                // 'true' 'satisfies'
     || lk == 119379                // 'attribute' 'select'
     || lk == 119418                // 'element' 'select'
     || lk == 119431                // 'false' 'select'
     || lk == 119483                // 'namespace' 'select'
     || lk == 119493                // 'null' 'select'
     || lk == 119516                // 'processing-instruction' 'select'
     || lk == 119551                // 'true' 'select'
     || lk == 121479                // 'false' 'sentences'
     || lk == 121541                // 'null' 'sentences'
     || lk == 121599                // 'true' 'sentences'
     || lk == 123475                // 'attribute' 'stable'
     || lk == 123514                // 'element' 'stable'
     || lk == 123527                // 'false' 'stable'
     || lk == 123579                // 'namespace' 'stable'
     || lk == 123589                // 'null' 'stable'
     || lk == 123612                // 'processing-instruction' 'stable'
     || lk == 123647                // 'true' 'stable'
     || lk == 123987                // 'attribute' 'start'
     || lk == 124026                // 'element' 'start'
     || lk == 124039                // 'false' 'start'
     || lk == 124091                // 'namespace' 'start'
     || lk == 124101                // 'null' 'start'
     || lk == 124124                // 'processing-instruction' 'start'
     || lk == 124159                // 'true' 'start'
     || lk == 129159                // 'false' 'times'
     || lk == 129221                // 'null' 'times'
     || lk == 129279                // 'true' 'times'
     || lk == 129619                // 'attribute' 'to'
     || lk == 129658                // 'element' 'to'
     || lk == 129671                // 'false' 'to'
     || lk == 129723                // 'namespace' 'to'
     || lk == 129733                // 'null' 'to'
     || lk == 129756                // 'processing-instruction' 'to'
     || lk == 129791                // 'true' 'to'
     || lk == 130131                // 'attribute' 'treat'
     || lk == 130170                // 'element' 'treat'
     || lk == 130183                // 'false' 'treat'
     || lk == 130235                // 'namespace' 'treat'
     || lk == 130245                // 'null' 'treat'
     || lk == 130268                // 'processing-instruction' 'treat'
     || lk == 130303                // 'true' 'treat'
     || lk == 133203                // 'attribute' 'union'
     || lk == 133242                // 'element' 'union'
     || lk == 133255                // 'false' 'union'
     || lk == 133307                // 'namespace' 'union'
     || lk == 133317                // 'null' 'union'
     || lk == 133340                // 'processing-instruction' 'union'
     || lk == 133375                // 'true' 'union'
     || lk == 139347                // 'attribute' 'where'
     || lk == 139386                // 'element' 'where'
     || lk == 139399                // 'false' 'where'
     || lk == 139451                // 'namespace' 'where'
     || lk == 139461                // 'null' 'where'
     || lk == 139484                // 'processing-instruction' 'where'
     || lk == 139519                // 'true' 'where'
     || lk == 141395                // 'attribute' 'with'
     || lk == 141434                // 'element' 'with'
     || lk == 141447                // 'false' 'with'
     || lk == 141499                // 'namespace' 'with'
     || lk == 141509                // 'null' 'with'
     || lk == 141532                // 'processing-instruction' 'with'
     || lk == 141567                // 'true' 'with'
     || lk == 142983                // 'false' 'words'
     || lk == 143045                // 'null' 'words'
     || lk == 143103                // 'true' 'words'
     || lk == 145543                // 'false' '|'
     || lk == 145605                // 'null' '|'
     || lk == 145663                // 'true' '|'
     || lk == 146055                // 'false' '||'
     || lk == 146117                // 'null' '||'
     || lk == 146175                // 'true' '||'
     || lk == 146567                // 'false' '|}'
     || lk == 146629                // 'null' '|}'
     || lk == 146687                // 'true' '|}'
     || lk == 147079                // 'false' '}'
     || lk == 147141                // 'null' '}'
     || lk == 147199)               // 'true' '}'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 281:                       // '{'
    case 283:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9915:                      // 'namespace' NCName^Token
    case 9948:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14927:                     // 'array' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14969:                     // 'document-node' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14973:                     // 'empty-sequence' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14995:                     // 'function' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15002:                     // 'if' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15015:                     // 'item' '#'
    case 15016:                     // 'json' '#'
    case 15017:                     // 'json-item' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15036:                     // 'namespace-node' '#'
    case 15037:                     // 'ne' '#'
    case 15042:                     // 'node' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15078:                     // 'schema-attribute' '#'
    case 15079:                     // 'schema-element' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15095:                     // 'structured-item' '#'
    case 15096:                     // 'switch' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15107:                     // 'typeswitch' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18055:                     // 'false' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18067:                     // 'function' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18117:                     // 'null' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18175:                     // 'true' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37563:                     // 'namespace' 'allowing'
    case 37596:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38075:                     // 'namespace' 'ancestor'
    case 38108:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 38620:                     // 'processing-instruction' 'ancestor-or-self'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40123:                     // 'namespace' 'append'
    case 40156:                     // 'processing-instruction' 'append'
    case 40531:                     // 'attribute' 'array'
    case 40570:                     // 'element' 'array'
    case 42579:                     // 'attribute' 'attribute'
    case 42618:                     // 'element' 'attribute'
    case 42683:                     // 'namespace' 'attribute'
    case 42716:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43195:                     // 'namespace' 'base-uri'
    case 43228:                     // 'processing-instruction' 'base-uri'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44252:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44731:                     // 'namespace' 'break'
    case 44764:                     // 'processing-instruction' 'break'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47291:                     // 'namespace' 'catch'
    case 47324:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48315:                     // 'namespace' 'child'
    case 48348:                     // 'processing-instruction' 'child'
    case 49747:                     // 'attribute' 'comment'
    case 49786:                     // 'element' 'comment'
    case 49851:                     // 'namespace' 'comment'
    case 49884:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50363:                     // 'namespace' 'constraint'
    case 50396:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50875:                     // 'namespace' 'construction'
    case 50908:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52411:                     // 'namespace' 'context'
    case 52444:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52923:                     // 'namespace' 'continue'
    case 52956:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53435:                     // 'namespace' 'copy'
    case 53468:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 53980:                     // 'processing-instruction' 'copy-namespaces'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55004:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55995:                     // 'namespace' 'declare'
    case 56028:                     // 'processing-instruction' 'declare'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57019:                     // 'namespace' 'delete'
    case 57052:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57531:                     // 'namespace' 'descendant'
    case 57564:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58076:                     // 'processing-instruction' 'descendant-or-self'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61627:                     // 'namespace' 'document'
    case 61660:                     // 'processing-instruction' 'document'
    case 62035:                     // 'attribute' 'document-node'
    case 62074:                     // 'element' 'document-node'
    case 62139:                     // 'namespace' 'document-node'
    case 62172:                     // 'processing-instruction' 'document-node'
    case 62547:                     // 'attribute' 'element'
    case 62586:                     // 'element' 'element'
    case 62651:                     // 'namespace' 'element'
    case 62684:                     // 'processing-instruction' 'element'
    case 64083:                     // 'attribute' 'empty-sequence'
    case 64122:                     // 'element' 'empty-sequence'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64220:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64699:                     // 'namespace' 'encoding'
    case 64732:                     // 'processing-instruction' 'encoding'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66747:                     // 'namespace' 'every'
    case 66780:                     // 'processing-instruction' 'every'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68283:                     // 'namespace' 'exit'
    case 68316:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68795:                     // 'namespace' 'external'
    case 68828:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'false'
    case 69242:                     // 'element' 'false'
    case 69307:                     // 'namespace' 'false'
    case 69340:                     // 'processing-instruction' 'false'
    case 69715:                     // 'attribute' 'first'
    case 69754:                     // 'element' 'first'
    case 69819:                     // 'namespace' 'first'
    case 69852:                     // 'processing-instruction' 'first'
    case 70227:                     // 'attribute' 'following'
    case 70266:                     // 'element' 'following'
    case 70331:                     // 'namespace' 'following'
    case 70364:                     // 'processing-instruction' 'following'
    case 70739:                     // 'attribute' 'following-sibling'
    case 70778:                     // 'element' 'following-sibling'
    case 70843:                     // 'namespace' 'following-sibling'
    case 70876:                     // 'processing-instruction' 'following-sibling'
    case 73299:                     // 'attribute' 'ft-option'
    case 73338:                     // 'element' 'ft-option'
    case 73403:                     // 'namespace' 'ft-option'
    case 73436:                     // 'processing-instruction' 'ft-option'
    case 75347:                     // 'attribute' 'function'
    case 75386:                     // 'element' 'function'
    case 75451:                     // 'namespace' 'function'
    case 75484:                     // 'processing-instruction' 'function'
    case 78931:                     // 'attribute' 'if'
    case 78970:                     // 'element' 'if'
    case 79035:                     // 'namespace' 'if'
    case 79068:                     // 'processing-instruction' 'if'
    case 79443:                     // 'attribute' 'import'
    case 79482:                     // 'element' 'import'
    case 79547:                     // 'namespace' 'import'
    case 79580:                     // 'processing-instruction' 'import'
    case 79955:                     // 'attribute' 'in'
    case 79994:                     // 'element' 'in'
    case 80059:                     // 'namespace' 'in'
    case 80092:                     // 'processing-instruction' 'in'
    case 80467:                     // 'attribute' 'index'
    case 80506:                     // 'element' 'index'
    case 80571:                     // 'namespace' 'index'
    case 80604:                     // 'processing-instruction' 'index'
    case 82515:                     // 'attribute' 'insert'
    case 82554:                     // 'element' 'insert'
    case 82619:                     // 'namespace' 'insert'
    case 82652:                     // 'processing-instruction' 'insert'
    case 83539:                     // 'attribute' 'integrity'
    case 83578:                     // 'element' 'integrity'
    case 83643:                     // 'namespace' 'integrity'
    case 83676:                     // 'processing-instruction' 'integrity'
    case 85587:                     // 'attribute' 'item'
    case 85626:                     // 'element' 'item'
    case 85691:                     // 'namespace' 'item'
    case 85724:                     // 'processing-instruction' 'item'
    case 86099:                     // 'attribute' 'json'
    case 86138:                     // 'element' 'json'
    case 86203:                     // 'namespace' 'json'
    case 86236:                     // 'processing-instruction' 'json'
    case 86611:                     // 'attribute' 'json-item'
    case 86650:                     // 'element' 'json-item'
    case 87123:                     // 'attribute' 'jsoniq'
    case 87162:                     // 'element' 'jsoniq'
    case 87227:                     // 'namespace' 'jsoniq'
    case 87260:                     // 'processing-instruction' 'jsoniq'
    case 88659:                     // 'attribute' 'last'
    case 88698:                     // 'element' 'last'
    case 88763:                     // 'namespace' 'last'
    case 88796:                     // 'processing-instruction' 'last'
    case 89171:                     // 'attribute' 'lax'
    case 89210:                     // 'element' 'lax'
    case 89275:                     // 'namespace' 'lax'
    case 89308:                     // 'processing-instruction' 'lax'
    case 91731:                     // 'attribute' 'loop'
    case 91770:                     // 'element' 'loop'
    case 91835:                     // 'namespace' 'loop'
    case 91868:                     // 'processing-instruction' 'loop'
    case 94803:                     // 'attribute' 'module'
    case 94842:                     // 'element' 'module'
    case 94907:                     // 'namespace' 'module'
    case 94940:                     // 'processing-instruction' 'module'
    case 95827:                     // 'attribute' 'namespace'
    case 95866:                     // 'element' 'namespace'
    case 95931:                     // 'namespace' 'namespace'
    case 95964:                     // 'processing-instruction' 'namespace'
    case 96339:                     // 'attribute' 'namespace-node'
    case 96378:                     // 'element' 'namespace-node'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96476:                     // 'processing-instruction' 'namespace-node'
    case 99411:                     // 'attribute' 'node'
    case 99450:                     // 'element' 'node'
    case 99515:                     // 'namespace' 'node'
    case 99548:                     // 'processing-instruction' 'node'
    case 99923:                     // 'attribute' 'nodes'
    case 99962:                     // 'element' 'nodes'
    case 100027:                    // 'namespace' 'nodes'
    case 100060:                    // 'processing-instruction' 'nodes'
    case 100947:                    // 'attribute' 'null'
    case 100986:                    // 'element' 'null'
    case 101051:                    // 'namespace' 'null'
    case 101084:                    // 'processing-instruction' 'null'
    case 101459:                    // 'attribute' 'object'
    case 101498:                    // 'element' 'object'
    case 101563:                    // 'namespace' 'object'
    case 101596:                    // 'processing-instruction' 'object'
    case 104019:                    // 'attribute' 'option'
    case 104058:                    // 'element' 'option'
    case 104123:                    // 'namespace' 'option'
    case 104156:                    // 'processing-instruction' 'option'
    case 105555:                    // 'attribute' 'ordered'
    case 105594:                    // 'element' 'ordered'
    case 105659:                    // 'namespace' 'ordered'
    case 105692:                    // 'processing-instruction' 'ordered'
    case 106067:                    // 'attribute' 'ordering'
    case 106106:                    // 'element' 'ordering'
    case 106171:                    // 'namespace' 'ordering'
    case 106204:                    // 'processing-instruction' 'ordering'
    case 107603:                    // 'attribute' 'parent'
    case 107642:                    // 'element' 'parent'
    case 107707:                    // 'namespace' 'parent'
    case 107740:                    // 'processing-instruction' 'parent'
    case 110675:                    // 'attribute' 'preceding'
    case 110714:                    // 'element' 'preceding'
    case 110779:                    // 'namespace' 'preceding'
    case 110812:                    // 'processing-instruction' 'preceding'
    case 111187:                    // 'attribute' 'preceding-sibling'
    case 111226:                    // 'element' 'preceding-sibling'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 111324:                    // 'processing-instruction' 'preceding-sibling'
    case 112723:                    // 'attribute' 'processing-instruction'
    case 112762:                    // 'element' 'processing-instruction'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 112860:                    // 'processing-instruction' 'processing-instruction'
    case 113747:                    // 'attribute' 'rename'
    case 113786:                    // 'element' 'rename'
    case 113851:                    // 'namespace' 'rename'
    case 113884:                    // 'processing-instruction' 'rename'
    case 114259:                    // 'attribute' 'replace'
    case 114298:                    // 'element' 'replace'
    case 114363:                    // 'namespace' 'replace'
    case 114396:                    // 'processing-instruction' 'replace'
    case 115283:                    // 'attribute' 'returning'
    case 115322:                    // 'element' 'returning'
    case 115387:                    // 'namespace' 'returning'
    case 115420:                    // 'processing-instruction' 'returning'
    case 115795:                    // 'attribute' 'revalidation'
    case 115834:                    // 'element' 'revalidation'
    case 115899:                    // 'namespace' 'revalidation'
    case 115932:                    // 'processing-instruction' 'revalidation'
    case 117331:                    // 'attribute' 'schema'
    case 117370:                    // 'element' 'schema'
    case 117435:                    // 'namespace' 'schema'
    case 117468:                    // 'processing-instruction' 'schema'
    case 117843:                    // 'attribute' 'schema-attribute'
    case 117882:                    // 'element' 'schema-attribute'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 117980:                    // 'processing-instruction' 'schema-attribute'
    case 118355:                    // 'attribute' 'schema-element'
    case 118394:                    // 'element' 'schema-element'
    case 118459:                    // 'namespace' 'schema-element'
    case 118492:                    // 'processing-instruction' 'schema-element'
    case 118867:                    // 'attribute' 'score'
    case 118906:                    // 'element' 'score'
    case 118971:                    // 'namespace' 'score'
    case 119004:                    // 'processing-instruction' 'score'
    case 119891:                    // 'attribute' 'self'
    case 119930:                    // 'element' 'self'
    case 119995:                    // 'namespace' 'self'
    case 120028:                    // 'processing-instruction' 'self'
    case 122451:                    // 'attribute' 'sliding'
    case 122490:                    // 'element' 'sliding'
    case 122555:                    // 'namespace' 'sliding'
    case 122588:                    // 'processing-instruction' 'sliding'
    case 122963:                    // 'attribute' 'some'
    case 123002:                    // 'element' 'some'
    case 123067:                    // 'namespace' 'some'
    case 123100:                    // 'processing-instruction' 'some'
    case 125523:                    // 'attribute' 'strict'
    case 125562:                    // 'element' 'strict'
    case 125627:                    // 'namespace' 'strict'
    case 125660:                    // 'processing-instruction' 'strict'
    case 126547:                    // 'attribute' 'structured-item'
    case 126586:                    // 'element' 'structured-item'
    case 127059:                    // 'attribute' 'switch'
    case 127098:                    // 'element' 'switch'
    case 127163:                    // 'namespace' 'switch'
    case 127196:                    // 'processing-instruction' 'switch'
    case 127571:                    // 'attribute' 'text'
    case 127610:                    // 'element' 'text'
    case 127675:                    // 'namespace' 'text'
    case 127708:                    // 'processing-instruction' 'text'
    case 130643:                    // 'attribute' 'true'
    case 130682:                    // 'element' 'true'
    case 130747:                    // 'namespace' 'true'
    case 130780:                    // 'processing-instruction' 'true'
    case 131155:                    // 'attribute' 'try'
    case 131194:                    // 'element' 'try'
    case 131259:                    // 'namespace' 'try'
    case 131292:                    // 'processing-instruction' 'try'
    case 131667:                    // 'attribute' 'tumbling'
    case 131706:                    // 'element' 'tumbling'
    case 131771:                    // 'namespace' 'tumbling'
    case 131804:                    // 'processing-instruction' 'tumbling'
    case 132179:                    // 'attribute' 'type'
    case 132218:                    // 'element' 'type'
    case 132283:                    // 'namespace' 'type'
    case 132316:                    // 'processing-instruction' 'type'
    case 132691:                    // 'attribute' 'typeswitch'
    case 132730:                    // 'element' 'typeswitch'
    case 132795:                    // 'namespace' 'typeswitch'
    case 132828:                    // 'processing-instruction' 'typeswitch'
    case 134227:                    // 'attribute' 'unordered'
    case 134266:                    // 'element' 'unordered'
    case 134331:                    // 'namespace' 'unordered'
    case 134364:                    // 'processing-instruction' 'unordered'
    case 134739:                    // 'attribute' 'updating'
    case 134778:                    // 'element' 'updating'
    case 134843:                    // 'namespace' 'updating'
    case 134876:                    // 'processing-instruction' 'updating'
    case 136275:                    // 'attribute' 'validate'
    case 136314:                    // 'element' 'validate'
    case 136379:                    // 'namespace' 'validate'
    case 136412:                    // 'processing-instruction' 'validate'
    case 136787:                    // 'attribute' 'value'
    case 136826:                    // 'element' 'value'
    case 136891:                    // 'namespace' 'value'
    case 136924:                    // 'processing-instruction' 'value'
    case 137299:                    // 'attribute' 'variable'
    case 137338:                    // 'element' 'variable'
    case 137403:                    // 'namespace' 'variable'
    case 137436:                    // 'processing-instruction' 'variable'
    case 137811:                    // 'attribute' 'version'
    case 137850:                    // 'element' 'version'
    case 137915:                    // 'namespace' 'version'
    case 137948:                    // 'processing-instruction' 'version'
    case 139859:                    // 'attribute' 'while'
    case 139898:                    // 'element' 'while'
    case 139963:                    // 'namespace' 'while'
    case 139996:                    // 'processing-instruction' 'while'
    case 143955:                    // 'attribute' '{'
    case 143969:                    // 'comment' '{'
    case 143992:                    // 'document' '{'
    case 143994:                    // 'element' '{'
    case 144059:                    // 'namespace' '{'
    case 144078:                    // 'ordered' '{'
    case 144092:                    // 'processing-instruction' '{'
    case 144121:                    // 'text' '{'
    case 144134:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26698:                     // 'ancestor' '::'
    case 26699:                     // 'ancestor-or-self' '::'
    case 26834:                     // 'parent' '::'
    case 26840:                     // 'preceding' '::'
    case 26841:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(229);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26698:                     // 'ancestor' '::'
    case 26699:                     // 'ancestor-or-self' '::'
    case 26834:                     // 'parent' '::'
    case 26840:                     // 'preceding' '::'
    case 26841:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(229);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 234:                       // 'self'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26707:                     // 'attribute' '::'
    case 26718:                     // 'child' '::'
    case 26736:                     // 'descendant' '::'
    case 26737:                     // 'descendant-or-self' '::'
    case 26761:                     // 'following' '::'
    case 26762:                     // 'following-sibling' '::'
    case 26858:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 234:                       // 'self'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26707:                     // 'attribute' '::'
    case 26718:                     // 'child' '::'
    case 26736:                     // 'descendant' '::'
    case 26737:                     // 'descendant-or-self' '::'
    case 26761:                     // 'following' '::'
    case 26762:                     // 'following-sibling' '::'
    case 26858:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 94:                        // 'child'
      shift(94);                    // 'child'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    default:
      shift(137);                   // 'following'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    default:
      shiftT(137);                  // 'following'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      shift(67);                    // '@'
    }
    lookahead1W(250);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      shiftT(67);                   // '@'
    }
    lookahead1W(250);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 46:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 46:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    default:
      shift(75);                    // 'ancestor-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    default:
      shiftT(75);                   // 'ancestor-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    shift(46);                      // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    shiftT(46);                     // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      shift(5);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      shiftT(5);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(236);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(274);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 35397)              // '[' '['
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -4;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      switch (lk)
      {
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      case 45:                      // '.'
        whitespace();
        parse_ObjectLookup();
        break;
      case -4:
        whitespace();
        parse_ArrayLookup();
        break;
      case 35909:                   // '[' ']'
        whitespace();
        parse_ArrayUnboxing();
        break;
      default:
        whitespace();
        parse_Predicate();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(236);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(274);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 35397)              // '[' '['
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            memoize(4, e0A, -1);
            lk = -6;
          }
          catch (p1A)
          {
            lk = -4;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -4);
          }
        }
      }
      switch (lk)
      {
      case 35:                      // '('
        try_ArgumentList();
        break;
      case 45:                      // '.'
        try_ObjectLookup();
        break;
      case -4:
        try_ArrayLookup();
        break;
      case 35909:                   // '[' ']'
        try_ArrayUnboxing();
        break;
      case -6:
        break;
      default:
        try_Predicate();
      }
    }
  }

  function parse_ObjectLookup()
  {
    eventHandler.startNonterminal("ObjectLookup", e0);
    shift(45);                      // '.'
    lookahead1W(252);               // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    case 35:                        // '('
      whitespace();
      parse_ParenthesizedExpr();
      break;
    case 31:                        // '$'
      whitespace();
      parse_VarRef();
      break;
    case 32:                        // '$$'
      whitespace();
      parse_ContextItemExpr();
      break;
    default:
      whitespace();
      parse_NCName();
    }
    eventHandler.endNonterminal("ObjectLookup", e0);
  }

  function try_ObjectLookup()
  {
    shiftT(45);                     // '.'
    lookahead1W(252);               // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 32:                        // '$$'
      try_ContextItemExpr();
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrayLookup()
  {
    eventHandler.startNonterminal("ArrayLookup", e0);
    shift(69);                      // '['
    lookahead1W(31);                // S^WS | '(:' | '['
    shift(69);                      // '['
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(70);                      // ']'
    lookahead1W(32);                // S^WS | '(:' | ']'
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayLookup", e0);
  }

  function try_ArrayLookup()
  {
    shiftT(69);                     // '['
    lookahead1W(31);                // S^WS | '(:' | '['
    shiftT(69);                     // '['
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(70);                     // ']'
    lookahead1W(32);                // S^WS | '(:' | ']'
    shiftT(70);                     // ']'
  }

  function parse_ArrayUnboxing()
  {
    eventHandler.startNonterminal("ArrayUnboxing", e0);
    shift(69);                      // '['
    lookahead1W(32);                // S^WS | '(:' | ']'
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayUnboxing", e0);
  }

  function try_ArrayUnboxing()
  {
    shiftT(69);                     // '['
    lookahead1W(32);                // S^WS | '(:' | ']'
    shiftT(70);                     // ']'
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(35);                      // '('
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(35);                     // '('
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        try_Argument();
      }
    }
    shiftT(38);                     // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(229);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(229);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(69);                      // '['
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(70);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(69);                     // '['
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(70);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    case 135:                       // 'false'
    case 255:                       // 'true'
      parse_BooleanLiteral();
      break;
    case 197:                       // 'null'
      parse_NullLiteral();
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    case 135:                       // 'false'
    case 255:                       // 'true'
      try_BooleanLiteral();
      break;
    case 197:                       // 'null'
      try_NullLiteral();
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_BooleanLiteral()
  {
    eventHandler.startNonterminal("BooleanLiteral", e0);
    switch (l1)
    {
    case 255:                       // 'true'
      shift(255);                   // 'true'
      break;
    default:
      shift(135);                   // 'false'
    }
    eventHandler.endNonterminal("BooleanLiteral", e0);
  }

  function try_BooleanLiteral()
  {
    switch (l1)
    {
    case 255:                       // 'true'
      shiftT(255);                  // 'true'
      break;
    default:
      shiftT(135);                  // 'false'
    }
  }

  function parse_NullLiteral()
  {
    eventHandler.startNonterminal("NullLiteral", e0);
    shift(197);                     // 'null'
    eventHandler.endNonterminal("NullLiteral", e0);
  }

  function try_NullLiteral()
  {
    shiftT(197);                    // 'null'
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shift(8);                     // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shift(9);                     // DecimalLiteral
      break;
    default:
      shift(10);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shiftT(8);                    // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shiftT(9);                    // DecimalLiteral
      break;
    default:
      shiftT(10);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(35);                      // '('
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(35);                     // '('
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    shiftT(38);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(32);                      // '$$'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(32);                     // '$$'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(206);                     // 'ordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(206);                    // 'ordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(262);                     // 'unordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(262);                    // 'unordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(65);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(65);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
      parse_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
      try_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(55);                      // '<'
    lookahead1(4);                  // QName
    shift(20);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      shift(49);                    // '/>'
      break;
    default:
      shift(62);                    // '>'
      for (;;)
      {
        lookahead1(196);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(57);                    // '</'
      lookahead1(4);                // QName
      shift(20);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shift(21);                  // S
      }
      lookahead1(8);                // '>'
      shift(62);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(55);                     // '<'
    lookahead1(4);                  // QName
    shiftT(20);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      shiftT(49);                   // '/>'
      break;
    default:
      shiftT(62);                   // '>'
      for (;;)
      {
        lookahead1(196);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(57);                   // '</'
      lookahead1(4);                // QName
      shiftT(20);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shiftT(21);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(62);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shift(21);                    // S
      lookahead1(92);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shift(20);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        lookahead1(7);              // '='
        shift(61);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shiftT(21);                   // S
      lookahead1(92);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shiftT(20);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        lookahead1(7);              // '='
        shiftT(61);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shift(28);                    // '"'
      for (;;)
      {
        lookahead1(185);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shift(13);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(28);                    // '"'
      break;
    default:
      shift(34);                    // "'"
      for (;;)
      {
        lookahead1(186);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shift(14);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(34);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shiftT(28);                   // '"'
      for (;;)
      {
        lookahead1(185);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shiftT(13);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(28);                   // '"'
      break;
    default:
      shiftT(34);                   // "'"
      for (;;)
      {
        lookahead1(186);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shiftT(14);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(34);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shift(16);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shiftT(16);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shift(17);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shiftT(17);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shift(4);                     // CDataSection
      break;
    case 15:                        // ElementContentChar
      shift(15);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shiftT(4);                    // CDataSection
      break;
    case 15:                        // ElementContentChar
      shiftT(15);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(56);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(2);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(44);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(56);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(2);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(44);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(60);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(18);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(2);                // DirPIContents
      shift(3);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(66);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(60);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(18);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(3);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(66);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 120:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 122:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 187:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 249:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 120:                       // 'document'
      try_CompDocConstructor();
      break;
    case 122:                       // 'element'
      try_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 187:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 249:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(122);                     // 'element'
    lookahead1W(251);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(122);                    // 'element'
    lookahead1W(251);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(287);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(187);                     // 'namespace'
    lookahead1W(243);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_URIExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(187);                    // 'namespace'
    lookahead1W(243);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_PrefixExpr();
      shiftT(287);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_URIExpr();
    shiftT(287);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(29);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(8);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(29);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(8);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(112);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    shiftT(38);                     // ')'
    lookahead1W(112);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      shiftT(80);                   // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 65)                   // '?'
    {
      shift(65);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 65)                   // '?'
    {
      shiftT(65);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(80);                      // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(80);                     // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 35:                        // '('
      lookahead2W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      break;
    case 125:                       // 'empty-sequence'
      lookahead2W(234);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18045:                     // 'empty-sequence' '('
    case 19491:                     // '(' ')'
      if (l1 == 125)                // 'empty-sequence'
      {
        shift(125);                 // 'empty-sequence'
      }
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(230);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 35:                        // '('
      lookahead2W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      break;
    case 125:                       // 'empty-sequence'
      lookahead2W(234);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18045:                     // 'empty-sequence' '('
    case 19491:                     // '(' ')'
      if (l1 == 125)                // 'empty-sequence'
      {
        shiftT(125);                // 'empty-sequence'
      }
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(230);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      shift(65);                    // '?'
      break;
    case 40:                        // '*'
      shift(40);                    // '*'
      break;
    default:
      shift(41);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      shiftT(65);                   // '?'
      break;
    case 40:                        // '*'
      shiftT(40);                   // '*'
      break;
    default:
      shiftT(41);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 79:                        // 'array'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 147:                       // 'function'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 198:                       // 'object'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 249:                       // 'text'
      lookahead2W(234);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12879                 // 'array' EOF
     || lk == 12969                 // 'json-item' EOF
     || lk == 12998                 // 'object' EOF
     || lk == 13047                 // 'structured-item' EOF
     || lk == 13903                 // 'array' '!='
     || lk == 13993                 // 'json-item' '!='
     || lk == 14022                 // 'object' '!='
     || lk == 14071                 // 'structured-item' '!='
     || lk == 19535                 // 'array' ')'
     || lk == 19625                 // 'json-item' ')'
     || lk == 19654                 // 'object' ')'
     || lk == 19703                 // 'structured-item' ')'
     || lk == 20047                 // 'array' '*'
     || lk == 20137                 // 'json-item' '*'
     || lk == 20166                 // 'object' '*'
     || lk == 20215                 // 'structured-item' '*'
     || lk == 20559                 // 'array' '*'
     || lk == 20649                 // 'json-item' '*'
     || lk == 20678                 // 'object' '*'
     || lk == 20727                 // 'structured-item' '*'
     || lk == 21071                 // 'array' '+'
     || lk == 21161                 // 'json-item' '+'
     || lk == 21190                 // 'object' '+'
     || lk == 21239                 // 'structured-item' '+'
     || lk == 21583                 // 'array' ','
     || lk == 21673                 // 'json-item' ','
     || lk == 21702                 // 'object' ','
     || lk == 21751                 // 'structured-item' ','
     || lk == 22095                 // 'array' '-'
     || lk == 22185                 // 'json-item' '-'
     || lk == 22214                 // 'object' '-'
     || lk == 22263                 // 'structured-item' '-'
     || lk == 25679                 // 'array' ':'
     || lk == 25769                 // 'json-item' ':'
     || lk == 25798                 // 'object' ':'
     || lk == 25847                 // 'structured-item' ':'
     || lk == 27215                 // 'array' ':='
     || lk == 27305                 // 'json-item' ':='
     || lk == 27334                 // 'object' ':='
     || lk == 27383                 // 'structured-item' ':='
     || lk == 27727                 // 'array' ';'
     || lk == 27817                 // 'json-item' ';'
     || lk == 27846                 // 'object' ';'
     || lk == 27895                 // 'structured-item' ';'
     || lk == 28239                 // 'array' '<'
     || lk == 28329                 // 'json-item' '<'
     || lk == 28358                 // 'object' '<'
     || lk == 28407                 // 'structured-item' '<'
     || lk == 29775                 // 'array' '<<'
     || lk == 29865                 // 'json-item' '<<'
     || lk == 29894                 // 'object' '<<'
     || lk == 29943                 // 'structured-item' '<<'
     || lk == 30287                 // 'array' '<='
     || lk == 30377                 // 'json-item' '<='
     || lk == 30406                 // 'object' '<='
     || lk == 30455                 // 'structured-item' '<='
     || lk == 31311                 // 'array' '='
     || lk == 31401                 // 'json-item' '='
     || lk == 31430                 // 'object' '='
     || lk == 31479                 // 'structured-item' '='
     || lk == 31823                 // 'array' '>'
     || lk == 31913                 // 'json-item' '>'
     || lk == 31942                 // 'object' '>'
     || lk == 31991                 // 'structured-item' '>'
     || lk == 32335                 // 'array' '>='
     || lk == 32425                 // 'json-item' '>='
     || lk == 32454                 // 'object' '>='
     || lk == 32503                 // 'structured-item' '>='
     || lk == 32847                 // 'array' '>>'
     || lk == 32937                 // 'json-item' '>>'
     || lk == 32966                 // 'object' '>>'
     || lk == 33015                 // 'structured-item' '>>'
     || lk == 33359                 // 'array' '?'
     || lk == 33449                 // 'json-item' '?'
     || lk == 33478                 // 'object' '?'
     || lk == 33527                 // 'structured-item' '?'
     || lk == 35919                 // 'array' ']'
     || lk == 36009                 // 'json-item' ']'
     || lk == 36038                 // 'object' ']'
     || lk == 36087                 // 'structured-item' ']'
     || lk == 36431                 // 'array' 'after'
     || lk == 36521                 // 'json-item' 'after'
     || lk == 36550                 // 'object' 'after'
     || lk == 36599                 // 'structured-item' 'after'
     || lk == 37455                 // 'array' 'allowing'
     || lk == 37545                 // 'json-item' 'allowing'
     || lk == 37574                 // 'object' 'allowing'
     || lk == 37623                 // 'structured-item' 'allowing'
     || lk == 38991                 // 'array' 'and'
     || lk == 39081                 // 'json-item' 'and'
     || lk == 39110                 // 'object' 'and'
     || lk == 39159                 // 'structured-item' 'and'
     || lk == 41039                 // 'array' 'as'
     || lk == 41129                 // 'json-item' 'as'
     || lk == 41158                 // 'object' 'as'
     || lk == 41207                 // 'structured-item' 'as'
     || lk == 41551                 // 'array' 'ascending'
     || lk == 41641                 // 'json-item' 'ascending'
     || lk == 41670                 // 'object' 'ascending'
     || lk == 41719                 // 'structured-item' 'ascending'
     || lk == 42063                 // 'array' 'at'
     || lk == 42153                 // 'json-item' 'at'
     || lk == 42182                 // 'object' 'at'
     || lk == 42231                 // 'structured-item' 'at'
     || lk == 43599                 // 'array' 'before'
     || lk == 43689                 // 'json-item' 'before'
     || lk == 43718                 // 'object' 'before'
     || lk == 43767                 // 'structured-item' 'before'
     || lk == 45647                 // 'array' 'case'
     || lk == 45737                 // 'json-item' 'case'
     || lk == 45766                 // 'object' 'case'
     || lk == 45815                 // 'structured-item' 'case'
     || lk == 48719                 // 'array' 'collation'
     || lk == 48809                 // 'json-item' 'collation'
     || lk == 48838                 // 'object' 'collation'
     || lk == 48887                 // 'structured-item' 'collation'
     || lk == 51279                 // 'array' 'contains'
     || lk == 51369                 // 'json-item' 'contains'
     || lk == 51398                 // 'object' 'contains'
     || lk == 51447                 // 'structured-item' 'contains'
     || lk == 54351                 // 'array' 'count'
     || lk == 54441                 // 'json-item' 'count'
     || lk == 54470                 // 'object' 'count'
     || lk == 54519                 // 'structured-item' 'count'
     || lk == 56399                 // 'array' 'default'
     || lk == 56489                 // 'json-item' 'default'
     || lk == 56518                 // 'object' 'default'
     || lk == 56567                 // 'structured-item' 'default'
     || lk == 58447                 // 'array' 'descending'
     || lk == 58537                 // 'json-item' 'descending'
     || lk == 58566                 // 'object' 'descending'
     || lk == 58615                 // 'structured-item' 'descending'
     || lk == 61007                 // 'array' 'div'
     || lk == 61097                 // 'json-item' 'div'
     || lk == 61126                 // 'object' 'div'
     || lk == 61175                 // 'structured-item' 'div'
     || lk == 63055                 // 'array' 'else'
     || lk == 63145                 // 'json-item' 'else'
     || lk == 63174                 // 'object' 'else'
     || lk == 63223                 // 'structured-item' 'else'
     || lk == 63567                 // 'array' 'empty'
     || lk == 63657                 // 'json-item' 'empty'
     || lk == 63686                 // 'object' 'empty'
     || lk == 63735                 // 'structured-item' 'empty'
     || lk == 65103                 // 'array' 'end'
     || lk == 65193                 // 'json-item' 'end'
     || lk == 65222                 // 'object' 'end'
     || lk == 65271                 // 'structured-item' 'end'
     || lk == 66127                 // 'array' 'eq'
     || lk == 66217                 // 'json-item' 'eq'
     || lk == 66246                 // 'object' 'eq'
     || lk == 66295                 // 'structured-item' 'eq'
     || lk == 67663                 // 'array' 'except'
     || lk == 67753                 // 'json-item' 'except'
     || lk == 67782                 // 'object' 'except'
     || lk == 67831                 // 'structured-item' 'except'
     || lk == 68687                 // 'array' 'external'
     || lk == 68777                 // 'json-item' 'external'
     || lk == 68806                 // 'object' 'external'
     || lk == 68855                 // 'structured-item' 'external'
     || lk == 71247                 // 'array' 'for'
     || lk == 71337                 // 'json-item' 'for'
     || lk == 71366                 // 'object' 'for'
     || lk == 71415                 // 'structured-item' 'for'
     || lk == 72783                 // 'array' 'from'
     || lk == 72873                 // 'json-item' 'from'
     || lk == 72902                 // 'object' 'from'
     || lk == 72951                 // 'structured-item' 'from'
     || lk == 75855                 // 'array' 'ge'
     || lk == 75945                 // 'json-item' 'ge'
     || lk == 75974                 // 'object' 'ge'
     || lk == 76023                 // 'structured-item' 'ge'
     || lk == 76879                 // 'array' 'group'
     || lk == 76969                 // 'json-item' 'group'
     || lk == 76998                 // 'object' 'group'
     || lk == 77047                 // 'structured-item' 'group'
     || lk == 77903                 // 'array' 'gt'
     || lk == 77993                 // 'json-item' 'gt'
     || lk == 78022                 // 'object' 'gt'
     || lk == 78071                 // 'structured-item' 'gt'
     || lk == 78415                 // 'array' 'idiv'
     || lk == 78505                 // 'json-item' 'idiv'
     || lk == 78534                 // 'object' 'idiv'
     || lk == 78583                 // 'structured-item' 'idiv'
     || lk == 79951                 // 'array' 'in'
     || lk == 80041                 // 'json-item' 'in'
     || lk == 80070                 // 'object' 'in'
     || lk == 80119                 // 'structured-item' 'in'
     || lk == 83023                 // 'array' 'instance'
     || lk == 83113                 // 'json-item' 'instance'
     || lk == 83142                 // 'object' 'instance'
     || lk == 83191                 // 'structured-item' 'instance'
     || lk == 84047                 // 'array' 'intersect'
     || lk == 84137                 // 'json-item' 'intersect'
     || lk == 84166                 // 'object' 'intersect'
     || lk == 84215                 // 'structured-item' 'intersect'
     || lk == 84559                 // 'array' 'into'
     || lk == 84649                 // 'json-item' 'into'
     || lk == 84678                 // 'object' 'into'
     || lk == 84727                 // 'structured-item' 'into'
     || lk == 85071                 // 'array' 'is'
     || lk == 85161                 // 'json-item' 'is'
     || lk == 85190                 // 'object' 'is'
     || lk == 85239                 // 'structured-item' 'is'
     || lk == 89679                 // 'array' 'le'
     || lk == 89769                 // 'json-item' 'le'
     || lk == 89798                 // 'object' 'le'
     || lk == 89847                 // 'structured-item' 'le'
     || lk == 90703                 // 'array' 'let'
     || lk == 90793                 // 'json-item' 'let'
     || lk == 90822                 // 'object' 'let'
     || lk == 90871                 // 'structured-item' 'let'
     || lk == 92751                 // 'array' 'lt'
     || lk == 92841                 // 'json-item' 'lt'
     || lk == 92870                 // 'object' 'lt'
     || lk == 92919                 // 'structured-item' 'lt'
     || lk == 93775                 // 'array' 'mod'
     || lk == 93865                 // 'json-item' 'mod'
     || lk == 93894                 // 'object' 'mod'
     || lk == 93943                 // 'structured-item' 'mod'
     || lk == 94287                 // 'array' 'modify'
     || lk == 94377                 // 'json-item' 'modify'
     || lk == 94406                 // 'object' 'modify'
     || lk == 94455                 // 'structured-item' 'modify'
     || lk == 96847                 // 'array' 'ne'
     || lk == 96937                 // 'json-item' 'ne'
     || lk == 96966                 // 'object' 'ne'
     || lk == 97015                 // 'structured-item' 'ne'
     || lk == 103503                // 'array' 'only'
     || lk == 103593                // 'json-item' 'only'
     || lk == 103622                // 'object' 'only'
     || lk == 103671                // 'structured-item' 'only'
     || lk == 104527                // 'array' 'or'
     || lk == 104617                // 'json-item' 'or'
     || lk == 104646                // 'object' 'or'
     || lk == 104695                // 'structured-item' 'or'
     || lk == 105039                // 'array' 'order'
     || lk == 105129                // 'json-item' 'order'
     || lk == 105158                // 'object' 'order'
     || lk == 105207                // 'structured-item' 'order'
     || lk == 107087                // 'array' 'paragraphs'
     || lk == 107177                // 'json-item' 'paragraphs'
     || lk == 107206                // 'object' 'paragraphs'
     || lk == 107255                // 'structured-item' 'paragraphs'
     || lk == 114767                // 'array' 'return'
     || lk == 114857                // 'json-item' 'return'
     || lk == 114886                // 'object' 'return'
     || lk == 114935                // 'structured-item' 'return'
     || lk == 116815                // 'array' 'satisfies'
     || lk == 116905                // 'json-item' 'satisfies'
     || lk == 116934                // 'object' 'satisfies'
     || lk == 116983                // 'structured-item' 'satisfies'
     || lk == 118863                // 'array' 'score'
     || lk == 118953                // 'json-item' 'score'
     || lk == 118982                // 'object' 'score'
     || lk == 119031                // 'structured-item' 'score'
     || lk == 119375                // 'array' 'select'
     || lk == 119465                // 'json-item' 'select'
     || lk == 119494                // 'object' 'select'
     || lk == 119543                // 'structured-item' 'select'
     || lk == 121423                // 'array' 'sentences'
     || lk == 121513                // 'json-item' 'sentences'
     || lk == 121542                // 'object' 'sentences'
     || lk == 121591                // 'structured-item' 'sentences'
     || lk == 123471                // 'array' 'stable'
     || lk == 123561                // 'json-item' 'stable'
     || lk == 123590                // 'object' 'stable'
     || lk == 123639                // 'structured-item' 'stable'
     || lk == 123983                // 'array' 'start'
     || lk == 124073                // 'json-item' 'start'
     || lk == 124102                // 'object' 'start'
     || lk == 124151                // 'structured-item' 'start'
     || lk == 129103                // 'array' 'times'
     || lk == 129193                // 'json-item' 'times'
     || lk == 129222                // 'object' 'times'
     || lk == 129271                // 'structured-item' 'times'
     || lk == 129615                // 'array' 'to'
     || lk == 129705                // 'json-item' 'to'
     || lk == 129734                // 'object' 'to'
     || lk == 129783                // 'structured-item' 'to'
     || lk == 133199                // 'array' 'union'
     || lk == 133289                // 'json-item' 'union'
     || lk == 133318                // 'object' 'union'
     || lk == 133367                // 'structured-item' 'union'
     || lk == 139343                // 'array' 'where'
     || lk == 139433                // 'json-item' 'where'
     || lk == 139462                // 'object' 'where'
     || lk == 139511                // 'structured-item' 'where'
     || lk == 141391                // 'array' 'with'
     || lk == 141481                // 'json-item' 'with'
     || lk == 141510                // 'object' 'with'
     || lk == 141559                // 'structured-item' 'with'
     || lk == 142927                // 'array' 'words'
     || lk == 143017                // 'json-item' 'words'
     || lk == 143046                // 'object' 'words'
     || lk == 143095                // 'structured-item' 'words'
     || lk == 143951                // 'array' '{'
     || lk == 144041                // 'json-item' '{'
     || lk == 144070                // 'object' '{'
     || lk == 144119                // 'structured-item' '{'
     || lk == 145487                // 'array' '|'
     || lk == 145577                // 'json-item' '|'
     || lk == 145606                // 'object' '|'
     || lk == 145655                // 'structured-item' '|'
     || lk == 145999                // 'array' '||'
     || lk == 146089                // 'json-item' '||'
     || lk == 146118                // 'object' '||'
     || lk == 146167                // 'structured-item' '||'
     || lk == 146511                // 'array' '|}'
     || lk == 146601                // 'json-item' '|}'
     || lk == 146630                // 'object' '|}'
     || lk == 146679                // 'structured-item' '|}'
     || lk == 147023                // 'array' '}'
     || lk == 147113                // 'json-item' '}'
     || lk == 147142                // 'object' '}'
     || lk == 147191)               // 'structured-item' '}'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_AtomicOrUnionType();
          lk = -4;
        }
        catch (p4A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_JSONTest();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -7;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      parse_KindTest();
      break;
    case 18087:                     // 'item' '('
      shift(167);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case -6:
    case 17999:                     // 'array' '('
    case 18089:                     // 'json-item' '('
    case 18118:                     // 'object' '('
      parse_JSONTest();
      break;
    case -7:
    case 18167:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 79:                        // 'array'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 147:                       // 'function'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 198:                       // 'object'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 249:                       // 'text'
      lookahead2W(234);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12879                 // 'array' EOF
     || lk == 12969                 // 'json-item' EOF
     || lk == 12998                 // 'object' EOF
     || lk == 13047                 // 'structured-item' EOF
     || lk == 13903                 // 'array' '!='
     || lk == 13993                 // 'json-item' '!='
     || lk == 14022                 // 'object' '!='
     || lk == 14071                 // 'structured-item' '!='
     || lk == 19535                 // 'array' ')'
     || lk == 19625                 // 'json-item' ')'
     || lk == 19654                 // 'object' ')'
     || lk == 19703                 // 'structured-item' ')'
     || lk == 20047                 // 'array' '*'
     || lk == 20137                 // 'json-item' '*'
     || lk == 20166                 // 'object' '*'
     || lk == 20215                 // 'structured-item' '*'
     || lk == 20559                 // 'array' '*'
     || lk == 20649                 // 'json-item' '*'
     || lk == 20678                 // 'object' '*'
     || lk == 20727                 // 'structured-item' '*'
     || lk == 21071                 // 'array' '+'
     || lk == 21161                 // 'json-item' '+'
     || lk == 21190                 // 'object' '+'
     || lk == 21239                 // 'structured-item' '+'
     || lk == 21583                 // 'array' ','
     || lk == 21673                 // 'json-item' ','
     || lk == 21702                 // 'object' ','
     || lk == 21751                 // 'structured-item' ','
     || lk == 22095                 // 'array' '-'
     || lk == 22185                 // 'json-item' '-'
     || lk == 22214                 // 'object' '-'
     || lk == 22263                 // 'structured-item' '-'
     || lk == 25679                 // 'array' ':'
     || lk == 25769                 // 'json-item' ':'
     || lk == 25798                 // 'object' ':'
     || lk == 25847                 // 'structured-item' ':'
     || lk == 27215                 // 'array' ':='
     || lk == 27305                 // 'json-item' ':='
     || lk == 27334                 // 'object' ':='
     || lk == 27383                 // 'structured-item' ':='
     || lk == 27727                 // 'array' ';'
     || lk == 27817                 // 'json-item' ';'
     || lk == 27846                 // 'object' ';'
     || lk == 27895                 // 'structured-item' ';'
     || lk == 28239                 // 'array' '<'
     || lk == 28329                 // 'json-item' '<'
     || lk == 28358                 // 'object' '<'
     || lk == 28407                 // 'structured-item' '<'
     || lk == 29775                 // 'array' '<<'
     || lk == 29865                 // 'json-item' '<<'
     || lk == 29894                 // 'object' '<<'
     || lk == 29943                 // 'structured-item' '<<'
     || lk == 30287                 // 'array' '<='
     || lk == 30377                 // 'json-item' '<='
     || lk == 30406                 // 'object' '<='
     || lk == 30455                 // 'structured-item' '<='
     || lk == 31311                 // 'array' '='
     || lk == 31401                 // 'json-item' '='
     || lk == 31430                 // 'object' '='
     || lk == 31479                 // 'structured-item' '='
     || lk == 31823                 // 'array' '>'
     || lk == 31913                 // 'json-item' '>'
     || lk == 31942                 // 'object' '>'
     || lk == 31991                 // 'structured-item' '>'
     || lk == 32335                 // 'array' '>='
     || lk == 32425                 // 'json-item' '>='
     || lk == 32454                 // 'object' '>='
     || lk == 32503                 // 'structured-item' '>='
     || lk == 32847                 // 'array' '>>'
     || lk == 32937                 // 'json-item' '>>'
     || lk == 32966                 // 'object' '>>'
     || lk == 33015                 // 'structured-item' '>>'
     || lk == 33359                 // 'array' '?'
     || lk == 33449                 // 'json-item' '?'
     || lk == 33478                 // 'object' '?'
     || lk == 33527                 // 'structured-item' '?'
     || lk == 35919                 // 'array' ']'
     || lk == 36009                 // 'json-item' ']'
     || lk == 36038                 // 'object' ']'
     || lk == 36087                 // 'structured-item' ']'
     || lk == 36431                 // 'array' 'after'
     || lk == 36521                 // 'json-item' 'after'
     || lk == 36550                 // 'object' 'after'
     || lk == 36599                 // 'structured-item' 'after'
     || lk == 37455                 // 'array' 'allowing'
     || lk == 37545                 // 'json-item' 'allowing'
     || lk == 37574                 // 'object' 'allowing'
     || lk == 37623                 // 'structured-item' 'allowing'
     || lk == 38991                 // 'array' 'and'
     || lk == 39081                 // 'json-item' 'and'
     || lk == 39110                 // 'object' 'and'
     || lk == 39159                 // 'structured-item' 'and'
     || lk == 41039                 // 'array' 'as'
     || lk == 41129                 // 'json-item' 'as'
     || lk == 41158                 // 'object' 'as'
     || lk == 41207                 // 'structured-item' 'as'
     || lk == 41551                 // 'array' 'ascending'
     || lk == 41641                 // 'json-item' 'ascending'
     || lk == 41670                 // 'object' 'ascending'
     || lk == 41719                 // 'structured-item' 'ascending'
     || lk == 42063                 // 'array' 'at'
     || lk == 42153                 // 'json-item' 'at'
     || lk == 42182                 // 'object' 'at'
     || lk == 42231                 // 'structured-item' 'at'
     || lk == 43599                 // 'array' 'before'
     || lk == 43689                 // 'json-item' 'before'
     || lk == 43718                 // 'object' 'before'
     || lk == 43767                 // 'structured-item' 'before'
     || lk == 45647                 // 'array' 'case'
     || lk == 45737                 // 'json-item' 'case'
     || lk == 45766                 // 'object' 'case'
     || lk == 45815                 // 'structured-item' 'case'
     || lk == 48719                 // 'array' 'collation'
     || lk == 48809                 // 'json-item' 'collation'
     || lk == 48838                 // 'object' 'collation'
     || lk == 48887                 // 'structured-item' 'collation'
     || lk == 51279                 // 'array' 'contains'
     || lk == 51369                 // 'json-item' 'contains'
     || lk == 51398                 // 'object' 'contains'
     || lk == 51447                 // 'structured-item' 'contains'
     || lk == 54351                 // 'array' 'count'
     || lk == 54441                 // 'json-item' 'count'
     || lk == 54470                 // 'object' 'count'
     || lk == 54519                 // 'structured-item' 'count'
     || lk == 56399                 // 'array' 'default'
     || lk == 56489                 // 'json-item' 'default'
     || lk == 56518                 // 'object' 'default'
     || lk == 56567                 // 'structured-item' 'default'
     || lk == 58447                 // 'array' 'descending'
     || lk == 58537                 // 'json-item' 'descending'
     || lk == 58566                 // 'object' 'descending'
     || lk == 58615                 // 'structured-item' 'descending'
     || lk == 61007                 // 'array' 'div'
     || lk == 61097                 // 'json-item' 'div'
     || lk == 61126                 // 'object' 'div'
     || lk == 61175                 // 'structured-item' 'div'
     || lk == 63055                 // 'array' 'else'
     || lk == 63145                 // 'json-item' 'else'
     || lk == 63174                 // 'object' 'else'
     || lk == 63223                 // 'structured-item' 'else'
     || lk == 63567                 // 'array' 'empty'
     || lk == 63657                 // 'json-item' 'empty'
     || lk == 63686                 // 'object' 'empty'
     || lk == 63735                 // 'structured-item' 'empty'
     || lk == 65103                 // 'array' 'end'
     || lk == 65193                 // 'json-item' 'end'
     || lk == 65222                 // 'object' 'end'
     || lk == 65271                 // 'structured-item' 'end'
     || lk == 66127                 // 'array' 'eq'
     || lk == 66217                 // 'json-item' 'eq'
     || lk == 66246                 // 'object' 'eq'
     || lk == 66295                 // 'structured-item' 'eq'
     || lk == 67663                 // 'array' 'except'
     || lk == 67753                 // 'json-item' 'except'
     || lk == 67782                 // 'object' 'except'
     || lk == 67831                 // 'structured-item' 'except'
     || lk == 68687                 // 'array' 'external'
     || lk == 68777                 // 'json-item' 'external'
     || lk == 68806                 // 'object' 'external'
     || lk == 68855                 // 'structured-item' 'external'
     || lk == 71247                 // 'array' 'for'
     || lk == 71337                 // 'json-item' 'for'
     || lk == 71366                 // 'object' 'for'
     || lk == 71415                 // 'structured-item' 'for'
     || lk == 72783                 // 'array' 'from'
     || lk == 72873                 // 'json-item' 'from'
     || lk == 72902                 // 'object' 'from'
     || lk == 72951                 // 'structured-item' 'from'
     || lk == 75855                 // 'array' 'ge'
     || lk == 75945                 // 'json-item' 'ge'
     || lk == 75974                 // 'object' 'ge'
     || lk == 76023                 // 'structured-item' 'ge'
     || lk == 76879                 // 'array' 'group'
     || lk == 76969                 // 'json-item' 'group'
     || lk == 76998                 // 'object' 'group'
     || lk == 77047                 // 'structured-item' 'group'
     || lk == 77903                 // 'array' 'gt'
     || lk == 77993                 // 'json-item' 'gt'
     || lk == 78022                 // 'object' 'gt'
     || lk == 78071                 // 'structured-item' 'gt'
     || lk == 78415                 // 'array' 'idiv'
     || lk == 78505                 // 'json-item' 'idiv'
     || lk == 78534                 // 'object' 'idiv'
     || lk == 78583                 // 'structured-item' 'idiv'
     || lk == 79951                 // 'array' 'in'
     || lk == 80041                 // 'json-item' 'in'
     || lk == 80070                 // 'object' 'in'
     || lk == 80119                 // 'structured-item' 'in'
     || lk == 83023                 // 'array' 'instance'
     || lk == 83113                 // 'json-item' 'instance'
     || lk == 83142                 // 'object' 'instance'
     || lk == 83191                 // 'structured-item' 'instance'
     || lk == 84047                 // 'array' 'intersect'
     || lk == 84137                 // 'json-item' 'intersect'
     || lk == 84166                 // 'object' 'intersect'
     || lk == 84215                 // 'structured-item' 'intersect'
     || lk == 84559                 // 'array' 'into'
     || lk == 84649                 // 'json-item' 'into'
     || lk == 84678                 // 'object' 'into'
     || lk == 84727                 // 'structured-item' 'into'
     || lk == 85071                 // 'array' 'is'
     || lk == 85161                 // 'json-item' 'is'
     || lk == 85190                 // 'object' 'is'
     || lk == 85239                 // 'structured-item' 'is'
     || lk == 89679                 // 'array' 'le'
     || lk == 89769                 // 'json-item' 'le'
     || lk == 89798                 // 'object' 'le'
     || lk == 89847                 // 'structured-item' 'le'
     || lk == 90703                 // 'array' 'let'
     || lk == 90793                 // 'json-item' 'let'
     || lk == 90822                 // 'object' 'let'
     || lk == 90871                 // 'structured-item' 'let'
     || lk == 92751                 // 'array' 'lt'
     || lk == 92841                 // 'json-item' 'lt'
     || lk == 92870                 // 'object' 'lt'
     || lk == 92919                 // 'structured-item' 'lt'
     || lk == 93775                 // 'array' 'mod'
     || lk == 93865                 // 'json-item' 'mod'
     || lk == 93894                 // 'object' 'mod'
     || lk == 93943                 // 'structured-item' 'mod'
     || lk == 94287                 // 'array' 'modify'
     || lk == 94377                 // 'json-item' 'modify'
     || lk == 94406                 // 'object' 'modify'
     || lk == 94455                 // 'structured-item' 'modify'
     || lk == 96847                 // 'array' 'ne'
     || lk == 96937                 // 'json-item' 'ne'
     || lk == 96966                 // 'object' 'ne'
     || lk == 97015                 // 'structured-item' 'ne'
     || lk == 103503                // 'array' 'only'
     || lk == 103593                // 'json-item' 'only'
     || lk == 103622                // 'object' 'only'
     || lk == 103671                // 'structured-item' 'only'
     || lk == 104527                // 'array' 'or'
     || lk == 104617                // 'json-item' 'or'
     || lk == 104646                // 'object' 'or'
     || lk == 104695                // 'structured-item' 'or'
     || lk == 105039                // 'array' 'order'
     || lk == 105129                // 'json-item' 'order'
     || lk == 105158                // 'object' 'order'
     || lk == 105207                // 'structured-item' 'order'
     || lk == 107087                // 'array' 'paragraphs'
     || lk == 107177                // 'json-item' 'paragraphs'
     || lk == 107206                // 'object' 'paragraphs'
     || lk == 107255                // 'structured-item' 'paragraphs'
     || lk == 114767                // 'array' 'return'
     || lk == 114857                // 'json-item' 'return'
     || lk == 114886                // 'object' 'return'
     || lk == 114935                // 'structured-item' 'return'
     || lk == 116815                // 'array' 'satisfies'
     || lk == 116905                // 'json-item' 'satisfies'
     || lk == 116934                // 'object' 'satisfies'
     || lk == 116983                // 'structured-item' 'satisfies'
     || lk == 118863                // 'array' 'score'
     || lk == 118953                // 'json-item' 'score'
     || lk == 118982                // 'object' 'score'
     || lk == 119031                // 'structured-item' 'score'
     || lk == 119375                // 'array' 'select'
     || lk == 119465                // 'json-item' 'select'
     || lk == 119494                // 'object' 'select'
     || lk == 119543                // 'structured-item' 'select'
     || lk == 121423                // 'array' 'sentences'
     || lk == 121513                // 'json-item' 'sentences'
     || lk == 121542                // 'object' 'sentences'
     || lk == 121591                // 'structured-item' 'sentences'
     || lk == 123471                // 'array' 'stable'
     || lk == 123561                // 'json-item' 'stable'
     || lk == 123590                // 'object' 'stable'
     || lk == 123639                // 'structured-item' 'stable'
     || lk == 123983                // 'array' 'start'
     || lk == 124073                // 'json-item' 'start'
     || lk == 124102                // 'object' 'start'
     || lk == 124151                // 'structured-item' 'start'
     || lk == 129103                // 'array' 'times'
     || lk == 129193                // 'json-item' 'times'
     || lk == 129222                // 'object' 'times'
     || lk == 129271                // 'structured-item' 'times'
     || lk == 129615                // 'array' 'to'
     || lk == 129705                // 'json-item' 'to'
     || lk == 129734                // 'object' 'to'
     || lk == 129783                // 'structured-item' 'to'
     || lk == 133199                // 'array' 'union'
     || lk == 133289                // 'json-item' 'union'
     || lk == 133318                // 'object' 'union'
     || lk == 133367                // 'structured-item' 'union'
     || lk == 139343                // 'array' 'where'
     || lk == 139433                // 'json-item' 'where'
     || lk == 139462                // 'object' 'where'
     || lk == 139511                // 'structured-item' 'where'
     || lk == 141391                // 'array' 'with'
     || lk == 141481                // 'json-item' 'with'
     || lk == 141510                // 'object' 'with'
     || lk == 141559                // 'structured-item' 'with'
     || lk == 142927                // 'array' 'words'
     || lk == 143017                // 'json-item' 'words'
     || lk == 143046                // 'object' 'words'
     || lk == 143095                // 'structured-item' 'words'
     || lk == 143951                // 'array' '{'
     || lk == 144041                // 'json-item' '{'
     || lk == 144070                // 'object' '{'
     || lk == 144119                // 'structured-item' '{'
     || lk == 145487                // 'array' '|'
     || lk == 145577                // 'json-item' '|'
     || lk == 145606                // 'object' '|'
     || lk == 145655                // 'structured-item' '|'
     || lk == 145999                // 'array' '||'
     || lk == 146089                // 'json-item' '||'
     || lk == 146118                // 'object' '||'
     || lk == 146167                // 'structured-item' '||'
     || lk == 146511                // 'array' '|}'
     || lk == 146601                // 'json-item' '|}'
     || lk == 146630                // 'object' '|}'
     || lk == 146679                // 'structured-item' '|}'
     || lk == 147023                // 'array' '}'
     || lk == 147113                // 'json-item' '}'
     || lk == 147142                // 'object' '}'
     || lk == 147191)               // 'structured-item' '}'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_AtomicOrUnionType();
          memoize(5, e0A, -4);
          lk = -8;
        }
        catch (p4A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_JSONTest();
            memoize(5, e0A, -6);
            lk = -8;
          }
          catch (p6A)
          {
            lk = -7;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(5, e0A, -7);
          }
        }
      }
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      try_KindTest();
      break;
    case 18087:                     // 'item' '('
      shiftT(167);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case -6:
    case 17999:                     // 'array' '('
    case 18089:                     // 'json-item' '('
    case 18118:                     // 'object' '('
      try_JSONTest();
      break;
    case -7:
    case 18167:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 169:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 198:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 169:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 198:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(247);                     // 'structured-item'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(247);                    // 'structured-item'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(169);                     // 'json-item'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(169);                    // 'json-item'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(198);                     // 'object'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(198);                    // 'object'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(79);                      // 'array'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(79);                     // 'array'
    lookahead1W(234);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 121:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 122:                       // 'element'
      parse_ElementTest();
      break;
    case 83:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 231:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 230:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 220:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 249:                       // 'text'
      parse_TextTest();
      break;
    case 188:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 121:                       // 'document-node'
      try_DocumentTest();
      break;
    case 122:                       // 'element'
      try_ElementTest();
      break;
    case 83:                        // 'attribute'
      try_AttributeTest();
      break;
    case 231:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 230:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 220:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 249:                       // 'text'
      try_TextTest();
      break;
    case 188:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(194);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(194);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(121);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(153);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(121);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(153);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(249);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(249);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(97);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(97);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(188);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(188);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(220);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(245);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shift(11);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(220);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(245);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shiftT(11);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(83);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(256);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(102);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(83);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(256);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(102);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(230);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(230);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(122);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(256);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(102);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_TypeName();
        lookahead1W(103);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          shift(65);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(122);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(256);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(102);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_TypeName();
        lookahead1W(103);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          shiftT(65);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(231);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(231);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(6, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(6, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(39);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(39);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(255);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_SequenceType();
      }
    }
    shift(38);                      // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    shift(80);                      // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(255);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_SequenceType();
      }
    }
    shiftT(38);                     // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    shiftT(80);                     // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(35);                      // '('
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(35);                     // '('
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(73);                // S^WS | '(:' | 'revalidation'
    shift(226);                     // 'revalidation'
    lookahead1W(161);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    default:
      shift(238);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        shift(80);                  // 'as'
        lookahead1W(120);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 136:                   // 'first'
          shift(136);               // 'first'
          break;
        default:
          shift(173);               // 'last'
        }
      }
      lookahead1W(57);              // S^WS | '(:' | 'into'
      shift(165);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        shiftT(80);                 // 'as'
        lookahead1W(120);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 136:                   // 'first'
          shiftT(136);              // 'first'
          break;
        default:
          shiftT(173);              // 'last'
        }
      }
      lookahead1W(57);              // S^WS | '(:' | 'into'
      shiftT(165);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(161);                     // 'insert'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    default:
      shift(195);                   // 'nodes'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(161);                    // 'insert'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    default:
      shiftT(195);                  // 'nodes'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(111);                     // 'delete'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    default:
      shift(195);                   // 'nodes'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(111);                    // 'delete'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    default:
      shiftT(195);                  // 'nodes'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(223);                     // 'replace'
    lookahead1W(132);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      shift(267);                   // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shift(200);                   // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(276);                     // 'with'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(223);                    // 'replace'
    lookahead1W(132);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      shiftT(267);                  // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shiftT(200);                  // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shiftT(194);                    // 'node'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_TargetExpr();
    shiftT(276);                    // 'with'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(222);                     // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(80);                      // 'as'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(222);                    // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shiftT(194);                    // 'node'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_TargetExpr();
    shiftT(80);                     // 'as'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(104);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(28);              // S^WS | '(:' | ':='
      shift(53);                    // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(184);                     // 'modify'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(104);                    // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(28);              // S^WS | '(:' | ':='
      shiftT(53);                   // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
    }
    shiftT(184);                    // 'modify'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(160);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 206                 // 'ordered'
       && lk != 227                 // 'same'
       && lk != 275                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 123986)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(160);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 206                 // 'ordered'
       && lk != 227                 // 'same'
       && lk != 275                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 123986)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(270);                     // 'weight'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(270);                    // 'weight'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 146)                // 'ftor'
      {
        break;
      }
      shift(146);                   // 'ftor'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 146)                // 'ftor'
      {
        break;
      }
      shiftT(146);                  // 'ftor'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 144)                // 'ftand'
      {
        break;
      }
      shift(144);                   // 'ftand'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 144)                // 'ftand'
      {
        break;
      }
      shiftT(144);                  // 'ftand'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shift(196);                   // 'not'
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shift(156);                   // 'in'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shiftT(196);                  // 'not'
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shiftT(156);                  // 'in'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 145)                  // 'ftnot'
    {
      shift(145);                   // 'ftnot'
    }
    lookahead1W(165);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 145)                  // 'ftnot'
    {
      shiftT(145);                  // 'ftnot'
    }
    lookahead1W(165);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 265)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 265)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      shift(35);                    // '('
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(38);                    // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 199)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      shiftT(35);                   // '('
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(38);                   // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 199)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 214)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 214)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      shift(281);                   // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      shiftT(281);                  // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(101);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(281);                     // '{'
    lookahead1W(184);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(101);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(281);                    // '{'
    lookahead1W(184);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 287)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(287);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 77:                        // 'any'
      shift(77);                    // 'any'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' | '|}' |
                                    // '}'
      if (l1 == 278)                // 'word'
      {
        shift(278);                 // 'word'
      }
      break;
    case 72:                        // 'all'
      shift(72);                    // 'all'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|}' |
                                    // '}'
      if (l1 == 279)                // 'words'
      {
        shift(279);                 // 'words'
      }
      break;
    default:
      shift(214);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 77:                        // 'any'
      shiftT(77);                   // 'any'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' | '|}' |
                                    // '}'
      if (l1 == 278)                // 'word'
      {
        shiftT(278);                // 'word'
      }
      break;
    case 72:                        // 'all'
      shiftT(72);                   // 'all'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|}' |
                                    // '}'
      if (l1 == 279)                // 'words'
      {
        shiftT(279);                // 'words'
      }
      break;
    default:
      shiftT(214);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(199);                     // 'occurs'
    lookahead1W(158);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(252);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(199);                    // 'occurs'
    lookahead1W(158);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(252);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      shift(131);                   // 'exactly'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shift(176);                 // 'least'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(186);                 // 'most'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(142);                   // 'from'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      shift(253);                   // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      shiftT(131);                  // 'exactly'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shiftT(176);                // 'least'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        shiftT(186);                // 'most'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(142);                  // 'from'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_AdditiveExpr();
      shiftT(253);                  // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 206:                       // 'ordered'
      parse_FTOrder();
      break;
    case 275:                       // 'window'
      parse_FTWindow();
      break;
    case 118:                       // 'distance'
      parse_FTDistance();
      break;
    case 116:                       // 'different'
    case 227:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 206:                       // 'ordered'
      try_FTOrder();
      break;
    case 275:                       // 'window'
      try_FTWindow();
      break;
    case 118:                       // 'distance'
      try_FTDistance();
      break;
    case 116:                       // 'different'
    case 227:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(206);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(206);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(275);                     // 'window'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(275);                    // 'window'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(118);                     // 'distance'
    lookahead1W(158);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(118);                    // 'distance'
    lookahead1W(158);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 279:                       // 'words'
      shift(279);                   // 'words'
      break;
    case 237:                       // 'sentences'
      shift(237);                   // 'sentences'
      break;
    default:
      shift(209);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 279:                       // 'words'
      shiftT(279);                  // 'words'
      break;
    case 237:                       // 'sentences'
      shiftT(237);                  // 'sentences'
      break;
    default:
      shiftT(209);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 227:                       // 'same'
      shift(227);                   // 'same'
      break;
    default:
      shift(116);                   // 'different'
    }
    lookahead1W(134);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 227:                       // 'same'
      shiftT(227);                  // 'same'
      break;
    default:
      shiftT(116);                  // 'different'
    }
    lookahead1W(134);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 236:                       // 'sentence'
      shift(236);                   // 'sentence'
      break;
    default:
      shift(208);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 236:                       // 'sentence'
      shiftT(236);                  // 'sentence'
      break;
    default:
      shiftT(208);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(118);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 242:                     // 'start'
        shift(242);                 // 'start'
        break;
      default:
        shift(127);                 // 'end'
      }
      break;
    default:
      shift(128);                   // 'entire'
      lookahead1W(45);              // S^WS | '(:' | 'content'
      shift(101);                   // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(118);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 242:                     // 'start'
        shiftT(242);                // 'start'
        break;
      default:
        shiftT(127);                // 'end'
      }
      break;
    default:
      shiftT(128);                  // 'entire'
      lookahead1W(45);              // S^WS | '(:' | 'content'
      shiftT(101);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(265);                   // 'using'
      lookahead1W(204);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(265);                  // 'using'
      lookahead1W(204);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 191:                       // 'no'
      lookahead2W(176);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 172:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140479:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 251:                       // 'thesaurus'
    case 128703:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 243:                       // 'stemming'
    case 124607:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 244:                       // 'stop'
    case 125119:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 203:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 191:                       // 'no'
      lookahead2W(176);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 172:                       // 'language'
      try_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140479:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 251:                       // 'thesaurus'
    case 128703:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 243:                       // 'stemming'
    case 124607:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 244:                       // 'stop'
    case 125119:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 203:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 89:                        // 'case'
      shift(89);                    // 'case'
      lookahead1W(125);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 160:                     // 'insensitive'
        shift(160);                 // 'insensitive'
        break;
      default:
        shift(235);                 // 'sensitive'
      }
      break;
    case 180:                       // 'lowercase'
      shift(180);                   // 'lowercase'
      break;
    default:
      shift(264);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      lookahead1W(125);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 160:                     // 'insensitive'
        shiftT(160);                // 'insensitive'
        break;
      default:
        shiftT(235);                // 'sensitive'
      }
      break;
    case 180:                       // 'lowercase'
      shiftT(180);                  // 'lowercase'
      break;
    default:
      shiftT(264);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(115);                     // 'diacritics'
    lookahead1W(125);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 160:                       // 'insensitive'
      shift(160);                   // 'insensitive'
      break;
    default:
      shift(235);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(115);                    // 'diacritics'
    lookahead1W(125);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 160:                       // 'insensitive'
      shiftT(160);                  // 'insensitive'
      break;
    default:
      shiftT(235);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 243:                       // 'stemming'
      shift(243);                   // 'stemming'
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stemming'
      shift(243);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 243:                       // 'stemming'
      shiftT(243);                  // 'stemming'
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stemming'
      shiftT(243);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 251:                       // 'thesaurus'
      shift(251);                   // 'thesaurus'
      lookahead1W(151);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 110:                     // 'default'
        shift(110);                 // 'default'
        break;
      default:
        shift(35);                  // '('
        lookahead1W(113);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(110);               // 'default'
        }
        for (;;)
        {
          lookahead1W(102);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shift(42);                // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(38);                  // ')'
      }
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(79);              // S^WS | '(:' | 'thesaurus'
      shift(251);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 251:                       // 'thesaurus'
      shiftT(251);                  // 'thesaurus'
      lookahead1W(151);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        try_FTThesaurusID();
        break;
      case 110:                     // 'default'
        shiftT(110);                // 'default'
        break;
      default:
        shiftT(35);                 // '('
        lookahead1W(113);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(110);              // 'default'
        }
        for (;;)
        {
          lookahead1W(102);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shiftT(42);               // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(38);                 // ')'
      }
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(79);              // S^WS | '(:' | 'thesaurus'
      shiftT(251);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(82);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 221)                  // 'relationship'
    {
      shift(221);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(183);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    case 142:                       // 'from'
      lookahead2W(164);             // IntegerLiteral | S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 4238                  // 'from' IntegerLiteral
     || lk == 90194                 // 'at' 'least'
     || lk == 95314)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      shift(178);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(82);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 221)                  // 'relationship'
    {
      shiftT(221);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(183);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    case 142:                       // 'from'
      lookahead2W(164);             // IntegerLiteral | S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 4238                  // 'from' IntegerLiteral
     || lk == 90194                 // 'at' 'least'
     || lk == 95314)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      shiftT(178);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      shift(131);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shift(176);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
        break;
      default:
        shift(186);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
      }
      break;
    default:
      shift(142);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      lookahead1W(80);              // S^WS | '(:' | 'to'
      shift(253);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      shiftT(131);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shiftT(176);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
        break;
      default:
        shiftT(186);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(142);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      lookahead1W(80);              // S^WS | '(:' | 'to'
      shiftT(253);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 244:                       // 'stop'
      shift(244);                   // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shift(279);                   // 'words'
      lookahead1W(151);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        shift(110);                 // 'default'
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stop'
      shift(244);                   // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shift(279);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 244:                       // 'stop'
      shiftT(244);                  // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shiftT(279);                  // 'words'
      lookahead1W(151);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        shiftT(110);                // 'default'
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stop'
      shiftT(244);                  // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shiftT(279);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      break;
    default:
      shift(35);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
      break;
    default:
      shiftT(35);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
      for (;;)
      {
        lookahead1W(102);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(11);                 // StringLiteral
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    default:
      shift(132);                   // 'except'
    }
    lookahead1W(100);               // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    default:
      shiftT(132);                  // 'except'
    }
    lookahead1W(100);               // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(172);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(172);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 274:                       // 'wildcards'
      shift(274);                   // 'wildcards'
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(85);              // S^WS | '(:' | 'wildcards'
      shift(274);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 274:                       // 'wildcards'
      shiftT(274);                  // 'wildcards'
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(85);              // S^WS | '(:' | 'wildcards'
      shiftT(274);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(203);                     // 'option'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(203);                    // 'option'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(277);                     // 'without'
    lookahead1W(45);                // S^WS | '(:' | 'content'
    shift(101);                     // 'content'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(277);                    // 'without'
    lookahead1W(45);                // S^WS | '(:' | 'content'
    shiftT(101);                    // 'content'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(96);                      // 'collection'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(108);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(80);                      // 'as'
    lookahead1W(198);               // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'namespace-node' | 'node' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(171);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 54)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 95)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(80);                      // 'as'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_AtomicType();
    lookahead1W(190);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 65)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(95);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(157);                     // 'index'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_IndexName();
    lookahead1W(67);                // S^WS | '(:' | 'on'
    shift(201);                     // 'on'
    lookahead1W(65);                // S^WS | '(:' | 'nodes'
    shift(195);                     // 'nodes'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    shift(88);                      // 'by'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(104);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(264);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(163);                     // 'integrity'
    lookahead1W(43);                // S^WS | '(:' | 'constraint'
    shift(98);                      // 'constraint'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(121);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 201:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(201);                     // 'on'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    shift(96);                      // 'collection'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(148);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 194:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(81);                // S^WS | '(:' | 'unique'
    shift(261);                     // 'unique'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(140);                     // 'foreach'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(141);                     // 'foreign'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(54);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(142);                     // 'from'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(253);                     // 'to'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(96);                      // 'collection'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(59);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(37);                     // '(:'
    for (;;)
    {
      lookahead1(90);               // CommentContents | '(:' | ':)'
      if (l1 == 51)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        shiftT(24);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(51);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      shiftT(22);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(242);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    switch (l1)
    {
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      break;
    case 97:                        // 'comment'
      shift(97);                    // 'comment'
      break;
    case 121:                       // 'document-node'
      shift(121);                   // 'document-node'
      break;
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shift(125);                   // 'empty-sequence'
      break;
    case 147:                       // 'function'
      shift(147);                   // 'function'
      break;
    case 154:                       // 'if'
      shift(154);                   // 'if'
      break;
    case 167:                       // 'item'
      shift(167);                   // 'item'
      break;
    case 188:                       // 'namespace-node'
      shift(188);                   // 'namespace-node'
      break;
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    case 220:                       // 'processing-instruction'
      shift(220);                   // 'processing-instruction'
      break;
    case 230:                       // 'schema-attribute'
      shift(230);                   // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shift(231);                   // 'schema-element'
      break;
    case 248:                       // 'switch'
      shift(248);                   // 'switch'
      break;
    case 249:                       // 'text'
      shift(249);                   // 'text'
      break;
    case 259:                       // 'typeswitch'
      shift(259);                   // 'typeswitch'
      break;
    case 79:                        // 'array'
      shift(79);                    // 'array'
      break;
    case 169:                       // 'json-item'
      shift(169);                   // 'json-item'
      break;
    case 247:                       // 'structured-item'
      shift(247);                   // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(242);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    switch (l1)
    {
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      break;
    case 97:                        // 'comment'
      shiftT(97);                   // 'comment'
      break;
    case 121:                       // 'document-node'
      shiftT(121);                  // 'document-node'
      break;
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shiftT(125);                  // 'empty-sequence'
      break;
    case 147:                       // 'function'
      shiftT(147);                  // 'function'
      break;
    case 154:                       // 'if'
      shiftT(154);                  // 'if'
      break;
    case 167:                       // 'item'
      shiftT(167);                  // 'item'
      break;
    case 188:                       // 'namespace-node'
      shiftT(188);                  // 'namespace-node'
      break;
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    case 220:                       // 'processing-instruction'
      shiftT(220);                  // 'processing-instruction'
      break;
    case 230:                       // 'schema-attribute'
      shiftT(230);                  // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shiftT(231);                  // 'schema-element'
      break;
    case 248:                       // 'switch'
      shiftT(248);                  // 'switch'
      break;
    case 249:                       // 'text'
      shiftT(249);                  // 'text'
      break;
    case 259:                       // 'typeswitch'
      shiftT(259);                  // 'typeswitch'
      break;
    case 79:                        // 'array'
      shiftT(79);                   // 'array'
      break;
    case 169:                       // 'json-item'
      shiftT(169);                  // 'json-item'
      break;
    case 247:                       // 'structured-item'
      shiftT(247);                  // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      shift(6);                     // EQName^Token
      break;
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shift(75);                    // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      shift(76);                    // 'and'
      break;
    case 80:                        // 'as'
      shift(80);                    // 'as'
      break;
    case 81:                        // 'ascending'
      shift(81);                    // 'ascending'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    case 89:                        // 'case'
      shift(89);                    // 'case'
      break;
    case 90:                        // 'cast'
      shift(90);                    // 'cast'
      break;
    case 91:                        // 'castable'
      shift(91);                    // 'castable'
      break;
    case 94:                        // 'child'
      shift(94);                    // 'child'
      break;
    case 95:                        // 'collation'
      shift(95);                    // 'collation'
      break;
    case 104:                       // 'copy'
      shift(104);                   // 'copy'
      break;
    case 106:                       // 'count'
      shift(106);                   // 'count'
      break;
    case 109:                       // 'declare'
      shift(109);                   // 'declare'
      break;
    case 110:                       // 'default'
      shift(110);                   // 'default'
      break;
    case 111:                       // 'delete'
      shift(111);                   // 'delete'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      shift(114);                   // 'descending'
      break;
    case 119:                       // 'div'
      shift(119);                   // 'div'
      break;
    case 120:                       // 'document'
      shift(120);                   // 'document'
      break;
    case 123:                       // 'else'
      shift(123);                   // 'else'
      break;
    case 124:                       // 'empty'
      shift(124);                   // 'empty'
      break;
    case 127:                       // 'end'
      shift(127);                   // 'end'
      break;
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 130:                       // 'every'
      shift(130);                   // 'every'
      break;
    case 132:                       // 'except'
      shift(132);                   // 'except'
      break;
    case 136:                       // 'first'
      shift(136);                   // 'first'
      break;
    case 137:                       // 'following'
      shift(137);                   // 'following'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      break;
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    case 148:                       // 'ge'
      shift(148);                   // 'ge'
      break;
    case 150:                       // 'group'
      shift(150);                   // 'group'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    case 153:                       // 'idiv'
      shift(153);                   // 'idiv'
      break;
    case 155:                       // 'import'
      shift(155);                   // 'import'
      break;
    case 161:                       // 'insert'
      shift(161);                   // 'insert'
      break;
    case 162:                       // 'instance'
      shift(162);                   // 'instance'
      break;
    case 164:                       // 'intersect'
      shift(164);                   // 'intersect'
      break;
    case 165:                       // 'into'
      shift(165);                   // 'into'
      break;
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 173:                       // 'last'
      shift(173);                   // 'last'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 177:                       // 'let'
      shift(177);                   // 'let'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 183:                       // 'mod'
      shift(183);                   // 'mod'
      break;
    case 184:                       // 'modify'
      shift(184);                   // 'modify'
      break;
    case 185:                       // 'module'
      shift(185);                   // 'module'
      break;
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 202:                       // 'only'
      shift(202);                   // 'only'
      break;
    case 204:                       // 'or'
      shift(204);                   // 'or'
      break;
    case 205:                       // 'order'
      shift(205);                   // 'order'
      break;
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      break;
    case 222:                       // 'rename'
      shift(222);                   // 'rename'
      break;
    case 223:                       // 'replace'
      shift(223);                   // 'replace'
      break;
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    case 228:                       // 'satisfies'
      shift(228);                   // 'satisfies'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      break;
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    case 241:                       // 'stable'
      shift(241);                   // 'stable'
      break;
    case 242:                       // 'start'
      shift(242);                   // 'start'
      break;
    case 253:                       // 'to'
      shift(253);                   // 'to'
      break;
    case 254:                       // 'treat'
      shift(254);                   // 'treat'
      break;
    case 256:                       // 'try'
      shift(256);                   // 'try'
      break;
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    case 262:                       // 'unordered'
      shift(262);                   // 'unordered'
      break;
    case 266:                       // 'validate'
      shift(266);                   // 'validate'
      break;
    case 272:                       // 'where'
      shift(272);                   // 'where'
      break;
    case 276:                       // 'with'
      shift(276);                   // 'with'
      break;
    case 170:                       // 'jsoniq'
      shift(170);                   // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shift(73);                    // 'allowing'
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      break;
    case 84:                        // 'base-uri'
      shift(84);                    // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shift(86);                    // 'boundary-space'
      break;
    case 87:                        // 'break'
      shift(87);                    // 'break'
      break;
    case 92:                        // 'catch'
      shift(92);                    // 'catch'
      break;
    case 99:                        // 'construction'
      shift(99);                    // 'construction'
      break;
    case 102:                       // 'context'
      shift(102);                   // 'context'
      break;
    case 103:                       // 'continue'
      shift(103);                   // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shift(105);                   // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      break;
    case 133:                       // 'exit'
      shift(133);                   // 'exit'
      break;
    case 134:                       // 'external'
      shift(134);                   // 'external'
      break;
    case 143:                       // 'ft-option'
      shift(143);                   // 'ft-option'
      break;
    case 156:                       // 'in'
      shift(156);                   // 'in'
      break;
    case 157:                       // 'index'
      shift(157);                   // 'index'
      break;
    case 163:                       // 'integrity'
      shift(163);                   // 'integrity'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    case 195:                       // 'nodes'
      shift(195);                   // 'nodes'
      break;
    case 203:                       // 'option'
      shift(203);                   // 'option'
      break;
    case 207:                       // 'ordering'
      shift(207);                   // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shift(226);                   // 'revalidation'
      break;
    case 229:                       // 'schema'
      shift(229);                   // 'schema'
      break;
    case 232:                       // 'score'
      shift(232);                   // 'score'
      break;
    case 239:                       // 'sliding'
      shift(239);                   // 'sliding'
      break;
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 257:                       // 'tumbling'
      shift(257);                   // 'tumbling'
      break;
    case 258:                       // 'type'
      shift(258);                   // 'type'
      break;
    case 263:                       // 'updating'
      shift(263);                   // 'updating'
      break;
    case 267:                       // 'value'
      shift(267);                   // 'value'
      break;
    case 268:                       // 'variable'
      shift(268);                   // 'variable'
      break;
    case 269:                       // 'version'
      shift(269);                   // 'version'
      break;
    case 273:                       // 'while'
      shift(273);                   // 'while'
      break;
    case 98:                        // 'constraint'
      shift(98);                    // 'constraint'
      break;
    case 179:                       // 'loop'
      shift(179);                   // 'loop'
      break;
    case 225:                       // 'returning'
      shift(225);                   // 'returning'
      break;
    case 78:                        // 'append'
      shift(78);                    // 'append'
      break;
    case 135:                       // 'false'
      shift(135);                   // 'false'
      break;
    case 142:                       // 'from'
      shift(142);                   // 'from'
      break;
    case 197:                       // 'null'
      shift(197);                   // 'null'
      break;
    case 168:                       // 'json'
      shift(168);                   // 'json'
      break;
    case 198:                       // 'object'
      shift(198);                   // 'object'
      break;
    case 233:                       // 'select'
      shift(233);                   // 'select'
      break;
    default:
      shift(255);                   // 'true'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      shiftT(6);                    // EQName^Token
      break;
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shiftT(75);                   // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      shiftT(76);                   // 'and'
      break;
    case 80:                        // 'as'
      shiftT(80);                   // 'as'
      break;
    case 81:                        // 'ascending'
      shiftT(81);                   // 'ascending'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      break;
    case 90:                        // 'cast'
      shiftT(90);                   // 'cast'
      break;
    case 91:                        // 'castable'
      shiftT(91);                   // 'castable'
      break;
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      break;
    case 95:                        // 'collation'
      shiftT(95);                   // 'collation'
      break;
    case 104:                       // 'copy'
      shiftT(104);                  // 'copy'
      break;
    case 106:                       // 'count'
      shiftT(106);                  // 'count'
      break;
    case 109:                       // 'declare'
      shiftT(109);                  // 'declare'
      break;
    case 110:                       // 'default'
      shiftT(110);                  // 'default'
      break;
    case 111:                       // 'delete'
      shiftT(111);                  // 'delete'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      shiftT(114);                  // 'descending'
      break;
    case 119:                       // 'div'
      shiftT(119);                  // 'div'
      break;
    case 120:                       // 'document'
      shiftT(120);                  // 'document'
      break;
    case 123:                       // 'else'
      shiftT(123);                  // 'else'
      break;
    case 124:                       // 'empty'
      shiftT(124);                  // 'empty'
      break;
    case 127:                       // 'end'
      shiftT(127);                  // 'end'
      break;
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 130:                       // 'every'
      shiftT(130);                  // 'every'
      break;
    case 132:                       // 'except'
      shiftT(132);                  // 'except'
      break;
    case 136:                       // 'first'
      shiftT(136);                  // 'first'
      break;
    case 137:                       // 'following'
      shiftT(137);                  // 'following'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      break;
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    case 148:                       // 'ge'
      shiftT(148);                  // 'ge'
      break;
    case 150:                       // 'group'
      shiftT(150);                  // 'group'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    case 153:                       // 'idiv'
      shiftT(153);                  // 'idiv'
      break;
    case 155:                       // 'import'
      shiftT(155);                  // 'import'
      break;
    case 161:                       // 'insert'
      shiftT(161);                  // 'insert'
      break;
    case 162:                       // 'instance'
      shiftT(162);                  // 'instance'
      break;
    case 164:                       // 'intersect'
      shiftT(164);                  // 'intersect'
      break;
    case 165:                       // 'into'
      shiftT(165);                  // 'into'
      break;
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 173:                       // 'last'
      shiftT(173);                  // 'last'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 177:                       // 'let'
      shiftT(177);                  // 'let'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 183:                       // 'mod'
      shiftT(183);                  // 'mod'
      break;
    case 184:                       // 'modify'
      shiftT(184);                  // 'modify'
      break;
    case 185:                       // 'module'
      shiftT(185);                  // 'module'
      break;
    case 187:                       // 'namespace'
      shiftT(187);                  // 'namespace'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 202:                       // 'only'
      shiftT(202);                  // 'only'
      break;
    case 204:                       // 'or'
      shiftT(204);                  // 'or'
      break;
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      break;
    case 206:                       // 'ordered'
      shiftT(206);                  // 'ordered'
      break;
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      break;
    case 222:                       // 'rename'
      shiftT(222);                  // 'rename'
      break;
    case 223:                       // 'replace'
      shiftT(223);                  // 'replace'
      break;
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    case 228:                       // 'satisfies'
      shiftT(228);                  // 'satisfies'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      break;
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    case 241:                       // 'stable'
      shiftT(241);                  // 'stable'
      break;
    case 242:                       // 'start'
      shiftT(242);                  // 'start'
      break;
    case 253:                       // 'to'
      shiftT(253);                  // 'to'
      break;
    case 254:                       // 'treat'
      shiftT(254);                  // 'treat'
      break;
    case 256:                       // 'try'
      shiftT(256);                  // 'try'
      break;
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    case 262:                       // 'unordered'
      shiftT(262);                  // 'unordered'
      break;
    case 266:                       // 'validate'
      shiftT(266);                  // 'validate'
      break;
    case 272:                       // 'where'
      shiftT(272);                  // 'where'
      break;
    case 276:                       // 'with'
      shiftT(276);                  // 'with'
      break;
    case 170:                       // 'jsoniq'
      shiftT(170);                  // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shiftT(73);                   // 'allowing'
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      break;
    case 84:                        // 'base-uri'
      shiftT(84);                   // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shiftT(86);                   // 'boundary-space'
      break;
    case 87:                        // 'break'
      shiftT(87);                   // 'break'
      break;
    case 92:                        // 'catch'
      shiftT(92);                   // 'catch'
      break;
    case 99:                        // 'construction'
      shiftT(99);                   // 'construction'
      break;
    case 102:                       // 'context'
      shiftT(102);                  // 'context'
      break;
    case 103:                       // 'continue'
      shiftT(103);                  // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shiftT(105);                  // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shiftT(107);                  // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shiftT(126);                  // 'encoding'
      break;
    case 133:                       // 'exit'
      shiftT(133);                  // 'exit'
      break;
    case 134:                       // 'external'
      shiftT(134);                  // 'external'
      break;
    case 143:                       // 'ft-option'
      shiftT(143);                  // 'ft-option'
      break;
    case 156:                       // 'in'
      shiftT(156);                  // 'in'
      break;
    case 157:                       // 'index'
      shiftT(157);                  // 'index'
      break;
    case 163:                       // 'integrity'
      shiftT(163);                  // 'integrity'
      break;
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    case 195:                       // 'nodes'
      shiftT(195);                  // 'nodes'
      break;
    case 203:                       // 'option'
      shiftT(203);                  // 'option'
      break;
    case 207:                       // 'ordering'
      shiftT(207);                  // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shiftT(226);                  // 'revalidation'
      break;
    case 229:                       // 'schema'
      shiftT(229);                  // 'schema'
      break;
    case 232:                       // 'score'
      shiftT(232);                  // 'score'
      break;
    case 239:                       // 'sliding'
      shiftT(239);                  // 'sliding'
      break;
    case 245:                       // 'strict'
      shiftT(245);                  // 'strict'
      break;
    case 257:                       // 'tumbling'
      shiftT(257);                  // 'tumbling'
      break;
    case 258:                       // 'type'
      shiftT(258);                  // 'type'
      break;
    case 263:                       // 'updating'
      shiftT(263);                  // 'updating'
      break;
    case 267:                       // 'value'
      shiftT(267);                  // 'value'
      break;
    case 268:                       // 'variable'
      shiftT(268);                  // 'variable'
      break;
    case 269:                       // 'version'
      shiftT(269);                  // 'version'
      break;
    case 273:                       // 'while'
      shiftT(273);                  // 'while'
      break;
    case 98:                        // 'constraint'
      shiftT(98);                   // 'constraint'
      break;
    case 179:                       // 'loop'
      shiftT(179);                  // 'loop'
      break;
    case 225:                       // 'returning'
      shiftT(225);                  // 'returning'
      break;
    case 78:                        // 'append'
      shiftT(78);                   // 'append'
      break;
    case 135:                       // 'false'
      shiftT(135);                  // 'false'
      break;
    case 142:                       // 'from'
      shiftT(142);                  // 'from'
      break;
    case 197:                       // 'null'
      shiftT(197);                  // 'null'
      break;
    case 168:                       // 'json'
      shiftT(168);                  // 'json'
      break;
    case 198:                       // 'object'
      shiftT(198);                  // 'object'
      break;
    case 233:                       // 'select'
      shiftT(233);                  // 'select'
      break;
    default:
      shiftT(255);                  // 'true'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      shift(19);                    // NCName^Token
      break;
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 76:                        // 'and'
      shift(76);                    // 'and'
      break;
    case 80:                        // 'as'
      shift(80);                    // 'as'
      break;
    case 81:                        // 'ascending'
      shift(81);                    // 'ascending'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    case 89:                        // 'case'
      shift(89);                    // 'case'
      break;
    case 90:                        // 'cast'
      shift(90);                    // 'cast'
      break;
    case 91:                        // 'castable'
      shift(91);                    // 'castable'
      break;
    case 95:                        // 'collation'
      shift(95);                    // 'collation'
      break;
    case 106:                       // 'count'
      shift(106);                   // 'count'
      break;
    case 110:                       // 'default'
      shift(110);                   // 'default'
      break;
    case 114:                       // 'descending'
      shift(114);                   // 'descending'
      break;
    case 119:                       // 'div'
      shift(119);                   // 'div'
      break;
    case 123:                       // 'else'
      shift(123);                   // 'else'
      break;
    case 124:                       // 'empty'
      shift(124);                   // 'empty'
      break;
    case 127:                       // 'end'
      shift(127);                   // 'end'
      break;
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 132:                       // 'except'
      shift(132);                   // 'except'
      break;
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    case 148:                       // 'ge'
      shift(148);                   // 'ge'
      break;
    case 150:                       // 'group'
      shift(150);                   // 'group'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    case 153:                       // 'idiv'
      shift(153);                   // 'idiv'
      break;
    case 162:                       // 'instance'
      shift(162);                   // 'instance'
      break;
    case 164:                       // 'intersect'
      shift(164);                   // 'intersect'
      break;
    case 165:                       // 'into'
      shift(165);                   // 'into'
      break;
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 177:                       // 'let'
      shift(177);                   // 'let'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 183:                       // 'mod'
      shift(183);                   // 'mod'
      break;
    case 184:                       // 'modify'
      shift(184);                   // 'modify'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 202:                       // 'only'
      shift(202);                   // 'only'
      break;
    case 204:                       // 'or'
      shift(204);                   // 'or'
      break;
    case 205:                       // 'order'
      shift(205);                   // 'order'
      break;
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    case 228:                       // 'satisfies'
      shift(228);                   // 'satisfies'
      break;
    case 241:                       // 'stable'
      shift(241);                   // 'stable'
      break;
    case 242:                       // 'start'
      shift(242);                   // 'start'
      break;
    case 253:                       // 'to'
      shift(253);                   // 'to'
      break;
    case 254:                       // 'treat'
      shift(254);                   // 'treat'
      break;
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    case 272:                       // 'where'
      shift(272);                   // 'where'
      break;
    case 276:                       // 'with'
      shift(276);                   // 'with'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shift(75);                    // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      break;
    case 94:                        // 'child'
      shift(94);                    // 'child'
      break;
    case 97:                        // 'comment'
      shift(97);                    // 'comment'
      break;
    case 104:                       // 'copy'
      shift(104);                   // 'copy'
      break;
    case 109:                       // 'declare'
      shift(109);                   // 'declare'
      break;
    case 111:                       // 'delete'
      shift(111);                   // 'delete'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      shift(120);                   // 'document'
      break;
    case 121:                       // 'document-node'
      shift(121);                   // 'document-node'
      break;
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shift(125);                   // 'empty-sequence'
      break;
    case 130:                       // 'every'
      shift(130);                   // 'every'
      break;
    case 136:                       // 'first'
      shift(136);                   // 'first'
      break;
    case 137:                       // 'following'
      shift(137);                   // 'following'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      break;
    case 147:                       // 'function'
      shift(147);                   // 'function'
      break;
    case 154:                       // 'if'
      shift(154);                   // 'if'
      break;
    case 155:                       // 'import'
      shift(155);                   // 'import'
      break;
    case 161:                       // 'insert'
      shift(161);                   // 'insert'
      break;
    case 167:                       // 'item'
      shift(167);                   // 'item'
      break;
    case 173:                       // 'last'
      shift(173);                   // 'last'
      break;
    case 185:                       // 'module'
      shift(185);                   // 'module'
      break;
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      break;
    case 188:                       // 'namespace-node'
      shift(188);                   // 'namespace-node'
      break;
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      break;
    case 220:                       // 'processing-instruction'
      shift(220);                   // 'processing-instruction'
      break;
    case 222:                       // 'rename'
      shift(222);                   // 'rename'
      break;
    case 223:                       // 'replace'
      shift(223);                   // 'replace'
      break;
    case 230:                       // 'schema-attribute'
      shift(230);                   // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shift(231);                   // 'schema-element'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      break;
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    case 248:                       // 'switch'
      shift(248);                   // 'switch'
      break;
    case 249:                       // 'text'
      shift(249);                   // 'text'
      break;
    case 256:                       // 'try'
      shift(256);                   // 'try'
      break;
    case 259:                       // 'typeswitch'
      shift(259);                   // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      shift(262);                   // 'unordered'
      break;
    case 266:                       // 'validate'
      shift(266);                   // 'validate'
      break;
    case 268:                       // 'variable'
      shift(268);                   // 'variable'
      break;
    case 170:                       // 'jsoniq'
      shift(170);                   // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shift(73);                    // 'allowing'
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      break;
    case 84:                        // 'base-uri'
      shift(84);                    // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shift(86);                    // 'boundary-space'
      break;
    case 87:                        // 'break'
      shift(87);                    // 'break'
      break;
    case 92:                        // 'catch'
      shift(92);                    // 'catch'
      break;
    case 99:                        // 'construction'
      shift(99);                    // 'construction'
      break;
    case 102:                       // 'context'
      shift(102);                   // 'context'
      break;
    case 103:                       // 'continue'
      shift(103);                   // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shift(105);                   // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      break;
    case 133:                       // 'exit'
      shift(133);                   // 'exit'
      break;
    case 134:                       // 'external'
      shift(134);                   // 'external'
      break;
    case 143:                       // 'ft-option'
      shift(143);                   // 'ft-option'
      break;
    case 156:                       // 'in'
      shift(156);                   // 'in'
      break;
    case 157:                       // 'index'
      shift(157);                   // 'index'
      break;
    case 163:                       // 'integrity'
      shift(163);                   // 'integrity'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    case 195:                       // 'nodes'
      shift(195);                   // 'nodes'
      break;
    case 203:                       // 'option'
      shift(203);                   // 'option'
      break;
    case 207:                       // 'ordering'
      shift(207);                   // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shift(226);                   // 'revalidation'
      break;
    case 229:                       // 'schema'
      shift(229);                   // 'schema'
      break;
    case 232:                       // 'score'
      shift(232);                   // 'score'
      break;
    case 239:                       // 'sliding'
      shift(239);                   // 'sliding'
      break;
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 257:                       // 'tumbling'
      shift(257);                   // 'tumbling'
      break;
    case 258:                       // 'type'
      shift(258);                   // 'type'
      break;
    case 263:                       // 'updating'
      shift(263);                   // 'updating'
      break;
    case 267:                       // 'value'
      shift(267);                   // 'value'
      break;
    case 269:                       // 'version'
      shift(269);                   // 'version'
      break;
    case 273:                       // 'while'
      shift(273);                   // 'while'
      break;
    case 98:                        // 'constraint'
      shift(98);                    // 'constraint'
      break;
    case 179:                       // 'loop'
      shift(179);                   // 'loop'
      break;
    case 225:                       // 'returning'
      shift(225);                   // 'returning'
      break;
    case 78:                        // 'append'
      shift(78);                    // 'append'
      break;
    case 135:                       // 'false'
      shift(135);                   // 'false'
      break;
    case 142:                       // 'from'
      shift(142);                   // 'from'
      break;
    case 197:                       // 'null'
      shift(197);                   // 'null'
      break;
    case 168:                       // 'json'
      shift(168);                   // 'json'
      break;
    case 198:                       // 'object'
      shift(198);                   // 'object'
      break;
    case 233:                       // 'select'
      shift(233);                   // 'select'
      break;
    default:
      shift(255);                   // 'true'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      shiftT(19);                   // NCName^Token
      break;
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 76:                        // 'and'
      shiftT(76);                   // 'and'
      break;
    case 80:                        // 'as'
      shiftT(80);                   // 'as'
      break;
    case 81:                        // 'ascending'
      shiftT(81);                   // 'ascending'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      break;
    case 90:                        // 'cast'
      shiftT(90);                   // 'cast'
      break;
    case 91:                        // 'castable'
      shiftT(91);                   // 'castable'
      break;
    case 95:                        // 'collation'
      shiftT(95);                   // 'collation'
      break;
    case 106:                       // 'count'
      shiftT(106);                  // 'count'
      break;
    case 110:                       // 'default'
      shiftT(110);                  // 'default'
      break;
    case 114:                       // 'descending'
      shiftT(114);                  // 'descending'
      break;
    case 119:                       // 'div'
      shiftT(119);                  // 'div'
      break;
    case 123:                       // 'else'
      shiftT(123);                  // 'else'
      break;
    case 124:                       // 'empty'
      shiftT(124);                  // 'empty'
      break;
    case 127:                       // 'end'
      shiftT(127);                  // 'end'
      break;
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 132:                       // 'except'
      shiftT(132);                  // 'except'
      break;
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    case 148:                       // 'ge'
      shiftT(148);                  // 'ge'
      break;
    case 150:                       // 'group'
      shiftT(150);                  // 'group'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    case 153:                       // 'idiv'
      shiftT(153);                  // 'idiv'
      break;
    case 162:                       // 'instance'
      shiftT(162);                  // 'instance'
      break;
    case 164:                       // 'intersect'
      shiftT(164);                  // 'intersect'
      break;
    case 165:                       // 'into'
      shiftT(165);                  // 'into'
      break;
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 177:                       // 'let'
      shiftT(177);                  // 'let'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 183:                       // 'mod'
      shiftT(183);                  // 'mod'
      break;
    case 184:                       // 'modify'
      shiftT(184);                  // 'modify'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 202:                       // 'only'
      shiftT(202);                  // 'only'
      break;
    case 204:                       // 'or'
      shiftT(204);                  // 'or'
      break;
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      break;
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    case 228:                       // 'satisfies'
      shiftT(228);                  // 'satisfies'
      break;
    case 241:                       // 'stable'
      shiftT(241);                  // 'stable'
      break;
    case 242:                       // 'start'
      shiftT(242);                  // 'start'
      break;
    case 253:                       // 'to'
      shiftT(253);                  // 'to'
      break;
    case 254:                       // 'treat'
      shiftT(254);                  // 'treat'
      break;
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    case 272:                       // 'where'
      shiftT(272);                  // 'where'
      break;
    case 276:                       // 'with'
      shiftT(276);                  // 'with'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shiftT(75);                   // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      break;
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      break;
    case 97:                        // 'comment'
      shiftT(97);                   // 'comment'
      break;
    case 104:                       // 'copy'
      shiftT(104);                  // 'copy'
      break;
    case 109:                       // 'declare'
      shiftT(109);                  // 'declare'
      break;
    case 111:                       // 'delete'
      shiftT(111);                  // 'delete'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      shiftT(120);                  // 'document'
      break;
    case 121:                       // 'document-node'
      shiftT(121);                  // 'document-node'
      break;
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shiftT(125);                  // 'empty-sequence'
      break;
    case 130:                       // 'every'
      shiftT(130);                  // 'every'
      break;
    case 136:                       // 'first'
      shiftT(136);                  // 'first'
      break;
    case 137:                       // 'following'
      shiftT(137);                  // 'following'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      break;
    case 147:                       // 'function'
      shiftT(147);                  // 'function'
      break;
    case 154:                       // 'if'
      shiftT(154);                  // 'if'
      break;
    case 155:                       // 'import'
      shiftT(155);                  // 'import'
      break;
    case 161:                       // 'insert'
      shiftT(161);                  // 'insert'
      break;
    case 167:                       // 'item'
      shiftT(167);                  // 'item'
      break;
    case 173:                       // 'last'
      shiftT(173);                  // 'last'
      break;
    case 185:                       // 'module'
      shiftT(185);                  // 'module'
      break;
    case 187:                       // 'namespace'
      shiftT(187);                  // 'namespace'
      break;
    case 188:                       // 'namespace-node'
      shiftT(188);                  // 'namespace-node'
      break;
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    case 206:                       // 'ordered'
      shiftT(206);                  // 'ordered'
      break;
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      break;
    case 220:                       // 'processing-instruction'
      shiftT(220);                  // 'processing-instruction'
      break;
    case 222:                       // 'rename'
      shiftT(222);                  // 'rename'
      break;
    case 223:                       // 'replace'
      shiftT(223);                  // 'replace'
      break;
    case 230:                       // 'schema-attribute'
      shiftT(230);                  // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shiftT(231);                  // 'schema-element'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      break;
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    case 248:                       // 'switch'
      shiftT(248);                  // 'switch'
      break;
    case 249:                       // 'text'
      shiftT(249);                  // 'text'
      break;
    case 256:                       // 'try'
      shiftT(256);                  // 'try'
      break;
    case 259:                       // 'typeswitch'
      shiftT(259);                  // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      shiftT(262);                  // 'unordered'
      break;
    case 266:                       // 'validate'
      shiftT(266);                  // 'validate'
      break;
    case 268:                       // 'variable'
      shiftT(268);                  // 'variable'
      break;
    case 170:                       // 'jsoniq'
      shiftT(170);                  // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shiftT(73);                   // 'allowing'
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      break;
    case 84:                        // 'base-uri'
      shiftT(84);                   // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shiftT(86);                   // 'boundary-space'
      break;
    case 87:                        // 'break'
      shiftT(87);                   // 'break'
      break;
    case 92:                        // 'catch'
      shiftT(92);                   // 'catch'
      break;
    case 99:                        // 'construction'
      shiftT(99);                   // 'construction'
      break;
    case 102:                       // 'context'
      shiftT(102);                  // 'context'
      break;
    case 103:                       // 'continue'
      shiftT(103);                  // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shiftT(105);                  // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shiftT(107);                  // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shiftT(126);                  // 'encoding'
      break;
    case 133:                       // 'exit'
      shiftT(133);                  // 'exit'
      break;
    case 134:                       // 'external'
      shiftT(134);                  // 'external'
      break;
    case 143:                       // 'ft-option'
      shiftT(143);                  // 'ft-option'
      break;
    case 156:                       // 'in'
      shiftT(156);                  // 'in'
      break;
    case 157:                       // 'index'
      shiftT(157);                  // 'index'
      break;
    case 163:                       // 'integrity'
      shiftT(163);                  // 'integrity'
      break;
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    case 195:                       // 'nodes'
      shiftT(195);                  // 'nodes'
      break;
    case 203:                       // 'option'
      shiftT(203);                  // 'option'
      break;
    case 207:                       // 'ordering'
      shiftT(207);                  // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shiftT(226);                  // 'revalidation'
      break;
    case 229:                       // 'schema'
      shiftT(229);                  // 'schema'
      break;
    case 232:                       // 'score'
      shiftT(232);                  // 'score'
      break;
    case 239:                       // 'sliding'
      shiftT(239);                  // 'sliding'
      break;
    case 245:                       // 'strict'
      shiftT(245);                  // 'strict'
      break;
    case 257:                       // 'tumbling'
      shiftT(257);                  // 'tumbling'
      break;
    case 258:                       // 'type'
      shiftT(258);                  // 'type'
      break;
    case 263:                       // 'updating'
      shiftT(263);                  // 'updating'
      break;
    case 267:                       // 'value'
      shiftT(267);                  // 'value'
      break;
    case 269:                       // 'version'
      shiftT(269);                  // 'version'
      break;
    case 273:                       // 'while'
      shiftT(273);                  // 'while'
      break;
    case 98:                        // 'constraint'
      shiftT(98);                   // 'constraint'
      break;
    case 179:                       // 'loop'
      shiftT(179);                  // 'loop'
      break;
    case 225:                       // 'returning'
      shiftT(225);                  // 'returning'
      break;
    case 78:                        // 'append'
      shiftT(78);                   // 'append'
      break;
    case 135:                       // 'false'
      shiftT(135);                  // 'false'
      break;
    case 142:                       // 'from'
      shiftT(142);                  // 'from'
      break;
    case 197:                       // 'null'
      shiftT(197);                  // 'null'
      break;
    case 168:                       // 'json'
      shiftT(168);                  // 'json'
      break;
    case 198:                       // 'object'
      shiftT(198);                  // 'object'
      break;
    case 233:                       // 'select'
      shiftT(233);                  // 'select'
      break;
    default:
      shiftT(255);                  // 'true'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(285);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(271);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(244);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 47:                      // '/'
        lookahead2W(287);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|' | '||' |
                                    // '}'
        break;
      case 48:                      // '//'
        lookahead2W(261);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 69:                      // '['
        lookahead2W(274);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 78:                      // 'append'
        lookahead2W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 133:                     // 'exit'
        lookahead2W(145);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 161:                     // 'insert'
        lookahead2W(277);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 177:                     // 'let'
        lookahead2W(167);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 187:                     // 'namespace'
        lookahead2W(248);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 196:                     // 'not'
        lookahead2W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 220:                     // 'processing-instruction'
        lookahead2W(246);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        lookahead2W(180);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        lookahead2W(189);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 281:                     // '{'
        lookahead2W(284);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 283:                     // '{|'
        lookahead2W(275);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        lookahead2W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        lookahead2W(254);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(143);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        lookahead2W(95);            // S^WS | '#' | '(:' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        lookahead2W(262);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 139:                     // 'for'
      case 142:                     // 'from'
        lookahead2W(179);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(141);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(146);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 32:                      // '$$'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        lookahead2W(93);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 54                  // ';'
       && lk != 287                 // '}'
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12832               // '$$' EOF
       && lk != 12847               // '/' EOF
       && lk != 12935               // 'false' EOF
       && lk != 12997               // 'null' EOF
       && lk != 13055               // 'true' EOF
       && lk != 16140               // 'variable' '$'
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21536               // '$$' ','
       && lk != 21551               // '/' ','
       && lk != 21639               // 'false' ','
       && lk != 21701               // 'null' ','
       && lk != 21759               // 'true' ','
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333              // 'exit' 'returning'
       && lk != 146952              // IntegerLiteral '}'
       && lk != 146953              // DecimalLiteral '}'
       && lk != 146954              // DoubleLiteral '}'
       && lk != 146955              // StringLiteral '}'
       && lk != 146976              // '$$' '}'
       && lk != 146991              // '/' '}'
       && lk != 147079              // 'false' '}'
       && lk != 147141              // 'null' '}'
       && lk != 147199)             // 'true' '}'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16140               // 'variable' '$'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(285);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(271);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(244);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 47:                      // '/'
        lookahead2W(287);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|' | '||' |
                                    // '}'
        break;
      case 48:                      // '//'
        lookahead2W(261);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 69:                      // '['
        lookahead2W(274);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 78:                      // 'append'
        lookahead2W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 133:                     // 'exit'
        lookahead2W(145);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 161:                     // 'insert'
        lookahead2W(277);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 177:                     // 'let'
        lookahead2W(167);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 187:                     // 'namespace'
        lookahead2W(248);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 196:                     // 'not'
        lookahead2W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 220:                     // 'processing-instruction'
        lookahead2W(246);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        lookahead2W(180);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        lookahead2W(189);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 281:                     // '{'
        lookahead2W(284);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
        break;
      case 283:                     // '{|'
        lookahead2W(275);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        lookahead2W(247);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        lookahead2W(254);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(143);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        lookahead2W(95);            // S^WS | '#' | '(:' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        lookahead2W(262);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 139:                     // 'for'
      case 142:                     // 'from'
        lookahead2W(179);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(141);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(146);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 32:                      // '$$'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        lookahead2W(93);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 54                  // ';'
       && lk != 287                 // '}'
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12832               // '$$' EOF
       && lk != 12847               // '/' EOF
       && lk != 12935               // 'false' EOF
       && lk != 12997               // 'null' EOF
       && lk != 13055               // 'true' EOF
       && lk != 16140               // 'variable' '$'
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21536               // '$$' ','
       && lk != 21551               // '/' ','
       && lk != 21639               // 'false' ','
       && lk != 21701               // 'null' ','
       && lk != 21759               // 'true' ','
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333              // 'exit' 'returning'
       && lk != 146952              // IntegerLiteral '}'
       && lk != 146953              // DecimalLiteral '}'
       && lk != 146954              // DoubleLiteral '}'
       && lk != 146955              // StringLiteral '}'
       && lk != 146976              // '$$' '}'
       && lk != 146991              // '/' '}'
       && lk != 147079              // 'false' '}'
       && lk != 147141              // 'null' '}'
       && lk != 147199)             // 'true' '}'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(7, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16140               // 'variable' '$'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 287)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 287)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(145);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 177:                       // 'let'
      lookahead2W(167);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 268:                       // 'variable'
      lookahead2W(141);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 281:                       // '{'
      lookahead2W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 33:                        // '%'
      lookahead2W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 6                     // EQName^Token
     && lk != 8                     // IntegerLiteral
     && lk != 9                     // DecimalLiteral
     && lk != 10                    // DoubleLiteral
     && lk != 11                    // StringLiteral
     && lk != 32                    // '$$'
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 47                    // '/'
     && lk != 48                    // '//'
     && lk != 54                    // ';'
     && lk != 55                    // '<'
     && lk != 56                    // '<!--'
     && lk != 60                    // '<?'
     && lk != 69                    // '['
     && lk != 71                    // 'after'
     && lk != 73                    // 'allowing'
     && lk != 74                    // 'ancestor'
     && lk != 75                    // 'ancestor-or-self'
     && lk != 76                    // 'and'
     && lk != 78                    // 'append'
     && lk != 79                    // 'array'
     && lk != 80                    // 'as'
     && lk != 81                    // 'ascending'
     && lk != 82                    // 'at'
     && lk != 83                    // 'attribute'
     && lk != 84                    // 'base-uri'
     && lk != 85                    // 'before'
     && lk != 86                    // 'boundary-space'
     && lk != 89                    // 'case'
     && lk != 90                    // 'cast'
     && lk != 91                    // 'castable'
     && lk != 92                    // 'catch'
     && lk != 94                    // 'child'
     && lk != 95                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 98                    // 'constraint'
     && lk != 99                    // 'construction'
     && lk != 102                   // 'context'
     && lk != 104                   // 'copy'
     && lk != 105                   // 'copy-namespaces'
     && lk != 106                   // 'count'
     && lk != 107                   // 'decimal-format'
     && lk != 109                   // 'declare'
     && lk != 110                   // 'default'
     && lk != 111                   // 'delete'
     && lk != 112                   // 'descendant'
     && lk != 113                   // 'descendant-or-self'
     && lk != 114                   // 'descending'
     && lk != 119                   // 'div'
     && lk != 120                   // 'document'
     && lk != 121                   // 'document-node'
     && lk != 122                   // 'element'
     && lk != 123                   // 'else'
     && lk != 124                   // 'empty'
     && lk != 125                   // 'empty-sequence'
     && lk != 126                   // 'encoding'
     && lk != 127                   // 'end'
     && lk != 129                   // 'eq'
     && lk != 130                   // 'every'
     && lk != 132                   // 'except'
     && lk != 134                   // 'external'
     && lk != 135                   // 'false'
     && lk != 136                   // 'first'
     && lk != 137                   // 'following'
     && lk != 138                   // 'following-sibling'
     && lk != 143                   // 'ft-option'
     && lk != 147                   // 'function'
     && lk != 148                   // 'ge'
     && lk != 150                   // 'group'
     && lk != 152                   // 'gt'
     && lk != 153                   // 'idiv'
     && lk != 155                   // 'import'
     && lk != 156                   // 'in'
     && lk != 157                   // 'index'
     && lk != 161                   // 'insert'
     && lk != 162                   // 'instance'
     && lk != 163                   // 'integrity'
     && lk != 164                   // 'intersect'
     && lk != 165                   // 'into'
     && lk != 166                   // 'is'
     && lk != 167                   // 'item'
     && lk != 168                   // 'json'
     && lk != 169                   // 'json-item'
     && lk != 170                   // 'jsoniq'
     && lk != 173                   // 'last'
     && lk != 174                   // 'lax'
     && lk != 175                   // 'le'
     && lk != 179                   // 'loop'
     && lk != 181                   // 'lt'
     && lk != 183                   // 'mod'
     && lk != 184                   // 'modify'
     && lk != 185                   // 'module'
     && lk != 187                   // 'namespace'
     && lk != 188                   // 'namespace-node'
     && lk != 189                   // 'ne'
     && lk != 194                   // 'node'
     && lk != 195                   // 'nodes'
     && lk != 196                   // 'not'
     && lk != 197                   // 'null'
     && lk != 198                   // 'object'
     && lk != 202                   // 'only'
     && lk != 203                   // 'option'
     && lk != 204                   // 'or'
     && lk != 205                   // 'order'
     && lk != 206                   // 'ordered'
     && lk != 207                   // 'ordering'
     && lk != 210                   // 'parent'
     && lk != 216                   // 'preceding'
     && lk != 217                   // 'preceding-sibling'
     && lk != 220                   // 'processing-instruction'
     && lk != 222                   // 'rename'
     && lk != 223                   // 'replace'
     && lk != 224                   // 'return'
     && lk != 225                   // 'returning'
     && lk != 226                   // 'revalidation'
     && lk != 228                   // 'satisfies'
     && lk != 229                   // 'schema'
     && lk != 230                   // 'schema-attribute'
     && lk != 231                   // 'schema-element'
     && lk != 232                   // 'score'
     && lk != 233                   // 'select'
     && lk != 234                   // 'self'
     && lk != 239                   // 'sliding'
     && lk != 240                   // 'some'
     && lk != 241                   // 'stable'
     && lk != 242                   // 'start'
     && lk != 245                   // 'strict'
     && lk != 247                   // 'structured-item'
     && lk != 249                   // 'text'
     && lk != 253                   // 'to'
     && lk != 254                   // 'treat'
     && lk != 255                   // 'true'
     && lk != 257                   // 'tumbling'
     && lk != 258                   // 'type'
     && lk != 260                   // 'union'
     && lk != 262                   // 'unordered'
     && lk != 263                   // 'updating'
     && lk != 266                   // 'validate'
     && lk != 267                   // 'value'
     && lk != 269                   // 'version'
     && lk != 272                   // 'where'
     && lk != 276                   // 'with'
     && lk != 283                   // '{|'
     && lk != 10009                 // '{' NCName^Token
     && lk != 14935                 // 'break' '#'
     && lk != 14951                 // 'continue' '#'
     && lk != 14981                 // 'exit' '#'
     && lk != 14987                 // 'for' '#'
     && lk != 14990                 // 'from' '#'
     && lk != 15002                 // 'if' '#'
     && lk != 15025                 // 'let' '#'
     && lk != 15096                 // 'switch' '#'
     && lk != 15104                 // 'try' '#'
     && lk != 15107                 // 'typeswitch' '#'
     && lk != 15116                 // 'variable' '#'
     && lk != 15121                 // 'while' '#'
     && lk != 16011                 // 'for' '$'
     && lk != 16014                 // 'from' '$'
     && lk != 16049                 // 'let' '$'
     && lk != 16140                 // 'variable' '$'
     && lk != 18007                 // 'break' '('
     && lk != 18023                 // 'continue' '('
     && lk != 18053                 // 'exit' '('
     && lk != 18059                 // 'for' '('
     && lk != 18062                 // 'from' '('
     && lk != 18074                 // 'if' '('
     && lk != 18097                 // 'let' '('
     && lk != 18168                 // 'switch' '('
     && lk != 18176                 // 'try' '('
     && lk != 18179                 // 'typeswitch' '('
     && lk != 18188                 // 'variable' '('
     && lk != 91735                 // 'break' 'loop'
     && lk != 91751                 // 'continue' 'loop'
     && lk != 115333                // 'exit' 'returning'
     && lk != 118961                // 'let' 'score'
     && lk != 122507                // 'for' 'sliding'
     && lk != 122510                // 'from' 'sliding'
     && lk != 131723                // 'for' 'tumbling'
     && lk != 131726                // 'from' 'tumbling'
     && lk != 144128                // 'try' '{'
     && lk != 147225)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 91735:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 91751:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 115333:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      parse_FLWORStatement();
      break;
    case 18074:                     // 'if' '('
      parse_IfStatement();
      break;
    case 18168:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 144128:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16140:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 54:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(145);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 177:                       // 'let'
      lookahead2W(167);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 268:                       // 'variable'
      lookahead2W(141);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 281:                       // '{'
      lookahead2W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 33:                        // '%'
      lookahead2W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(143);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 6                     // EQName^Token
     && lk != 8                     // IntegerLiteral
     && lk != 9                     // DecimalLiteral
     && lk != 10                    // DoubleLiteral
     && lk != 11                    // StringLiteral
     && lk != 32                    // '$$'
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 47                    // '/'
     && lk != 48                    // '//'
     && lk != 54                    // ';'
     && lk != 55                    // '<'
     && lk != 56                    // '<!--'
     && lk != 60                    // '<?'
     && lk != 69                    // '['
     && lk != 71                    // 'after'
     && lk != 73                    // 'allowing'
     && lk != 74                    // 'ancestor'
     && lk != 75                    // 'ancestor-or-self'
     && lk != 76                    // 'and'
     && lk != 78                    // 'append'
     && lk != 79                    // 'array'
     && lk != 80                    // 'as'
     && lk != 81                    // 'ascending'
     && lk != 82                    // 'at'
     && lk != 83                    // 'attribute'
     && lk != 84                    // 'base-uri'
     && lk != 85                    // 'before'
     && lk != 86                    // 'boundary-space'
     && lk != 89                    // 'case'
     && lk != 90                    // 'cast'
     && lk != 91                    // 'castable'
     && lk != 92                    // 'catch'
     && lk != 94                    // 'child'
     && lk != 95                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 98                    // 'constraint'
     && lk != 99                    // 'construction'
     && lk != 102                   // 'context'
     && lk != 104                   // 'copy'
     && lk != 105                   // 'copy-namespaces'
     && lk != 106                   // 'count'
     && lk != 107                   // 'decimal-format'
     && lk != 109                   // 'declare'
     && lk != 110                   // 'default'
     && lk != 111                   // 'delete'
     && lk != 112                   // 'descendant'
     && lk != 113                   // 'descendant-or-self'
     && lk != 114                   // 'descending'
     && lk != 119                   // 'div'
     && lk != 120                   // 'document'
     && lk != 121                   // 'document-node'
     && lk != 122                   // 'element'
     && lk != 123                   // 'else'
     && lk != 124                   // 'empty'
     && lk != 125                   // 'empty-sequence'
     && lk != 126                   // 'encoding'
     && lk != 127                   // 'end'
     && lk != 129                   // 'eq'
     && lk != 130                   // 'every'
     && lk != 132                   // 'except'
     && lk != 134                   // 'external'
     && lk != 135                   // 'false'
     && lk != 136                   // 'first'
     && lk != 137                   // 'following'
     && lk != 138                   // 'following-sibling'
     && lk != 143                   // 'ft-option'
     && lk != 147                   // 'function'
     && lk != 148                   // 'ge'
     && lk != 150                   // 'group'
     && lk != 152                   // 'gt'
     && lk != 153                   // 'idiv'
     && lk != 155                   // 'import'
     && lk != 156                   // 'in'
     && lk != 157                   // 'index'
     && lk != 161                   // 'insert'
     && lk != 162                   // 'instance'
     && lk != 163                   // 'integrity'
     && lk != 164                   // 'intersect'
     && lk != 165                   // 'into'
     && lk != 166                   // 'is'
     && lk != 167                   // 'item'
     && lk != 168                   // 'json'
     && lk != 169                   // 'json-item'
     && lk != 170                   // 'jsoniq'
     && lk != 173                   // 'last'
     && lk != 174                   // 'lax'
     && lk != 175                   // 'le'
     && lk != 179                   // 'loop'
     && lk != 181                   // 'lt'
     && lk != 183                   // 'mod'
     && lk != 184                   // 'modify'
     && lk != 185                   // 'module'
     && lk != 187                   // 'namespace'
     && lk != 188                   // 'namespace-node'
     && lk != 189                   // 'ne'
     && lk != 194                   // 'node'
     && lk != 195                   // 'nodes'
     && lk != 196                   // 'not'
     && lk != 197                   // 'null'
     && lk != 198                   // 'object'
     && lk != 202                   // 'only'
     && lk != 203                   // 'option'
     && lk != 204                   // 'or'
     && lk != 205                   // 'order'
     && lk != 206                   // 'ordered'
     && lk != 207                   // 'ordering'
     && lk != 210                   // 'parent'
     && lk != 216                   // 'preceding'
     && lk != 217                   // 'preceding-sibling'
     && lk != 220                   // 'processing-instruction'
     && lk != 222                   // 'rename'
     && lk != 223                   // 'replace'
     && lk != 224                   // 'return'
     && lk != 225                   // 'returning'
     && lk != 226                   // 'revalidation'
     && lk != 228                   // 'satisfies'
     && lk != 229                   // 'schema'
     && lk != 230                   // 'schema-attribute'
     && lk != 231                   // 'schema-element'
     && lk != 232                   // 'score'
     && lk != 233                   // 'select'
     && lk != 234                   // 'self'
     && lk != 239                   // 'sliding'
     && lk != 240                   // 'some'
     && lk != 241                   // 'stable'
     && lk != 242                   // 'start'
     && lk != 245                   // 'strict'
     && lk != 247                   // 'structured-item'
     && lk != 249                   // 'text'
     && lk != 253                   // 'to'
     && lk != 254                   // 'treat'
     && lk != 255                   // 'true'
     && lk != 257                   // 'tumbling'
     && lk != 258                   // 'type'
     && lk != 260                   // 'union'
     && lk != 262                   // 'unordered'
     && lk != 263                   // 'updating'
     && lk != 266                   // 'validate'
     && lk != 267                   // 'value'
     && lk != 269                   // 'version'
     && lk != 272                   // 'where'
     && lk != 276                   // 'with'
     && lk != 283                   // '{|'
     && lk != 10009                 // '{' NCName^Token
     && lk != 14935                 // 'break' '#'
     && lk != 14951                 // 'continue' '#'
     && lk != 14981                 // 'exit' '#'
     && lk != 14987                 // 'for' '#'
     && lk != 14990                 // 'from' '#'
     && lk != 15002                 // 'if' '#'
     && lk != 15025                 // 'let' '#'
     && lk != 15096                 // 'switch' '#'
     && lk != 15104                 // 'try' '#'
     && lk != 15107                 // 'typeswitch' '#'
     && lk != 15116                 // 'variable' '#'
     && lk != 15121                 // 'while' '#'
     && lk != 16011                 // 'for' '$'
     && lk != 16014                 // 'from' '$'
     && lk != 16049                 // 'let' '$'
     && lk != 16140                 // 'variable' '$'
     && lk != 18007                 // 'break' '('
     && lk != 18023                 // 'continue' '('
     && lk != 18053                 // 'exit' '('
     && lk != 18059                 // 'for' '('
     && lk != 18062                 // 'from' '('
     && lk != 18074                 // 'if' '('
     && lk != 18097                 // 'let' '('
     && lk != 18168                 // 'switch' '('
     && lk != 18176                 // 'try' '('
     && lk != 18179                 // 'typeswitch' '('
     && lk != 18188                 // 'variable' '('
     && lk != 91735                 // 'break' 'loop'
     && lk != 91751                 // 'continue' 'loop'
     && lk != 115333                // 'exit' 'returning'
     && lk != 118961                // 'let' 'score'
     && lk != 122507                // 'for' 'sliding'
     && lk != 122510                // 'from' 'sliding'
     && lk != 131723                // 'for' 'tumbling'
     && lk != 131726                // 'from' 'tumbling'
     && lk != 144128                // 'try' '{'
     && lk != 147225)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(8, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(8, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(8, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(8, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(8, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 91735:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 91751:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 115333:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      try_FLWORStatement();
      break;
    case 18074:                     // 'if' '('
      try_IfStatement();
      break;
    case 18168:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 144128:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16140:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 54:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(54);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(54);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(54);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    shiftT(54);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(281);                     // '{'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    shift(287);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(281);                    // '{'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    try_Statements();
    shiftT(287);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(87);                      // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shift(179);                     // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shift(54);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(87);                     // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shiftT(179);                    // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shiftT(54);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(103);                     // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shift(179);                     // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shift(54);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(103);                    // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shiftT(179);                    // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shiftT(54);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(133);                     // 'exit'
    lookahead1W(72);                // S^WS | '(:' | 'returning'
    shift(225);                     // 'returning'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(54);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(133);                    // 'exit'
    lookahead1W(72);                // S^WS | '(:' | 'returning'
    shiftT(225);                    // 'returning'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    shiftT(54);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(200);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(200);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(154);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shift(250);                     // 'then'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(51);                // S^WS | '(:' | 'else'
    shift(123);                     // 'else'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(154);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shiftT(250);                    // 'then'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
    lookahead1W(51);                // S^WS | '(:' | 'else'
    shiftT(123);                    // 'else'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(248);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(114);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(248);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(114);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(89);                    // 'case'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(89);                   // 'case'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(256);                     // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      shift(92);                    // 'catch'
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(285);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(257);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      default:
        lk = l1;
      }
      if (lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 39004               // 'catch' 'and'
       && lk != 40028               // 'catch' 'append'
       && lk != 40540               // 'catch' 'array'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 42588               // 'catch' 'attribute'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 46172               // 'catch' 'cast'
       && lk != 46684               // 'catch' 'castable'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 49756               // 'catch' 'comment'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61020               // 'catch' 'div'
       && lk != 61532               // 'catch' 'document'
       && lk != 62044               // 'catch' 'document-node'
       && lk != 62556               // 'catch' 'element'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64092               // 'catch' 'empty-sequence'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66140               // 'catch' 'eq'
       && lk != 66652               // 'catch' 'every'
       && lk != 67676               // 'catch' 'except'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'false'
       && lk != 69724               // 'catch' 'first'
       && lk != 70236               // 'catch' 'following'
       && lk != 70748               // 'catch' 'following-sibling'
       && lk != 71260               // 'catch' 'for'
       && lk != 72796               // 'catch' 'from'
       && lk != 73308               // 'catch' 'ft-option'
       && lk != 75356               // 'catch' 'function'
       && lk != 75868               // 'catch' 'ge'
       && lk != 76892               // 'catch' 'group'
       && lk != 77916               // 'catch' 'gt'
       && lk != 78428               // 'catch' 'idiv'
       && lk != 78940               // 'catch' 'if'
       && lk != 79452               // 'catch' 'import'
       && lk != 79964               // 'catch' 'in'
       && lk != 80476               // 'catch' 'index'
       && lk != 82524               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'instance'
       && lk != 83548               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'intersect'
       && lk != 84572               // 'catch' 'into'
       && lk != 85084               // 'catch' 'is'
       && lk != 85596               // 'catch' 'item'
       && lk != 86108               // 'catch' 'json'
       && lk != 86620               // 'catch' 'json-item'
       && lk != 87132               // 'catch' 'jsoniq'
       && lk != 88668               // 'catch' 'last'
       && lk != 89180               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'le'
       && lk != 90716               // 'catch' 'let'
       && lk != 91740               // 'catch' 'loop'
       && lk != 92764               // 'catch' 'lt'
       && lk != 93788               // 'catch' 'mod'
       && lk != 94300               // 'catch' 'modify'
       && lk != 94812               // 'catch' 'module'
       && lk != 95836               // 'catch' 'namespace'
       && lk != 96348               // 'catch' 'namespace-node'
       && lk != 96860               // 'catch' 'ne'
       && lk != 99420               // 'catch' 'node'
       && lk != 99932               // 'catch' 'nodes'
       && lk != 100956              // 'catch' 'null'
       && lk != 101468              // 'catch' 'object'
       && lk != 103516              // 'catch' 'only'
       && lk != 104028              // 'catch' 'option'
       && lk != 104540              // 'catch' 'or'
       && lk != 105052              // 'catch' 'order'
       && lk != 105564              // 'catch' 'ordered'
       && lk != 106076              // 'catch' 'ordering'
       && lk != 107612              // 'catch' 'parent'
       && lk != 110684              // 'catch' 'preceding'
       && lk != 111196              // 'catch' 'preceding-sibling'
       && lk != 112732              // 'catch' 'processing-instruction'
       && lk != 113756              // 'catch' 'rename'
       && lk != 114268              // 'catch' 'replace'
       && lk != 114780              // 'catch' 'return'
       && lk != 115292              // 'catch' 'returning'
       && lk != 115804              // 'catch' 'revalidation'
       && lk != 116828              // 'catch' 'satisfies'
       && lk != 117340              // 'catch' 'schema'
       && lk != 117852              // 'catch' 'schema-attribute'
       && lk != 118364              // 'catch' 'schema-element'
       && lk != 118876              // 'catch' 'score'
       && lk != 119388              // 'catch' 'select'
       && lk != 119900              // 'catch' 'self'
       && lk != 122460              // 'catch' 'sliding'
       && lk != 122972              // 'catch' 'some'
       && lk != 123484              // 'catch' 'stable'
       && lk != 123996              // 'catch' 'start'
       && lk != 125532              // 'catch' 'strict'
       && lk != 126556              // 'catch' 'structured-item'
       && lk != 127068              // 'catch' 'switch'
       && lk != 127580              // 'catch' 'text'
       && lk != 129628              // 'catch' 'to'
       && lk != 130140              // 'catch' 'treat'
       && lk != 130652              // 'catch' 'true'
       && lk != 131164              // 'catch' 'try'
       && lk != 131676              // 'catch' 'tumbling'
       && lk != 132188              // 'catch' 'type'
       && lk != 132700              // 'catch' 'typeswitch'
       && lk != 133212              // 'catch' 'union'
       && lk != 134236              // 'catch' 'unordered'
       && lk != 134748              // 'catch' 'updating'
       && lk != 136284              // 'catch' 'validate'
       && lk != 136796              // 'catch' 'value'
       && lk != 137308              // 'catch' 'variable'
       && lk != 137820              // 'catch' 'version'
       && lk != 139356              // 'catch' 'where'
       && lk != 139868              // 'catch' 'while'
       && lk != 141404)             // 'catch' 'with'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(256);                    // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      shiftT(92);                   // 'catch'
      lookahead1W(250);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_CatchErrorList();
      try_BlockStatement();
      lookahead1W(285);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(257);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      default:
        lk = l1;
      }
      if (lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 39004               // 'catch' 'and'
       && lk != 40028               // 'catch' 'append'
       && lk != 40540               // 'catch' 'array'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 42588               // 'catch' 'attribute'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 46172               // 'catch' 'cast'
       && lk != 46684               // 'catch' 'castable'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 49756               // 'catch' 'comment'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61020               // 'catch' 'div'
       && lk != 61532               // 'catch' 'document'
       && lk != 62044               // 'catch' 'document-node'
       && lk != 62556               // 'catch' 'element'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64092               // 'catch' 'empty-sequence'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66140               // 'catch' 'eq'
       && lk != 66652               // 'catch' 'every'
       && lk != 67676               // 'catch' 'except'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'false'
       && lk != 69724               // 'catch' 'first'
       && lk != 70236               // 'catch' 'following'
       && lk != 70748               // 'catch' 'following-sibling'
       && lk != 71260               // 'catch' 'for'
       && lk != 72796               // 'catch' 'from'
       && lk != 73308               // 'catch' 'ft-option'
       && lk != 75356               // 'catch' 'function'
       && lk != 75868               // 'catch' 'ge'
       && lk != 76892               // 'catch' 'group'
       && lk != 77916               // 'catch' 'gt'
       && lk != 78428               // 'catch' 'idiv'
       && lk != 78940               // 'catch' 'if'
       && lk != 79452               // 'catch' 'import'
       && lk != 79964               // 'catch' 'in'
       && lk != 80476               // 'catch' 'index'
       && lk != 82524               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'instance'
       && lk != 83548               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'intersect'
       && lk != 84572               // 'catch' 'into'
       && lk != 85084               // 'catch' 'is'
       && lk != 85596               // 'catch' 'item'
       && lk != 86108               // 'catch' 'json'
       && lk != 86620               // 'catch' 'json-item'
       && lk != 87132               // 'catch' 'jsoniq'
       && lk != 88668               // 'catch' 'last'
       && lk != 89180               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'le'
       && lk != 90716               // 'catch' 'let'
       && lk != 91740               // 'catch' 'loop'
       && lk != 92764               // 'catch' 'lt'
       && lk != 93788               // 'catch' 'mod'
       && lk != 94300               // 'catch' 'modify'
       && lk != 94812               // 'catch' 'module'
       && lk != 95836               // 'catch' 'namespace'
       && lk != 96348               // 'catch' 'namespace-node'
       && lk != 96860               // 'catch' 'ne'
       && lk != 99420               // 'catch' 'node'
       && lk != 99932               // 'catch' 'nodes'
       && lk != 100956              // 'catch' 'null'
       && lk != 101468              // 'catch' 'object'
       && lk != 103516              // 'catch' 'only'
       && lk != 104028              // 'catch' 'option'
       && lk != 104540              // 'catch' 'or'
       && lk != 105052              // 'catch' 'order'
       && lk != 105564              // 'catch' 'ordered'
       && lk != 106076              // 'catch' 'ordering'
       && lk != 107612              // 'catch' 'parent'
       && lk != 110684              // 'catch' 'preceding'
       && lk != 111196              // 'catch' 'preceding-sibling'
       && lk != 112732              // 'catch' 'processing-instruction'
       && lk != 113756              // 'catch' 'rename'
       && lk != 114268              // 'catch' 'replace'
       && lk != 114780              // 'catch' 'return'
       && lk != 115292              // 'catch' 'returning'
       && lk != 115804              // 'catch' 'revalidation'
       && lk != 116828              // 'catch' 'satisfies'
       && lk != 117340              // 'catch' 'schema'
       && lk != 117852              // 'catch' 'schema-attribute'
       && lk != 118364              // 'catch' 'schema-element'
       && lk != 118876              // 'catch' 'score'
       && lk != 119388              // 'catch' 'select'
       && lk != 119900              // 'catch' 'self'
       && lk != 122460              // 'catch' 'sliding'
       && lk != 122972              // 'catch' 'some'
       && lk != 123484              // 'catch' 'stable'
       && lk != 123996              // 'catch' 'start'
       && lk != 125532              // 'catch' 'strict'
       && lk != 126556              // 'catch' 'structured-item'
       && lk != 127068              // 'catch' 'switch'
       && lk != 127580              // 'catch' 'text'
       && lk != 129628              // 'catch' 'to'
       && lk != 130140              // 'catch' 'treat'
       && lk != 130652              // 'catch' 'true'
       && lk != 131164              // 'catch' 'try'
       && lk != 131676              // 'catch' 'tumbling'
       && lk != 132188              // 'catch' 'type'
       && lk != 132700              // 'catch' 'typeswitch'
       && lk != 133212              // 'catch' 'union'
       && lk != 134236              // 'catch' 'unordered'
       && lk != 134748              // 'catch' 'updating'
       && lk != 136284              // 'catch' 'validate'
       && lk != 136796              // 'catch' 'value'
       && lk != 137308              // 'catch' 'variable'
       && lk != 137820              // 'catch' 'version'
       && lk != 139356              // 'catch' 'where'
       && lk != 139868              // 'catch' 'while'
       && lk != 141404)             // 'catch' 'with'
      {
        break;
      }
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(259);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(114);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(149);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
    }
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(259);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(114);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(149);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
    }
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(89);                      // 'case'
    lookahead1W(259);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
    }
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceType();
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(89);                     // 'case'
    lookahead1W(259);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
    }
    lookahead1W(255);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceType();
    lookahead1W(136);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(268);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(172);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(154);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      shift(53);                    // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(172);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(154);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(54);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(268);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(172);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(154);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      shiftT(53);                   // ':='
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(247);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(172);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(154);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shiftT(53);                 // ':='
        lookahead1W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        try_ExprSingle();
      }
    }
    shiftT(54);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(273);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(273);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    shift(54);                      // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    shiftT(54);                     // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 177:                       // 'let'
      lookahead2W(167);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      parse_FLWORExpr();
      break;
    case 18074:                     // 'if' '('
      parse_IfExpr();
      break;
    case 18168:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 144128:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 177:                       // 'let'
      lookahead2W(167);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      try_FLWORExpr();
      break;
    case 18074:                     // 'if' '('
      try_IfExpr();
      break;
    case 18168:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 144128:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(277);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 223:                       // 'replace'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(141);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17998                 // 'append' '('
     || lk == 18031                 // 'delete' '('
     || lk == 18081                 // 'insert' '('
     || lk == 18142                 // 'rename' '('
     || lk == 99439                 // 'delete' 'node'
     || lk == 99489                 // 'insert' 'node'
     || lk == 99550                 // 'rename' 'node'
     || lk == 99951                 // 'delete' 'nodes'
     || lk == 100001                // 'insert' 'nodes'
     || lk == 136927)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_OrExpr();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_InsertExpr();
            lk = -3;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_DeleteExpr();
              lk = -4;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_RenameExpr();
                lk = -5;
              }
              catch (p5A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_ReplaceExpr();
                  lk = -6;
                }
                catch (p6A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_JSONDeleteExpr();
                    lk = -8;
                  }
                  catch (p8A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_JSONInsertExpr();
                      lk = -9;
                    }
                    catch (p9A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_JSONRenameExpr();
                        lk = -10;
                      }
                      catch (p10A)
                      {
                        try
                        {
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          try_JSONReplaceExpr();
                          lk = -11;
                        }
                        catch (p11A)
                        {
                          lk = -12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16112:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case -3:
      parse_InsertExpr();
      break;
    case -4:
      parse_DeleteExpr();
      break;
    case -5:
      parse_RenameExpr();
      break;
    case -6:
    case 99551:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case -8:
    case 3183:                      // 'delete' EQName^Token
    case 4207:                      // 'delete' IntegerLiteral
    case 4719:                      // 'delete' DecimalLiteral
    case 5231:                      // 'delete' DoubleLiteral
    case 5743:                      // 'delete' StringLiteral
    case 15983:                     // 'delete' '$'
    case 16495:                     // 'delete' '$$'
    case 17007:                     // 'delete' '%'
    case 28271:                     // 'delete' '<'
    case 28783:                     // 'delete' '<!--'
    case 30831:                     // 'delete' '<?'
    case 35439:                     // 'delete' '['
    case 36463:                     // 'delete' 'after'
    case 37487:                     // 'delete' 'allowing'
    case 37999:                     // 'delete' 'ancestor'
    case 38511:                     // 'delete' 'ancestor-or-self'
    case 39023:                     // 'delete' 'and'
    case 40047:                     // 'delete' 'append'
    case 40559:                     // 'delete' 'array'
    case 41071:                     // 'delete' 'as'
    case 41583:                     // 'delete' 'ascending'
    case 42095:                     // 'delete' 'at'
    case 42607:                     // 'delete' 'attribute'
    case 43119:                     // 'delete' 'base-uri'
    case 43631:                     // 'delete' 'before'
    case 44143:                     // 'delete' 'boundary-space'
    case 44655:                     // 'delete' 'break'
    case 45679:                     // 'delete' 'case'
    case 46191:                     // 'delete' 'cast'
    case 46703:                     // 'delete' 'castable'
    case 47215:                     // 'delete' 'catch'
    case 48239:                     // 'delete' 'child'
    case 48751:                     // 'delete' 'collation'
    case 49775:                     // 'delete' 'comment'
    case 50287:                     // 'delete' 'constraint'
    case 50799:                     // 'delete' 'construction'
    case 52335:                     // 'delete' 'context'
    case 52847:                     // 'delete' 'continue'
    case 53359:                     // 'delete' 'copy'
    case 53871:                     // 'delete' 'copy-namespaces'
    case 54383:                     // 'delete' 'count'
    case 54895:                     // 'delete' 'decimal-format'
    case 55919:                     // 'delete' 'declare'
    case 56431:                     // 'delete' 'default'
    case 56943:                     // 'delete' 'delete'
    case 57455:                     // 'delete' 'descendant'
    case 57967:                     // 'delete' 'descendant-or-self'
    case 58479:                     // 'delete' 'descending'
    case 61039:                     // 'delete' 'div'
    case 61551:                     // 'delete' 'document'
    case 62063:                     // 'delete' 'document-node'
    case 62575:                     // 'delete' 'element'
    case 63087:                     // 'delete' 'else'
    case 63599:                     // 'delete' 'empty'
    case 64111:                     // 'delete' 'empty-sequence'
    case 64623:                     // 'delete' 'encoding'
    case 65135:                     // 'delete' 'end'
    case 66159:                     // 'delete' 'eq'
    case 66671:                     // 'delete' 'every'
    case 67695:                     // 'delete' 'except'
    case 68207:                     // 'delete' 'exit'
    case 68719:                     // 'delete' 'external'
    case 69231:                     // 'delete' 'false'
    case 69743:                     // 'delete' 'first'
    case 70255:                     // 'delete' 'following'
    case 70767:                     // 'delete' 'following-sibling'
    case 71279:                     // 'delete' 'for'
    case 72815:                     // 'delete' 'from'
    case 73327:                     // 'delete' 'ft-option'
    case 75375:                     // 'delete' 'function'
    case 75887:                     // 'delete' 'ge'
    case 76911:                     // 'delete' 'group'
    case 77935:                     // 'delete' 'gt'
    case 78447:                     // 'delete' 'idiv'
    case 78959:                     // 'delete' 'if'
    case 79471:                     // 'delete' 'import'
    case 79983:                     // 'delete' 'in'
    case 80495:                     // 'delete' 'index'
    case 82543:                     // 'delete' 'insert'
    case 83055:                     // 'delete' 'instance'
    case 83567:                     // 'delete' 'integrity'
    case 84079:                     // 'delete' 'intersect'
    case 84591:                     // 'delete' 'into'
    case 85103:                     // 'delete' 'is'
    case 85615:                     // 'delete' 'item'
    case 86127:                     // 'delete' 'json'
    case 86639:                     // 'delete' 'json-item'
    case 87151:                     // 'delete' 'jsoniq'
    case 88687:                     // 'delete' 'last'
    case 89199:                     // 'delete' 'lax'
    case 89711:                     // 'delete' 'le'
    case 90735:                     // 'delete' 'let'
    case 91759:                     // 'delete' 'loop'
    case 92783:                     // 'delete' 'lt'
    case 93807:                     // 'delete' 'mod'
    case 94319:                     // 'delete' 'modify'
    case 94831:                     // 'delete' 'module'
    case 95855:                     // 'delete' 'namespace'
    case 96367:                     // 'delete' 'namespace-node'
    case 96879:                     // 'delete' 'ne'
    case 100975:                    // 'delete' 'null'
    case 101487:                    // 'delete' 'object'
    case 103535:                    // 'delete' 'only'
    case 104047:                    // 'delete' 'option'
    case 104559:                    // 'delete' 'or'
    case 105071:                    // 'delete' 'order'
    case 105583:                    // 'delete' 'ordered'
    case 106095:                    // 'delete' 'ordering'
    case 107631:                    // 'delete' 'parent'
    case 110703:                    // 'delete' 'preceding'
    case 111215:                    // 'delete' 'preceding-sibling'
    case 112751:                    // 'delete' 'processing-instruction'
    case 113775:                    // 'delete' 'rename'
    case 114287:                    // 'delete' 'replace'
    case 114799:                    // 'delete' 'return'
    case 115311:                    // 'delete' 'returning'
    case 115823:                    // 'delete' 'revalidation'
    case 116847:                    // 'delete' 'satisfies'
    case 117359:                    // 'delete' 'schema'
    case 117871:                    // 'delete' 'schema-attribute'
    case 118383:                    // 'delete' 'schema-element'
    case 118895:                    // 'delete' 'score'
    case 119407:                    // 'delete' 'select'
    case 119919:                    // 'delete' 'self'
    case 122479:                    // 'delete' 'sliding'
    case 122991:                    // 'delete' 'some'
    case 123503:                    // 'delete' 'stable'
    case 124015:                    // 'delete' 'start'
    case 125551:                    // 'delete' 'strict'
    case 126575:                    // 'delete' 'structured-item'
    case 127087:                    // 'delete' 'switch'
    case 127599:                    // 'delete' 'text'
    case 129647:                    // 'delete' 'to'
    case 130159:                    // 'delete' 'treat'
    case 130671:                    // 'delete' 'true'
    case 131183:                    // 'delete' 'try'
    case 131695:                    // 'delete' 'tumbling'
    case 132207:                    // 'delete' 'type'
    case 132719:                    // 'delete' 'typeswitch'
    case 133231:                    // 'delete' 'union'
    case 134255:                    // 'delete' 'unordered'
    case 134767:                    // 'delete' 'updating'
    case 136303:                    // 'delete' 'validate'
    case 136815:                    // 'delete' 'value'
    case 137327:                    // 'delete' 'variable'
    case 137839:                    // 'delete' 'version'
    case 139375:                    // 'delete' 'where'
    case 139887:                    // 'delete' 'while'
    case 141423:                    // 'delete' 'with'
    case 143983:                    // 'delete' '{'
    case 145007:                    // 'delete' '{|'
      parse_JSONDeleteExpr();
      break;
    case -9:
    case 3233:                      // 'insert' EQName^Token
    case 4257:                      // 'insert' IntegerLiteral
    case 4769:                      // 'insert' DecimalLiteral
    case 5281:                      // 'insert' DoubleLiteral
    case 5793:                      // 'insert' StringLiteral
    case 9889:                      // 'insert' NCName^Token
    case 16033:                     // 'insert' '$'
    case 16545:                     // 'insert' '$$'
    case 17057:                     // 'insert' '%'
    case 18593:                     // 'insert' '(#'
    case 21153:                     // 'insert' '+'
    case 22177:                     // 'insert' '-'
    case 24225:                     // 'insert' '/'
    case 24737:                     // 'insert' '//'
    case 28321:                     // 'insert' '<'
    case 28833:                     // 'insert' '<!--'
    case 30881:                     // 'insert' '<?'
    case 35489:                     // 'insert' '['
    case 36513:                     // 'insert' 'after'
    case 37537:                     // 'insert' 'allowing'
    case 38049:                     // 'insert' 'ancestor'
    case 38561:                     // 'insert' 'ancestor-or-self'
    case 39073:                     // 'insert' 'and'
    case 40097:                     // 'insert' 'append'
    case 40609:                     // 'insert' 'array'
    case 41121:                     // 'insert' 'as'
    case 41633:                     // 'insert' 'ascending'
    case 42145:                     // 'insert' 'at'
    case 42657:                     // 'insert' 'attribute'
    case 43169:                     // 'insert' 'base-uri'
    case 43681:                     // 'insert' 'before'
    case 44193:                     // 'insert' 'boundary-space'
    case 44705:                     // 'insert' 'break'
    case 45729:                     // 'insert' 'case'
    case 46241:                     // 'insert' 'cast'
    case 46753:                     // 'insert' 'castable'
    case 47265:                     // 'insert' 'catch'
    case 48289:                     // 'insert' 'child'
    case 48801:                     // 'insert' 'collation'
    case 49825:                     // 'insert' 'comment'
    case 50337:                     // 'insert' 'constraint'
    case 50849:                     // 'insert' 'construction'
    case 52385:                     // 'insert' 'context'
    case 52897:                     // 'insert' 'continue'
    case 53409:                     // 'insert' 'copy'
    case 53921:                     // 'insert' 'copy-namespaces'
    case 54433:                     // 'insert' 'count'
    case 54945:                     // 'insert' 'decimal-format'
    case 55969:                     // 'insert' 'declare'
    case 56481:                     // 'insert' 'default'
    case 56993:                     // 'insert' 'delete'
    case 57505:                     // 'insert' 'descendant'
    case 58017:                     // 'insert' 'descendant-or-self'
    case 58529:                     // 'insert' 'descending'
    case 61089:                     // 'insert' 'div'
    case 61601:                     // 'insert' 'document'
    case 62113:                     // 'insert' 'document-node'
    case 62625:                     // 'insert' 'element'
    case 63137:                     // 'insert' 'else'
    case 63649:                     // 'insert' 'empty'
    case 64161:                     // 'insert' 'empty-sequence'
    case 64673:                     // 'insert' 'encoding'
    case 65185:                     // 'insert' 'end'
    case 66209:                     // 'insert' 'eq'
    case 66721:                     // 'insert' 'every'
    case 67745:                     // 'insert' 'except'
    case 68257:                     // 'insert' 'exit'
    case 68769:                     // 'insert' 'external'
    case 69281:                     // 'insert' 'false'
    case 69793:                     // 'insert' 'first'
    case 70305:                     // 'insert' 'following'
    case 70817:                     // 'insert' 'following-sibling'
    case 71329:                     // 'insert' 'for'
    case 72865:                     // 'insert' 'from'
    case 73377:                     // 'insert' 'ft-option'
    case 75425:                     // 'insert' 'function'
    case 75937:                     // 'insert' 'ge'
    case 76961:                     // 'insert' 'group'
    case 77985:                     // 'insert' 'gt'
    case 78497:                     // 'insert' 'idiv'
    case 79009:                     // 'insert' 'if'
    case 79521:                     // 'insert' 'import'
    case 80033:                     // 'insert' 'in'
    case 80545:                     // 'insert' 'index'
    case 82593:                     // 'insert' 'insert'
    case 83105:                     // 'insert' 'instance'
    case 83617:                     // 'insert' 'integrity'
    case 84129:                     // 'insert' 'intersect'
    case 84641:                     // 'insert' 'into'
    case 85153:                     // 'insert' 'is'
    case 85665:                     // 'insert' 'item'
    case 86177:                     // 'insert' 'json'
    case 86689:                     // 'insert' 'json-item'
    case 87201:                     // 'insert' 'jsoniq'
    case 88737:                     // 'insert' 'last'
    case 89249:                     // 'insert' 'lax'
    case 89761:                     // 'insert' 'le'
    case 90785:                     // 'insert' 'let'
    case 91809:                     // 'insert' 'loop'
    case 92833:                     // 'insert' 'lt'
    case 93857:                     // 'insert' 'mod'
    case 94369:                     // 'insert' 'modify'
    case 94881:                     // 'insert' 'module'
    case 95905:                     // 'insert' 'namespace'
    case 96417:                     // 'insert' 'namespace-node'
    case 96929:                     // 'insert' 'ne'
    case 100513:                    // 'insert' 'not'
    case 101025:                    // 'insert' 'null'
    case 101537:                    // 'insert' 'object'
    case 103585:                    // 'insert' 'only'
    case 104097:                    // 'insert' 'option'
    case 104609:                    // 'insert' 'or'
    case 105121:                    // 'insert' 'order'
    case 105633:                    // 'insert' 'ordered'
    case 106145:                    // 'insert' 'ordering'
    case 107681:                    // 'insert' 'parent'
    case 110753:                    // 'insert' 'preceding'
    case 111265:                    // 'insert' 'preceding-sibling'
    case 112801:                    // 'insert' 'processing-instruction'
    case 113825:                    // 'insert' 'rename'
    case 114337:                    // 'insert' 'replace'
    case 114849:                    // 'insert' 'return'
    case 115361:                    // 'insert' 'returning'
    case 115873:                    // 'insert' 'revalidation'
    case 116897:                    // 'insert' 'satisfies'
    case 117409:                    // 'insert' 'schema'
    case 117921:                    // 'insert' 'schema-attribute'
    case 118433:                    // 'insert' 'schema-element'
    case 118945:                    // 'insert' 'score'
    case 119457:                    // 'insert' 'select'
    case 119969:                    // 'insert' 'self'
    case 122529:                    // 'insert' 'sliding'
    case 123041:                    // 'insert' 'some'
    case 123553:                    // 'insert' 'stable'
    case 124065:                    // 'insert' 'start'
    case 125601:                    // 'insert' 'strict'
    case 126625:                    // 'insert' 'structured-item'
    case 127137:                    // 'insert' 'switch'
    case 127649:                    // 'insert' 'text'
    case 129697:                    // 'insert' 'to'
    case 130209:                    // 'insert' 'treat'
    case 130721:                    // 'insert' 'true'
    case 131233:                    // 'insert' 'try'
    case 131745:                    // 'insert' 'tumbling'
    case 132257:                    // 'insert' 'type'
    case 132769:                    // 'insert' 'typeswitch'
    case 133281:                    // 'insert' 'union'
    case 134305:                    // 'insert' 'unordered'
    case 134817:                    // 'insert' 'updating'
    case 136353:                    // 'insert' 'validate'
    case 136865:                    // 'insert' 'value'
    case 137377:                    // 'insert' 'variable'
    case 137889:                    // 'insert' 'version'
    case 139425:                    // 'insert' 'where'
    case 139937:                    // 'insert' 'while'
    case 141473:                    // 'insert' 'with'
    case 144033:                    // 'insert' '{'
    case 145057:                    // 'insert' '{|'
      parse_JSONInsertExpr();
      break;
    case -10:
    case 3294:                      // 'rename' EQName^Token
    case 4318:                      // 'rename' IntegerLiteral
    case 4830:                      // 'rename' DecimalLiteral
    case 5342:                      // 'rename' DoubleLiteral
    case 5854:                      // 'rename' StringLiteral
    case 16094:                     // 'rename' '$'
    case 16606:                     // 'rename' '$$'
    case 17118:                     // 'rename' '%'
    case 28382:                     // 'rename' '<'
    case 28894:                     // 'rename' '<!--'
    case 30942:                     // 'rename' '<?'
    case 35550:                     // 'rename' '['
    case 36574:                     // 'rename' 'after'
    case 37598:                     // 'rename' 'allowing'
    case 38110:                     // 'rename' 'ancestor'
    case 38622:                     // 'rename' 'ancestor-or-self'
    case 39134:                     // 'rename' 'and'
    case 40158:                     // 'rename' 'append'
    case 40670:                     // 'rename' 'array'
    case 41182:                     // 'rename' 'as'
    case 41694:                     // 'rename' 'ascending'
    case 42206:                     // 'rename' 'at'
    case 42718:                     // 'rename' 'attribute'
    case 43230:                     // 'rename' 'base-uri'
    case 43742:                     // 'rename' 'before'
    case 44254:                     // 'rename' 'boundary-space'
    case 44766:                     // 'rename' 'break'
    case 45790:                     // 'rename' 'case'
    case 46302:                     // 'rename' 'cast'
    case 46814:                     // 'rename' 'castable'
    case 47326:                     // 'rename' 'catch'
    case 48350:                     // 'rename' 'child'
    case 48862:                     // 'rename' 'collation'
    case 49886:                     // 'rename' 'comment'
    case 50398:                     // 'rename' 'constraint'
    case 50910:                     // 'rename' 'construction'
    case 52446:                     // 'rename' 'context'
    case 52958:                     // 'rename' 'continue'
    case 53470:                     // 'rename' 'copy'
    case 53982:                     // 'rename' 'copy-namespaces'
    case 54494:                     // 'rename' 'count'
    case 55006:                     // 'rename' 'decimal-format'
    case 56030:                     // 'rename' 'declare'
    case 56542:                     // 'rename' 'default'
    case 57054:                     // 'rename' 'delete'
    case 57566:                     // 'rename' 'descendant'
    case 58078:                     // 'rename' 'descendant-or-self'
    case 58590:                     // 'rename' 'descending'
    case 61150:                     // 'rename' 'div'
    case 61662:                     // 'rename' 'document'
    case 62174:                     // 'rename' 'document-node'
    case 62686:                     // 'rename' 'element'
    case 63198:                     // 'rename' 'else'
    case 63710:                     // 'rename' 'empty'
    case 64222:                     // 'rename' 'empty-sequence'
    case 64734:                     // 'rename' 'encoding'
    case 65246:                     // 'rename' 'end'
    case 66270:                     // 'rename' 'eq'
    case 66782:                     // 'rename' 'every'
    case 67806:                     // 'rename' 'except'
    case 68318:                     // 'rename' 'exit'
    case 68830:                     // 'rename' 'external'
    case 69342:                     // 'rename' 'false'
    case 69854:                     // 'rename' 'first'
    case 70366:                     // 'rename' 'following'
    case 70878:                     // 'rename' 'following-sibling'
    case 71390:                     // 'rename' 'for'
    case 72926:                     // 'rename' 'from'
    case 73438:                     // 'rename' 'ft-option'
    case 75486:                     // 'rename' 'function'
    case 75998:                     // 'rename' 'ge'
    case 77022:                     // 'rename' 'group'
    case 78046:                     // 'rename' 'gt'
    case 78558:                     // 'rename' 'idiv'
    case 79070:                     // 'rename' 'if'
    case 79582:                     // 'rename' 'import'
    case 80094:                     // 'rename' 'in'
    case 80606:                     // 'rename' 'index'
    case 82654:                     // 'rename' 'insert'
    case 83166:                     // 'rename' 'instance'
    case 83678:                     // 'rename' 'integrity'
    case 84190:                     // 'rename' 'intersect'
    case 84702:                     // 'rename' 'into'
    case 85214:                     // 'rename' 'is'
    case 85726:                     // 'rename' 'item'
    case 86238:                     // 'rename' 'json'
    case 86750:                     // 'rename' 'json-item'
    case 87262:                     // 'rename' 'jsoniq'
    case 88798:                     // 'rename' 'last'
    case 89310:                     // 'rename' 'lax'
    case 89822:                     // 'rename' 'le'
    case 90846:                     // 'rename' 'let'
    case 91870:                     // 'rename' 'loop'
    case 92894:                     // 'rename' 'lt'
    case 93918:                     // 'rename' 'mod'
    case 94430:                     // 'rename' 'modify'
    case 94942:                     // 'rename' 'module'
    case 95966:                     // 'rename' 'namespace'
    case 96478:                     // 'rename' 'namespace-node'
    case 96990:                     // 'rename' 'ne'
    case 100062:                    // 'rename' 'nodes'
    case 101086:                    // 'rename' 'null'
    case 101598:                    // 'rename' 'object'
    case 103646:                    // 'rename' 'only'
    case 104158:                    // 'rename' 'option'
    case 104670:                    // 'rename' 'or'
    case 105182:                    // 'rename' 'order'
    case 105694:                    // 'rename' 'ordered'
    case 106206:                    // 'rename' 'ordering'
    case 107742:                    // 'rename' 'parent'
    case 110814:                    // 'rename' 'preceding'
    case 111326:                    // 'rename' 'preceding-sibling'
    case 112862:                    // 'rename' 'processing-instruction'
    case 113886:                    // 'rename' 'rename'
    case 114398:                    // 'rename' 'replace'
    case 114910:                    // 'rename' 'return'
    case 115422:                    // 'rename' 'returning'
    case 115934:                    // 'rename' 'revalidation'
    case 116958:                    // 'rename' 'satisfies'
    case 117470:                    // 'rename' 'schema'
    case 117982:                    // 'rename' 'schema-attribute'
    case 118494:                    // 'rename' 'schema-element'
    case 119006:                    // 'rename' 'score'
    case 119518:                    // 'rename' 'select'
    case 120030:                    // 'rename' 'self'
    case 122590:                    // 'rename' 'sliding'
    case 123102:                    // 'rename' 'some'
    case 123614:                    // 'rename' 'stable'
    case 124126:                    // 'rename' 'start'
    case 125662:                    // 'rename' 'strict'
    case 126686:                    // 'rename' 'structured-item'
    case 127198:                    // 'rename' 'switch'
    case 127710:                    // 'rename' 'text'
    case 129758:                    // 'rename' 'to'
    case 130270:                    // 'rename' 'treat'
    case 130782:                    // 'rename' 'true'
    case 131294:                    // 'rename' 'try'
    case 131806:                    // 'rename' 'tumbling'
    case 132318:                    // 'rename' 'type'
    case 132830:                    // 'rename' 'typeswitch'
    case 133342:                    // 'rename' 'union'
    case 134366:                    // 'rename' 'unordered'
    case 134878:                    // 'rename' 'updating'
    case 136414:                    // 'rename' 'validate'
    case 136926:                    // 'rename' 'value'
    case 137438:                    // 'rename' 'variable'
    case 137950:                    // 'rename' 'version'
    case 139486:                    // 'rename' 'where'
    case 139998:                    // 'rename' 'while'
    case 141534:                    // 'rename' 'with'
    case 144094:                    // 'rename' '{'
    case 145118:                    // 'rename' '{|'
      parse_JSONRenameExpr();
      break;
    case -11:
    case 86239:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case -12:
    case 3150:                      // 'append' EQName^Token
    case 4174:                      // 'append' IntegerLiteral
    case 4686:                      // 'append' DecimalLiteral
    case 5198:                      // 'append' DoubleLiteral
    case 5710:                      // 'append' StringLiteral
    case 15950:                     // 'append' '$'
    case 16462:                     // 'append' '$$'
    case 16974:                     // 'append' '%'
    case 18510:                     // 'append' '(#'
    case 21070:                     // 'append' '+'
    case 22094:                     // 'append' '-'
    case 24142:                     // 'append' '/'
    case 24654:                     // 'append' '//'
    case 28238:                     // 'append' '<'
    case 28750:                     // 'append' '<!--'
    case 30798:                     // 'append' '<?'
    case 35406:                     // 'append' '['
    case 36430:                     // 'append' 'after'
    case 37454:                     // 'append' 'allowing'
    case 37966:                     // 'append' 'ancestor'
    case 38478:                     // 'append' 'ancestor-or-self'
    case 38990:                     // 'append' 'and'
    case 40014:                     // 'append' 'append'
    case 40526:                     // 'append' 'array'
    case 41038:                     // 'append' 'as'
    case 41550:                     // 'append' 'ascending'
    case 42062:                     // 'append' 'at'
    case 42574:                     // 'append' 'attribute'
    case 43086:                     // 'append' 'base-uri'
    case 43598:                     // 'append' 'before'
    case 44110:                     // 'append' 'boundary-space'
    case 44622:                     // 'append' 'break'
    case 45646:                     // 'append' 'case'
    case 46158:                     // 'append' 'cast'
    case 46670:                     // 'append' 'castable'
    case 47182:                     // 'append' 'catch'
    case 48206:                     // 'append' 'child'
    case 48718:                     // 'append' 'collation'
    case 49742:                     // 'append' 'comment'
    case 50254:                     // 'append' 'constraint'
    case 50766:                     // 'append' 'construction'
    case 52302:                     // 'append' 'context'
    case 52814:                     // 'append' 'continue'
    case 53326:                     // 'append' 'copy'
    case 53838:                     // 'append' 'copy-namespaces'
    case 54350:                     // 'append' 'count'
    case 54862:                     // 'append' 'decimal-format'
    case 55886:                     // 'append' 'declare'
    case 56398:                     // 'append' 'default'
    case 56910:                     // 'append' 'delete'
    case 57422:                     // 'append' 'descendant'
    case 57934:                     // 'append' 'descendant-or-self'
    case 58446:                     // 'append' 'descending'
    case 61006:                     // 'append' 'div'
    case 61518:                     // 'append' 'document'
    case 62030:                     // 'append' 'document-node'
    case 62542:                     // 'append' 'element'
    case 63054:                     // 'append' 'else'
    case 63566:                     // 'append' 'empty'
    case 64078:                     // 'append' 'empty-sequence'
    case 64590:                     // 'append' 'encoding'
    case 65102:                     // 'append' 'end'
    case 66126:                     // 'append' 'eq'
    case 66638:                     // 'append' 'every'
    case 67662:                     // 'append' 'except'
    case 68174:                     // 'append' 'exit'
    case 68686:                     // 'append' 'external'
    case 69198:                     // 'append' 'false'
    case 69710:                     // 'append' 'first'
    case 70222:                     // 'append' 'following'
    case 70734:                     // 'append' 'following-sibling'
    case 71246:                     // 'append' 'for'
    case 72782:                     // 'append' 'from'
    case 73294:                     // 'append' 'ft-option'
    case 75342:                     // 'append' 'function'
    case 75854:                     // 'append' 'ge'
    case 76878:                     // 'append' 'group'
    case 77902:                     // 'append' 'gt'
    case 78414:                     // 'append' 'idiv'
    case 78926:                     // 'append' 'if'
    case 79438:                     // 'append' 'import'
    case 79950:                     // 'append' 'in'
    case 80462:                     // 'append' 'index'
    case 82510:                     // 'append' 'insert'
    case 83022:                     // 'append' 'instance'
    case 83534:                     // 'append' 'integrity'
    case 84046:                     // 'append' 'intersect'
    case 84558:                     // 'append' 'into'
    case 85070:                     // 'append' 'is'
    case 85582:                     // 'append' 'item'
    case 86094:                     // 'append' 'json'
    case 86606:                     // 'append' 'json-item'
    case 87118:                     // 'append' 'jsoniq'
    case 88654:                     // 'append' 'last'
    case 89166:                     // 'append' 'lax'
    case 89678:                     // 'append' 'le'
    case 90702:                     // 'append' 'let'
    case 91726:                     // 'append' 'loop'
    case 92750:                     // 'append' 'lt'
    case 93774:                     // 'append' 'mod'
    case 94286:                     // 'append' 'modify'
    case 94798:                     // 'append' 'module'
    case 95822:                     // 'append' 'namespace'
    case 96334:                     // 'append' 'namespace-node'
    case 96846:                     // 'append' 'ne'
    case 99406:                     // 'append' 'node'
    case 99918:                     // 'append' 'nodes'
    case 100430:                    // 'append' 'not'
    case 100942:                    // 'append' 'null'
    case 101454:                    // 'append' 'object'
    case 103502:                    // 'append' 'only'
    case 104014:                    // 'append' 'option'
    case 104526:                    // 'append' 'or'
    case 105038:                    // 'append' 'order'
    case 105550:                    // 'append' 'ordered'
    case 106062:                    // 'append' 'ordering'
    case 107598:                    // 'append' 'parent'
    case 110670:                    // 'append' 'preceding'
    case 111182:                    // 'append' 'preceding-sibling'
    case 112718:                    // 'append' 'processing-instruction'
    case 113742:                    // 'append' 'rename'
    case 114254:                    // 'append' 'replace'
    case 114766:                    // 'append' 'return'
    case 115278:                    // 'append' 'returning'
    case 115790:                    // 'append' 'revalidation'
    case 116814:                    // 'append' 'satisfies'
    case 117326:                    // 'append' 'schema'
    case 117838:                    // 'append' 'schema-attribute'
    case 118350:                    // 'append' 'schema-element'
    case 118862:                    // 'append' 'score'
    case 119374:                    // 'append' 'select'
    case 119886:                    // 'append' 'self'
    case 122446:                    // 'append' 'sliding'
    case 122958:                    // 'append' 'some'
    case 123470:                    // 'append' 'stable'
    case 123982:                    // 'append' 'start'
    case 125518:                    // 'append' 'strict'
    case 126542:                    // 'append' 'structured-item'
    case 127054:                    // 'append' 'switch'
    case 127566:                    // 'append' 'text'
    case 129614:                    // 'append' 'to'
    case 130126:                    // 'append' 'treat'
    case 130638:                    // 'append' 'true'
    case 131150:                    // 'append' 'try'
    case 131662:                    // 'append' 'tumbling'
    case 132174:                    // 'append' 'type'
    case 132686:                    // 'append' 'typeswitch'
    case 133198:                    // 'append' 'union'
    case 134222:                    // 'append' 'unordered'
    case 134734:                    // 'append' 'updating'
    case 136270:                    // 'append' 'validate'
    case 136782:                    // 'append' 'value'
    case 137294:                    // 'append' 'variable'
    case 137806:                    // 'append' 'version'
    case 139342:                    // 'append' 'where'
    case 139854:                    // 'append' 'while'
    case 141390:                    // 'append' 'with'
    case 143950:                    // 'append' '{'
    case 144974:                    // 'append' '{|'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(277);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 223:                       // 'replace'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(141);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17998                 // 'append' '('
     || lk == 18031                 // 'delete' '('
     || lk == 18081                 // 'insert' '('
     || lk == 18142                 // 'rename' '('
     || lk == 99439                 // 'delete' 'node'
     || lk == 99489                 // 'insert' 'node'
     || lk == 99550                 // 'rename' 'node'
     || lk == 99951                 // 'delete' 'nodes'
     || lk == 100001                // 'insert' 'nodes'
     || lk == 136927)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_OrExpr();
          memoize(9, e0A, -2);
          lk = -13;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_InsertExpr();
            memoize(9, e0A, -3);
            lk = -13;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_DeleteExpr();
              memoize(9, e0A, -4);
              lk = -13;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_RenameExpr();
                memoize(9, e0A, -5);
                lk = -13;
              }
              catch (p5A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_ReplaceExpr();
                  memoize(9, e0A, -6);
                  lk = -13;
                }
                catch (p6A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_JSONDeleteExpr();
                    memoize(9, e0A, -8);
                    lk = -13;
                  }
                  catch (p8A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_JSONInsertExpr();
                      memoize(9, e0A, -9);
                      lk = -13;
                    }
                    catch (p9A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_JSONRenameExpr();
                        memoize(9, e0A, -10);
                        lk = -13;
                      }
                      catch (p10A)
                      {
                        try
                        {
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          try_JSONReplaceExpr();
                          memoize(9, e0A, -11);
                          lk = -13;
                        }
                        catch (p11A)
                        {
                          lk = -12;
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          memoize(9, e0A, -12);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16112:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case -3:
      try_InsertExpr();
      break;
    case -4:
      try_DeleteExpr();
      break;
    case -5:
      try_RenameExpr();
      break;
    case -6:
    case 99551:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case -8:
    case 3183:                      // 'delete' EQName^Token
    case 4207:                      // 'delete' IntegerLiteral
    case 4719:                      // 'delete' DecimalLiteral
    case 5231:                      // 'delete' DoubleLiteral
    case 5743:                      // 'delete' StringLiteral
    case 15983:                     // 'delete' '$'
    case 16495:                     // 'delete' '$$'
    case 17007:                     // 'delete' '%'
    case 28271:                     // 'delete' '<'
    case 28783:                     // 'delete' '<!--'
    case 30831:                     // 'delete' '<?'
    case 35439:                     // 'delete' '['
    case 36463:                     // 'delete' 'after'
    case 37487:                     // 'delete' 'allowing'
    case 37999:                     // 'delete' 'ancestor'
    case 38511:                     // 'delete' 'ancestor-or-self'
    case 39023:                     // 'delete' 'and'
    case 40047:                     // 'delete' 'append'
    case 40559:                     // 'delete' 'array'
    case 41071:                     // 'delete' 'as'
    case 41583:                     // 'delete' 'ascending'
    case 42095:                     // 'delete' 'at'
    case 42607:                     // 'delete' 'attribute'
    case 43119:                     // 'delete' 'base-uri'
    case 43631:                     // 'delete' 'before'
    case 44143:                     // 'delete' 'boundary-space'
    case 44655:                     // 'delete' 'break'
    case 45679:                     // 'delete' 'case'
    case 46191:                     // 'delete' 'cast'
    case 46703:                     // 'delete' 'castable'
    case 47215:                     // 'delete' 'catch'
    case 48239:                     // 'delete' 'child'
    case 48751:                     // 'delete' 'collation'
    case 49775:                     // 'delete' 'comment'
    case 50287:                     // 'delete' 'constraint'
    case 50799:                     // 'delete' 'construction'
    case 52335:                     // 'delete' 'context'
    case 52847:                     // 'delete' 'continue'
    case 53359:                     // 'delete' 'copy'
    case 53871:                     // 'delete' 'copy-namespaces'
    case 54383:                     // 'delete' 'count'
    case 54895:                     // 'delete' 'decimal-format'
    case 55919:                     // 'delete' 'declare'
    case 56431:                     // 'delete' 'default'
    case 56943:                     // 'delete' 'delete'
    case 57455:                     // 'delete' 'descendant'
    case 57967:                     // 'delete' 'descendant-or-self'
    case 58479:                     // 'delete' 'descending'
    case 61039:                     // 'delete' 'div'
    case 61551:                     // 'delete' 'document'
    case 62063:                     // 'delete' 'document-node'
    case 62575:                     // 'delete' 'element'
    case 63087:                     // 'delete' 'else'
    case 63599:                     // 'delete' 'empty'
    case 64111:                     // 'delete' 'empty-sequence'
    case 64623:                     // 'delete' 'encoding'
    case 65135:                     // 'delete' 'end'
    case 66159:                     // 'delete' 'eq'
    case 66671:                     // 'delete' 'every'
    case 67695:                     // 'delete' 'except'
    case 68207:                     // 'delete' 'exit'
    case 68719:                     // 'delete' 'external'
    case 69231:                     // 'delete' 'false'
    case 69743:                     // 'delete' 'first'
    case 70255:                     // 'delete' 'following'
    case 70767:                     // 'delete' 'following-sibling'
    case 71279:                     // 'delete' 'for'
    case 72815:                     // 'delete' 'from'
    case 73327:                     // 'delete' 'ft-option'
    case 75375:                     // 'delete' 'function'
    case 75887:                     // 'delete' 'ge'
    case 76911:                     // 'delete' 'group'
    case 77935:                     // 'delete' 'gt'
    case 78447:                     // 'delete' 'idiv'
    case 78959:                     // 'delete' 'if'
    case 79471:                     // 'delete' 'import'
    case 79983:                     // 'delete' 'in'
    case 80495:                     // 'delete' 'index'
    case 82543:                     // 'delete' 'insert'
    case 83055:                     // 'delete' 'instance'
    case 83567:                     // 'delete' 'integrity'
    case 84079:                     // 'delete' 'intersect'
    case 84591:                     // 'delete' 'into'
    case 85103:                     // 'delete' 'is'
    case 85615:                     // 'delete' 'item'
    case 86127:                     // 'delete' 'json'
    case 86639:                     // 'delete' 'json-item'
    case 87151:                     // 'delete' 'jsoniq'
    case 88687:                     // 'delete' 'last'
    case 89199:                     // 'delete' 'lax'
    case 89711:                     // 'delete' 'le'
    case 90735:                     // 'delete' 'let'
    case 91759:                     // 'delete' 'loop'
    case 92783:                     // 'delete' 'lt'
    case 93807:                     // 'delete' 'mod'
    case 94319:                     // 'delete' 'modify'
    case 94831:                     // 'delete' 'module'
    case 95855:                     // 'delete' 'namespace'
    case 96367:                     // 'delete' 'namespace-node'
    case 96879:                     // 'delete' 'ne'
    case 100975:                    // 'delete' 'null'
    case 101487:                    // 'delete' 'object'
    case 103535:                    // 'delete' 'only'
    case 104047:                    // 'delete' 'option'
    case 104559:                    // 'delete' 'or'
    case 105071:                    // 'delete' 'order'
    case 105583:                    // 'delete' 'ordered'
    case 106095:                    // 'delete' 'ordering'
    case 107631:                    // 'delete' 'parent'
    case 110703:                    // 'delete' 'preceding'
    case 111215:                    // 'delete' 'preceding-sibling'
    case 112751:                    // 'delete' 'processing-instruction'
    case 113775:                    // 'delete' 'rename'
    case 114287:                    // 'delete' 'replace'
    case 114799:                    // 'delete' 'return'
    case 115311:                    // 'delete' 'returning'
    case 115823:                    // 'delete' 'revalidation'
    case 116847:                    // 'delete' 'satisfies'
    case 117359:                    // 'delete' 'schema'
    case 117871:                    // 'delete' 'schema-attribute'
    case 118383:                    // 'delete' 'schema-element'
    case 118895:                    // 'delete' 'score'
    case 119407:                    // 'delete' 'select'
    case 119919:                    // 'delete' 'self'
    case 122479:                    // 'delete' 'sliding'
    case 122991:                    // 'delete' 'some'
    case 123503:                    // 'delete' 'stable'
    case 124015:                    // 'delete' 'start'
    case 125551:                    // 'delete' 'strict'
    case 126575:                    // 'delete' 'structured-item'
    case 127087:                    // 'delete' 'switch'
    case 127599:                    // 'delete' 'text'
    case 129647:                    // 'delete' 'to'
    case 130159:                    // 'delete' 'treat'
    case 130671:                    // 'delete' 'true'
    case 131183:                    // 'delete' 'try'
    case 131695:                    // 'delete' 'tumbling'
    case 132207:                    // 'delete' 'type'
    case 132719:                    // 'delete' 'typeswitch'
    case 133231:                    // 'delete' 'union'
    case 134255:                    // 'delete' 'unordered'
    case 134767:                    // 'delete' 'updating'
    case 136303:                    // 'delete' 'validate'
    case 136815:                    // 'delete' 'value'
    case 137327:                    // 'delete' 'variable'
    case 137839:                    // 'delete' 'version'
    case 139375:                    // 'delete' 'where'
    case 139887:                    // 'delete' 'while'
    case 141423:                    // 'delete' 'with'
    case 143983:                    // 'delete' '{'
    case 145007:                    // 'delete' '{|'
      try_JSONDeleteExpr();
      break;
    case -9:
    case 3233:                      // 'insert' EQName^Token
    case 4257:                      // 'insert' IntegerLiteral
    case 4769:                      // 'insert' DecimalLiteral
    case 5281:                      // 'insert' DoubleLiteral
    case 5793:                      // 'insert' StringLiteral
    case 9889:                      // 'insert' NCName^Token
    case 16033:                     // 'insert' '$'
    case 16545:                     // 'insert' '$$'
    case 17057:                     // 'insert' '%'
    case 18593:                     // 'insert' '(#'
    case 21153:                     // 'insert' '+'
    case 22177:                     // 'insert' '-'
    case 24225:                     // 'insert' '/'
    case 24737:                     // 'insert' '//'
    case 28321:                     // 'insert' '<'
    case 28833:                     // 'insert' '<!--'
    case 30881:                     // 'insert' '<?'
    case 35489:                     // 'insert' '['
    case 36513:                     // 'insert' 'after'
    case 37537:                     // 'insert' 'allowing'
    case 38049:                     // 'insert' 'ancestor'
    case 38561:                     // 'insert' 'ancestor-or-self'
    case 39073:                     // 'insert' 'and'
    case 40097:                     // 'insert' 'append'
    case 40609:                     // 'insert' 'array'
    case 41121:                     // 'insert' 'as'
    case 41633:                     // 'insert' 'ascending'
    case 42145:                     // 'insert' 'at'
    case 42657:                     // 'insert' 'attribute'
    case 43169:                     // 'insert' 'base-uri'
    case 43681:                     // 'insert' 'before'
    case 44193:                     // 'insert' 'boundary-space'
    case 44705:                     // 'insert' 'break'
    case 45729:                     // 'insert' 'case'
    case 46241:                     // 'insert' 'cast'
    case 46753:                     // 'insert' 'castable'
    case 47265:                     // 'insert' 'catch'
    case 48289:                     // 'insert' 'child'
    case 48801:                     // 'insert' 'collation'
    case 49825:                     // 'insert' 'comment'
    case 50337:                     // 'insert' 'constraint'
    case 50849:                     // 'insert' 'construction'
    case 52385:                     // 'insert' 'context'
    case 52897:                     // 'insert' 'continue'
    case 53409:                     // 'insert' 'copy'
    case 53921:                     // 'insert' 'copy-namespaces'
    case 54433:                     // 'insert' 'count'
    case 54945:                     // 'insert' 'decimal-format'
    case 55969:                     // 'insert' 'declare'
    case 56481:                     // 'insert' 'default'
    case 56993:                     // 'insert' 'delete'
    case 57505:                     // 'insert' 'descendant'
    case 58017:                     // 'insert' 'descendant-or-self'
    case 58529:                     // 'insert' 'descending'
    case 61089:                     // 'insert' 'div'
    case 61601:                     // 'insert' 'document'
    case 62113:                     // 'insert' 'document-node'
    case 62625:                     // 'insert' 'element'
    case 63137:                     // 'insert' 'else'
    case 63649:                     // 'insert' 'empty'
    case 64161:                     // 'insert' 'empty-sequence'
    case 64673:                     // 'insert' 'encoding'
    case 65185:                     // 'insert' 'end'
    case 66209:                     // 'insert' 'eq'
    case 66721:                     // 'insert' 'every'
    case 67745:                     // 'insert' 'except'
    case 68257:                     // 'insert' 'exit'
    case 68769:                     // 'insert' 'external'
    case 69281:                     // 'insert' 'false'
    case 69793:                     // 'insert' 'first'
    case 70305:                     // 'insert' 'following'
    case 70817:                     // 'insert' 'following-sibling'
    case 71329:                     // 'insert' 'for'
    case 72865:                     // 'insert' 'from'
    case 73377:                     // 'insert' 'ft-option'
    case 75425:                     // 'insert' 'function'
    case 75937:                     // 'insert' 'ge'
    case 76961:                     // 'insert' 'group'
    case 77985:                     // 'insert' 'gt'
    case 78497:                     // 'insert' 'idiv'
    case 79009:                     // 'insert' 'if'
    case 79521:                     // 'insert' 'import'
    case 80033:                     // 'insert' 'in'
    case 80545:                     // 'insert' 'index'
    case 82593:                     // 'insert' 'insert'
    case 83105:                     // 'insert' 'instance'
    case 83617:                     // 'insert' 'integrity'
    case 84129:                     // 'insert' 'intersect'
    case 84641:                     // 'insert' 'into'
    case 85153:                     // 'insert' 'is'
    case 85665:                     // 'insert' 'item'
    case 86177:                     // 'insert' 'json'
    case 86689:                     // 'insert' 'json-item'
    case 87201:                     // 'insert' 'jsoniq'
    case 88737:                     // 'insert' 'last'
    case 89249:                     // 'insert' 'lax'
    case 89761:                     // 'insert' 'le'
    case 90785:                     // 'insert' 'let'
    case 91809:                     // 'insert' 'loop'
    case 92833:                     // 'insert' 'lt'
    case 93857:                     // 'insert' 'mod'
    case 94369:                     // 'insert' 'modify'
    case 94881:                     // 'insert' 'module'
    case 95905:                     // 'insert' 'namespace'
    case 96417:                     // 'insert' 'namespace-node'
    case 96929:                     // 'insert' 'ne'
    case 100513:                    // 'insert' 'not'
    case 101025:                    // 'insert' 'null'
    case 101537:                    // 'insert' 'object'
    case 103585:                    // 'insert' 'only'
    case 104097:                    // 'insert' 'option'
    case 104609:                    // 'insert' 'or'
    case 105121:                    // 'insert' 'order'
    case 105633:                    // 'insert' 'ordered'
    case 106145:                    // 'insert' 'ordering'
    case 107681:                    // 'insert' 'parent'
    case 110753:                    // 'insert' 'preceding'
    case 111265:                    // 'insert' 'preceding-sibling'
    case 112801:                    // 'insert' 'processing-instruction'
    case 113825:                    // 'insert' 'rename'
    case 114337:                    // 'insert' 'replace'
    case 114849:                    // 'insert' 'return'
    case 115361:                    // 'insert' 'returning'
    case 115873:                    // 'insert' 'revalidation'
    case 116897:                    // 'insert' 'satisfies'
    case 117409:                    // 'insert' 'schema'
    case 117921:                    // 'insert' 'schema-attribute'
    case 118433:                    // 'insert' 'schema-element'
    case 118945:                    // 'insert' 'score'
    case 119457:                    // 'insert' 'select'
    case 119969:                    // 'insert' 'self'
    case 122529:                    // 'insert' 'sliding'
    case 123041:                    // 'insert' 'some'
    case 123553:                    // 'insert' 'stable'
    case 124065:                    // 'insert' 'start'
    case 125601:                    // 'insert' 'strict'
    case 126625:                    // 'insert' 'structured-item'
    case 127137:                    // 'insert' 'switch'
    case 127649:                    // 'insert' 'text'
    case 129697:                    // 'insert' 'to'
    case 130209:                    // 'insert' 'treat'
    case 130721:                    // 'insert' 'true'
    case 131233:                    // 'insert' 'try'
    case 131745:                    // 'insert' 'tumbling'
    case 132257:                    // 'insert' 'type'
    case 132769:                    // 'insert' 'typeswitch'
    case 133281:                    // 'insert' 'union'
    case 134305:                    // 'insert' 'unordered'
    case 134817:                    // 'insert' 'updating'
    case 136353:                    // 'insert' 'validate'
    case 136865:                    // 'insert' 'value'
    case 137377:                    // 'insert' 'variable'
    case 137889:                    // 'insert' 'version'
    case 139425:                    // 'insert' 'where'
    case 139937:                    // 'insert' 'while'
    case 141473:                    // 'insert' 'with'
    case 144033:                    // 'insert' '{'
    case 145057:                    // 'insert' '{|'
      try_JSONInsertExpr();
      break;
    case -10:
    case 3294:                      // 'rename' EQName^Token
    case 4318:                      // 'rename' IntegerLiteral
    case 4830:                      // 'rename' DecimalLiteral
    case 5342:                      // 'rename' DoubleLiteral
    case 5854:                      // 'rename' StringLiteral
    case 16094:                     // 'rename' '$'
    case 16606:                     // 'rename' '$$'
    case 17118:                     // 'rename' '%'
    case 28382:                     // 'rename' '<'
    case 28894:                     // 'rename' '<!--'
    case 30942:                     // 'rename' '<?'
    case 35550:                     // 'rename' '['
    case 36574:                     // 'rename' 'after'
    case 37598:                     // 'rename' 'allowing'
    case 38110:                     // 'rename' 'ancestor'
    case 38622:                     // 'rename' 'ancestor-or-self'
    case 39134:                     // 'rename' 'and'
    case 40158:                     // 'rename' 'append'
    case 40670:                     // 'rename' 'array'
    case 41182:                     // 'rename' 'as'
    case 41694:                     // 'rename' 'ascending'
    case 42206:                     // 'rename' 'at'
    case 42718:                     // 'rename' 'attribute'
    case 43230:                     // 'rename' 'base-uri'
    case 43742:                     // 'rename' 'before'
    case 44254:                     // 'rename' 'boundary-space'
    case 44766:                     // 'rename' 'break'
    case 45790:                     // 'rename' 'case'
    case 46302:                     // 'rename' 'cast'
    case 46814:                     // 'rename' 'castable'
    case 47326:                     // 'rename' 'catch'
    case 48350:                     // 'rename' 'child'
    case 48862:                     // 'rename' 'collation'
    case 49886:                     // 'rename' 'comment'
    case 50398:                     // 'rename' 'constraint'
    case 50910:                     // 'rename' 'construction'
    case 52446:                     // 'rename' 'context'
    case 52958:                     // 'rename' 'continue'
    case 53470:                     // 'rename' 'copy'
    case 53982:                     // 'rename' 'copy-namespaces'
    case 54494:                     // 'rename' 'count'
    case 55006:                     // 'rename' 'decimal-format'
    case 56030:                     // 'rename' 'declare'
    case 56542:                     // 'rename' 'default'
    case 57054:                     // 'rename' 'delete'
    case 57566:                     // 'rename' 'descendant'
    case 58078:                     // 'rename' 'descendant-or-self'
    case 58590:                     // 'rename' 'descending'
    case 61150:                     // 'rename' 'div'
    case 61662:                     // 'rename' 'document'
    case 62174:                     // 'rename' 'document-node'
    case 62686:                     // 'rename' 'element'
    case 63198:                     // 'rename' 'else'
    case 63710:                     // 'rename' 'empty'
    case 64222:                     // 'rename' 'empty-sequence'
    case 64734:                     // 'rename' 'encoding'
    case 65246:                     // 'rename' 'end'
    case 66270:                     // 'rename' 'eq'
    case 66782:                     // 'rename' 'every'
    case 67806:                     // 'rename' 'except'
    case 68318:                     // 'rename' 'exit'
    case 68830:                     // 'rename' 'external'
    case 69342:                     // 'rename' 'false'
    case 69854:                     // 'rename' 'first'
    case 70366:                     // 'rename' 'following'
    case 70878:                     // 'rename' 'following-sibling'
    case 71390:                     // 'rename' 'for'
    case 72926:                     // 'rename' 'from'
    case 73438:                     // 'rename' 'ft-option'
    case 75486:                     // 'rename' 'function'
    case 75998:                     // 'rename' 'ge'
    case 77022:                     // 'rename' 'group'
    case 78046:                     // 'rename' 'gt'
    case 78558:                     // 'rename' 'idiv'
    case 79070:                     // 'rename' 'if'
    case 79582:                     // 'rename' 'import'
    case 80094:                     // 'rename' 'in'
    case 80606:                     // 'rename' 'index'
    case 82654:                     // 'rename' 'insert'
    case 83166:                     // 'rename' 'instance'
    case 83678:                     // 'rename' 'integrity'
    case 84190:                     // 'rename' 'intersect'
    case 84702:                     // 'rename' 'into'
    case 85214:                     // 'rename' 'is'
    case 85726:                     // 'rename' 'item'
    case 86238:                     // 'rename' 'json'
    case 86750:                     // 'rename' 'json-item'
    case 87262:                     // 'rename' 'jsoniq'
    case 88798:                     // 'rename' 'last'
    case 89310:                     // 'rename' 'lax'
    case 89822:                     // 'rename' 'le'
    case 90846:                     // 'rename' 'let'
    case 91870:                     // 'rename' 'loop'
    case 92894:                     // 'rename' 'lt'
    case 93918:                     // 'rename' 'mod'
    case 94430:                     // 'rename' 'modify'
    case 94942:                     // 'rename' 'module'
    case 95966:                     // 'rename' 'namespace'
    case 96478:                     // 'rename' 'namespace-node'
    case 96990:                     // 'rename' 'ne'
    case 100062:                    // 'rename' 'nodes'
    case 101086:                    // 'rename' 'null'
    case 101598:                    // 'rename' 'object'
    case 103646:                    // 'rename' 'only'
    case 104158:                    // 'rename' 'option'
    case 104670:                    // 'rename' 'or'
    case 105182:                    // 'rename' 'order'
    case 105694:                    // 'rename' 'ordered'
    case 106206:                    // 'rename' 'ordering'
    case 107742:                    // 'rename' 'parent'
    case 110814:                    // 'rename' 'preceding'
    case 111326:                    // 'rename' 'preceding-sibling'
    case 112862:                    // 'rename' 'processing-instruction'
    case 113886:                    // 'rename' 'rename'
    case 114398:                    // 'rename' 'replace'
    case 114910:                    // 'rename' 'return'
    case 115422:                    // 'rename' 'returning'
    case 115934:                    // 'rename' 'revalidation'
    case 116958:                    // 'rename' 'satisfies'
    case 117470:                    // 'rename' 'schema'
    case 117982:                    // 'rename' 'schema-attribute'
    case 118494:                    // 'rename' 'schema-element'
    case 119006:                    // 'rename' 'score'
    case 119518:                    // 'rename' 'select'
    case 120030:                    // 'rename' 'self'
    case 122590:                    // 'rename' 'sliding'
    case 123102:                    // 'rename' 'some'
    case 123614:                    // 'rename' 'stable'
    case 124126:                    // 'rename' 'start'
    case 125662:                    // 'rename' 'strict'
    case 126686:                    // 'rename' 'structured-item'
    case 127198:                    // 'rename' 'switch'
    case 127710:                    // 'rename' 'text'
    case 129758:                    // 'rename' 'to'
    case 130270:                    // 'rename' 'treat'
    case 130782:                    // 'rename' 'true'
    case 131294:                    // 'rename' 'try'
    case 131806:                    // 'rename' 'tumbling'
    case 132318:                    // 'rename' 'type'
    case 132830:                    // 'rename' 'typeswitch'
    case 133342:                    // 'rename' 'union'
    case 134366:                    // 'rename' 'unordered'
    case 134878:                    // 'rename' 'updating'
    case 136414:                    // 'rename' 'validate'
    case 136926:                    // 'rename' 'value'
    case 137438:                    // 'rename' 'variable'
    case 137950:                    // 'rename' 'version'
    case 139486:                    // 'rename' 'where'
    case 139998:                    // 'rename' 'while'
    case 141534:                    // 'rename' 'with'
    case 144094:                    // 'rename' '{'
    case 145118:                    // 'rename' '{|'
      try_JSONRenameExpr();
      break;
    case -11:
    case 86239:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case -12:
    case 3150:                      // 'append' EQName^Token
    case 4174:                      // 'append' IntegerLiteral
    case 4686:                      // 'append' DecimalLiteral
    case 5198:                      // 'append' DoubleLiteral
    case 5710:                      // 'append' StringLiteral
    case 15950:                     // 'append' '$'
    case 16462:                     // 'append' '$$'
    case 16974:                     // 'append' '%'
    case 18510:                     // 'append' '(#'
    case 21070:                     // 'append' '+'
    case 22094:                     // 'append' '-'
    case 24142:                     // 'append' '/'
    case 24654:                     // 'append' '//'
    case 28238:                     // 'append' '<'
    case 28750:                     // 'append' '<!--'
    case 30798:                     // 'append' '<?'
    case 35406:                     // 'append' '['
    case 36430:                     // 'append' 'after'
    case 37454:                     // 'append' 'allowing'
    case 37966:                     // 'append' 'ancestor'
    case 38478:                     // 'append' 'ancestor-or-self'
    case 38990:                     // 'append' 'and'
    case 40014:                     // 'append' 'append'
    case 40526:                     // 'append' 'array'
    case 41038:                     // 'append' 'as'
    case 41550:                     // 'append' 'ascending'
    case 42062:                     // 'append' 'at'
    case 42574:                     // 'append' 'attribute'
    case 43086:                     // 'append' 'base-uri'
    case 43598:                     // 'append' 'before'
    case 44110:                     // 'append' 'boundary-space'
    case 44622:                     // 'append' 'break'
    case 45646:                     // 'append' 'case'
    case 46158:                     // 'append' 'cast'
    case 46670:                     // 'append' 'castable'
    case 47182:                     // 'append' 'catch'
    case 48206:                     // 'append' 'child'
    case 48718:                     // 'append' 'collation'
    case 49742:                     // 'append' 'comment'
    case 50254:                     // 'append' 'constraint'
    case 50766:                     // 'append' 'construction'
    case 52302:                     // 'append' 'context'
    case 52814:                     // 'append' 'continue'
    case 53326:                     // 'append' 'copy'
    case 53838:                     // 'append' 'copy-namespaces'
    case 54350:                     // 'append' 'count'
    case 54862:                     // 'append' 'decimal-format'
    case 55886:                     // 'append' 'declare'
    case 56398:                     // 'append' 'default'
    case 56910:                     // 'append' 'delete'
    case 57422:                     // 'append' 'descendant'
    case 57934:                     // 'append' 'descendant-or-self'
    case 58446:                     // 'append' 'descending'
    case 61006:                     // 'append' 'div'
    case 61518:                     // 'append' 'document'
    case 62030:                     // 'append' 'document-node'
    case 62542:                     // 'append' 'element'
    case 63054:                     // 'append' 'else'
    case 63566:                     // 'append' 'empty'
    case 64078:                     // 'append' 'empty-sequence'
    case 64590:                     // 'append' 'encoding'
    case 65102:                     // 'append' 'end'
    case 66126:                     // 'append' 'eq'
    case 66638:                     // 'append' 'every'
    case 67662:                     // 'append' 'except'
    case 68174:                     // 'append' 'exit'
    case 68686:                     // 'append' 'external'
    case 69198:                     // 'append' 'false'
    case 69710:                     // 'append' 'first'
    case 70222:                     // 'append' 'following'
    case 70734:                     // 'append' 'following-sibling'
    case 71246:                     // 'append' 'for'
    case 72782:                     // 'append' 'from'
    case 73294:                     // 'append' 'ft-option'
    case 75342:                     // 'append' 'function'
    case 75854:                     // 'append' 'ge'
    case 76878:                     // 'append' 'group'
    case 77902:                     // 'append' 'gt'
    case 78414:                     // 'append' 'idiv'
    case 78926:                     // 'append' 'if'
    case 79438:                     // 'append' 'import'
    case 79950:                     // 'append' 'in'
    case 80462:                     // 'append' 'index'
    case 82510:                     // 'append' 'insert'
    case 83022:                     // 'append' 'instance'
    case 83534:                     // 'append' 'integrity'
    case 84046:                     // 'append' 'intersect'
    case 84558:                     // 'append' 'into'
    case 85070:                     // 'append' 'is'
    case 85582:                     // 'append' 'item'
    case 86094:                     // 'append' 'json'
    case 86606:                     // 'append' 'json-item'
    case 87118:                     // 'append' 'jsoniq'
    case 88654:                     // 'append' 'last'
    case 89166:                     // 'append' 'lax'
    case 89678:                     // 'append' 'le'
    case 90702:                     // 'append' 'let'
    case 91726:                     // 'append' 'loop'
    case 92750:                     // 'append' 'lt'
    case 93774:                     // 'append' 'mod'
    case 94286:                     // 'append' 'modify'
    case 94798:                     // 'append' 'module'
    case 95822:                     // 'append' 'namespace'
    case 96334:                     // 'append' 'namespace-node'
    case 96846:                     // 'append' 'ne'
    case 99406:                     // 'append' 'node'
    case 99918:                     // 'append' 'nodes'
    case 100430:                    // 'append' 'not'
    case 100942:                    // 'append' 'null'
    case 101454:                    // 'append' 'object'
    case 103502:                    // 'append' 'only'
    case 104014:                    // 'append' 'option'
    case 104526:                    // 'append' 'or'
    case 105038:                    // 'append' 'order'
    case 105550:                    // 'append' 'ordered'
    case 106062:                    // 'append' 'ordering'
    case 107598:                    // 'append' 'parent'
    case 110670:                    // 'append' 'preceding'
    case 111182:                    // 'append' 'preceding-sibling'
    case 112718:                    // 'append' 'processing-instruction'
    case 113742:                    // 'append' 'rename'
    case 114254:                    // 'append' 'replace'
    case 114766:                    // 'append' 'return'
    case 115278:                    // 'append' 'returning'
    case 115790:                    // 'append' 'revalidation'
    case 116814:                    // 'append' 'satisfies'
    case 117326:                    // 'append' 'schema'
    case 117838:                    // 'append' 'schema-attribute'
    case 118350:                    // 'append' 'schema-element'
    case 118862:                    // 'append' 'score'
    case 119374:                    // 'append' 'select'
    case 119886:                    // 'append' 'self'
    case 122446:                    // 'append' 'sliding'
    case 122958:                    // 'append' 'some'
    case 123470:                    // 'append' 'stable'
    case 123982:                    // 'append' 'start'
    case 125518:                    // 'append' 'strict'
    case 126542:                    // 'append' 'structured-item'
    case 127054:                    // 'append' 'switch'
    case 127566:                    // 'append' 'text'
    case 129614:                    // 'append' 'to'
    case 130126:                    // 'append' 'treat'
    case 130638:                    // 'append' 'true'
    case 131150:                    // 'append' 'try'
    case 131662:                    // 'append' 'tumbling'
    case 132174:                    // 'append' 'type'
    case 132686:                    // 'append' 'typeswitch'
    case 133198:                    // 'append' 'union'
    case 134222:                    // 'append' 'unordered'
    case 134734:                    // 'append' 'updating'
    case 136270:                    // 'append' 'validate'
    case 136782:                    // 'append' 'value'
    case 137294:                    // 'append' 'variable'
    case 137806:                    // 'append' 'version'
    case 139342:                    // 'append' 'where'
    case 139854:                    // 'append' 'while'
    case 141390:                    // 'append' 'with'
    case 143950:                    // 'append' '{'
    case 144974:                    // 'append' '{|'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(111);                     // 'delete'
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(111);                    // 'delete'
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(10, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 161:                       // 'insert'
      lookahead2W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk != 9889)                 // 'insert' NCName^Token
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(161);              // 'insert'
          lookahead1W(268);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          switch (l1)
          {
          case 168:                 // 'json'
            lookahead2W(270);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            break;
          default:
            lk = l1;
          }
          if (lk == 18088)          // 'json' '('
          {
            lk = memoized(12, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(168);        // 'json'
                memoize(12, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(12, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1
           || lk == 3240            // 'json' EQName^Token
           || lk == 4264            // 'json' IntegerLiteral
           || lk == 4776            // 'json' DecimalLiteral
           || lk == 5288            // 'json' DoubleLiteral
           || lk == 5800            // 'json' StringLiteral
           || lk == 16040           // 'json' '$'
           || lk == 16552           // 'json' '$$'
           || lk == 17064           // 'json' '%'
           || lk == 18600           // 'json' '(#'
           || lk == 21160           // 'json' '+'
           || lk == 22184           // 'json' '-'
           || lk == 24232           // 'json' '/'
           || lk == 24744           // 'json' '//'
           || lk == 28328           // 'json' '<'
           || lk == 28840           // 'json' '<!--'
           || lk == 30888           // 'json' '<?'
           || lk == 35496           // 'json' '['
           || lk == 36520           // 'json' 'after'
           || lk == 37544           // 'json' 'allowing'
           || lk == 38056           // 'json' 'ancestor'
           || lk == 38568           // 'json' 'ancestor-or-self'
           || lk == 39080           // 'json' 'and'
           || lk == 40104           // 'json' 'append'
           || lk == 40616           // 'json' 'array'
           || lk == 41128           // 'json' 'as'
           || lk == 41640           // 'json' 'ascending'
           || lk == 42152           // 'json' 'at'
           || lk == 42664           // 'json' 'attribute'
           || lk == 43176           // 'json' 'base-uri'
           || lk == 43688           // 'json' 'before'
           || lk == 44200           // 'json' 'boundary-space'
           || lk == 44712           // 'json' 'break'
           || lk == 45736           // 'json' 'case'
           || lk == 46248           // 'json' 'cast'
           || lk == 46760           // 'json' 'castable'
           || lk == 47272           // 'json' 'catch'
           || lk == 48296           // 'json' 'child'
           || lk == 48808           // 'json' 'collation'
           || lk == 49832           // 'json' 'comment'
           || lk == 50344           // 'json' 'constraint'
           || lk == 50856           // 'json' 'construction'
           || lk == 52392           // 'json' 'context'
           || lk == 52904           // 'json' 'continue'
           || lk == 53416           // 'json' 'copy'
           || lk == 53928           // 'json' 'copy-namespaces'
           || lk == 54440           // 'json' 'count'
           || lk == 54952           // 'json' 'decimal-format'
           || lk == 55976           // 'json' 'declare'
           || lk == 56488           // 'json' 'default'
           || lk == 57000           // 'json' 'delete'
           || lk == 57512           // 'json' 'descendant'
           || lk == 58024           // 'json' 'descendant-or-self'
           || lk == 58536           // 'json' 'descending'
           || lk == 61096           // 'json' 'div'
           || lk == 61608           // 'json' 'document'
           || lk == 62120           // 'json' 'document-node'
           || lk == 62632           // 'json' 'element'
           || lk == 63144           // 'json' 'else'
           || lk == 63656           // 'json' 'empty'
           || lk == 64168           // 'json' 'empty-sequence'
           || lk == 64680           // 'json' 'encoding'
           || lk == 65192           // 'json' 'end'
           || lk == 66216           // 'json' 'eq'
           || lk == 66728           // 'json' 'every'
           || lk == 67752           // 'json' 'except'
           || lk == 68264           // 'json' 'exit'
           || lk == 68776           // 'json' 'external'
           || lk == 69288           // 'json' 'false'
           || lk == 69800           // 'json' 'first'
           || lk == 70312           // 'json' 'following'
           || lk == 70824           // 'json' 'following-sibling'
           || lk == 71336           // 'json' 'for'
           || lk == 72872           // 'json' 'from'
           || lk == 73384           // 'json' 'ft-option'
           || lk == 75432           // 'json' 'function'
           || lk == 75944           // 'json' 'ge'
           || lk == 76968           // 'json' 'group'
           || lk == 77992           // 'json' 'gt'
           || lk == 78504           // 'json' 'idiv'
           || lk == 79016           // 'json' 'if'
           || lk == 79528           // 'json' 'import'
           || lk == 80040           // 'json' 'in'
           || lk == 80552           // 'json' 'index'
           || lk == 82600           // 'json' 'insert'
           || lk == 83112           // 'json' 'instance'
           || lk == 83624           // 'json' 'integrity'
           || lk == 84136           // 'json' 'intersect'
           || lk == 84648           // 'json' 'into'
           || lk == 85160           // 'json' 'is'
           || lk == 85672           // 'json' 'item'
           || lk == 86184           // 'json' 'json'
           || lk == 86696           // 'json' 'json-item'
           || lk == 87208           // 'json' 'jsoniq'
           || lk == 88744           // 'json' 'last'
           || lk == 89256           // 'json' 'lax'
           || lk == 89768           // 'json' 'le'
           || lk == 90792           // 'json' 'let'
           || lk == 91816           // 'json' 'loop'
           || lk == 92840           // 'json' 'lt'
           || lk == 93864           // 'json' 'mod'
           || lk == 94376           // 'json' 'modify'
           || lk == 94888           // 'json' 'module'
           || lk == 95912           // 'json' 'namespace'
           || lk == 96424           // 'json' 'namespace-node'
           || lk == 96936           // 'json' 'ne'
           || lk == 99496           // 'json' 'node'
           || lk == 100008          // 'json' 'nodes'
           || lk == 100520          // 'json' 'not'
           || lk == 101032          // 'json' 'null'
           || lk == 101544          // 'json' 'object'
           || lk == 103592          // 'json' 'only'
           || lk == 104104          // 'json' 'option'
           || lk == 104616          // 'json' 'or'
           || lk == 105128          // 'json' 'order'
           || lk == 105640          // 'json' 'ordered'
           || lk == 106152          // 'json' 'ordering'
           || lk == 107688          // 'json' 'parent'
           || lk == 110760          // 'json' 'preceding'
           || lk == 111272          // 'json' 'preceding-sibling'
           || lk == 112808          // 'json' 'processing-instruction'
           || lk == 113832          // 'json' 'rename'
           || lk == 114344          // 'json' 'replace'
           || lk == 114856          // 'json' 'return'
           || lk == 115368          // 'json' 'returning'
           || lk == 115880          // 'json' 'revalidation'
           || lk == 116904          // 'json' 'satisfies'
           || lk == 117416          // 'json' 'schema'
           || lk == 117928          // 'json' 'schema-attribute'
           || lk == 118440          // 'json' 'schema-element'
           || lk == 118952          // 'json' 'score'
           || lk == 119464          // 'json' 'select'
           || lk == 119976          // 'json' 'self'
           || lk == 122536          // 'json' 'sliding'
           || lk == 123048          // 'json' 'some'
           || lk == 123560          // 'json' 'stable'
           || lk == 124072          // 'json' 'start'
           || lk == 125608          // 'json' 'strict'
           || lk == 126632          // 'json' 'structured-item'
           || lk == 127144          // 'json' 'switch'
           || lk == 127656          // 'json' 'text'
           || lk == 129704          // 'json' 'to'
           || lk == 130216          // 'json' 'treat'
           || lk == 130728          // 'json' 'true'
           || lk == 131240          // 'json' 'try'
           || lk == 131752          // 'json' 'tumbling'
           || lk == 132264          // 'json' 'type'
           || lk == 132776          // 'json' 'typeswitch'
           || lk == 133288          // 'json' 'union'
           || lk == 134312          // 'json' 'unordered'
           || lk == 134824          // 'json' 'updating'
           || lk == 136360          // 'json' 'validate'
           || lk == 136872          // 'json' 'value'
           || lk == 137384          // 'json' 'variable'
           || lk == 137896          // 'json' 'version'
           || lk == 139432          // 'json' 'where'
           || lk == 139944          // 'json' 'while'
           || lk == 141480          // 'json' 'with'
           || lk == 144040          // 'json' '{'
           || lk == 145064)         // 'json' '{|'
          {
            shiftT(168);            // 'json'
          }
          lookahead1W(268);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          try_ExprSingle();
          shiftT(165);              // 'into'
          lookahead1W(268);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          try_ExprSingle();
          switch (l1)
          {
          case 82:                  // 'at'
            lookahead2W(71);        // S^WS | '(:' | 'position'
            break;
          default:
            lk = l1;
          }
          if (lk == 110162)         // 'at' 'position'
          {
            lk = memoized(13, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(82);         // 'at'
                lookahead1W(71);    // S^WS | '(:' | 'position'
                shiftT(215);        // 'position'
                lookahead1W(268);   // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
                try_ExprSingle();
                memoize(13, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(13, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1)
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(268);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            try_ExprSingle();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(161);                   // 'insert'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(12, e0, lk);
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shift(168);                 // 'json'
      }
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
      shift(165);                   // 'into'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(71);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 110162)             // 'at' 'position'
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(268);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(13, e0, lk);
        }
      }
      if (lk == -1)
      {
        shift(82);                  // 'at'
        lookahead1W(71);            // S^WS | '(:' | 'position'
        shift(215);                 // 'position'
        lookahead1W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      shift(161);                   // 'insert'
      lookahead1W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(283);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(14, e0, lk);
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 9896                // 'json' NCName^Token
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shift(168);                 // 'json'
      }
      lookahead1W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_PairConstructorList();
      shift(165);                   // 'into'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 161:                       // 'insert'
      lookahead2W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk != 9889)                 // 'insert' NCName^Token
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(161);              // 'insert'
          lookahead1W(268);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          switch (l1)
          {
          case 168:                 // 'json'
            lookahead2W(270);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            break;
          default:
            lk = l1;
          }
          if (lk == 18088)          // 'json' '('
          {
            lk = memoized(12, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(168);        // 'json'
                memoize(12, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(12, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1
           || lk == 3240            // 'json' EQName^Token
           || lk == 4264            // 'json' IntegerLiteral
           || lk == 4776            // 'json' DecimalLiteral
           || lk == 5288            // 'json' DoubleLiteral
           || lk == 5800            // 'json' StringLiteral
           || lk == 16040           // 'json' '$'
           || lk == 16552           // 'json' '$$'
           || lk == 17064           // 'json' '%'
           || lk == 18600           // 'json' '(#'
           || lk == 21160           // 'json' '+'
           || lk == 22184           // 'json' '-'
           || lk == 24232           // 'json' '/'
           || lk == 24744           // 'json' '//'
           || lk == 28328           // 'json' '<'
           || lk == 28840           // 'json' '<!--'
           || lk == 30888           // 'json' '<?'
           || lk == 35496           // 'json' '['
           || lk == 36520           // 'json' 'after'
           || lk == 37544           // 'json' 'allowing'
           || lk == 38056           // 'json' 'ancestor'
           || lk == 38568           // 'json' 'ancestor-or-self'
           || lk == 39080           // 'json' 'and'
           || lk == 40104           // 'json' 'append'
           || lk == 40616           // 'json' 'array'
           || lk == 41128           // 'json' 'as'
           || lk == 41640           // 'json' 'ascending'
           || lk == 42152           // 'json' 'at'
           || lk == 42664           // 'json' 'attribute'
           || lk == 43176           // 'json' 'base-uri'
           || lk == 43688           // 'json' 'before'
           || lk == 44200           // 'json' 'boundary-space'
           || lk == 44712           // 'json' 'break'
           || lk == 45736           // 'json' 'case'
           || lk == 46248           // 'json' 'cast'
           || lk == 46760           // 'json' 'castable'
           || lk == 47272           // 'json' 'catch'
           || lk == 48296           // 'json' 'child'
           || lk == 48808           // 'json' 'collation'
           || lk == 49832           // 'json' 'comment'
           || lk == 50344           // 'json' 'constraint'
           || lk == 50856           // 'json' 'construction'
           || lk == 52392           // 'json' 'context'
           || lk == 52904           // 'json' 'continue'
           || lk == 53416           // 'json' 'copy'
           || lk == 53928           // 'json' 'copy-namespaces'
           || lk == 54440           // 'json' 'count'
           || lk == 54952           // 'json' 'decimal-format'
           || lk == 55976           // 'json' 'declare'
           || lk == 56488           // 'json' 'default'
           || lk == 57000           // 'json' 'delete'
           || lk == 57512           // 'json' 'descendant'
           || lk == 58024           // 'json' 'descendant-or-self'
           || lk == 58536           // 'json' 'descending'
           || lk == 61096           // 'json' 'div'
           || lk == 61608           // 'json' 'document'
           || lk == 62120           // 'json' 'document-node'
           || lk == 62632           // 'json' 'element'
           || lk == 63144           // 'json' 'else'
           || lk == 63656           // 'json' 'empty'
           || lk == 64168           // 'json' 'empty-sequence'
           || lk == 64680           // 'json' 'encoding'
           || lk == 65192           // 'json' 'end'
           || lk == 66216           // 'json' 'eq'
           || lk == 66728           // 'json' 'every'
           || lk == 67752           // 'json' 'except'
           || lk == 68264           // 'json' 'exit'
           || lk == 68776           // 'json' 'external'
           || lk == 69288           // 'json' 'false'
           || lk == 69800           // 'json' 'first'
           || lk == 70312           // 'json' 'following'
           || lk == 70824           // 'json' 'following-sibling'
           || lk == 71336           // 'json' 'for'
           || lk == 72872           // 'json' 'from'
           || lk == 73384           // 'json' 'ft-option'
           || lk == 75432           // 'json' 'function'
           || lk == 75944           // 'json' 'ge'
           || lk == 76968           // 'json' 'group'
           || lk == 77992           // 'json' 'gt'
           || lk == 78504           // 'json' 'idiv'
           || lk == 79016           // 'json' 'if'
           || lk == 79528           // 'json' 'import'
           || lk == 80040           // 'json' 'in'
           || lk == 80552           // 'json' 'index'
           || lk == 82600           // 'json' 'insert'
           || lk == 83112           // 'json' 'instance'
           || lk == 83624           // 'json' 'integrity'
           || lk == 84136           // 'json' 'intersect'
           || lk == 84648           // 'json' 'into'
           || lk == 85160           // 'json' 'is'
           || lk == 85672           // 'json' 'item'
           || lk == 86184           // 'json' 'json'
           || lk == 86696           // 'json' 'json-item'
           || lk == 87208           // 'json' 'jsoniq'
           || lk == 88744           // 'json' 'last'
           || lk == 89256           // 'json' 'lax'
           || lk == 89768           // 'json' 'le'
           || lk == 90792           // 'json' 'let'
           || lk == 91816           // 'json' 'loop'
           || lk == 92840           // 'json' 'lt'
           || lk == 93864           // 'json' 'mod'
           || lk == 94376           // 'json' 'modify'
           || lk == 94888           // 'json' 'module'
           || lk == 95912           // 'json' 'namespace'
           || lk == 96424           // 'json' 'namespace-node'
           || lk == 96936           // 'json' 'ne'
           || lk == 99496           // 'json' 'node'
           || lk == 100008          // 'json' 'nodes'
           || lk == 100520          // 'json' 'not'
           || lk == 101032          // 'json' 'null'
           || lk == 101544          // 'json' 'object'
           || lk == 103592          // 'json' 'only'
           || lk == 104104          // 'json' 'option'
           || lk == 104616          // 'json' 'or'
           || lk == 105128          // 'json' 'order'
           || lk == 105640          // 'json' 'ordered'
           || lk == 106152          // 'json' 'ordering'
           || lk == 107688          // 'json' 'parent'
           || lk == 110760          // 'json' 'preceding'
           || lk == 111272          // 'json' 'preceding-sibling'
           || lk == 112808          // 'json' 'processing-instruction'
           || lk == 113832          // 'json' 'rename'
           || lk == 114344          // 'json' 'replace'
           || lk == 114856          // 'json' 'return'
           || lk == 115368          // 'json' 'returning'
           || lk == 115880          // 'json' 'revalidation'
           || lk == 116904          // 'json' 'satisfies'
           || lk == 117416          // 'json' 'schema'
           || lk == 117928          // 'json' 'schema-attribute'
           || lk == 118440          // 'json' 'schema-element'
           || lk == 118952          // 'json' 'score'
           || lk == 119464          // 'json' 'select'
           || lk == 119976          // 'json' 'self'
           || lk == 122536          // 'json' 'sliding'
           || lk == 123048          // 'json' 'some'
           || lk == 123560          // 'json' 'stable'
           || lk == 124072          // 'json' 'start'
           || lk == 125608          // 'json' 'strict'
           || lk == 126632          // 'json' 'structured-item'
           || lk == 127144          // 'json' 'switch'
           || lk == 127656          // 'json' 'text'
           || lk == 129704          // 'json' 'to'
           || lk == 130216          // 'json' 'treat'
           || lk == 130728          // 'json' 'true'
           || lk == 131240          // 'json' 'try'
           || lk == 131752          // 'json' 'tumbling'
           || lk == 132264          // 'json' 'type'
           || lk == 132776          // 'json' 'typeswitch'
           || lk == 133288          // 'json' 'union'
           || lk == 134312          // 'json' 'unordered'
           || lk == 134824          // 'json' 'updating'
           || lk == 136360          // 'json' 'validate'
           || lk == 136872          // 'json' 'value'
           || lk == 137384          // 'json' 'variable'
           || lk == 137896          // 'json' 'version'
           || lk == 139432          // 'json' 'where'
           || lk == 139944          // 'json' 'while'
           || lk == 141480          // 'json' 'with'
           || lk == 144040          // 'json' '{'
           || lk == 145064)         // 'json' '{|'
          {
            shiftT(168);            // 'json'
          }
          lookahead1W(268);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          try_ExprSingle();
          shiftT(165);              // 'into'
          lookahead1W(268);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
          try_ExprSingle();
          switch (l1)
          {
          case 82:                  // 'at'
            lookahead2W(71);        // S^WS | '(:' | 'position'
            break;
          default:
            lk = l1;
          }
          if (lk == 110162)         // 'at' 'position'
          {
            lk = memoized(13, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(82);         // 'at'
                lookahead1W(71);    // S^WS | '(:' | 'position'
                shiftT(215);        // 'position'
                lookahead1W(268);   // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
                try_ExprSingle();
                memoize(13, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(13, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1)
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(268);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            try_ExprSingle();
          }
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(161);                  // 'insert'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            memoize(12, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(12, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shiftT(168);                // 'json'
      }
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
      shiftT(165);                  // 'into'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(71);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 110162)             // 'at' 'position'
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(268);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            try_ExprSingle();
            memoize(13, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(13, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        shiftT(82);                 // 'at'
        lookahead1W(71);            // S^WS | '(:' | 'position'
        shiftT(215);                // 'position'
        lookahead1W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      shiftT(161);                  // 'insert'
      lookahead1W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(283);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            memoize(14, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(14, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 9896                // 'json' NCName^Token
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shiftT(168);                // 'json'
      }
      lookahead1W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_PairConstructorList();
      shiftT(165);                  // 'into'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(222);                     // 'rename'
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(80);                      // 'as'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(222);                    // 'rename'
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(15, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    try_PostfixExpr();
    shiftT(80);                     // 'as'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(223);                     // 'replace'
    lookahead1W(126);               // S^WS | '(:' | 'json' | 'value'
    if (l1 == 168)                  // 'json'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(83);                // S^WS | '(:' | 'value'
    shift(267);                     // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    shift(200);                     // 'of'
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(276);                     // 'with'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(223);                    // 'replace'
    lookahead1W(126);               // S^WS | '(:' | 'json' | 'value'
    if (l1 == 168)                  // 'json'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(83);                // S^WS | '(:' | 'value'
    shiftT(267);                    // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    shiftT(200);                    // 'of'
    lookahead1W(261);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
    try_PostfixExpr();
    shiftT(276);                    // 'with'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(78);                      // 'append'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 18600                 // 'json' '(#'
     || lk == 21160                 // 'json' '+'
     || lk == 22184                 // 'json' '-'
     || lk == 24232                 // 'json' '/'
     || lk == 24744                 // 'json' '//'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 100520                // 'json' 'not'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(165);                     // 'into'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(78);                     // 'append'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(16, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 18600                 // 'json' '(#'
     || lk == 21160                 // 'json' '+'
     || lk == 22184                 // 'json' '-'
     || lk == 24232                 // 'json' '/'
     || lk == 24744                 // 'json' '//'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 100520                // 'json' 'not'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
    shiftT(165);                    // 'into'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shift(12);                    // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shift(23);                    // CharRef
      break;
    case 282:                       // '{{'
      shift(282);                   // '{{'
      break;
    case 288:                       // '}}'
      shift(288);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shiftT(12);                   // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shiftT(23);                   // CharRef
      break;
    case 282:                       // '{{'
      shiftT(282);                  // '{{'
      break;
    case 288:                       // '}}'
      shiftT(288);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(120);                     // 'document'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(120);                    // 'document'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(83);                      // 'attribute'
    lookahead1W(251);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(281);                   // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(83);                     // 'attribute'
    lookahead1W(251);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          memoize(17, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(281);                  // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shiftT(287);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(220);                     // 'processing-instruction'
    lookahead1W(243);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(18, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(18, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(281);                   // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(220);                    // 'processing-instruction'
    lookahead1W(243);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(18, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          memoize(18, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(281);                  // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shiftT(287);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(97);                      // 'comment'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(97);                     // 'comment'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(249);                     // 'text'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(249);                    // 'text'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 187:                       // 'namespace'
      lookahead2W(248);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(246);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 281:                       // '{'
      lookahead2W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(254);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(95);              // S^WS | '#' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3353                  // '{' EQName^Token
     || lk == 4377                  // '{' IntegerLiteral
     || lk == 4889                  // '{' DecimalLiteral
     || lk == 5401                  // '{' DoubleLiteral
     || lk == 5913                  // '{' StringLiteral
     || lk == 16153                 // '{' '$'
     || lk == 16665                 // '{' '$$'
     || lk == 17177                 // '{' '%'
     || lk == 18055                 // 'false' '('
     || lk == 18117                 // 'null' '('
     || lk == 18175                 // 'true' '('
     || lk == 18201                 // '{' '('
     || lk == 18713                 // '{' '(#'
     || lk == 21273                 // '{' '+'
     || lk == 22297                 // '{' '-'
     || lk == 24345                 // '{' '/'
     || lk == 24857                 // '{' '//'
     || lk == 28441                 // '{' '<'
     || lk == 28953                 // '{' '<!--'
     || lk == 31001                 // '{' '<?'
     || lk == 35609                 // '{' '['
     || lk == 36633                 // '{' 'after'
     || lk == 37657                 // '{' 'allowing'
     || lk == 38169                 // '{' 'ancestor'
     || lk == 38681                 // '{' 'ancestor-or-self'
     || lk == 39193                 // '{' 'and'
     || lk == 40217                 // '{' 'append'
     || lk == 40729                 // '{' 'array'
     || lk == 41241                 // '{' 'as'
     || lk == 41753                 // '{' 'ascending'
     || lk == 42265                 // '{' 'at'
     || lk == 42777                 // '{' 'attribute'
     || lk == 43289                 // '{' 'base-uri'
     || lk == 43801                 // '{' 'before'
     || lk == 44313                 // '{' 'boundary-space'
     || lk == 44825                 // '{' 'break'
     || lk == 45849                 // '{' 'case'
     || lk == 46361                 // '{' 'cast'
     || lk == 46873                 // '{' 'castable'
     || lk == 47385                 // '{' 'catch'
     || lk == 48409                 // '{' 'child'
     || lk == 48921                 // '{' 'collation'
     || lk == 49945                 // '{' 'comment'
     || lk == 50457                 // '{' 'constraint'
     || lk == 50969                 // '{' 'construction'
     || lk == 52505                 // '{' 'context'
     || lk == 53017                 // '{' 'continue'
     || lk == 53529                 // '{' 'copy'
     || lk == 54041                 // '{' 'copy-namespaces'
     || lk == 54553                 // '{' 'count'
     || lk == 55065                 // '{' 'decimal-format'
     || lk == 56089                 // '{' 'declare'
     || lk == 56601                 // '{' 'default'
     || lk == 57113                 // '{' 'delete'
     || lk == 57625                 // '{' 'descendant'
     || lk == 58137                 // '{' 'descendant-or-self'
     || lk == 58649                 // '{' 'descending'
     || lk == 61209                 // '{' 'div'
     || lk == 61721                 // '{' 'document'
     || lk == 62233                 // '{' 'document-node'
     || lk == 62745                 // '{' 'element'
     || lk == 63257                 // '{' 'else'
     || lk == 63769                 // '{' 'empty'
     || lk == 64281                 // '{' 'empty-sequence'
     || lk == 64793                 // '{' 'encoding'
     || lk == 65305                 // '{' 'end'
     || lk == 66329                 // '{' 'eq'
     || lk == 66841                 // '{' 'every'
     || lk == 67865                 // '{' 'except'
     || lk == 68377                 // '{' 'exit'
     || lk == 68889                 // '{' 'external'
     || lk == 69401                 // '{' 'false'
     || lk == 69913                 // '{' 'first'
     || lk == 70425                 // '{' 'following'
     || lk == 70937                 // '{' 'following-sibling'
     || lk == 71449                 // '{' 'for'
     || lk == 72985                 // '{' 'from'
     || lk == 73497                 // '{' 'ft-option'
     || lk == 75545                 // '{' 'function'
     || lk == 76057                 // '{' 'ge'
     || lk == 77081                 // '{' 'group'
     || lk == 78105                 // '{' 'gt'
     || lk == 78617                 // '{' 'idiv'
     || lk == 79129                 // '{' 'if'
     || lk == 79641                 // '{' 'import'
     || lk == 80153                 // '{' 'in'
     || lk == 80665                 // '{' 'index'
     || lk == 82713                 // '{' 'insert'
     || lk == 83225                 // '{' 'instance'
     || lk == 83737                 // '{' 'integrity'
     || lk == 84249                 // '{' 'intersect'
     || lk == 84761                 // '{' 'into'
     || lk == 85273                 // '{' 'is'
     || lk == 85785                 // '{' 'item'
     || lk == 86297                 // '{' 'json'
     || lk == 86809                 // '{' 'json-item'
     || lk == 87321                 // '{' 'jsoniq'
     || lk == 88857                 // '{' 'last'
     || lk == 89369                 // '{' 'lax'
     || lk == 89881                 // '{' 'le'
     || lk == 90905                 // '{' 'let'
     || lk == 91929                 // '{' 'loop'
     || lk == 92953                 // '{' 'lt'
     || lk == 93977                 // '{' 'mod'
     || lk == 94489                 // '{' 'modify'
     || lk == 95001                 // '{' 'module'
     || lk == 96025                 // '{' 'namespace'
     || lk == 96537                 // '{' 'namespace-node'
     || lk == 97049                 // '{' 'ne'
     || lk == 99609                 // '{' 'node'
     || lk == 100121                // '{' 'nodes'
     || lk == 100633                // '{' 'not'
     || lk == 101145                // '{' 'null'
     || lk == 101657                // '{' 'object'
     || lk == 103705                // '{' 'only'
     || lk == 104217                // '{' 'option'
     || lk == 104729                // '{' 'or'
     || lk == 105241                // '{' 'order'
     || lk == 105753                // '{' 'ordered'
     || lk == 106265                // '{' 'ordering'
     || lk == 107801                // '{' 'parent'
     || lk == 110873                // '{' 'preceding'
     || lk == 111385                // '{' 'preceding-sibling'
     || lk == 112921                // '{' 'processing-instruction'
     || lk == 113945                // '{' 'rename'
     || lk == 114457                // '{' 'replace'
     || lk == 114969                // '{' 'return'
     || lk == 115481                // '{' 'returning'
     || lk == 115993                // '{' 'revalidation'
     || lk == 117017                // '{' 'satisfies'
     || lk == 117529                // '{' 'schema'
     || lk == 118041                // '{' 'schema-attribute'
     || lk == 118553                // '{' 'schema-element'
     || lk == 119065                // '{' 'score'
     || lk == 119577                // '{' 'select'
     || lk == 120089                // '{' 'self'
     || lk == 122649                // '{' 'sliding'
     || lk == 123161                // '{' 'some'
     || lk == 123673                // '{' 'stable'
     || lk == 124185                // '{' 'start'
     || lk == 125721                // '{' 'strict'
     || lk == 126745                // '{' 'structured-item'
     || lk == 127257                // '{' 'switch'
     || lk == 127769                // '{' 'text'
     || lk == 129817                // '{' 'to'
     || lk == 130329                // '{' 'treat'
     || lk == 130841                // '{' 'true'
     || lk == 131353                // '{' 'try'
     || lk == 131865                // '{' 'tumbling'
     || lk == 132377                // '{' 'type'
     || lk == 132889                // '{' 'typeswitch'
     || lk == 133401                // '{' 'union'
     || lk == 134425                // '{' 'unordered'
     || lk == 134937                // '{' 'updating'
     || lk == 136473                // '{' 'validate'
     || lk == 136985                // '{' 'value'
     || lk == 137497                // '{' 'variable'
     || lk == 138009                // '{' 'version'
     || lk == 139545                // '{' 'where'
     || lk == 140057                // '{' 'while'
     || lk == 141593                // '{' 'with'
     || lk == 144153                // '{' '{'
     || lk == 145177                // '{' '{|'
     || lk == 147225)               // '{' '}'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_Literal();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_FunctionCall();
            lk = -5;
          }
          catch (p5A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockExpr();
              lk = -10;
            }
            catch (p10A)
            {
              lk = -11;
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 12935:                     // 'false' EOF
    case 12997:                     // 'null' EOF
    case 13055:                     // 'true' EOF
    case 13447:                     // 'false' '!'
    case 13509:                     // 'null' '!'
    case 13567:                     // 'true' '!'
    case 13959:                     // 'false' '!='
    case 14021:                     // 'null' '!='
    case 14079:                     // 'true' '!='
    case 19591:                     // 'false' ')'
    case 19653:                     // 'null' ')'
    case 19711:                     // 'true' ')'
    case 20103:                     // 'false' '*'
    case 20165:                     // 'null' '*'
    case 20223:                     // 'true' '*'
    case 21127:                     // 'false' '+'
    case 21189:                     // 'null' '+'
    case 21247:                     // 'true' '+'
    case 21639:                     // 'false' ','
    case 21701:                     // 'null' ','
    case 21759:                     // 'true' ','
    case 22151:                     // 'false' '-'
    case 22213:                     // 'null' '-'
    case 22271:                     // 'true' '-'
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 24199:                     // 'false' '/'
    case 24261:                     // 'null' '/'
    case 24319:                     // 'true' '/'
    case 24711:                     // 'false' '//'
    case 24773:                     // 'null' '//'
    case 24831:                     // 'true' '//'
    case 25735:                     // 'false' ':'
    case 25797:                     // 'null' ':'
    case 25855:                     // 'true' ':'
    case 27783:                     // 'false' ';'
    case 27845:                     // 'null' ';'
    case 27903:                     // 'true' ';'
    case 28295:                     // 'false' '<'
    case 28357:                     // 'null' '<'
    case 28415:                     // 'true' '<'
    case 29831:                     // 'false' '<<'
    case 29893:                     // 'null' '<<'
    case 29951:                     // 'true' '<<'
    case 30343:                     // 'false' '<='
    case 30405:                     // 'null' '<='
    case 30463:                     // 'true' '<='
    case 31367:                     // 'false' '='
    case 31429:                     // 'null' '='
    case 31487:                     // 'true' '='
    case 31879:                     // 'false' '>'
    case 31941:                     // 'null' '>'
    case 31999:                     // 'true' '>'
    case 32391:                     // 'false' '>='
    case 32453:                     // 'null' '>='
    case 32511:                     // 'true' '>='
    case 32903:                     // 'false' '>>'
    case 32965:                     // 'null' '>>'
    case 33023:                     // 'true' '>>'
    case 35463:                     // 'false' '['
    case 35525:                     // 'null' '['
    case 35583:                     // 'true' '['
    case 35975:                     // 'false' ']'
    case 36037:                     // 'null' ']'
    case 36095:                     // 'true' ']'
    case 36487:                     // 'false' 'after'
    case 36549:                     // 'null' 'after'
    case 36607:                     // 'true' 'after'
    case 39047:                     // 'false' 'and'
    case 39109:                     // 'null' 'and'
    case 39167:                     // 'true' 'and'
    case 41095:                     // 'false' 'as'
    case 41157:                     // 'null' 'as'
    case 41215:                     // 'true' 'as'
    case 41607:                     // 'false' 'ascending'
    case 41669:                     // 'null' 'ascending'
    case 41727:                     // 'true' 'ascending'
    case 42119:                     // 'false' 'at'
    case 42181:                     // 'null' 'at'
    case 42239:                     // 'true' 'at'
    case 43655:                     // 'false' 'before'
    case 43717:                     // 'null' 'before'
    case 43775:                     // 'true' 'before'
    case 45191:                     // 'false' 'by'
    case 45253:                     // 'null' 'by'
    case 45311:                     // 'true' 'by'
    case 45703:                     // 'false' 'case'
    case 45765:                     // 'null' 'case'
    case 45823:                     // 'true' 'case'
    case 46215:                     // 'false' 'cast'
    case 46277:                     // 'null' 'cast'
    case 46335:                     // 'true' 'cast'
    case 46727:                     // 'false' 'castable'
    case 46789:                     // 'null' 'castable'
    case 46847:                     // 'true' 'castable'
    case 48775:                     // 'false' 'collation'
    case 48837:                     // 'null' 'collation'
    case 48895:                     // 'true' 'collation'
    case 51335:                     // 'false' 'contains'
    case 51397:                     // 'null' 'contains'
    case 51455:                     // 'true' 'contains'
    case 54407:                     // 'false' 'count'
    case 54469:                     // 'null' 'count'
    case 54527:                     // 'true' 'count'
    case 56455:                     // 'false' 'default'
    case 56517:                     // 'null' 'default'
    case 56575:                     // 'true' 'default'
    case 58503:                     // 'false' 'descending'
    case 58565:                     // 'null' 'descending'
    case 58623:                     // 'true' 'descending'
    case 61063:                     // 'false' 'div'
    case 61125:                     // 'null' 'div'
    case 61183:                     // 'true' 'div'
    case 63111:                     // 'false' 'else'
    case 63173:                     // 'null' 'else'
    case 63231:                     // 'true' 'else'
    case 63623:                     // 'false' 'empty'
    case 63685:                     // 'null' 'empty'
    case 63743:                     // 'true' 'empty'
    case 65159:                     // 'false' 'end'
    case 65221:                     // 'null' 'end'
    case 65279:                     // 'true' 'end'
    case 66183:                     // 'false' 'eq'
    case 66245:                     // 'null' 'eq'
    case 66303:                     // 'true' 'eq'
    case 67719:                     // 'false' 'except'
    case 67781:                     // 'null' 'except'
    case 67839:                     // 'true' 'except'
    case 71303:                     // 'false' 'for'
    case 71365:                     // 'null' 'for'
    case 71423:                     // 'true' 'for'
    case 72839:                     // 'false' 'from'
    case 72901:                     // 'null' 'from'
    case 72959:                     // 'true' 'from'
    case 75911:                     // 'false' 'ge'
    case 75973:                     // 'null' 'ge'
    case 76031:                     // 'true' 'ge'
    case 76935:                     // 'false' 'group'
    case 76997:                     // 'null' 'group'
    case 77055:                     // 'true' 'group'
    case 77959:                     // 'false' 'gt'
    case 78021:                     // 'null' 'gt'
    case 78079:                     // 'true' 'gt'
    case 78471:                     // 'false' 'idiv'
    case 78533:                     // 'null' 'idiv'
    case 78591:                     // 'true' 'idiv'
    case 83079:                     // 'false' 'instance'
    case 83141:                     // 'null' 'instance'
    case 83199:                     // 'true' 'instance'
    case 84103:                     // 'false' 'intersect'
    case 84165:                     // 'null' 'intersect'
    case 84223:                     // 'true' 'intersect'
    case 84615:                     // 'false' 'into'
    case 84677:                     // 'null' 'into'
    case 84735:                     // 'true' 'into'
    case 85127:                     // 'false' 'is'
    case 85189:                     // 'null' 'is'
    case 85247:                     // 'true' 'is'
    case 89735:                     // 'false' 'le'
    case 89797:                     // 'null' 'le'
    case 89855:                     // 'true' 'le'
    case 90759:                     // 'false' 'let'
    case 90821:                     // 'null' 'let'
    case 90879:                     // 'true' 'let'
    case 92807:                     // 'false' 'lt'
    case 92869:                     // 'null' 'lt'
    case 92927:                     // 'true' 'lt'
    case 93831:                     // 'false' 'mod'
    case 93893:                     // 'null' 'mod'
    case 93951:                     // 'true' 'mod'
    case 94343:                     // 'false' 'modify'
    case 94405:                     // 'null' 'modify'
    case 94463:                     // 'true' 'modify'
    case 96903:                     // 'false' 'ne'
    case 96965:                     // 'null' 'ne'
    case 97023:                     // 'true' 'ne'
    case 103559:                    // 'false' 'only'
    case 103621:                    // 'null' 'only'
    case 103679:                    // 'true' 'only'
    case 104583:                    // 'false' 'or'
    case 104645:                    // 'null' 'or'
    case 104703:                    // 'true' 'or'
    case 105095:                    // 'false' 'order'
    case 105157:                    // 'null' 'order'
    case 105215:                    // 'true' 'order'
    case 107143:                    // 'false' 'paragraphs'
    case 107205:                    // 'null' 'paragraphs'
    case 107263:                    // 'true' 'paragraphs'
    case 114823:                    // 'false' 'return'
    case 114885:                    // 'null' 'return'
    case 114943:                    // 'true' 'return'
    case 116871:                    // 'false' 'satisfies'
    case 116933:                    // 'null' 'satisfies'
    case 116991:                    // 'true' 'satisfies'
    case 119431:                    // 'false' 'select'
    case 119493:                    // 'null' 'select'
    case 119551:                    // 'true' 'select'
    case 121479:                    // 'false' 'sentences'
    case 121541:                    // 'null' 'sentences'
    case 121599:                    // 'true' 'sentences'
    case 123527:                    // 'false' 'stable'
    case 123589:                    // 'null' 'stable'
    case 123647:                    // 'true' 'stable'
    case 124039:                    // 'false' 'start'
    case 124101:                    // 'null' 'start'
    case 124159:                    // 'true' 'start'
    case 129159:                    // 'false' 'times'
    case 129221:                    // 'null' 'times'
    case 129279:                    // 'true' 'times'
    case 129671:                    // 'false' 'to'
    case 129733:                    // 'null' 'to'
    case 129791:                    // 'true' 'to'
    case 130183:                    // 'false' 'treat'
    case 130245:                    // 'null' 'treat'
    case 130303:                    // 'true' 'treat'
    case 133255:                    // 'false' 'union'
    case 133317:                    // 'null' 'union'
    case 133375:                    // 'true' 'union'
    case 139399:                    // 'false' 'where'
    case 139461:                    // 'null' 'where'
    case 139519:                    // 'true' 'where'
    case 141447:                    // 'false' 'with'
    case 141509:                    // 'null' 'with'
    case 141567:                    // 'true' 'with'
    case 142983:                    // 'false' 'words'
    case 143045:                    // 'null' 'words'
    case 143103:                    // 'true' 'words'
    case 145543:                    // 'false' '|'
    case 145605:                    // 'null' '|'
    case 145663:                    // 'true' '|'
    case 146055:                    // 'false' '||'
    case 146117:                    // 'null' '||'
    case 146175:                    // 'true' '||'
    case 146567:                    // 'false' '|}'
    case 146629:                    // 'null' '|}'
    case 146687:                    // 'true' '|}'
    case 147079:                    // 'false' '}'
    case 147141:                    // 'null' '}'
    case 147199:                    // 'true' '}'
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 32:                        // '$$'
      parse_ContextItemExpr();
      break;
    case -5:
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
      parse_FunctionCall();
      break;
    case 144078:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 144134:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 79:                        // 'array'
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 147:                       // 'function'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
    case 27929:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -11:
    case 10009:                     // '{' NCName^Token
      parse_ObjectConstructor();
      break;
    case 69:                        // '['
      parse_ArrayConstructor();
      break;
    case 283:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 187:                       // 'namespace'
      lookahead2W(248);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(246);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 281:                       // '{'
      lookahead2W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(254);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(95);              // S^WS | '#' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3353                  // '{' EQName^Token
     || lk == 4377                  // '{' IntegerLiteral
     || lk == 4889                  // '{' DecimalLiteral
     || lk == 5401                  // '{' DoubleLiteral
     || lk == 5913                  // '{' StringLiteral
     || lk == 16153                 // '{' '$'
     || lk == 16665                 // '{' '$$'
     || lk == 17177                 // '{' '%'
     || lk == 18055                 // 'false' '('
     || lk == 18117                 // 'null' '('
     || lk == 18175                 // 'true' '('
     || lk == 18201                 // '{' '('
     || lk == 18713                 // '{' '(#'
     || lk == 21273                 // '{' '+'
     || lk == 22297                 // '{' '-'
     || lk == 24345                 // '{' '/'
     || lk == 24857                 // '{' '//'
     || lk == 28441                 // '{' '<'
     || lk == 28953                 // '{' '<!--'
     || lk == 31001                 // '{' '<?'
     || lk == 35609                 // '{' '['
     || lk == 36633                 // '{' 'after'
     || lk == 37657                 // '{' 'allowing'
     || lk == 38169                 // '{' 'ancestor'
     || lk == 38681                 // '{' 'ancestor-or-self'
     || lk == 39193                 // '{' 'and'
     || lk == 40217                 // '{' 'append'
     || lk == 40729                 // '{' 'array'
     || lk == 41241                 // '{' 'as'
     || lk == 41753                 // '{' 'ascending'
     || lk == 42265                 // '{' 'at'
     || lk == 42777                 // '{' 'attribute'
     || lk == 43289                 // '{' 'base-uri'
     || lk == 43801                 // '{' 'before'
     || lk == 44313                 // '{' 'boundary-space'
     || lk == 44825                 // '{' 'break'
     || lk == 45849                 // '{' 'case'
     || lk == 46361                 // '{' 'cast'
     || lk == 46873                 // '{' 'castable'
     || lk == 47385                 // '{' 'catch'
     || lk == 48409                 // '{' 'child'
     || lk == 48921                 // '{' 'collation'
     || lk == 49945                 // '{' 'comment'
     || lk == 50457                 // '{' 'constraint'
     || lk == 50969                 // '{' 'construction'
     || lk == 52505                 // '{' 'context'
     || lk == 53017                 // '{' 'continue'
     || lk == 53529                 // '{' 'copy'
     || lk == 54041                 // '{' 'copy-namespaces'
     || lk == 54553                 // '{' 'count'
     || lk == 55065                 // '{' 'decimal-format'
     || lk == 56089                 // '{' 'declare'
     || lk == 56601                 // '{' 'default'
     || lk == 57113                 // '{' 'delete'
     || lk == 57625                 // '{' 'descendant'
     || lk == 58137                 // '{' 'descendant-or-self'
     || lk == 58649                 // '{' 'descending'
     || lk == 61209                 // '{' 'div'
     || lk == 61721                 // '{' 'document'
     || lk == 62233                 // '{' 'document-node'
     || lk == 62745                 // '{' 'element'
     || lk == 63257                 // '{' 'else'
     || lk == 63769                 // '{' 'empty'
     || lk == 64281                 // '{' 'empty-sequence'
     || lk == 64793                 // '{' 'encoding'
     || lk == 65305                 // '{' 'end'
     || lk == 66329                 // '{' 'eq'
     || lk == 66841                 // '{' 'every'
     || lk == 67865                 // '{' 'except'
     || lk == 68377                 // '{' 'exit'
     || lk == 68889                 // '{' 'external'
     || lk == 69401                 // '{' 'false'
     || lk == 69913                 // '{' 'first'
     || lk == 70425                 // '{' 'following'
     || lk == 70937                 // '{' 'following-sibling'
     || lk == 71449                 // '{' 'for'
     || lk == 72985                 // '{' 'from'
     || lk == 73497                 // '{' 'ft-option'
     || lk == 75545                 // '{' 'function'
     || lk == 76057                 // '{' 'ge'
     || lk == 77081                 // '{' 'group'
     || lk == 78105                 // '{' 'gt'
     || lk == 78617                 // '{' 'idiv'
     || lk == 79129                 // '{' 'if'
     || lk == 79641                 // '{' 'import'
     || lk == 80153                 // '{' 'in'
     || lk == 80665                 // '{' 'index'
     || lk == 82713                 // '{' 'insert'
     || lk == 83225                 // '{' 'instance'
     || lk == 83737                 // '{' 'integrity'
     || lk == 84249                 // '{' 'intersect'
     || lk == 84761                 // '{' 'into'
     || lk == 85273                 // '{' 'is'
     || lk == 85785                 // '{' 'item'
     || lk == 86297                 // '{' 'json'
     || lk == 86809                 // '{' 'json-item'
     || lk == 87321                 // '{' 'jsoniq'
     || lk == 88857                 // '{' 'last'
     || lk == 89369                 // '{' 'lax'
     || lk == 89881                 // '{' 'le'
     || lk == 90905                 // '{' 'let'
     || lk == 91929                 // '{' 'loop'
     || lk == 92953                 // '{' 'lt'
     || lk == 93977                 // '{' 'mod'
     || lk == 94489                 // '{' 'modify'
     || lk == 95001                 // '{' 'module'
     || lk == 96025                 // '{' 'namespace'
     || lk == 96537                 // '{' 'namespace-node'
     || lk == 97049                 // '{' 'ne'
     || lk == 99609                 // '{' 'node'
     || lk == 100121                // '{' 'nodes'
     || lk == 100633                // '{' 'not'
     || lk == 101145                // '{' 'null'
     || lk == 101657                // '{' 'object'
     || lk == 103705                // '{' 'only'
     || lk == 104217                // '{' 'option'
     || lk == 104729                // '{' 'or'
     || lk == 105241                // '{' 'order'
     || lk == 105753                // '{' 'ordered'
     || lk == 106265                // '{' 'ordering'
     || lk == 107801                // '{' 'parent'
     || lk == 110873                // '{' 'preceding'
     || lk == 111385                // '{' 'preceding-sibling'
     || lk == 112921                // '{' 'processing-instruction'
     || lk == 113945                // '{' 'rename'
     || lk == 114457                // '{' 'replace'
     || lk == 114969                // '{' 'return'
     || lk == 115481                // '{' 'returning'
     || lk == 115993                // '{' 'revalidation'
     || lk == 117017                // '{' 'satisfies'
     || lk == 117529                // '{' 'schema'
     || lk == 118041                // '{' 'schema-attribute'
     || lk == 118553                // '{' 'schema-element'
     || lk == 119065                // '{' 'score'
     || lk == 119577                // '{' 'select'
     || lk == 120089                // '{' 'self'
     || lk == 122649                // '{' 'sliding'
     || lk == 123161                // '{' 'some'
     || lk == 123673                // '{' 'stable'
     || lk == 124185                // '{' 'start'
     || lk == 125721                // '{' 'strict'
     || lk == 126745                // '{' 'structured-item'
     || lk == 127257                // '{' 'switch'
     || lk == 127769                // '{' 'text'
     || lk == 129817                // '{' 'to'
     || lk == 130329                // '{' 'treat'
     || lk == 130841                // '{' 'true'
     || lk == 131353                // '{' 'try'
     || lk == 131865                // '{' 'tumbling'
     || lk == 132377                // '{' 'type'
     || lk == 132889                // '{' 'typeswitch'
     || lk == 133401                // '{' 'union'
     || lk == 134425                // '{' 'unordered'
     || lk == 134937                // '{' 'updating'
     || lk == 136473                // '{' 'validate'
     || lk == 136985                // '{' 'value'
     || lk == 137497                // '{' 'variable'
     || lk == 138009                // '{' 'version'
     || lk == 139545                // '{' 'where'
     || lk == 140057                // '{' 'while'
     || lk == 141593                // '{' 'with'
     || lk == 144153                // '{' '{'
     || lk == 145177                // '{' '{|'
     || lk == 147225)               // '{' '}'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_Literal();
          memoize(19, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_FunctionCall();
            memoize(19, e0A, -5);
            lk = -14;
          }
          catch (p5A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockExpr();
              memoize(19, e0A, -10);
              lk = -14;
            }
            catch (p10A)
            {
              lk = -11;
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(19, e0A, -11);
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 12935:                     // 'false' EOF
    case 12997:                     // 'null' EOF
    case 13055:                     // 'true' EOF
    case 13447:                     // 'false' '!'
    case 13509:                     // 'null' '!'
    case 13567:                     // 'true' '!'
    case 13959:                     // 'false' '!='
    case 14021:                     // 'null' '!='
    case 14079:                     // 'true' '!='
    case 19591:                     // 'false' ')'
    case 19653:                     // 'null' ')'
    case 19711:                     // 'true' ')'
    case 20103:                     // 'false' '*'
    case 20165:                     // 'null' '*'
    case 20223:                     // 'true' '*'
    case 21127:                     // 'false' '+'
    case 21189:                     // 'null' '+'
    case 21247:                     // 'true' '+'
    case 21639:                     // 'false' ','
    case 21701:                     // 'null' ','
    case 21759:                     // 'true' ','
    case 22151:                     // 'false' '-'
    case 22213:                     // 'null' '-'
    case 22271:                     // 'true' '-'
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 24199:                     // 'false' '/'
    case 24261:                     // 'null' '/'
    case 24319:                     // 'true' '/'
    case 24711:                     // 'false' '//'
    case 24773:                     // 'null' '//'
    case 24831:                     // 'true' '//'
    case 25735:                     // 'false' ':'
    case 25797:                     // 'null' ':'
    case 25855:                     // 'true' ':'
    case 27783:                     // 'false' ';'
    case 27845:                     // 'null' ';'
    case 27903:                     // 'true' ';'
    case 28295:                     // 'false' '<'
    case 28357:                     // 'null' '<'
    case 28415:                     // 'true' '<'
    case 29831:                     // 'false' '<<'
    case 29893:                     // 'null' '<<'
    case 29951:                     // 'true' '<<'
    case 30343:                     // 'false' '<='
    case 30405:                     // 'null' '<='
    case 30463:                     // 'true' '<='
    case 31367:                     // 'false' '='
    case 31429:                     // 'null' '='
    case 31487:                     // 'true' '='
    case 31879:                     // 'false' '>'
    case 31941:                     // 'null' '>'
    case 31999:                     // 'true' '>'
    case 32391:                     // 'false' '>='
    case 32453:                     // 'null' '>='
    case 32511:                     // 'true' '>='
    case 32903:                     // 'false' '>>'
    case 32965:                     // 'null' '>>'
    case 33023:                     // 'true' '>>'
    case 35463:                     // 'false' '['
    case 35525:                     // 'null' '['
    case 35583:                     // 'true' '['
    case 35975:                     // 'false' ']'
    case 36037:                     // 'null' ']'
    case 36095:                     // 'true' ']'
    case 36487:                     // 'false' 'after'
    case 36549:                     // 'null' 'after'
    case 36607:                     // 'true' 'after'
    case 39047:                     // 'false' 'and'
    case 39109:                     // 'null' 'and'
    case 39167:                     // 'true' 'and'
    case 41095:                     // 'false' 'as'
    case 41157:                     // 'null' 'as'
    case 41215:                     // 'true' 'as'
    case 41607:                     // 'false' 'ascending'
    case 41669:                     // 'null' 'ascending'
    case 41727:                     // 'true' 'ascending'
    case 42119:                     // 'false' 'at'
    case 42181:                     // 'null' 'at'
    case 42239:                     // 'true' 'at'
    case 43655:                     // 'false' 'before'
    case 43717:                     // 'null' 'before'
    case 43775:                     // 'true' 'before'
    case 45191:                     // 'false' 'by'
    case 45253:                     // 'null' 'by'
    case 45311:                     // 'true' 'by'
    case 45703:                     // 'false' 'case'
    case 45765:                     // 'null' 'case'
    case 45823:                     // 'true' 'case'
    case 46215:                     // 'false' 'cast'
    case 46277:                     // 'null' 'cast'
    case 46335:                     // 'true' 'cast'
    case 46727:                     // 'false' 'castable'
    case 46789:                     // 'null' 'castable'
    case 46847:                     // 'true' 'castable'
    case 48775:                     // 'false' 'collation'
    case 48837:                     // 'null' 'collation'
    case 48895:                     // 'true' 'collation'
    case 51335:                     // 'false' 'contains'
    case 51397:                     // 'null' 'contains'
    case 51455:                     // 'true' 'contains'
    case 54407:                     // 'false' 'count'
    case 54469:                     // 'null' 'count'
    case 54527:                     // 'true' 'count'
    case 56455:                     // 'false' 'default'
    case 56517:                     // 'null' 'default'
    case 56575:                     // 'true' 'default'
    case 58503:                     // 'false' 'descending'
    case 58565:                     // 'null' 'descending'
    case 58623:                     // 'true' 'descending'
    case 61063:                     // 'false' 'div'
    case 61125:                     // 'null' 'div'
    case 61183:                     // 'true' 'div'
    case 63111:                     // 'false' 'else'
    case 63173:                     // 'null' 'else'
    case 63231:                     // 'true' 'else'
    case 63623:                     // 'false' 'empty'
    case 63685:                     // 'null' 'empty'
    case 63743:                     // 'true' 'empty'
    case 65159:                     // 'false' 'end'
    case 65221:                     // 'null' 'end'
    case 65279:                     // 'true' 'end'
    case 66183:                     // 'false' 'eq'
    case 66245:                     // 'null' 'eq'
    case 66303:                     // 'true' 'eq'
    case 67719:                     // 'false' 'except'
    case 67781:                     // 'null' 'except'
    case 67839:                     // 'true' 'except'
    case 71303:                     // 'false' 'for'
    case 71365:                     // 'null' 'for'
    case 71423:                     // 'true' 'for'
    case 72839:                     // 'false' 'from'
    case 72901:                     // 'null' 'from'
    case 72959:                     // 'true' 'from'
    case 75911:                     // 'false' 'ge'
    case 75973:                     // 'null' 'ge'
    case 76031:                     // 'true' 'ge'
    case 76935:                     // 'false' 'group'
    case 76997:                     // 'null' 'group'
    case 77055:                     // 'true' 'group'
    case 77959:                     // 'false' 'gt'
    case 78021:                     // 'null' 'gt'
    case 78079:                     // 'true' 'gt'
    case 78471:                     // 'false' 'idiv'
    case 78533:                     // 'null' 'idiv'
    case 78591:                     // 'true' 'idiv'
    case 83079:                     // 'false' 'instance'
    case 83141:                     // 'null' 'instance'
    case 83199:                     // 'true' 'instance'
    case 84103:                     // 'false' 'intersect'
    case 84165:                     // 'null' 'intersect'
    case 84223:                     // 'true' 'intersect'
    case 84615:                     // 'false' 'into'
    case 84677:                     // 'null' 'into'
    case 84735:                     // 'true' 'into'
    case 85127:                     // 'false' 'is'
    case 85189:                     // 'null' 'is'
    case 85247:                     // 'true' 'is'
    case 89735:                     // 'false' 'le'
    case 89797:                     // 'null' 'le'
    case 89855:                     // 'true' 'le'
    case 90759:                     // 'false' 'let'
    case 90821:                     // 'null' 'let'
    case 90879:                     // 'true' 'let'
    case 92807:                     // 'false' 'lt'
    case 92869:                     // 'null' 'lt'
    case 92927:                     // 'true' 'lt'
    case 93831:                     // 'false' 'mod'
    case 93893:                     // 'null' 'mod'
    case 93951:                     // 'true' 'mod'
    case 94343:                     // 'false' 'modify'
    case 94405:                     // 'null' 'modify'
    case 94463:                     // 'true' 'modify'
    case 96903:                     // 'false' 'ne'
    case 96965:                     // 'null' 'ne'
    case 97023:                     // 'true' 'ne'
    case 103559:                    // 'false' 'only'
    case 103621:                    // 'null' 'only'
    case 103679:                    // 'true' 'only'
    case 104583:                    // 'false' 'or'
    case 104645:                    // 'null' 'or'
    case 104703:                    // 'true' 'or'
    case 105095:                    // 'false' 'order'
    case 105157:                    // 'null' 'order'
    case 105215:                    // 'true' 'order'
    case 107143:                    // 'false' 'paragraphs'
    case 107205:                    // 'null' 'paragraphs'
    case 107263:                    // 'true' 'paragraphs'
    case 114823:                    // 'false' 'return'
    case 114885:                    // 'null' 'return'
    case 114943:                    // 'true' 'return'
    case 116871:                    // 'false' 'satisfies'
    case 116933:                    // 'null' 'satisfies'
    case 116991:                    // 'true' 'satisfies'
    case 119431:                    // 'false' 'select'
    case 119493:                    // 'null' 'select'
    case 119551:                    // 'true' 'select'
    case 121479:                    // 'false' 'sentences'
    case 121541:                    // 'null' 'sentences'
    case 121599:                    // 'true' 'sentences'
    case 123527:                    // 'false' 'stable'
    case 123589:                    // 'null' 'stable'
    case 123647:                    // 'true' 'stable'
    case 124039:                    // 'false' 'start'
    case 124101:                    // 'null' 'start'
    case 124159:                    // 'true' 'start'
    case 129159:                    // 'false' 'times'
    case 129221:                    // 'null' 'times'
    case 129279:                    // 'true' 'times'
    case 129671:                    // 'false' 'to'
    case 129733:                    // 'null' 'to'
    case 129791:                    // 'true' 'to'
    case 130183:                    // 'false' 'treat'
    case 130245:                    // 'null' 'treat'
    case 130303:                    // 'true' 'treat'
    case 133255:                    // 'false' 'union'
    case 133317:                    // 'null' 'union'
    case 133375:                    // 'true' 'union'
    case 139399:                    // 'false' 'where'
    case 139461:                    // 'null' 'where'
    case 139519:                    // 'true' 'where'
    case 141447:                    // 'false' 'with'
    case 141509:                    // 'null' 'with'
    case 141567:                    // 'true' 'with'
    case 142983:                    // 'false' 'words'
    case 143045:                    // 'null' 'words'
    case 143103:                    // 'true' 'words'
    case 145543:                    // 'false' '|'
    case 145605:                    // 'null' '|'
    case 145663:                    // 'true' '|'
    case 146055:                    // 'false' '||'
    case 146117:                    // 'null' '||'
    case 146175:                    // 'true' '||'
    case 146567:                    // 'false' '|}'
    case 146629:                    // 'null' '|}'
    case 146687:                    // 'true' '|}'
    case 147079:                    // 'false' '}'
    case 147141:                    // 'null' '}'
    case 147199:                    // 'true' '}'
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 32:                        // '$$'
      try_ContextItemExpr();
      break;
    case -5:
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
      try_FunctionCall();
      break;
    case 144078:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 144134:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 79:                        // 'array'
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 147:                       // 'function'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
      try_FunctionItemExpr();
      break;
    case -10:
    case 27929:                     // '{' ';'
      try_BlockExpr();
      break;
    case -11:
    case 10009:                     // '{' NCName^Token
      try_ObjectConstructor();
      break;
    case 69:                        // '['
      try_ArrayConstructor();
      break;
    case 283:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(283);                     // '{|'
    lookahead1W(275);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
    if (l1 != 286)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(286);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(283);                    // '{|'
    lookahead1W(275);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '|}'
    if (l1 != 286)                  // '|}'
    {
      try_Expr();
    }
    shiftT(286);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(281);                     // '{'
    lookahead1W(278);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(281);                    // '{'
    lookahead1W(278);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      try_PairConstructorList();
    }
    shiftT(287);                    // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(280);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 177:                       // 'let'
      lookahead2W(178);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
      break;
    case 187:                       // 'namespace'
      lookahead2W(253);             // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(249);             // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 223:                       // 'replace'
      lookahead2W(188);             // S^WS | '#' | '(' | '(:' | ':' | 'json' | 'node' | 'value'
      break;
    case 266:                       // 'validate'
      lookahead2W(192);             // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(258);             // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(147);             // S^WS | '#' | '(:' | ':' | '{'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(187);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(166);             // S^WS | '#' | '$' | '(' | '(:' | ':'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(210);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 256:                       // 'try'
    case 262:                       // 'unordered'
      lookahead2W(168);             // S^WS | '#' | '(' | '(:' | ':' | '{'
      break;
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 167:                       // 'item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
      lookahead2W(94);              // S^WS | '#' | '(:' | ':'
      break;
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 154:                       // 'if'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 248:                       // 'switch'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 259:                       // 'typeswitch'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(142);             // S^WS | '#' | '(' | '(:' | ':'
      break;
    default:
      lk = l1;
    }
    if (lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855)                // 'true' ':'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
    case 19:                        // NCName^Token
    case 25671:                     // 'after' ':'
    case 25673:                     // 'allowing' ':'
    case 25674:                     // 'ancestor' ':'
    case 25675:                     // 'ancestor-or-self' ':'
    case 25676:                     // 'and' ':'
    case 25678:                     // 'append' ':'
    case 25680:                     // 'as' ':'
    case 25681:                     // 'ascending' ':'
    case 25682:                     // 'at' ':'
    case 25683:                     // 'attribute' ':'
    case 25684:                     // 'base-uri' ':'
    case 25685:                     // 'before' ':'
    case 25686:                     // 'boundary-space' ':'
    case 25687:                     // 'break' ':'
    case 25689:                     // 'case' ':'
    case 25690:                     // 'cast' ':'
    case 25691:                     // 'castable' ':'
    case 25692:                     // 'catch' ':'
    case 25694:                     // 'child' ':'
    case 25695:                     // 'collation' ':'
    case 25697:                     // 'comment' ':'
    case 25698:                     // 'constraint' ':'
    case 25699:                     // 'construction' ':'
    case 25702:                     // 'context' ':'
    case 25703:                     // 'continue' ':'
    case 25704:                     // 'copy' ':'
    case 25705:                     // 'copy-namespaces' ':'
    case 25706:                     // 'count' ':'
    case 25707:                     // 'decimal-format' ':'
    case 25709:                     // 'declare' ':'
    case 25710:                     // 'default' ':'
    case 25711:                     // 'delete' ':'
    case 25712:                     // 'descendant' ':'
    case 25713:                     // 'descendant-or-self' ':'
    case 25714:                     // 'descending' ':'
    case 25719:                     // 'div' ':'
    case 25720:                     // 'document' ':'
    case 25721:                     // 'document-node' ':'
    case 25722:                     // 'element' ':'
    case 25723:                     // 'else' ':'
    case 25724:                     // 'empty' ':'
    case 25725:                     // 'empty-sequence' ':'
    case 25726:                     // 'encoding' ':'
    case 25727:                     // 'end' ':'
    case 25729:                     // 'eq' ':'
    case 25730:                     // 'every' ':'
    case 25732:                     // 'except' ':'
    case 25733:                     // 'exit' ':'
    case 25734:                     // 'external' ':'
    case 25736:                     // 'first' ':'
    case 25737:                     // 'following' ':'
    case 25738:                     // 'following-sibling' ':'
    case 25739:                     // 'for' ':'
    case 25742:                     // 'from' ':'
    case 25743:                     // 'ft-option' ':'
    case 25747:                     // 'function' ':'
    case 25748:                     // 'ge' ':'
    case 25750:                     // 'group' ':'
    case 25752:                     // 'gt' ':'
    case 25753:                     // 'idiv' ':'
    case 25754:                     // 'if' ':'
    case 25755:                     // 'import' ':'
    case 25756:                     // 'in' ':'
    case 25757:                     // 'index' ':'
    case 25761:                     // 'insert' ':'
    case 25762:                     // 'instance' ':'
    case 25763:                     // 'integrity' ':'
    case 25764:                     // 'intersect' ':'
    case 25765:                     // 'into' ':'
    case 25766:                     // 'is' ':'
    case 25767:                     // 'item' ':'
    case 25768:                     // 'json' ':'
    case 25770:                     // 'jsoniq' ':'
    case 25773:                     // 'last' ':'
    case 25774:                     // 'lax' ':'
    case 25775:                     // 'le' ':'
    case 25777:                     // 'let' ':'
    case 25779:                     // 'loop' ':'
    case 25781:                     // 'lt' ':'
    case 25783:                     // 'mod' ':'
    case 25784:                     // 'modify' ':'
    case 25785:                     // 'module' ':'
    case 25787:                     // 'namespace' ':'
    case 25788:                     // 'namespace-node' ':'
    case 25789:                     // 'ne' ':'
    case 25794:                     // 'node' ':'
    case 25795:                     // 'nodes' ':'
    case 25798:                     // 'object' ':'
    case 25802:                     // 'only' ':'
    case 25803:                     // 'option' ':'
    case 25804:                     // 'or' ':'
    case 25805:                     // 'order' ':'
    case 25806:                     // 'ordered' ':'
    case 25807:                     // 'ordering' ':'
    case 25810:                     // 'parent' ':'
    case 25816:                     // 'preceding' ':'
    case 25817:                     // 'preceding-sibling' ':'
    case 25820:                     // 'processing-instruction' ':'
    case 25822:                     // 'rename' ':'
    case 25823:                     // 'replace' ':'
    case 25824:                     // 'return' ':'
    case 25825:                     // 'returning' ':'
    case 25826:                     // 'revalidation' ':'
    case 25828:                     // 'satisfies' ':'
    case 25829:                     // 'schema' ':'
    case 25830:                     // 'schema-attribute' ':'
    case 25831:                     // 'schema-element' ':'
    case 25832:                     // 'score' ':'
    case 25833:                     // 'select' ':'
    case 25834:                     // 'self' ':'
    case 25839:                     // 'sliding' ':'
    case 25840:                     // 'some' ':'
    case 25841:                     // 'stable' ':'
    case 25842:                     // 'start' ':'
    case 25845:                     // 'strict' ':'
    case 25848:                     // 'switch' ':'
    case 25849:                     // 'text' ':'
    case 25853:                     // 'to' ':'
    case 25854:                     // 'treat' ':'
    case 25856:                     // 'try' ':'
    case 25857:                     // 'tumbling' ':'
    case 25858:                     // 'type' ':'
    case 25859:                     // 'typeswitch' ':'
    case 25860:                     // 'union' ':'
    case 25862:                     // 'unordered' ':'
    case 25863:                     // 'updating' ':'
    case 25866:                     // 'validate' ':'
    case 25867:                     // 'value' ':'
    case 25868:                     // 'variable' ':'
    case 25869:                     // 'version' ':'
    case 25872:                     // 'where' ':'
    case 25873:                     // 'while' ':'
    case 25876:                     // 'with' ':'
      parse_NCName();
      break;
    default:
      parse_ExprSingle();
    }
    lookahead1W(26);                // S^WS | '(:' | ':'
    shift(50);                      // ':'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(280);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 177:                       // 'let'
      lookahead2W(178);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
      break;
    case 187:                       // 'namespace'
      lookahead2W(253);             // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(249);             // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 223:                       // 'replace'
      lookahead2W(188);             // S^WS | '#' | '(' | '(:' | ':' | 'json' | 'node' | 'value'
      break;
    case 266:                       // 'validate'
      lookahead2W(192);             // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(258);             // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(147);             // S^WS | '#' | '(:' | ':' | '{'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'jsoniq' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(187);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(166);             // S^WS | '#' | '$' | '(' | '(:' | ':'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(210);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 256:                       // 'try'
    case 262:                       // 'unordered'
      lookahead2W(168);             // S^WS | '#' | '(' | '(:' | ':' | '{'
      break;
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 167:                       // 'item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
      lookahead2W(94);              // S^WS | '#' | '(:' | ':'
      break;
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 154:                       // 'if'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 248:                       // 'switch'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 259:                       // 'typeswitch'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(142);             // S^WS | '#' | '(' | '(:' | ':'
      break;
    default:
      lk = l1;
    }
    if (lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855)                // 'true' ':'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          memoize(20, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(20, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -2:
    case 19:                        // NCName^Token
    case 25671:                     // 'after' ':'
    case 25673:                     // 'allowing' ':'
    case 25674:                     // 'ancestor' ':'
    case 25675:                     // 'ancestor-or-self' ':'
    case 25676:                     // 'and' ':'
    case 25678:                     // 'append' ':'
    case 25680:                     // 'as' ':'
    case 25681:                     // 'ascending' ':'
    case 25682:                     // 'at' ':'
    case 25683:                     // 'attribute' ':'
    case 25684:                     // 'base-uri' ':'
    case 25685:                     // 'before' ':'
    case 25686:                     // 'boundary-space' ':'
    case 25687:                     // 'break' ':'
    case 25689:                     // 'case' ':'
    case 25690:                     // 'cast' ':'
    case 25691:                     // 'castable' ':'
    case 25692:                     // 'catch' ':'
    case 25694:                     // 'child' ':'
    case 25695:                     // 'collation' ':'
    case 25697:                     // 'comment' ':'
    case 25698:                     // 'constraint' ':'
    case 25699:                     // 'construction' ':'
    case 25702:                     // 'context' ':'
    case 25703:                     // 'continue' ':'
    case 25704:                     // 'copy' ':'
    case 25705:                     // 'copy-namespaces' ':'
    case 25706:                     // 'count' ':'
    case 25707:                     // 'decimal-format' ':'
    case 25709:                     // 'declare' ':'
    case 25710:                     // 'default' ':'
    case 25711:                     // 'delete' ':'
    case 25712:                     // 'descendant' ':'
    case 25713:                     // 'descendant-or-self' ':'
    case 25714:                     // 'descending' ':'
    case 25719:                     // 'div' ':'
    case 25720:                     // 'document' ':'
    case 25721:                     // 'document-node' ':'
    case 25722:                     // 'element' ':'
    case 25723:                     // 'else' ':'
    case 25724:                     // 'empty' ':'
    case 25725:                     // 'empty-sequence' ':'
    case 25726:                     // 'encoding' ':'
    case 25727:                     // 'end' ':'
    case 25729:                     // 'eq' ':'
    case 25730:                     // 'every' ':'
    case 25732:                     // 'except' ':'
    case 25733:                     // 'exit' ':'
    case 25734:                     // 'external' ':'
    case 25736:                     // 'first' ':'
    case 25737:                     // 'following' ':'
    case 25738:                     // 'following-sibling' ':'
    case 25739:                     // 'for' ':'
    case 25742:                     // 'from' ':'
    case 25743:                     // 'ft-option' ':'
    case 25747:                     // 'function' ':'
    case 25748:                     // 'ge' ':'
    case 25750:                     // 'group' ':'
    case 25752:                     // 'gt' ':'
    case 25753:                     // 'idiv' ':'
    case 25754:                     // 'if' ':'
    case 25755:                     // 'import' ':'
    case 25756:                     // 'in' ':'
    case 25757:                     // 'index' ':'
    case 25761:                     // 'insert' ':'
    case 25762:                     // 'instance' ':'
    case 25763:                     // 'integrity' ':'
    case 25764:                     // 'intersect' ':'
    case 25765:                     // 'into' ':'
    case 25766:                     // 'is' ':'
    case 25767:                     // 'item' ':'
    case 25768:                     // 'json' ':'
    case 25770:                     // 'jsoniq' ':'
    case 25773:                     // 'last' ':'
    case 25774:                     // 'lax' ':'
    case 25775:                     // 'le' ':'
    case 25777:                     // 'let' ':'
    case 25779:                     // 'loop' ':'
    case 25781:                     // 'lt' ':'
    case 25783:                     // 'mod' ':'
    case 25784:                     // 'modify' ':'
    case 25785:                     // 'module' ':'
    case 25787:                     // 'namespace' ':'
    case 25788:                     // 'namespace-node' ':'
    case 25789:                     // 'ne' ':'
    case 25794:                     // 'node' ':'
    case 25795:                     // 'nodes' ':'
    case 25798:                     // 'object' ':'
    case 25802:                     // 'only' ':'
    case 25803:                     // 'option' ':'
    case 25804:                     // 'or' ':'
    case 25805:                     // 'order' ':'
    case 25806:                     // 'ordered' ':'
    case 25807:                     // 'ordering' ':'
    case 25810:                     // 'parent' ':'
    case 25816:                     // 'preceding' ':'
    case 25817:                     // 'preceding-sibling' ':'
    case 25820:                     // 'processing-instruction' ':'
    case 25822:                     // 'rename' ':'
    case 25823:                     // 'replace' ':'
    case 25824:                     // 'return' ':'
    case 25825:                     // 'returning' ':'
    case 25826:                     // 'revalidation' ':'
    case 25828:                     // 'satisfies' ':'
    case 25829:                     // 'schema' ':'
    case 25830:                     // 'schema-attribute' ':'
    case 25831:                     // 'schema-element' ':'
    case 25832:                     // 'score' ':'
    case 25833:                     // 'select' ':'
    case 25834:                     // 'self' ':'
    case 25839:                     // 'sliding' ':'
    case 25840:                     // 'some' ':'
    case 25841:                     // 'stable' ':'
    case 25842:                     // 'start' ':'
    case 25845:                     // 'strict' ':'
    case 25848:                     // 'switch' ':'
    case 25849:                     // 'text' ':'
    case 25853:                     // 'to' ':'
    case 25854:                     // 'treat' ':'
    case 25856:                     // 'try' ':'
    case 25857:                     // 'tumbling' ':'
    case 25858:                     // 'type' ':'
    case 25859:                     // 'typeswitch' ':'
    case 25860:                     // 'union' ':'
    case 25862:                     // 'unordered' ':'
    case 25863:                     // 'updating' ':'
    case 25866:                     // 'validate' ':'
    case 25867:                     // 'value' ':'
    case 25868:                     // 'variable' ':'
    case 25869:                     // 'version' ':'
    case 25872:                     // 'where' ':'
    case 25873:                     // 'while' ':'
    case 25876:                     // 'with' ':'
      try_NCName();
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
    lookahead1W(26);                // S^WS | '(:' | ':'
    shiftT(50);                     // ':'
    lookahead1W(268);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(69);                      // '['
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(69);                     // '['
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 70)                   // ']'
    {
      try_Expr();
    }
    shiftT(70);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(281);                     // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(281);                    // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    shiftT(287);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(147);                     // 'function'
    lookahead1W(247);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(157);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(119);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(287);                   // '}'
      break;
    default:
      shift(134);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(JSONiqParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = JSONiqParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 8191; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = JSONiqParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = JSONiqParser.MAP1[(c0 & 15) + JSONiqParser.MAP1[(c1 & 31) + JSONiqParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (JSONiqParser.MAP2[m] > c0) hi = m - 1;
          else if (JSONiqParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = JSONiqParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 13) + code - 1;
      code = JSONiqParser.TRANSITION[(i0 & 31) + JSONiqParser.TRANSITION[i0 >> 5]];

      if (code > 8191)
      {
        result = code;
        code &= 8191;
        end = current;
      }
    }

    result >>= 13;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

JSONiqParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 8191;
  for (var i = 0; i < 289; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 4323 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = JSONiqParser.EXPECTED[(i0 & 3) + JSONiqParser.EXPECTED[(i1 & 3) + JSONiqParser.EXPECTED[(i2 & 7) + JSONiqParser.EXPECTED[i2 >> 3]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(JSONiqParser.TOKEN[j]);
      }
    }
  }
  return set;
};

JSONiqParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 40, 40
];

JSONiqParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 40, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 40, 40, 40, 40, 40, 40, 40, 70, 40, 40,
  /* 425 */ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

JSONiqParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 40, 30, 40, 30, 30,
  /* 17 */ 40
];

JSONiqParser.INITIAL =
[
  /*   0 */ 1, 24578, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291
];

JSONiqParser.TRANSITION =
[
  /*     0 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*    15 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*    30 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*    45 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*    60 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*    75 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*    90 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   105 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   120 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   135 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   150 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   165 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   180 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   195 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   210 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   225 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   240 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   255 */ 67575, 18432, 18548, 18511, 18548, 18548, 18484, 18543, 18452, 18548, 18580, 67575, 26893, 67575, 74683,
  /*   270 */ 67575, 67575, 65152, 19642, 65145, 19628, 18637, 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979,
  /*   285 */ 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563,
  /*   300 */ 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679,
  /*   315 */ 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400,
  /*   330 */ 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876,
  /*   345 */ 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438,
  /*   360 */ 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919,
  /*   375 */ 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488,
  /*   390 */ 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   405 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   420 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   435 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   450 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   465 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   480 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   495 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   510 */ 67575, 67575, 22585, 67575, 23273, 67575, 67575, 72685, 22620, 22647, 61856, 22696, 67575, 26893, 67575,
  /*   525 */ 59748, 67575, 67575, 65152, 19642, 25514, 21166, 18637, 18703, 67575, 72139, 25688, 18774, 18861, 19121,
  /*   540 */ 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817,
  /*   555 */ 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902,
  /*   570 */ 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181,
  /*   585 */ 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799,
  /*   600 */ 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391,
  /*   615 */ 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945,
  /*   630 */ 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456,
  /*   645 */ 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   660 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   675 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   690 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   705 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   720 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   735 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   750 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   765 */ 67575, 67575, 67575, 22764, 67575, 32023, 67575, 28667, 22833, 22914, 59763, 22951, 22862, 67575, 26893,
  /*   780 */ 67575, 23031, 67575, 67575, 65152, 19642, 65145, 46702, 23070, 18703, 67575, 72139, 25688, 18774, 18861,
  /*   795 */ 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476,
  /*   810 */ 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801,
  /*   825 */ 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531,
  /*   840 */ 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541,
  /*   855 */ 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933,
  /*   870 */ 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887,
  /*   885 */ 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378,
  /*   900 */ 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   915 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   930 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   945 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   960 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   975 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*   990 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1005 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1020 */ 67575, 67575, 67575, 67575, 23129, 67575, 24205, 67575, 58630, 41529, 41558, 30822, 30845, 23198, 67575,
  /*  1035 */ 27244, 67575, 23266, 67575, 67575, 65152, 19642, 65145, 44557, 23305, 18703, 67575, 72139, 25688, 18774,
  /*  1050 */ 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366,
  /*  1065 */ 19476, 74817, 19563, 21306, 21108, 27730, 23097, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733,
  /*  1080 */ 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308,
  /*  1095 */ 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721,
  /*  1110 */ 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275,
  /*  1125 */ 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827,
  /*  1140 */ 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299,
  /*  1155 */ 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1170 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1185 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1200 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1215 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1230 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1245 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1260 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1275 */ 67575, 67575, 67575, 67575, 67575, 23364, 67575, 23273, 23433, 70343, 23467, 22914, 73922, 23527, 23559,
  /*  1290 */ 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 74350, 19628, 18637, 18703, 67575, 72139, 25688,
  /*  1305 */ 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402,
  /*  1320 */ 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293,
  /*  1335 */ 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269,
  /*  1350 */ 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686,
  /*  1365 */ 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218,
  /*  1380 */ 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795,
  /*  1395 */ 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267,
  /*  1410 */ 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1425 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1440 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1455 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1470 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1485 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1500 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1515 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1530 */ 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 23627, 67575, 72685, 23693, 19334, 23663,
  /*  1545 */ 23742, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637, 18703, 67575, 72139,
  /*  1560 */ 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435,
  /*  1575 */ 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679,
  /*  1590 */ 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152,
  /*  1605 */ 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654,
  /*  1620 */ 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701,
  /*  1635 */ 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711,
  /*  1650 */ 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161,
  /*  1665 */ 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1680 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1695 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1710 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1725 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1740 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1755 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1770 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1785 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 67575, 19911, 23810, 67575,
  /*  1800 */ 67575, 23847, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637, 18703, 67575,
  /*  1815 */ 72139, 25688, 18774, 18861, 19121, 23915, 19011, 23986, 18999, 19075, 64956, 19119, 19153, 19213, 19332,
  /*  1830 */ 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612,
  /*  1845 */ 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116,
  /*  1860 */ 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937,
  /*  1875 */ 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141,
  /*  1890 */ 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763,
  /*  1905 */ 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767,
  /*  1920 */ 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1935 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1950 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1965 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1980 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  1995 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2010 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2025 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2040 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 24018, 67575, 40588, 67575, 34917, 24069, 22914,
  /*  2055 */ 73989, 24166, 24098, 67575, 26893, 67575, 24198, 67575, 67575, 65152, 19642, 65145, 19580, 24237, 18703,
  /*  2070 */ 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213,
  /*  2085 */ 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821,
  /*  2100 */ 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359,
  /*  2115 */ 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615,
  /*  2130 */ 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267,
  /*  2145 */ 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651,
  /*  2160 */ 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100,
  /*  2175 */ 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2190 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2205 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2220 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2235 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2250 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2265 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2280 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2295 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 24296, 24388, 24394, 24382, 24447, 24352,
  /*  2310 */ 24426, 24320, 24479, 24509, 67575, 32834, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637,
  /*  2325 */ 24561, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153,
  /*  2340 */ 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189,
  /*  2355 */ 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002,
  /*  2370 */ 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647,
  /*  2385 */ 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062,
  /*  2400 */ 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741,
  /*  2415 */ 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750,
  /*  2430 */ 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575,
  /*  2445 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2460 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2475 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2490 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2505 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2520 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2535 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2550 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 24639, 67575, 23273, 24794, 28679,
  /*  2565 */ 72685, 24711, 24732, 24764, 24834, 67575, 31088, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628,
  /*  2580 */ 18637, 24904, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119,
  /*  2595 */ 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731,
  /*  2610 */ 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120,
  /*  2625 */ 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930,
  /*  2640 */ 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974,
  /*  2655 */ 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558,
  /*  2670 */ 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149,
  /*  2685 */ 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575,
  /*  2700 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2715 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2730 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2745 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2760 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2775 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2790 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2805 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 24981, 67575, 23273, 67575,
  /*  2820 */ 67575, 36419, 25110, 25243, 25141, 25171, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145,
  /*  2835 */ 19628, 18637, 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 25302, 18999, 19075, 64956,
  /*  2850 */ 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109,
  /*  2865 */ 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363,
  /*  2880 */ 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608,
  /*  2895 */ 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009,
  /*  2910 */ 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526,
  /*  2925 */ 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089,
  /*  2940 */ 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575,
  /*  2955 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2970 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  2985 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3000 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3015 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3030 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3045 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3060 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273,
  /*  3075 */ 67575, 67575, 21359, 25334, 48559, 48544, 25365, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642,
  /*  3090 */ 65145, 19628, 18637, 18703, 67575, 73974, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075,
  /*  3105 */ 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970,
  /*  3120 */ 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943,
  /*  3135 */ 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514,
  /*  3150 */ 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977,
  /*  3165 */ 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723,
  /*  3180 */ 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041,
  /*  3195 */ 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575,
  /*  3210 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3225 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3240 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3255 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3270 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3285 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3300 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3315 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 25433, 67575,
  /*  3330 */ 23273, 42359, 34929, 25446, 25478, 25497, 63941, 25546, 67575, 26893, 67575, 74683, 67575, 67575, 65152,
  /*  3345 */ 19642, 65145, 19628, 18637, 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999,
  /*  3360 */ 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730,
  /*  3375 */ 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507,
  /*  3390 */ 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689,
  /*  3405 */ 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945,
  /*  3420 */ 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947,
  /*  3435 */ 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332,
  /*  3450 */ 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575,
  /*  3465 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3480 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3495 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3510 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3525 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3540 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3555 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3570 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 25598,
  /*  3585 */ 67575, 23273, 67575, 67575, 72685, 25637, 41060, 41045, 25668, 67575, 26893, 67575, 74683, 67575, 67575,
  /*  3600 */ 25885, 70519, 34248, 44763, 42368, 70588, 37509, 74195, 67575, 67575, 25891, 25720, 46771, 56624, 35019,
  /*  3615 */ 59850, 45872, 36543, 25757, 34292, 67574, 67575, 67575, 74640, 67160, 73725, 59608, 59608, 65754, 53694,
  /*  3630 */ 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 49473, 67575, 67575, 40019, 67575, 38716, 59608,
  /*  3645 */ 59608, 43555, 33521, 53694, 43173, 54490, 45872, 39463, 37046, 45906, 50402, 67575, 67575, 23778, 19768,
  /*  3660 */ 55587, 59608, 47348, 69443, 53694, 28138, 25796, 54331, 37635, 45906, 50401, 67575, 53445, 73726, 59608,
  /*  3675 */ 19444, 53694, 50224, 45872, 35112, 45906, 36706, 25831, 30303, 25879, 25933, 58953, 42648, 25971, 71188,
  /*  3690 */ 68870, 67575, 26008, 26054, 26101, 34202, 26168, 26246, 57440, 26289, 26334, 26366, 26427, 43288, 25211,
  /*  3705 */ 26459, 26520, 26592, 26644, 26197, 42654, 46312, 51214, 50525, 61698, 69197, 26721, 26696, 26488, 26753,
  /*  3720 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3735 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3750 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3765 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3780 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3795 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3810 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3825 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3840 */ 22585, 67575, 23273, 67575, 67575, 40461, 26788, 23386, 26841, 26873, 67575, 26893, 67575, 62572, 67575,
  /*  3855 */ 67575, 65152, 19642, 31776, 19628, 18637, 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011,
  /*  3870 */ 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183,
  /*  3885 */ 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009,
  /*  3900 */ 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452,
  /*  3915 */ 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240,
  /*  3930 */ 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406,
  /*  3945 */ 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977,
  /*  3960 */ 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520,
  /*  3975 */ 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  3990 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4005 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4020 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4035 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4050 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4065 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4080 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4095 */ 67575, 26942, 67575, 62579, 67575, 67575, 72685, 26994, 27047, 50957, 27096, 67575, 26893, 67575, 61367,
  /*  4110 */ 65653, 67575, 65152, 19642, 65145, 46702, 23070, 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979,
  /*  4125 */ 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563,
  /*  4140 */ 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679,
  /*  4155 */ 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400,
  /*  4170 */ 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876,
  /*  4185 */ 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438,
  /*  4200 */ 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919,
  /*  4215 */ 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488,
  /*  4230 */ 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4245 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4260 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4275 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4290 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4305 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4320 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4335 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4350 */ 67575, 67575, 27148, 67575, 23273, 67575, 67575, 27160, 22914, 67575, 27192, 27224, 67575, 26893, 67575,
  /*  4365 */ 27276, 67575, 67575, 25885, 70519, 34388, 44763, 67575, 70588, 67575, 60495, 67575, 67575, 25891, 59608,
  /*  4380 */ 46771, 53694, 35019, 45872, 45872, 37624, 45906, 34292, 27315, 67575, 67575, 60142, 67575, 73725, 59608,
  /*  4395 */ 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 45785, 27355, 67575, 67575, 27549,
  /*  4410 */ 67575, 25896, 59608, 59608, 27395, 53694, 53694, 42713, 45872, 45872, 48633, 45906, 45906, 59358, 67575,
  /*  4425 */ 67575, 67575, 19768, 59608, 59608, 27434, 53694, 53694, 27479, 45872, 54331, 45906, 45906, 64334, 67575,
  /*  4440 */ 67575, 73726, 59608, 73649, 53694, 39942, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866,
  /*  4455 */ 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655,
  /*  4470 */ 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721,
  /*  4485 */ 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4500 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4515 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4530 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4545 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4560 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4575 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4590 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4605 */ 67575, 67575, 67575, 27517, 67575, 68319, 23942, 32712, 42490, 42518, 42544, 27581, 27708, 67575, 34041,
  /*  4620 */ 67575, 74683, 67575, 67575, 65152, 29867, 29512, 29437, 18637, 27763, 67575, 72139, 25688, 18774, 18861,
  /*  4635 */ 19121, 27833, 28429, 27892, 30174, 27924, 28552, 29955, 29161, 19213, 19332, 23435, 74402, 19366, 19476,
  /*  4650 */ 74817, 19563, 20339, 29234, 29218, 27860, 29356, 29497, 30069, 30113, 30095, 28865, 35293, 19733, 19801,
  /*  4665 */ 19902, 21679, 30009, 20276, 19507, 27956, 30236, 28015, 20368, 28983, 29297, 28076, 29104, 28176, 28239,
  /*  4680 */ 19181, 20400, 20452, 70932, 20689, 20514, 28402, 28461, 28493, 28525, 29328, 28835, 28207, 28584, 28645,
  /*  4695 */ 20799, 20876, 33240, 33272, 28711, 28773, 28805, 28954, 29015, 29074, 29136, 18891, 21218, 21275, 18933,
  /*  4710 */ 29193, 28044, 29266, 29928, 28107, 67723, 21526, 21558, 29388, 29469, 29544, 29576, 29608, 21827, 29640,
  /*  4725 */ 29698, 29672, 29730, 29762, 27983, 29794, 29853, 29418, 28613, 29899, 29987, 30041, 29042, 30145, 30206,
  /*  4740 */ 30268, 28741, 74588, 30300, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4755 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4770 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4785 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4800 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4815 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4830 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4845 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  4860 */ 67575, 67575, 67575, 67575, 30335, 67575, 23273, 67230, 70813, 49312, 30380, 30399, 30348, 30448, 67575,
  /*  4875 */ 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637, 18703, 67575, 72139, 25688, 18774,
  /*  4890 */ 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 40683, 19366,
  /*  4905 */ 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 30535, 30563, 19733,
  /*  4920 */ 19801, 30595, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269, 20308,
  /*  4935 */ 30636, 19181, 20400, 20452, 70932, 20689, 20514, 30733, 30930, 20647, 30905, 30937, 20654, 20686, 20721,
  /*  4950 */ 20541, 20799, 20876, 33240, 33272, 30792, 20977, 30877, 20974, 21062, 33267, 21141, 19701, 21218, 21275,
  /*  4965 */ 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795, 21827,
  /*  4980 */ 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267, 22299,
  /*  4995 */ 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5010 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5025 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5040 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5055 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5070 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5085 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5100 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5115 */ 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 67575, 67575, 30969, 30987, 31036, 31068,
  /*  5130 */ 67575, 26893, 67575, 74683, 52529, 67575, 65152, 19642, 65145, 22215, 18637, 18703, 67575, 72139, 25688,
  /*  5145 */ 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435, 74402,
  /*  5160 */ 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679, 35293,
  /*  5175 */ 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152, 20269,
  /*  5190 */ 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654, 20686,
  /*  5205 */ 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701, 21218,
  /*  5220 */ 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711, 21795,
  /*  5235 */ 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161, 22267,
  /*  5250 */ 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5265 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5280 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5295 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5310 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5325 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5340 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5355 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5370 */ 67575, 67575, 67575, 67575, 67575, 67575, 31137, 67575, 23273, 67575, 67575, 72685, 31243, 31261, 71369,
  /*  5385 */ 31310, 67575, 26893, 67575, 74683, 65253, 67575, 65152, 19642, 65145, 21584, 18637, 18703, 67575, 72139,
  /*  5400 */ 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332, 23435,
  /*  5415 */ 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612, 19679,
  /*  5430 */ 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116, 20152,
  /*  5445 */ 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937, 20654,
  /*  5460 */ 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141, 19701,
  /*  5475 */ 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763, 21711,
  /*  5490 */ 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767, 22161,
  /*  5505 */ 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5520 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5535 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5550 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5565 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5580 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5595 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5610 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5625 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31388, 67575, 27283, 67575, 67575, 72685, 31455, 31473,
  /*  5640 */ 72616, 31522, 67575, 26893, 67575, 74683, 23954, 67575, 65152, 19642, 65145, 70956, 18637, 18703, 67575,
  /*  5655 */ 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332,
  /*  5670 */ 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612,
  /*  5685 */ 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116,
  /*  5700 */ 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937,
  /*  5715 */ 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141,
  /*  5730 */ 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763,
  /*  5745 */ 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 31575, 21089, 65149, 20750, 22100, 20767,
  /*  5760 */ 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5775 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5790 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5805 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5820 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5835 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5850 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5865 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  5880 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31652, 67575, 23273, 20836, 67575, 58366, 22914,
  /*  5895 */ 31698, 20818, 31741, 67575, 26893, 67575, 62494, 67575, 67575, 65152, 19642, 31490, 32911, 18637, 18703,
  /*  5910 */ 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213,
  /*  5925 */ 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821,
  /*  5940 */ 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359,
  /*  5955 */ 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615,
  /*  5970 */ 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267,
  /*  5985 */ 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651,
  /*  6000 */ 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100,
  /*  6015 */ 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6030 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6045 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6060 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6075 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6090 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6105 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6120 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6135 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 67575, 72685,
  /*  6150 */ 22914, 67575, 18731, 31808, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637,
  /*  6165 */ 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153,
  /*  6180 */ 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189,
  /*  6195 */ 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002,
  /*  6210 */ 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647,
  /*  6225 */ 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062,
  /*  6240 */ 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741,
  /*  6255 */ 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750,
  /*  6270 */ 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575,
  /*  6285 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6300 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6315 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6330 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6345 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6360 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6375 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6390 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575,
  /*  6405 */ 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461,
  /*  6420 */ 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906,
  /*  6435 */ 34292, 32016, 67575, 67575, 27546, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872,
  /*  6450 */ 42724, 45906, 45906, 51253, 32055, 67575, 67575, 27549, 67575, 25896, 59608, 59608, 35841, 53694, 53694,
  /*  6465 */ 36476, 45872, 45872, 48633, 45906, 45906, 59358, 67575, 67575, 32095, 19768, 59608, 59608, 35460, 53694,
  /*  6480 */ 53694, 32133, 45872, 54331, 45906, 45906, 64334, 67575, 67575, 73726, 59608, 73649, 53694, 39942, 45872,
  /*  6495 */ 45873, 45906, 45906, 57445, 49942, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608,
  /*  6510 */ 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625,
  /*  6525 */ 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575,
  /*  6540 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6555 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6570 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6585 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6600 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6615 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6630 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6645 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605, 67575,
  /*  6660 */ 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248,
  /*  6675 */ 45461, 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624,
  /*  6690 */ 45906, 34292, 32016, 67575, 67575, 27546, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872,
  /*  6705 */ 45872, 42724, 45906, 45906, 51253, 32055, 67575, 67575, 27549, 67575, 25896, 59608, 59608, 35841, 53694,
  /*  6720 */ 53694, 36476, 45872, 45872, 48633, 45906, 45906, 59358, 67575, 67575, 67575, 19768, 59608, 59608, 35460,
  /*  6735 */ 53694, 53694, 32133, 45872, 54331, 45906, 45906, 64334, 67575, 67575, 73726, 59608, 73649, 53694, 39942,
  /*  6750 */ 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803,
  /*  6765 */ 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096,
  /*  6780 */ 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575,
  /*  6795 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6810 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6825 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6840 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6855 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6870 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6885 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  6900 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605,
  /*  6915 */ 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519,
  /*  6930 */ 34248, 45461, 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872,
  /*  6945 */ 37624, 45906, 34292, 32016, 67575, 67575, 34895, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453,
  /*  6960 */ 45872, 45872, 42724, 45906, 45906, 51253, 32055, 67575, 67575, 27549, 67575, 25896, 59608, 59608, 35841,
  /*  6975 */ 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 59358, 67575, 67575, 67575, 19768, 59608, 59608,
  /*  6990 */ 35460, 53694, 53694, 32133, 45872, 54331, 45906, 45906, 64334, 67575, 67575, 73726, 59608, 73649, 53694,
  /*  7005 */ 39942, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575,
  /*  7020 */ 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212,
  /*  7035 */ 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575,
  /*  7050 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7065 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7080 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7095 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7110 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7125 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7140 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7155 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575,
  /*  7170 */ 25605, 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 67575, 67575, 67575, 25885,
  /*  7185 */ 70519, 34248, 45461, 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872,
  /*  7200 */ 45872, 37624, 45906, 34292, 32016, 67575, 67575, 27546, 67575, 73725, 59608, 59608, 65754, 53694, 53694,
  /*  7215 */ 69453, 45872, 45872, 42724, 45906, 45906, 51253, 32055, 67575, 67575, 32171, 67575, 25896, 59608, 59608,
  /*  7230 */ 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 59358, 67575, 67575, 67575, 19768, 59608,
  /*  7245 */ 59608, 35460, 53694, 53694, 32133, 45872, 54331, 45906, 45906, 64334, 67575, 67575, 73726, 59608, 73649,
  /*  7260 */ 53694, 39942, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095,
  /*  7275 */ 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528,
  /*  7290 */ 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575,
  /*  7305 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7320 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7335 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7350 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7365 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7380 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7395 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7410 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895,
  /*  7425 */ 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 40581, 67575, 67575,
  /*  7440 */ 25885, 70519, 34248, 45461, 67575, 70588, 67575, 40574, 67575, 67575, 25891, 59608, 67969, 53694, 45604,
  /*  7455 */ 45872, 45872, 37624, 45906, 34292, 32016, 67575, 67575, 27546, 67575, 73725, 59608, 59608, 65754, 53694,
  /*  7470 */ 53694, 69453, 45872, 45872, 42724, 45906, 45906, 51253, 32055, 67575, 67575, 27549, 67575, 25896, 59608,
  /*  7485 */ 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 59358, 67575, 67575, 67575, 19768,
  /*  7500 */ 59608, 59608, 35460, 53694, 53694, 32133, 45872, 54331, 45906, 45906, 64334, 67575, 67575, 73726, 59608,
  /*  7515 */ 73649, 53694, 39942, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654,
  /*  7530 */ 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208,
  /*  7545 */ 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753,
  /*  7560 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7575 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7590 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7605 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7620 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7635 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7650 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7665 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7680 */ 31895, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 67575, 67575,
  /*  7695 */ 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694,
  /*  7710 */ 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 67575, 73725, 59608, 59608, 65754,
  /*  7725 */ 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575, 67575, 67575, 67575, 25896,
  /*  7740 */ 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 50402, 67575, 67575, 67575,
  /*  7755 */ 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906, 50401, 67575, 67575, 73726,
  /*  7770 */ 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872,
  /*  7785 */ 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969,
  /*  7800 */ 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488,
  /*  7815 */ 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7830 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7845 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7860 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7875 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7890 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7905 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7920 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  7935 */ 67575, 31895, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 67575,
  /*  7950 */ 67575, 67575, 25885, 70519, 34248, 71266, 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969,
  /*  7965 */ 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 67575, 73725, 59608, 59608,
  /*  7980 */ 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575, 67575, 67575, 67575,
  /*  7995 */ 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 50402, 67575, 67575,
  /*  8010 */ 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906, 50401, 67575, 67575,
  /*  8025 */ 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648,
  /*  8040 */ 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632,
  /*  8055 */ 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696,
  /*  8070 */ 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8085 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8100 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8115 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8130 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8145 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8160 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8175 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8190 */ 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 61566, 67575, 26893, 67575,
  /*  8205 */ 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608,
  /*  8220 */ 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 67575, 73725, 59608,
  /*  8235 */ 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575, 67575, 67575,
  /*  8250 */ 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 50402, 67575,
  /*  8265 */ 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906, 50401, 67575,
  /*  8280 */ 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866,
  /*  8295 */ 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655,
  /*  8310 */ 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721,
  /*  8325 */ 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8340 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8355 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8370 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8385 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8400 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8415 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8430 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8445 */ 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 32216, 26022, 31932, 46156, 67575, 26893,
  /*  8460 */ 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575, 32260, 67575, 25891,
  /*  8475 */ 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 67575, 73725,
  /*  8490 */ 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575, 67575,
  /*  8505 */ 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 50402,
  /*  8520 */ 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906, 50401,
  /*  8535 */ 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608,
  /*  8550 */ 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214,
  /*  8565 */ 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197,
  /*  8580 */ 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8595 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8610 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8625 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8640 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8655 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8670 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8685 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8700 */ 67575, 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 22914, 22801, 32296, 32327, 67575,
  /*  8715 */ 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575, 67575, 67575,
  /*  8730 */ 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 67575,
  /*  8745 */ 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575,
  /*  8760 */ 67575, 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906,
  /*  8775 */ 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906,
  /*  8790 */ 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769,
  /*  8805 */ 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321,
  /*  8820 */ 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698,
  /*  8835 */ 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8850 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8865 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8880 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8895 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8910 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8925 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8940 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  8955 */ 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 46156,
  /*  8970 */ 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575, 67575,
  /*  8985 */ 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575,
  /*  9000 */ 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575,
  /*  9015 */ 67575, 67575, 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906,
  /*  9030 */ 45906, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906,
  /*  9045 */ 45906, 50401, 67575, 38291, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575,
  /*  9060 */ 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440,
  /*  9075 */ 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165,
  /*  9090 */ 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9105 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9120 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9135 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9150 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9165 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9180 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9195 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9210 */ 67575, 67575, 67575, 67575, 67575, 67575, 32399, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932,
  /*  9225 */ 46156, 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575,
  /*  9240 */ 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575,
  /*  9255 */ 67575, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393,
  /*  9270 */ 67575, 67575, 67575, 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633,
  /*  9285 */ 45906, 45906, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331,
  /*  9300 */ 45906, 45906, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445,
  /*  9315 */ 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906,
  /*  9330 */ 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107,
  /*  9345 */ 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9360 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9375 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9390 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9405 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9420 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9435 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9450 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9465 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 32436, 67575, 23273, 67575, 67575, 72685, 32511, 32462,
  /*  9480 */ 32564, 32593, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637, 18703, 67575,
  /*  9495 */ 72831, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213, 19332,
  /*  9510 */ 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612,
  /*  9525 */ 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116,
  /*  9540 */ 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937,
  /*  9555 */ 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141,
  /*  9570 */ 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 32660, 21558, 21741, 21651, 21763,
  /*  9585 */ 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767,
  /*  9600 */ 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9615 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9630 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9645 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9660 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9675 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9690 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9705 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9720 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 67575, 72685, 22914,
  /*  9735 */ 67575, 67575, 32692, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 46702, 23070, 18703,
  /*  9750 */ 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213,
  /*  9765 */ 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821,
  /*  9780 */ 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359,
  /*  9795 */ 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615,
  /*  9810 */ 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267,
  /*  9825 */ 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651,
  /*  9840 */ 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100,
  /*  9855 */ 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9870 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9885 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9900 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9915 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9930 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9945 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9960 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /*  9975 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 32781, 23273, 67575, 67575, 72685,
  /*  9990 */ 32744, 32765, 18829, 32814, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628, 18637,
  /* 10005 */ 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153,
  /* 10020 */ 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189,
  /* 10035 */ 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002,
  /* 10050 */ 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647,
  /* 10065 */ 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062,
  /* 10080 */ 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741,
  /* 10095 */ 21651, 21763, 21711, 21795, 32883, 21887, 21945, 21919, 32963, 22009, 23332, 32995, 21089, 65149, 20750,
  /* 10110 */ 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575,
  /* 10125 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10140 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10155 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10170 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10185 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10200 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10215 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10230 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 67575,
  /* 10245 */ 72685, 22914, 67575, 67575, 31808, 67575, 26893, 67575, 74683, 67575, 67575, 65152, 19642, 65145, 19628,
  /* 10260 */ 18637, 18703, 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119,
  /* 10275 */ 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731,
  /* 10290 */ 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120,
  /* 10305 */ 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930,
  /* 10320 */ 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974,
  /* 10335 */ 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558,
  /* 10350 */ 21741, 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149,
  /* 10365 */ 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575,
  /* 10380 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10395 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10410 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10425 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10440 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10455 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10470 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10485 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 33064, 25605, 33099,
  /* 10500 */ 49036, 21030, 33149, 33180, 33304, 33210, 23401, 33392, 73042, 33336, 33424, 19271, 33483, 33553, 33585,
  /* 10515 */ 33664, 33727, 70588, 33761, 33802, 33835, 62509, 25891, 59608, 33895, 53694, 56640, 45872, 32139, 37624,
  /* 10530 */ 45906, 70498, 33964, 53200, 34021, 35273, 67575, 34073, 34139, 25901, 66368, 34187, 38569, 34599, 34234,
  /* 10545 */ 47809, 28328, 34280, 61935, 34324, 34420, 61263, 61304, 27549, 52683, 34470, 42033, 34541, 39176, 52768,
  /* 10560 */ 56565, 34631, 34706, 34374, 43710, 34787, 51084, 34866, 68187, 72582, 70773, 37399, 68640, 57332, 34961,
  /* 10575 */ 35016, 58803, 35051, 45872, 35144, 35197, 72224, 35244, 35325, 35379, 35434, 35505, 73649, 31963, 35537,
  /* 10590 */ 37902, 35680, 51751, 35718, 35756, 73278, 19769, 35812, 47995, 59294, 70435, 61987, 57421, 67575, 33803,
  /* 10605 */ 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 52815, 35880,
  /* 10620 */ 35946, 41997, 36001, 36068, 34107, 60080, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575,
  /* 10635 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10650 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10665 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10680 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10695 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10710 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10725 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10740 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 36148, 25605,
  /* 10755 */ 67575, 67575, 72685, 36186, 36213, 36245, 36277, 67575, 26893, 67575, 67575, 67575, 67575, 52853, 48935,
  /* 10770 */ 57841, 36329, 44476, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872,
  /* 10785 */ 37624, 45906, 34292, 32016, 67575, 19870, 27546, 36395, 73725, 59608, 59608, 36451, 53694, 53694, 36519,
  /* 10800 */ 45872, 45872, 36586, 45906, 45906, 36640, 32055, 67575, 67575, 27549, 67575, 25896, 59608, 59608, 35841,
  /* 10815 */ 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 59358, 67575, 36738, 70581, 36771, 36865, 59608,
  /* 10830 */ 36899, 53694, 66077, 36991, 45872, 57151, 37041, 45906, 44453, 67575, 67575, 73726, 59608, 73649, 53694,
  /* 10845 */ 39942, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575,
  /* 10860 */ 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212,
  /* 10875 */ 34096, 48625, 52352, 68028, 58534, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575,
  /* 10890 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10905 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10920 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10935 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10950 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10965 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10980 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 10995 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 45553,
  /* 11010 */ 25605, 32479, 32101, 73162, 37078, 37109, 37140, 37171, 67575, 37223, 61382, 60510, 67575, 45569, 22716,
  /* 11025 */ 37273, 71831, 67547, 47689, 70588, 37333, 61655, 37431, 37484, 41701, 59608, 38376, 37558, 45604, 37601,
  /* 11040 */ 45872, 37926, 37667, 34292, 37701, 72949, 48969, 33365, 65973, 73725, 60360, 37749, 65754, 55995, 37808,
  /* 11055 */ 69453, 48766, 37877, 42724, 37958, 52484, 51253, 32055, 73770, 51547, 27549, 67575, 25896, 36867, 56388,
  /* 11070 */ 35841, 53694, 37990, 36476, 45872, 28300, 48633, 45906, 38067, 59358, 38140, 20844, 74282, 19768, 59608,
  /* 11085 */ 53577, 35460, 53694, 65394, 32133, 45872, 38173, 45906, 55219, 64334, 67575, 38218, 32367, 70192, 73649,
  /* 11100 */ 40228, 39942, 28144, 45873, 72544, 45906, 38254, 57910, 25385, 38323, 72346, 38408, 38445, 44612, 38511,
  /* 11115 */ 67575, 25566, 59608, 38562, 48611, 63870, 45906, 38601, 40321, 26214, 42655, 48632, 35969, 26208, 54528,
  /* 11130 */ 35212, 34096, 48625, 47323, 38638, 38694, 34107, 35165, 61698, 69197, 26721, 38748, 38820, 26753, 67575,
  /* 11145 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11160 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11175 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11190 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11205 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11220 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11235 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11250 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895,
  /* 11265 */ 22783, 25605, 33117, 35347, 72685, 38883, 38914, 38996, 38944, 67575, 26893, 67575, 67575, 44478, 44477,
  /* 11280 */ 20212, 47890, 43265, 39028, 56264, 39087, 62903, 59988, 50648, 66823, 39147, 48312, 36116, 41904, 39208,
  /* 11295 */ 39240, 39292, 55149, 44630, 48452, 32016, 54992, 49256, 27546, 67575, 68414, 59608, 59608, 39344, 53694,
  /* 11310 */ 53694, 39423, 45872, 45872, 39495, 45906, 45906, 39549, 39620, 61732, 25060, 27549, 27363, 68992, 39666,
  /* 11325 */ 46587, 20062, 39701, 54291, 39739, 71073, 45872, 39797, 52474, 45906, 39868, 67575, 67575, 69318, 68250,
  /* 11340 */ 59608, 56496, 62961, 53694, 39937, 39974, 25976, 35686, 45906, 73120, 64334, 58156, 40018, 64228, 46757,
  /* 11355 */ 40051, 58991, 40110, 67663, 49850, 71603, 48435, 47052, 67575, 19769, 59608, 50866, 42648, 45872, 51654,
  /* 11370 */ 46095, 27801, 33803, 59608, 40221, 64742, 36959, 45906, 40260, 40321, 26214, 53645, 50381, 40297, 26208,
  /* 11385 */ 54528, 43494, 43785, 40366, 60217, 43582, 63248, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753,
  /* 11400 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11415 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11430 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11445 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11460 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11475 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11490 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11505 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11520 */ 31895, 44069, 25605, 44712, 73202, 40424, 40493, 40524, 40620, 40554, 41641, 40652, 40715, 45523, 40766,
  /* 11535 */ 40798, 40898, 40930, 40962, 40994, 51801, 48165, 22328, 41092, 41138, 51533, 26560, 67342, 52086, 41173,
  /* 11550 */ 52027, 64292, 42829, 41242, 41321, 41386, 41439, 41498, 41611, 41673, 54917, 41733, 41765, 62273, 41844,
  /* 11565 */ 41876, 57557, 41936, 42065, 49420, 42167, 42239, 42296, 42328, 42400, 31423, 31828, 42459, 54698, 42576,
  /* 11580 */ 70184, 42608, 42687, 42756, 69121, 42799, 67024, 71812, 41967, 42919, 71247, 42966, 54772, 44052, 61822,
  /* 11595 */ 58222, 56408, 43035, 55911, 43067, 43148, 43205, 43320, 51636, 43352, 51723, 43404, 74690, 61646, 25191,
  /* 11610 */ 60244, 34572, 68737, 64551, 49111, 45717, 56061, 43479, 40265, 19832, 20033, 43526, 43649, 43681, 43817,
  /* 11625 */ 43905, 43993, 44101, 44156, 44209, 44266, 44317, 39391, 44422, 38530, 26547, 60378, 49652, 51241, 44510,
  /* 11640 */ 45956, 44589, 44662, 64723, 44744, 44795, 71735, 44851, 44923, 45006, 61698, 45066, 45139, 26696, 26488,
  /* 11655 */ 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11670 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11685 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11700 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11715 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11730 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11745 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11760 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11775 */ 67575, 31895, 20576, 25605, 45197, 25847, 37241, 45266, 45297, 45379, 45327, 20913, 26893, 67575, 67575,
  /* 11790 */ 50132, 50117, 31543, 45411, 35567, 45493, 43427, 70588, 43445, 67575, 21335, 23218, 58551, 59608, 56333,
  /* 11805 */ 45601, 45604, 73404, 45872, 61011, 45906, 34292, 32016, 67575, 67575, 27546, 67575, 45636, 59608, 59608,
  /* 11820 */ 45673, 53694, 53694, 45749, 45872, 45872, 45817, 45906, 45907, 51253, 32055, 67575, 67575, 27549, 57042,
  /* 11835 */ 25896, 72988, 59608, 35841, 72474, 53694, 36476, 45872, 45871, 48633, 45906, 45905, 59358, 67575, 67575,
  /* 11850 */ 67575, 45939, 59608, 61428, 35460, 53694, 35903, 32133, 45872, 46004, 45906, 59920, 64334, 67575, 67575,
  /* 11865 */ 73726, 59608, 73649, 53694, 39942, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648,
  /* 11880 */ 45872, 51654, 46095, 46049, 33803, 34497, 52977, 38413, 54329, 46087, 57440, 40321, 26214, 42655, 48632,
  /* 11895 */ 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 46127, 46208, 46266,
  /* 11910 */ 46344, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11925 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11940 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11955 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11970 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 11985 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12000 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12015 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12030 */ 67575, 67575, 31895, 67575, 25605, 71335, 67575, 72685, 46407, 46428, 46460, 46491, 67575, 26893, 67575,
  /* 12045 */ 59048, 67575, 67575, 25885, 70519, 34248, 36608, 59573, 70588, 67575, 67575, 46543, 67575, 25891, 59608,
  /* 12060 */ 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 35635, 55811, 59608,
  /* 12075 */ 59608, 71513, 53694, 53694, 56575, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 23883, 31620, 20902,
  /* 12090 */ 67575, 46581, 63481, 59608, 35841, 37569, 53694, 36476, 64053, 45872, 48633, 54214, 45906, 35614, 67575,
  /* 12105 */ 68312, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906, 50401, 67575,
  /* 12120 */ 71328, 46619, 59608, 47741, 53694, 49715, 45872, 31211, 45906, 48882, 46655, 60656, 46734, 71917, 46803,
  /* 12135 */ 46876, 61173, 46931, 47028, 71661, 35780, 47084, 47182, 47241, 47293, 66127, 57440, 47393, 47443, 57114,
  /* 12150 */ 47504, 47559, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 47640,
  /* 12165 */ 47615, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12180 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12195 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12210 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12225 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12240 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12255 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12270 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12285 */ 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 47472, 67575, 47672,
  /* 12300 */ 67575, 46055, 31105, 21186, 47721, 47773, 47841, 72913, 67575, 32532, 58281, 64129, 67575, 67575, 25891,
  /* 12315 */ 59608, 47922, 53694, 26612, 45872, 65443, 37624, 45906, 47974, 67574, 67575, 67575, 67575, 39905, 40855,
  /* 12330 */ 59608, 59608, 50293, 53694, 53694, 35914, 45872, 45872, 55677, 45906, 45906, 38108, 23867, 67575, 67575,
  /* 12345 */ 67575, 31900, 67324, 59608, 59608, 36800, 53694, 53694, 36924, 45872, 45872, 36036, 45906, 45906, 50402,
  /* 12360 */ 67575, 45223, 67575, 19768, 59608, 54454, 47348, 53694, 27447, 28138, 45872, 36022, 45906, 71472, 50401,
  /* 12375 */ 67575, 66881, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608,
  /* 12390 */ 50866, 42648, 45872, 51654, 46095, 60436, 41141, 59608, 50864, 42653, 54329, 45906, 65550, 50792, 69059,
  /* 12405 */ 67648, 45773, 48027, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197,
  /* 12420 */ 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12435 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12450 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12465 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12480 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12495 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12510 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12525 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12540 */ 67575, 67575, 67575, 67575, 31895, 31709, 25605, 23166, 23150, 36297, 48083, 48115, 48197, 48145, 67575,
  /* 12555 */ 65206, 67575, 22553, 48229, 33863, 48289, 48344, 48404, 65073, 67575, 37526, 74028, 48484, 67575, 48520,
  /* 12570 */ 40334, 50283, 48591, 48665, 41812, 39312, 48736, 48814, 48870, 48914, 41021, 43961, 44690, 48967, 49001,
  /* 12585 */ 64700, 38361, 53593, 49068, 62980, 33932, 49143, 63141, 66617, 60719, 69588, 42264, 49215, 67575, 38141,
  /* 12600 */ 49288, 49344, 67575, 63270, 52725, 69011, 47113, 64168, 59006, 49390, 72510, 47150, 48372, 63907, 26257,
  /* 12615 */ 49452, 24872, 49505, 49537, 49606, 63768, 37776, 49699, 34984, 49747, 39580, 49822, 49901, 55719, 49974,
  /* 12630 */ 50028, 50087, 62886, 50176, 50256, 50325, 50434, 69815, 50494, 38662, 50605, 43873, 50637, 23038, 50680,
  /* 12645 */ 50712, 64528, 71017, 71143, 42092, 61073, 65491, 32613, 59608, 50864, 42653, 54329, 45906, 69650, 47583,
  /* 12660 */ 44819, 61151, 45442, 50768, 50847, 54528, 42934, 51924, 50898, 50989, 42654, 56077, 34107, 35165, 51032,
  /* 12675 */ 51130, 26721, 26696, 51183, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12690 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12705 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12720 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12735 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12750 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12765 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12780 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12795 */ 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605, 43447, 67575, 21619, 22914, 25078, 51285, 51316,
  /* 12810 */ 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575, 67575,
  /* 12825 */ 67575, 25891, 72437, 67969, 53694, 51368, 45872, 48782, 37624, 59531, 34292, 67574, 67575, 67575, 67575,
  /* 12840 */ 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575,
  /* 12855 */ 67575, 67575, 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906,
  /* 12870 */ 45906, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906,
  /* 12885 */ 45906, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575,
  /* 12900 */ 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440,
  /* 12915 */ 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165,
  /* 12930 */ 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12945 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12960 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12975 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 12990 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13005 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13020 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13035 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13050 */ 67575, 67575, 67575, 67575, 67575, 67575, 31895, 36154, 25605, 67575, 67575, 72685, 22914, 26022, 31932,
  /* 13065 */ 46156, 67575, 26893, 71672, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575,
  /* 13080 */ 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575,
  /* 13095 */ 67575, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393,
  /* 13110 */ 59971, 67575, 67575, 67575, 67575, 73595, 59608, 59608, 41794, 53694, 53694, 39369, 45872, 45872, 56745,
  /* 13125 */ 45906, 45906, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331,
  /* 13140 */ 45906, 45906, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445,
  /* 13155 */ 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906,
  /* 13170 */ 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107,
  /* 13185 */ 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13200 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13215 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13230 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13245 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13260 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13275 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13290 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13305 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 23631, 25605, 18742, 30487, 51400, 51429, 51450,
  /* 13320 */ 51482, 51513, 27791, 26893, 24037, 59048, 74741, 25270, 27015, 51579, 51693, 68799, 51833, 67245, 33770,
  /* 13335 */ 51878, 60850, 57051, 51956, 52059, 52118, 52172, 52218, 52250, 64776, 43847, 52323, 52384, 60814, 67575,
  /* 13350 */ 24802, 23762, 67575, 73725, 45034, 46996, 68652, 50462, 46844, 36833, 26395, 67039, 63064, 52446, 44390,
  /* 13365 */ 65865, 67575, 52516, 43003, 31863, 67575, 25896, 25939, 70010, 35841, 64015, 38035, 36476, 45872, 52561,
  /* 13380 */ 48633, 45906, 52593, 50402, 57902, 72011, 67575, 19768, 42019, 59608, 47348, 52625, 53694, 28270, 45872,
  /* 13395 */ 54331, 42887, 45906, 50401, 52662, 32063, 24663, 52715, 63589, 52757, 52892, 31197, 27485, 52800, 71439,
  /* 13410 */ 38606, 67575, 52847, 46983, 41407, 42648, 38466, 44974, 46095, 33067, 33803, 59608, 52885, 49773, 65819,
  /* 13425 */ 35724, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077,
  /* 13440 */ 52924, 66244, 57819, 52956, 53054, 53029, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13455 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13470 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13485 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13500 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13515 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13530 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13545 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13560 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 33729, 25605, 32782, 53086, 73826, 53119,
  /* 13575 */ 53150, 53246, 53180, 18605, 26893, 23710, 67575, 18600, 30760, 65993, 66672, 53278, 53395, 67575, 53477,
  /* 13590 */ 46549, 74112, 67575, 27064, 53537, 54050, 53625, 53692, 53728, 65805, 47261, 53760, 53897, 53830, 53929,
  /* 13605 */ 53991, 67575, 69694, 67575, 73725, 36095, 54039, 65754, 38014, 54082, 69453, 39765, 43608, 42724, 54124,
  /* 13620 */ 54207, 50393, 49574, 56182, 23815, 24529, 67575, 47411, 59608, 54246, 70875, 54289, 46830, 37834, 54323,
  /* 13635 */ 66599, 48633, 54363, 42117, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138,
  /* 13650 */ 45872, 54331, 45906, 45906, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906,
  /* 13665 */ 45906, 54401, 67575, 19769, 54448, 67629, 42648, 54486, 69950, 46095, 67575, 33803, 59608, 50864, 54522,
  /* 13680 */ 39447, 58847, 57440, 40321, 26214, 42655, 48632, 34755, 51000, 66186, 45839, 50549, 54560, 26197, 42654,
  /* 13695 */ 56077, 34107, 35165, 45972, 54616, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13710 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13725 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13740 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13755 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13770 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13785 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13800 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13815 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67576, 54669, 32264, 54751, 54804,
  /* 13830 */ 54836, 54867, 54949, 54897, 63723, 19300, 54981, 33989, 20420, 55024, 55056, 55118, 55251, 55313, 22982,
  /* 13845 */ 66892, 37452, 68215, 39115, 37717, 55375, 55430, 67969, 55462, 55933, 43116, 36487, 46899, 68862, 55511,
  /* 13860 */ 65132, 22999, 49024, 19647, 67575, 43762, 55573, 59184, 65754, 55619, 26124, 69453, 55665, 27666, 42724,
  /* 13875 */ 55709, 55751, 50393, 67575, 67575, 19861, 27323, 55791, 55843, 59608, 55885, 59111, 53694, 55965, 49093,
  /* 13890 */ 45872, 30691, 56044, 45906, 59910, 56109, 56162, 56229, 58342, 56296, 56365, 56473, 44234, 56541, 56607,
  /* 13905 */ 33695, 56672, 56731, 55180, 56777, 68550, 74087, 20482, 67776, 38343, 56853, 59812, 56925, 62749, 56982,
  /* 13920 */ 53798, 55281, 57014, 67575, 74500, 50815, 57083, 50356, 39260, 56699, 57183, 57252, 21469, 57291, 60297,
  /* 13935 */ 57364, 44954, 57396, 49928, 57477, 57527, 55479, 46017, 47527, 25401, 57589, 61794, 28922, 57644, 69755,
  /* 13950 */ 58750, 40166, 34107, 35165, 61698, 57676, 57708, 26696, 57788, 26753, 67575, 67575, 67575, 67575, 67575,
  /* 13965 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13980 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 13995 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14010 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14025 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14040 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14055 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14070 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 57873, 73689, 57942,
  /* 14085 */ 72685, 57980, 58011, 58073, 58041, 58105, 44023, 58201, 41579, 58254, 58313, 58398, 58471, 58503, 58583,
  /* 14100 */ 45234, 22235, 51336, 22129, 62424, 56197, 25891, 58698, 58782, 60396, 50573, 61505, 73379, 58835, 58879,
  /* 14115 */ 58932, 39055, 36739, 70230, 59038, 68376, 59082, 59160, 59229, 41289, 59271, 59390, 44285, 59431, 59485,
  /* 14130 */ 68466, 39836, 59525, 40392, 59563, 37362, 67575, 67575, 33032, 25896, 66951, 59607, 35841, 33915, 59641,
  /* 14145 */ 36476, 49183, 47801, 48633, 73467, 59677, 50402, 67575, 59717, 67575, 19768, 59608, 59608, 59795, 53694,
  /* 14160 */ 52630, 59844, 45872, 41210, 45906, 45906, 53308, 65619, 67575, 49358, 55853, 63980, 65403, 72293, 39588,
  /* 14175 */ 45873, 59882, 45906, 59952, 67575, 46623, 63533, 34834, 45107, 35097, 57612, 46095, 60020, 33803, 59608,
  /* 14190 */ 50864, 42653, 54329, 45906, 57202, 48051, 73610, 67895, 59337, 54584, 21494, 60054, 60112, 40189, 60188,
  /* 14205 */ 26197, 42654, 56077, 34107, 35165, 61698, 60276, 64608, 26696, 60329, 26753, 67575, 67575, 67575, 67575,
  /* 14220 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14235 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14250 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14265 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14280 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14295 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14310 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14325 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 19242, 67575,
  /* 14340 */ 60428, 60468, 60542, 60573, 60604, 60636, 70627, 26893, 67575, 19756, 49245, 67575, 32628, 60688, 59453,
  /* 14355 */ 60787, 57220, 70588, 26756, 58135, 68395, 67575, 44177, 50736, 51980, 60882, 52140, 60937, 60988, 61043,
  /* 14370 */ 60741, 61124, 61205, 61246, 31408, 61295, 67575, 73725, 59608, 56425, 65754, 53694, 67878, 69453, 45872,
  /* 14385 */ 66295, 42724, 45906, 39823, 50393, 61336, 67575, 30503, 74757, 31848, 25896, 61414, 59608, 33514, 64453,
  /* 14400 */ 53694, 41199, 59316, 45872, 48633, 35593, 45906, 50402, 65639, 67575, 72675, 19768, 59608, 61460, 67860,
  /* 14415 */ 70661, 53694, 61499, 30701, 54331, 45906, 38095, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645,
  /* 14430 */ 45872, 45873, 45906, 45906, 57445, 69376, 63348, 59608, 50866, 42648, 45872, 51654, 55759, 67575, 33803,
  /* 14445 */ 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 68084, 61537, 31984, 61618, 61687,
  /* 14460 */ 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575,
  /* 14475 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14490 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14505 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14520 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14535 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14550 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14565 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14580 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605,
  /* 14595 */ 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575, 26893, 67575, 61730, 48488, 42427, 45347, 70121,
  /* 14610 */ 61764, 39517, 61854, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872,
  /* 14625 */ 37624, 45906, 34292, 67574, 23234, 67575, 67575, 67575, 73725, 59608, 59608, 73319, 53694, 53694, 54092,
  /* 14640 */ 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575, 67575, 67575, 67575, 25896, 59608, 59608, 35841,
  /* 14655 */ 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 50402, 67575, 67575, 67575, 19768, 59608, 61888,
  /* 14670 */ 47348, 35848, 53694, 28138, 71557, 54331, 45906, 61927, 50401, 67575, 67575, 73726, 59608, 61467, 53694,
  /* 14685 */ 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575,
  /* 14700 */ 33803, 53347, 51151, 42653, 61967, 55206, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212,
  /* 14715 */ 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575,
  /* 14730 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14745 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14760 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14775 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14790 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14805 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14820 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 14835 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575,
  /* 14850 */ 23495, 67575, 24589, 24607, 62019, 62046, 62078, 62109, 26809, 26962, 19395, 41466, 25006, 62176, 62242,
  /* 14865 */ 62330, 62362, 62394, 44476, 30604, 62463, 62541, 37387, 74441, 62611, 62648, 62710, 58973, 40078, 51610,
  /* 14880 */ 39986, 46296, 62781, 62813, 67574, 57948, 62867, 41106, 62845, 51901, 62935, 59608, 63026, 63096, 53694,
  /* 14895 */ 63186, 71083, 25799, 63218, 36554, 37669, 63302, 67575, 53505, 67133, 67575, 63380, 63468, 63513, 63580,
  /* 14910 */ 50206, 52004, 63621, 63121, 69530, 52276, 64314, 49996, 33616, 50402, 63665, 46176, 63701, 19421, 63755,
  /* 14925 */ 63800, 62298, 63834, 53694, 31168, 73419, 54331, 44374, 63902, 54175, 24854, 63939, 57259, 63973, 34509,
  /* 14940 */ 64012, 59399, 64047, 59493, 64085, 25764, 57445, 64125, 60156, 59608, 64161, 48704, 71404, 53888, 34674,
  /* 14955 */ 35648, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 48838, 27612, 52414,
  /* 14970 */ 64200, 34096, 48625, 46960, 64270, 64366, 34107, 35165, 61698, 64425, 64502, 64583, 26488, 26753, 67575,
  /* 14985 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15000 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15015 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15030 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15045 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15060 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15075 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15090 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 31895,
  /* 15105 */ 67575, 21243, 64670, 64640, 64808, 64837, 64869, 64900, 64932, 67575, 31603, 64988, 67575, 31333, 53959,
  /* 15120 */ 31356, 65020, 40140, 65105, 65184, 50055, 65238, 67575, 53214, 63332, 65285, 53560, 26069, 65366, 45604,
  /* 15135 */ 35079, 65435, 67429, 42135, 34292, 58610, 30416, 65475, 31761, 23579, 73725, 70034, 59608, 59197, 57756,
  /* 15150 */ 53694, 55633, 67485, 45872, 49667, 65523, 45906, 41354, 67575, 65593, 24118, 65685, 39894, 65745, 25725,
  /* 15165 */ 67835, 42638, 53696, 52997, 62735, 45872, 65786, 65851, 45906, 65897, 65946, 68238, 56252, 49563, 67306,
  /* 15180 */ 59608, 66025, 47348, 73241, 66071, 28138, 66309, 54331, 45906, 66109, 50401, 67170, 58169, 73726, 53363,
  /* 15195 */ 66159, 69136, 47209, 63154, 42851, 69599, 53785, 57445, 74244, 22408, 59608, 50866, 42648, 45872, 51654,
  /* 15210 */ 59685, 62129, 65713, 63802, 50864, 43097, 52291, 51661, 56804, 22068, 66039, 59128, 49869, 51776, 22424,
  /* 15225 */ 66218, 50929, 34096, 48625, 41271, 66276, 66341, 66400, 66465, 66553, 66649, 26721, 26696, 26488, 26753,
  /* 15240 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15255 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15270 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15285 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15300 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15315 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15330 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15345 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15360 */ 31895, 67575, 37191, 67575, 24931, 24949, 66704, 66735, 66766, 66798, 38274, 66855, 38964, 40734, 33451,
  /* 15375 */ 40828, 66924, 66993, 67071, 67103, 67202, 55343, 65561, 44124, 67277, 63410, 63436, 55398, 67374, 20084,
  /* 15390 */ 55541, 67406, 67461, 34732, 67517, 67608, 67695, 25042, 67755, 67575, 48257, 67808, 67927, 57319, 66496,
  /* 15405 */ 68001, 56881, 27642, 56956, 38777, 51062, 68060, 68116, 68157, 31004, 69872, 68282, 68351, 56821, 57495,
  /* 15420 */ 67955, 34155, 62678, 48686, 58439, 66521, 68446, 43617, 68498, 68530, 64093, 68582, 42992, 56130, 67575,
  /* 15435 */ 68614, 68684, 71891, 74525, 47942, 68716, 36671, 43236, 44346, 68769, 68831, 43372, 68902, 54007, 68971,
  /* 15450 */ 69043, 59239, 69091, 73545, 66579, 69168, 54154, 69250, 57445, 69350, 72153, 38851, 69419, 69485, 69511,
  /* 15465 */ 69562, 69631, 69682, 28895, 46375, 54637, 53861, 71168, 69726, 43737, 29821, 69787, 60905, 72891, 69847,
  /* 15480 */ 26208, 54528, 35212, 34096, 48625, 26197, 64470, 65914, 69904, 69982, 70066, 70098, 26721, 26696, 70153,
  /* 15495 */ 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15510 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15525 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15540 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15555 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15570 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15585 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15600 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15615 */ 67575, 31895, 67575, 34438, 67575, 70224, 72685, 70262, 70293, 70375, 70323, 67575, 30468, 60832, 33023,
  /* 15630 */ 40451, 67575, 64238, 70407, 70467, 70551, 70620, 70588, 67575, 54719, 25024, 59575, 24679, 59608, 64393,
  /* 15645 */ 70659, 26136, 49167, 45872, 70693, 45906, 70718, 69307, 70750, 39634, 69387, 70805, 32931, 56509, 70845,
  /* 15660 */ 63548, 52186, 70988, 71049, 53660, 71115, 65051, 41338, 71220, 71298, 61214, 31278, 67575, 67575, 71367,
  /* 15675 */ 62616, 59608, 59608, 55086, 53694, 53694, 63859, 71401, 45872, 48633, 71436, 45906, 58900, 32184, 67575,
  /* 15690 */ 67575, 61586, 59608, 59608, 49631, 53694, 53694, 34355, 45872, 54331, 71471, 45906, 26664, 67575, 32347,
  /* 15705 */ 62431, 71504, 61895, 45097, 35473, 71545, 38788, 71589, 42207, 71635, 67575, 19769, 59608, 50866, 42648,
  /* 15720 */ 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 71704, 56012, 38186,
  /* 15735 */ 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 33632, 71790, 71863, 61698, 69197, 71974, 71949,
  /* 15750 */ 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15765 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15780 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15795 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15810 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15825 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15840 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15855 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 15870 */ 67575, 67575, 31895, 67575, 26910, 72056, 72006, 24264, 72043, 22346, 72088, 72119, 67575, 26893, 67575,
  /* 15885 */ 67575, 67575, 67575, 40866, 45165, 72185, 45461, 59050, 35402, 67575, 67575, 67575, 72256, 26302, 59609,
  /* 15900 */ 67969, 72289, 65334, 64759, 37845, 71758, 45906, 72325, 67574, 67575, 67575, 72394, 60022, 73725, 59608,
  /* 15915 */ 72430, 65754, 53694, 72469, 69453, 45872, 72506, 42724, 45906, 72542, 50393, 67575, 67575, 67575, 67575,
  /* 15930 */ 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633, 45906, 45906, 50402, 67575,
  /* 15945 */ 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331, 45906, 45906, 50401, 53087,
  /* 15960 */ 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 72576, 19769, 59608, 50866,
  /* 15975 */ 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 61092, 40321, 26214, 42655,
  /* 15990 */ 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721,
  /* 16005 */ 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16020 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16035 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16050 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16065 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16080 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16095 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16110 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16125 */ 67575, 67575, 67575, 31895, 67575, 62144, 67575, 72614, 72648, 72717, 72748, 72779, 72811, 67575, 26893,
  /* 16140 */ 67575, 67575, 67575, 67575, 25885, 72863, 60956, 69280, 67575, 70588, 67575, 67575, 21604, 67575, 25891,
  /* 16155 */ 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575, 67575, 67575, 73725,
  /* 16170 */ 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575, 67575,
  /* 16185 */ 72945, 67575, 72981, 59608, 59608, 44881, 53694, 53694, 63051, 45872, 45872, 36692, 45906, 45906, 50402,
  /* 16200 */ 32404, 67575, 67575, 19768, 73506, 39669, 47348, 72362, 42767, 28138, 36949, 49790, 54369, 45906, 73020,
  /* 16215 */ 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769, 59608,
  /* 16230 */ 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321, 26214,
  /* 16245 */ 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698, 69197,
  /* 16260 */ 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16275 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16290 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16305 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16320 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16335 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16350 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16365 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16380 */ 67575, 67575, 67575, 67575, 32399, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 46156, 67575,
  /* 16395 */ 27116, 31666, 67575, 63669, 32851, 46511, 46234, 73074, 45461, 67575, 22882, 58650, 73152, 67575, 67575,
  /* 16410 */ 25891, 22732, 58729, 27402, 62994, 45872, 37301, 37624, 51098, 47869, 73194, 67575, 67575, 67575, 67575,
  /* 16425 */ 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393, 67575, 67575,
  /* 16440 */ 67575, 68929, 67575, 25896, 56441, 59608, 73234, 47361, 53694, 47139, 27676, 45872, 48633, 68125, 45906,
  /* 16455 */ 50402, 73273, 67575, 67575, 19768, 73310, 59608, 20237, 53694, 53694, 30667, 45872, 54331, 28356, 45906,
  /* 16470 */ 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445, 67575, 19769,
  /* 16485 */ 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906, 57440, 40321,
  /* 16500 */ 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165, 61698,
  /* 16515 */ 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16530 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16545 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16560 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16575 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16590 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16605 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16620 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16635 */ 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 22914, 26022, 31932, 70904,
  /* 16650 */ 67575, 26893, 38222, 67575, 67575, 67575, 53330, 73351, 37009, 43933, 22588, 70588, 67575, 67575, 67575,
  /* 16665 */ 72398, 25891, 59608, 65312, 53694, 63633, 45872, 45872, 73451, 45906, 34813, 53422, 67575, 67575, 67575,
  /* 16680 */ 54416, 73725, 56319, 54257, 65754, 36821, 56893, 69453, 66422, 38479, 42724, 72215, 60755, 50393, 22919,
  /* 16695 */ 67575, 67575, 67575, 67575, 25896, 73499, 59608, 58427, 73538, 53694, 45698, 57140, 45872, 42871, 73104,
  /* 16710 */ 45906, 50402, 67575, 67575, 67575, 73577, 59608, 73642, 47348, 39707, 53694, 28138, 66433, 54331, 45906,
  /* 16725 */ 42198, 50401, 67575, 62197, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 73681, 72257,
  /* 16740 */ 45641, 59608, 57734, 44891, 45872, 34658, 46095, 67575, 73721, 66961, 69218, 42653, 69930, 28370, 57440,
  /* 16755 */ 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107, 35165,
  /* 16770 */ 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16785 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16800 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16815 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16830 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16845 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16860 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16875 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 16890 */ 67575, 67575, 67575, 67575, 67575, 67575, 31895, 67575, 25605, 67575, 67575, 72685, 73758, 26022, 31932,
  /* 16905 */ 46156, 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 45461, 67575, 70588, 67575, 67575,
  /* 16920 */ 67575, 67575, 25891, 59608, 67969, 53694, 45604, 45872, 45872, 37624, 45906, 34292, 67574, 67575, 67575,
  /* 16935 */ 67575, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872, 42724, 45906, 45906, 50393,
  /* 16950 */ 67575, 67575, 67575, 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694, 36476, 45872, 45872, 48633,
  /* 16965 */ 45906, 45906, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694, 53694, 28138, 45872, 54331,
  /* 16980 */ 45906, 45906, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872, 45873, 45906, 45906, 57445,
  /* 16995 */ 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608, 50864, 42653, 54329, 45906,
  /* 17010 */ 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625, 26197, 42654, 56077, 34107,
  /* 17025 */ 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17040 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17055 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17070 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17085 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17100 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17115 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17130 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17145 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 32228, 73802, 74911, 73858, 73917, 74934,
  /* 17160 */ 73885, 73954, 67575, 26893, 67575, 74021, 67575, 67575, 65152, 21855, 62210, 19628, 18637, 18703, 67575,
  /* 17175 */ 72139, 25688, 18774, 18861, 19121, 74060, 19011, 19087, 18999, 19075, 64956, 19119, 19153, 19213, 19332,
  /* 17190 */ 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821, 19612,
  /* 17205 */ 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359, 20116,
  /* 17220 */ 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615, 30937,
  /* 17235 */ 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267, 21141,
  /* 17250 */ 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651, 21763,
  /* 17265 */ 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100, 20767,
  /* 17280 */ 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17295 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17310 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17325 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17340 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17355 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17370 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17385 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17400 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 18664, 18671, 74144,
  /* 17415 */ 74227, 22664, 74175, 67575, 26893, 67575, 74683, 67575, 74276, 44541, 19642, 23595, 19628, 18637, 18703,
  /* 17430 */ 67575, 72139, 25688, 18774, 18861, 19121, 18979, 19011, 19043, 18999, 19075, 64956, 19119, 19153, 19213,
  /* 17445 */ 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189, 74821,
  /* 17460 */ 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002, 36359,
  /* 17475 */ 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647, 20615,
  /* 17490 */ 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062, 33267,
  /* 17505 */ 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741, 21651,
  /* 17520 */ 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750, 22100,
  /* 17535 */ 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17550 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17565 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17580 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17595 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17610 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17625 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17640 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17655 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 68939, 67575, 67575, 50144,
  /* 17670 */ 74314, 74333, 58666, 74382, 67575, 26893, 67575, 74434, 24134, 67575, 46686, 19642, 65145, 19628, 18637,
  /* 17685 */ 18703, 67575, 72139, 25688, 18774, 18861, 19121, 74473, 19011, 74557, 18999, 19075, 64956, 19119, 19153,
  /* 17700 */ 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109, 27731, 22189,
  /* 17715 */ 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363, 20120, 20002,
  /* 17730 */ 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608, 30930, 20647,
  /* 17745 */ 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009, 20974, 21062,
  /* 17760 */ 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526, 21558, 21741,
  /* 17775 */ 21651, 21763, 21711, 21795, 21827, 21887, 21945, 21919, 21977, 22009, 23332, 22041, 21089, 65149, 20750,
  /* 17790 */ 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575, 67575, 67575,
  /* 17805 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17820 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17835 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17850 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17865 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17880 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17895 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 17910 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 22585, 67575, 23273, 67575, 67575,
  /* 17925 */ 72685, 22914, 67575, 67575, 74620, 67575, 26893, 67575, 67575, 67575, 67575, 25885, 70519, 34248, 44763,
  /* 17940 */ 67575, 70588, 67575, 67575, 67575, 67575, 25891, 59608, 46771, 53694, 35019, 45872, 45872, 37624, 45906,
  /* 17955 */ 34292, 67574, 67575, 67575, 67575, 67575, 73725, 59608, 59608, 65754, 53694, 53694, 69453, 45872, 45872,
  /* 17970 */ 42724, 45906, 45906, 50393, 67575, 67575, 67575, 67575, 67575, 25896, 59608, 59608, 35841, 53694, 53694,
  /* 17985 */ 36476, 45872, 45872, 48633, 45906, 45906, 50402, 67575, 67575, 67575, 19768, 59608, 59608, 47348, 53694,
  /* 18000 */ 53694, 28138, 45872, 54331, 45906, 45906, 50401, 67575, 67575, 73726, 59608, 61467, 53694, 59645, 45872,
  /* 18015 */ 45873, 45906, 45906, 57445, 67575, 19769, 59608, 50866, 42648, 45872, 51654, 46095, 67575, 33803, 59608,
  /* 18030 */ 50864, 42653, 54329, 45906, 57440, 40321, 26214, 42655, 48632, 35969, 26208, 54528, 35212, 34096, 48625,
  /* 18045 */ 26197, 42654, 56077, 34107, 35165, 61698, 69197, 26721, 26696, 26488, 26753, 67575, 67575, 67575, 67575,
  /* 18060 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18075 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18090 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18105 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18120 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18135 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18150 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18165 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18180 */ 20563, 67575, 18793, 18812, 51846, 74672, 67575, 67575, 67575, 74683, 67575, 67575, 65152, 19642, 65145,
  /* 18195 */ 19628, 18637, 74722, 67575, 72139, 25688, 18774, 18861, 19121, 74060, 19011, 19087, 18999, 19075, 64956,
  /* 18210 */ 19119, 19153, 19213, 19332, 23435, 74402, 19366, 19476, 74817, 19563, 20183, 21108, 27730, 19970, 21109,
  /* 18225 */ 27731, 22189, 74821, 19612, 19679, 35293, 19733, 19801, 19902, 21679, 30009, 20276, 19507, 19943, 36363,
  /* 18240 */ 20120, 20002, 36359, 20116, 20152, 20269, 20308, 19531, 19181, 20400, 20452, 70932, 20689, 20514, 20608,
  /* 18255 */ 30930, 20647, 20615, 30937, 20654, 20686, 20721, 20541, 20799, 20876, 33240, 33272, 20945, 20977, 21009,
  /* 18270 */ 20974, 21062, 33267, 21141, 19701, 21218, 21275, 18933, 21391, 21438, 21406, 18916, 18947, 67723, 21526,
  /* 18285 */ 21558, 21741, 21651, 21763, 21711, 21795, 74789, 21887, 21945, 21919, 74853, 22009, 23332, 74885, 21089,
  /* 18300 */ 65149, 20750, 22100, 20767, 22161, 22267, 22299, 22378, 22456, 22488, 22520, 22550, 67575, 67575, 67575,
  /* 18315 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18330 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18345 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18360 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18375 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18390 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18405 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575,
  /* 18420 */ 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 67575, 1, 24578, 3, 0, 0, 0,
  /* 18438 */ 0, 0, 0, 0, 180525, 180525, 180525, 180525, 0, 188718, 188718, 188718, 180525, 180525, 188718, 188718,
  /* 18454 */ 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18467 */ 188718, 188718, 188718, 0, 188718, 180525, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18481 */ 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18494 */ 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18507 */ 188718, 188718, 139264, 147456, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18520 */ 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18533 */ 188718, 188718, 188718, 188718, 367, 188718, 180525, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18546 */ 188718, 131072, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18559 */ 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718,
  /* 18572 */ 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 188718, 1, 24578, 3, 0, 0,
  /* 18588 */ 4366336, 0, 0, 0, 180525, 188718, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18613 */ 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0,
  /* 18644 */ 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18674 */ 2334720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0,
  /* 18704 */ 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0,
  /* 18732 */ 0, 0, 0, 0, 0, 0, 0, 0, 557056, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18764 */ 0, 0, 380, 0, 383, 0, 0, 0, 0, 383, 0, 5259264, 0, 5414912, 5447680, 0, 0, 5562368, 5636096, 5685248, 0,
  /* 18785 */ 5750784, 5873664, 0, 0, 0, 0, 5636096, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992,
  /* 18811 */ 0, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992,
  /* 18825 */ 212992, 212992, 212992, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 0, 0,
  /* 18852 */ 0, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 5480448, 4358144, 4358144, 4358144,
  /* 18874 */ 4358144, 4857856, 4874240, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 18885 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5259264, 4358144, 4358144, 4358144, 915, 915, 915, 0, 0, 0,
  /* 18900 */ 0, 0, 0, 5029888, 5038080, 0, 0, 5103616, 5201920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6406144,
  /* 18923 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4997120, 4358144, 4358144,
  /* 18934 */ 5038080, 4358144, 4358144, 4358144, 5095424, 5103616, 4358144, 4358144, 5201920, 4358144, 4358144,
  /* 18945 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5890048, 4358144, 4358144,
  /* 18956 */ 4358144, 6029312, 4358144, 4358144, 4358144, 4358144, 6160384, 4358144, 4358144, 4358144, 4358144,
  /* 18967 */ 4358144, 4358144, 4358144, 6406144, 4358144, 4358144, 4358144, 0, 0, 0, 4890624, 0, 4358144, 4358144,
  /* 18981 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6275072, 4358144, 4358144, 4358144, 4358144,
  /* 18992 */ 4358144, 4358144, 4358144, 4358144, 4358144, 0, 916, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0,
  /* 19013 */ 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 0, 5414912, 0, 5447680, 0, 5464064, 0, 5480448, 5562368,
  /* 19036 */ 0, 0, 0, 5636096, 0, 5685248, 0, 0, 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19062 */ 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 0, 5464064, 0, 5480448, 5562368, 0, 0, 0, 5636096, 0,
  /* 19085 */ 5685248, 0, 0, 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0,
  /* 19112 */ 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5414912,
  /* 19128 */ 4358144, 5447680, 4358144, 5464064, 4358144, 5480448, 5562368, 4358144, 4358144, 4358144, 5636096,
  /* 19139 */ 4358144, 5685248, 4358144, 4358144, 5750784, 4358144, 4358144, 4358144, 4358144, 4358144, 5873664,
  /* 19150 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19161 */ 4358144, 4358144, 6275072, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19172 */ 4358144, 4923392, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19190 */ 5218304, 0, 0, 0, 0, 5799936, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 6373376, 6389760, 0, 0, 6488064,
  /* 19211 */ 6103040, 0, 4366336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19241 */ 5242880, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 297, 0,
  /* 19272 */ 0, 0, 0, 0, 0, 0, 649, 0, 0, 0, 0, 0, 0, 820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 649, 0, 0, 0, 0, 0,
  /* 19305 */ 0, 0, 692, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 714, 0, 5603328,
  /* 19334 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528, 0, 0,
  /* 19368 */ 4759552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4825088, 0, 0, 5177344, 0, 0,
  /* 19397 */ 0, 0, 0, 0, 0, 722, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19430 */ 0, 2865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2873, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 19455 */ 529, 3261, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 0, 0, 57894, 57894, 57894, 57894,
  /* 19475 */ 57894, 0, 5701632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5808128, 0, 0, 0, 0, 4792320, 4833280, 0, 0, 5701632, 0,
  /* 19499 */ 0, 0, 0, 0, 4358144, 4358144, 4358144, 4825088, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19513 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6119424, 4358144, 6168576, 4358144,
  /* 19524 */ 4358144, 4358144, 4358144, 6242304, 4358144, 6291456, 4358144, 6316032, 4358144, 4358144, 4358144,
  /* 19535 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6463488, 4358144, 4358144, 4358144, 4358144,
  /* 19546 */ 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4956160, 4964352, 0, 5341184, 4358144, 4358144, 4358144,
  /* 19567 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5627904, 5652480,
  /* 19578 */ 4358144, 5701632, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19589 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0,
  /* 19604 */ 0, 0, 0, 0, 0, 303, 0, 304, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19620 */ 4358144, 5627904, 5652480, 4358144, 5701632, 4358144, 4358144, 5808128, 4358144, 4358144, 4358144,
  /* 19631 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19642 */ 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19667 */ 0, 0, 0, 0, 0, 0, 0, 0, 1844, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19686 */ 4358144, 6299648, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19697 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5029888,
  /* 19714 */ 5038080, 0, 0, 5103616, 5201920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6406144, 5570560, 0, 5668864, 0,
  /* 19737 */ 0, 5791744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6201344, 6242304, 6250496, 0, 0, 0, 0, 6422528, 0, 0, 0, 0, 0, 0,
  /* 19762 */ 0, 0, 0, 0, 0, 756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 19794 */ 529, 529, 529, 529, 529, 529, 529, 0, 0, 5619712, 0, 0, 0, 0, 0, 0, 0, 5578752, 5726208, 5758976, 0, 0,
  /* 19816 */ 5791744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6152192, 0, 0, 0, 0, 0, 0, 3448, 3449, 0, 3450, 0,
  /* 19843 */ 3452, 0, 0, 0, 0, 3454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3454, 0, 0, 0, 0, 0, 0, 0, 2347, 2348, 0, 0, 0,
  /* 19873 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1817, 0, 0, 0, 0, 0, 0, 0, 0, 6316032,
  /* 19905 */ 0, 0, 0, 0, 5816320, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19936 */ 418, 418, 0, 0, 0, 0, 0, 4358144, 4358144, 6463488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584,
  /* 19962 */ 4939776, 0, 0, 0, 0, 0, 0, 5054464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19991 */ 0, 0, 0, 0, 0, 0, 4825088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6463488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20022 */ 0, 0, 4931584, 4939776, 0, 0, 0, 0, 0, 0, 5054464, 0, 0, 0, 0, 0, 0, 3473, 0, 0, 0, 0, 3478, 3479, 0,
  /* 20047 */ 3481, 0, 0, 3484, 0, 0, 0, 3487, 529, 529, 529, 529, 529, 529, 3494, 529, 529, 529, 0, 0, 0, 0, 57894,
  /* 20070 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59863, 57894, 57894, 57894, 57894, 59867, 57894,
  /* 20085 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58812, 57894, 57894, 57894, 57894, 57894,
  /* 20100 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58825, 57894, 57894, 57894, 57894, 58830, 57894, 57894,
  /* 20115 */ 57894, 0, 0, 0, 5791744, 5816320, 0, 5857280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6119424, 0, 6168576,
  /* 20139 */ 0, 0, 0, 0, 0, 6242304, 0, 6291456, 0, 6316032, 0, 0, 0, 6316032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6463488,
  /* 20163 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20174 */ 4931584, 4939776, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5054464, 4358144, 4358144,
  /* 20185 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6299648, 4358144,
  /* 20196 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0,
  /* 20211 */ 4825088, 0, 0, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 0, 0, 806, 0, 529, 529, 529, 529, 529, 529, 529, 529, 874,
  /* 20237 */ 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 20257 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60296, 57894, 4358144, 4358144,
  /* 20271 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5210112, 4358144, 4358144, 4358144, 4358144, 5292032,
  /* 20282 */ 4358144, 4358144, 4358144, 4358144, 5365760, 4358144, 4358144, 4358144, 5455872, 4358144, 4358144,
  /* 20293 */ 4358144, 4358144, 4358144, 5554176, 5570560, 5578752, 5619712, 5668864, 4358144, 4358144, 4358144,
  /* 20304 */ 5791744, 5816320, 4358144, 5857280, 4358144, 4358144, 4358144, 5791744, 5816320, 4358144, 5857280,
  /* 20315 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20326 */ 4358144, 4358144, 6119424, 4358144, 6168576, 4358144, 4358144, 4358144, 4358144, 4358144, 6242304,
  /* 20337 */ 4358144, 6291456, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20348 */ 4358144, 4358144, 6299648, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20359 */ 4358144, 4358144, 4358144, 0, 0, 915, 915, 915, 4826003, 915, 915, 915, 915, 915, 915, 6464403, 0, 0, 0,
  /* 20378 */ 0, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 4932575, 4940767, 991, 991, 991, 991, 991, 991,
  /* 20398 */ 5055455, 991, 0, 0, 0, 0, 6184960, 5316608, 0, 0, 5644288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6217728, 0, 0, 0,
  /* 20423 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664, 0, 794, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 807, 0, 5390336,
  /* 20453 */ 5308416, 5488640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5070848, 5431296, 0, 6430720, 0, 5160960, 0, 0, 0, 0, 0, 0,
  /* 20476 */ 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 0, 0, 0, 0, 3182, 0, 0, 0, 0, 0, 0, 0, 3188, 0, 3190, 0, 0, 0, 3194, 0,
  /* 20505 */ 0, 0, 0, 0, 3199, 0, 0, 3202, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5799936,
  /* 20522 */ 4358144, 4358144, 5881856, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20533 */ 4358144, 6103040, 4358144, 4358144, 4358144, 6184960, 4358144, 4358144, 6283264, 4358144, 4358144,
  /* 20544 */ 6332416, 4358144, 4358144, 4358144, 6389760, 4358144, 4358144, 6430720, 6438912, 4358144, 4358144,
  /* 20555 */ 4358144, 6266880, 6488064, 0, 0, 0, 6266880, 6488064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 0, 0,
  /* 20579 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 334, 0, 0, 0, 0, 0, 0, 0, 0, 4358144,
  /* 20609 */ 4358144, 6389760, 4358144, 4358144, 6430720, 6438912, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 4849664, 0, 0,
  /* 20628 */ 0, 0, 0, 4915200, 0, 4956160, 4972544, 0, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 0, 5881856, 0, 0, 0,
  /* 20653 */ 0, 0, 0, 0, 0, 0, 6103040, 0, 0, 0, 6184960, 0, 0, 0, 6283264, 0, 0, 6332416, 0, 0, 0, 6389760, 0, 0,
  /* 20677 */ 6430720, 6438912, 4784128, 4358144, 4358144, 4358144, 4849664, 4358144, 4358144, 4358144, 4358144,
  /* 20688 */ 4358144, 4915200, 4358144, 4956160, 4972544, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20699 */ 5070848, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5218304, 4358144, 5267456,
  /* 20710 */ 4358144, 4358144, 5308416, 5316608, 4358144, 4358144, 4358144, 5431296, 4358144, 5488640, 4358144,
  /* 20721 */ 4358144, 5488640, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20732 */ 5799936, 4358144, 4358144, 5881856, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20743 */ 4358144, 4358144, 6103040, 4358144, 4358144, 4358144, 6184960, 4358144, 4358144, 4358144, 0, 5013504, 0,
  /* 20756 */ 0, 6053888, 0, 0, 0, 0, 0, 0, 0, 0, 6012928, 4358144, 4358144, 5013504, 4358144, 4358144, 4358144,
  /* 20773 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 4358144, 0, 0, 0, 0,
  /* 20787 */ 5193728, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 5660672, 5718016,
  /* 20806 */ 0, 5865472, 0, 0, 0, 0, 6078464, 0, 0, 6340608, 0, 6455296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20833 */ 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20865 */ 0, 0, 0, 0, 0, 2827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6037504, 6111232, 0, 0, 0, 5472256, 0, 0, 0, 6209536, 0,
  /* 20891 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6176768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20923 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 5824512, 5865472, 4358144, 4358144,
  /* 20949 */ 5922816, 4358144, 4358144, 6021120, 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144,
  /* 20960 */ 6176768, 6209536, 6234112, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0,
  /* 20974 */ 4841472, 0, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5111808, 0, 0, 0, 0, 0, 5283840, 0, 0, 0, 0,
  /* 21001 */ 5472256, 5521408, 0, 0, 0, 0, 5595136, 5709824, 5718016, 0, 5824512, 5865472, 0, 0, 5922816, 0, 0,
  /* 21018 */ 6021120, 0, 6037504, 0, 0, 6078464, 6111232, 0, 6176768, 6209536, 0, 6234112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21039 */ 0, 0, 0, 312, 411, 313, 0, 0, 0, 0, 0, 0, 313, 416, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 5595136,
  /* 21064 */ 5709824, 5718016, 0, 5824512, 5865472, 0, 0, 5922816, 0, 0, 6021120, 0, 6037504, 0, 0, 6078464, 6111232,
  /* 21081 */ 0, 6176768, 6209536, 0, 6234112, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21098 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0,
  /* 21113 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5177344, 0, 0, 0, 0, 0, 5242880, 0, 0, 0, 0, 0, 0, 0, 5341184, 0,
  /* 21141 */ 4358144, 4358144, 5595136, 5709824, 5718016, 4358144, 5824512, 5865472, 4358144, 4358144, 5922816,
  /* 21152 */ 4358144, 4358144, 6021120, 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144, 6176768,
  /* 21163 */ 6209536, 4358144, 6234112, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21174 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 1066,
  /* 21186 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 771, 0, 0, 0, 0, 0, 771, 771, 0, 830, 0, 0, 0, 0,
  /* 21218 */ 5357568, 0, 5505024, 0, 0, 0, 0, 0, 5890048, 0, 0, 0, 6160384, 0, 5095424, 5349376, 0, 5275648, 0, 0, 0,
  /* 21239 */ 0, 0, 0, 4997120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 354, 355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
  /* 21270 */ 0, 297, 0, 0, 0, 0, 0, 0, 5947392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6471680, 0, 0, 0, 4358144,
  /* 21298 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4997120, 4358144, 4358144, 4358144,
  /* 21309 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6299648, 4358144, 4358144,
  /* 21320 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 1988, 0, 0, 0,
  /* 21334 */ 4825088, 0, 0, 0, 0, 0, 0, 0, 1287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1299, 0, 1177, 0, 0, 0, 0, 0,
  /* 21364 */ 0, 0, 0, 0, 0, 0, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 344064, 0,
  /* 21391 */ 4358144, 4358144, 4358144, 4358144, 6406144, 0, 0, 0, 0, 0, 0, 0, 0, 4997120, 0, 0, 5038080, 0, 0, 0,
  /* 21411 */ 5095424, 5103616, 0, 0, 5201920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5890048, 0, 0, 0, 6029312, 0, 0, 0, 0,
  /* 21436 */ 6160384, 0, 0, 0, 0, 0, 5890048, 0, 0, 0, 6029312, 0, 0, 0, 0, 6160384, 0, 0, 0, 0, 0, 0, 0, 6406144, 0,
  /* 21461 */ 0, 0, 0, 0, 0, 0, 0, 4997120, 0, 0, 0, 0, 0, 0, 3685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3697, 0, 0,
  /* 21492 */ 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 3943, 529, 529, 529, 529, 3947, 529, 529, 529, 529, 529, 3953, 529,
  /* 21516 */ 529, 529, 57894, 57894, 57894, 61302, 57894, 57894, 57894, 57894, 0, 6356992, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21536 */ 5496832, 0, 0, 0, 0, 0, 5611520, 0, 0, 0, 0, 0, 4947968, 5021696, 5529600, 0, 0, 5169152, 0, 0, 0,
  /* 21557 */ 4800512, 4808704, 4358144, 4358144, 4890624, 4358144, 4947968, 4358144, 4358144, 4358144, 5046272,
  /* 21568 */ 4358144, 4358144, 4358144, 4358144, 5185536, 4358144, 5234688, 5300224, 4358144, 4358144, 5406720,
  /* 21579 */ 5529600, 4358144, 4358144, 4358144, 5898240, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21590 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21601 */ 4358144, 4358144, 491520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21630 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 0, 0, 0, 0, 139264, 147456, 0, 388, 0, 0, 0, 0, 0, 5898240, 0, 0, 0, 0, 0,
  /* 21659 */ 0, 0, 0, 6307840, 0, 0, 6356992, 6381568, 6397952, 4800512, 4808704, 0, 0, 4890624, 0, 4947968, 0, 0, 0,
  /* 21678 */ 5046272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5857280, 0, 6463488, 4939776, 0, 0, 5455872, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21703 */ 6062080, 6463488, 0, 5398528, 0, 0, 0, 6479872, 4358144, 4947968, 4358144, 4358144, 4358144, 5046272,
  /* 21717 */ 4358144, 4358144, 4358144, 4358144, 5185536, 4358144, 5234688, 5300224, 4358144, 4358144, 5406720,
  /* 21728 */ 5529600, 4358144, 4358144, 4358144, 4358144, 5898240, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21739 */ 4358144, 4358144, 4358144, 6307840, 4358144, 4358144, 6356992, 6381568, 6397952, 4800512, 4808704, 0, 0,
  /* 21752 */ 4890624, 0, 4947968, 0, 0, 0, 5046272, 0, 0, 0, 0, 5185536, 0, 5234688, 5300224, 0, 0, 5406720, 5529600,
  /* 21771 */ 0, 0, 0, 0, 5898240, 0, 0, 0, 0, 0, 0, 0, 0, 6307840, 0, 0, 6356992, 6381568, 6397952, 4800512, 4808704,
  /* 21792 */ 4358144, 4358144, 4890624, 4358144, 4358144, 6356992, 6381568, 6397952, 5021696, 4358144, 4358144,
  /* 21803 */ 5021696, 0, 0, 0, 4980736, 0, 0, 0, 0, 0, 5373952, 5734400, 6045696, 0, 6258688, 6447104, 0, 0, 6127616,
  /* 21822 */ 0, 6348800, 5906432, 0, 5537792, 3681, 4882432, 0, 0, 0, 0, 0, 0, 0, 0, 5939200, 0, 0, 5677056, 6365184,
  /* 21842 */ 4866048, 0, 6070272, 5545984, 5152768, 0, 0, 6144000, 4358144, 4866048, 4882432, 4358144, 4980736,
  /* 21855 */ 4358144, 4358144, 4358144, 4358144, 4358144, 0, 916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21880 */ 0, 0, 0, 0, 992, 0, 0, 4358144, 4358144, 4358144, 4358144, 5324800, 5373952, 5537792, 5545984, 5734400,
  /* 21896 */ 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 6348800, 0, 4866048, 4882432, 0,
  /* 21909 */ 4980736, 0, 0, 0, 0, 0, 0, 0, 0, 5324800, 5586944, 5734400, 5971968, 0, 6045696, 0, 6070272, 0, 0, 0, 0,
  /* 21930 */ 6348800, 4358144, 4866048, 4882432, 4358144, 4980736, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21941 */ 4358144, 4358144, 4358144, 5324800, 5373952, 5537792, 5545984, 5586944, 5734400, 5971968, 0, 6045696, 0,
  /* 21954 */ 6070272, 0, 0, 0, 0, 6348800, 0, 4866048, 4882432, 0, 4980736, 0, 0, 0, 0, 0, 0, 0, 0, 5324800, 5373952,
  /* 21975 */ 5537792, 5545984, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 4358144, 6348800,
  /* 21986 */ 4358144, 6144000, 0, 6144000, 0, 4988928, 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0,
  /* 22008 */ 5693440, 0, 6496256, 5144576, 5136384, 0, 5914624, 4358144, 4358144, 5005312, 4358144, 4358144, 4358144,
  /* 22021 */ 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 22032 */ 6324224, 0, 0, 5005312, 0, 0, 0, 5120000, 5136384, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384,
  /* 22047 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6324224,
  /* 22058 */ 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3681, 0, 0, 0, 0, 0, 0, 3839, 0, 0, 0, 0, 3843, 0,
  /* 22082 */ 0, 0, 0, 0, 0, 0, 0, 3846, 0, 529, 529, 529, 3848, 529, 529, 529, 3851, 529, 0, 0, 5013504, 0, 0, 0, 0, 0,
  /* 22108 */ 0, 0, 0, 0, 6053888, 0, 0, 0, 0, 0, 5013504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6053888, 0, 0, 0, 0, 0, 0, 0,
  /* 22136 */ 1201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1275, 0, 0, 0, 1279, 5193728, 4358144,
  /* 22163 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22184 */ 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5808128,
  /* 22211 */ 4358144, 4358144, 4358144, 4825088, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 22222 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 22233 */ 4358144, 483328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
  /* 22262 */ 367, 1212, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 5193728, 4358144, 4358144,
  /* 22279 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4907008, 0, 5079040, 6094848, 5742592, 0, 0, 0, 0,
  /* 22294 */ 0, 4358144, 4907008, 4358144, 5079040, 4358144, 5226496, 4358144, 5742592, 4358144, 4358144, 4358144,
  /* 22306 */ 6094848, 0, 4907008, 0, 5079040, 0, 5226496, 0, 5742592, 0, 0, 0, 6094848, 0, 0, 4907008, 0, 5079040, 0,
  /* 22325 */ 5226496, 0, 5742592, 0, 0, 0, 0, 0, 0, 0, 1222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1232, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22354 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 548, 57914, 548, 57914, 548, 548, 57914, 548, 548, 57937, 57914, 548, 548,
  /* 22376 */ 57914, 57914, 6094848, 0, 4358144, 4907008, 4358144, 5079040, 4358144, 5226496, 4358144, 5742592, 4358144,
  /* 22389 */ 4358144, 4358144, 6094848, 4358144, 5062656, 0, 0, 0, 0, 0, 4358144, 5062656, 4358144, 4358144, 4358144,
  /* 22404 */ 4358144, 4358144, 0, 5062656, 0, 0, 0, 0, 0, 0, 0, 3474, 3475, 0, 0, 0, 0, 3480, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22430 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3949, 529, 3951, 529, 529, 529, 529, 529, 57894, 57894,
  /* 22450 */ 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 6225920, 0, 5062656, 0, 0, 0, 0, 0, 6225920, 4358144,
  /* 22469 */ 5062656, 4358144, 4358144, 4358144, 4358144, 4358144, 6225920, 0, 6086656, 0, 0, 0, 4816896, 4358144,
  /* 22483 */ 4358144, 4358144, 4358144, 6086656, 4816896, 0, 0, 0, 0, 6086656, 4816896, 0, 0, 0, 0, 6086656, 4816896,
  /* 22500 */ 4358144, 4358144, 4358144, 4358144, 6086656, 0, 5087232, 0, 5931008, 4358144, 5332992, 5980160, 4358144,
  /* 22513 */ 0, 5332992, 5980160, 0, 0, 5332992, 5980160, 0, 4358144, 5332992, 5980160, 4358144, 0, 5439488, 5128192,
  /* 22528 */ 4358144, 5128192, 0, 5128192, 0, 5128192, 4358144, 0, 4358144, 0, 0, 4358144, 0, 4358144, 0, 0, 4358144,
  /* 22545 */ 0, 4358144, 0, 0, 4358144, 6004736, 6004736, 6004736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22570 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 774, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22603 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22636 */ 0, 0, 221654, 221654, 221654, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 221654, 470, 221654,
  /* 22655 */ 221654, 221654, 470, 221654, 221654, 221654, 221654, 221654, 221654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22676 */ 0, 0, 0, 0, 0, 0, 0, 469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2335239, 2335206, 221654, 221654, 221654, 1,
  /* 22700 */ 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22727 */ 0, 0, 0, 0, 701, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1390,
  /* 22749 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1, 24578, 3, 0, 0, 0, 0, 0, 0,
  /* 22773 */ 0, 0, 0, 0, 0, 237568, 303, 0, 307, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 328, 0,
  /* 22802 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 57895, 529, 57895, 529, 529, 57895, 529, 529, 57918,
  /* 22828 */ 57895, 529, 529, 57895, 57895, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
  /* 22857 */ 307, 237985, 147456, 0, 0, 0, 0, 307, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 65536, 304, 0, 4268032,
  /* 22880 */ 98304, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0,
  /* 22911 */ 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22945 */ 0, 0, 2314, 0, 0, 0, 0, 0, 0, 0, 0, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
  /* 22970 */ 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1171,
  /* 22996 */ 1172, 1173, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1778, 0, 0, 1781, 0, 1783, 0, 0,
  /* 23025 */ 0, 0, 0, 0, 0, 0, 114688, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23057 */ 0, 0, 0, 0, 0, 0, 0, 0, 3463, 0, 0, 0, 0, 307, 0, 0, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0,
  /* 23085 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23116 */ 0, 0, 0, 0, 2088, 0, 0, 0, 4825088, 0, 0, 0, 0, 4210980, 24578, 3, 0, 0, 298, 0, 0, 0, 0, 298, 0, 0, 0, 0,
  /* 23144 */ 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23177 */ 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 384, 386, 0, 0, 245760, 245760, 0, 4210980, 24578,
  /* 23203 */ 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23232 */ 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23265 */ 0, 0, 746, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23298 */ 0, 367, 0, 0, 0, 0, 0, 0, 1160, 0, 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23326 */ 0, 0, 0, 0, 0, 5480448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6324224, 0, 0, 5005312, 0, 0, 0, 5120000, 5136384,
  /* 23351 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6324224, 4358144, 4358144, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23379 */ 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 0, 376832, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23409 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 262144, 0, 0, 0, 0, 0,
  /* 23440 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5627904, 0, 0, 0, 0, 262144,
  /* 23472 */ 0, 262144, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 262144, 0, 262144, 0, 0, 0, 139264, 147456,
  /* 23494 */ 262144, 0, 0, 0, 0, 0, 0, 0, 0, 351, 352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 297, 0,
  /* 23525 */ 0, 0, 0, 0, 0, 262144, 0, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739,
  /* 23542 */ 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739, 262739,
  /* 23555 */ 262739, 262739, 0, 262739, 0, 0, 262739, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032,
  /* 23577 */ 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23610 */ 0, 0, 0, 0, 0, 2326528, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 23626 */ 4358144, 0, 0, 278528, 278528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23656 */ 0, 0, 0, 339, 340, 0, 0, 0, 0, 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
  /* 23675 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
  /* 23688 */ 278528, 278528, 278528, 278528, 278528, 0, 278528, 278528, 0, 131072, 278528, 0, 0, 0, 278528, 0, 0, 0, 0,
  /* 23707 */ 0, 0, 278528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23740 */ 0, 0, 0, 0, 278528, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0,
  /* 23766 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2846,
  /* 23799 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23834 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2364, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 639, 0,
  /* 23864 */ 4268032, 307, 642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23895 */ 0, 0, 0, 0, 0, 0, 0, 0, 2330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144,
  /* 23919 */ 4358144, 4358144, 4358144, 4358144, 6275072, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 23930 */ 4358144, 4358144, 4358144, 0, 1433, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 311,
  /* 23953 */ 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0,
  /* 23986 */ 0, 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24015 */ 0, 0, 1528, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 304, 0, 308, 286720, 0, 0, 0, 0, 0, 0,
  /* 24043 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 308, 0,
  /* 24076 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 308, 139264, 287141, 0, 0, 0, 0, 308, 1, 24578, 3, 0,
  /* 24105 */ 0, 4366336, 0, 0, 0, 0, 0, 303, 66176, 0, 4268032, 307, 98947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24132 */ 0, 2319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2351104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24164 */ 0, 0, 0, 0, 0, 0, 0, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
  /* 24188 */ 308, 308, 308, 308, 308, 308, 308, 308, 0, 308, 0, 0, 0, 0, 122880, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24214 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 245760, 245760, 245760, 307, 0, 308,
  /* 24240 */ 4857856, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 0, 0,
  /* 24267 */ 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 139264, 147456, 0, 362, 0, 0, 0, 1,
  /* 24297 */ 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 0, 0, 305, 305, 295217, 305, 305, 305, 305,
  /* 24323 */ 305, 305, 305, 305, 305, 295217, 305, 295217, 295217, 295217, 295217, 295217, 295217, 295217, 305, 0, 305,
  /* 24340 */ 0, 305, 305, 305, 295217, 305, 305, 305, 295217, 295217, 305, 295217, 305, 305, 305, 305, 305, 295285,
  /* 24358 */ 295217, 295217, 295217, 295217, 295217, 305, 305, 305, 305, 305, 305, 295285, 295217, 295217, 295217, 305,
  /* 24374 */ 305, 305, 295285, 139264, 147456, 295217, 295217, 295217, 305, 305, 305, 305, 295217, 373, 305, 305, 305,
  /* 24391 */ 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
  /* 24412 */ 305, 305, 305, 305, 305, 305, 305, 305, 368, 305, 0, 295217, 305, 305, 295217, 305, 295217, 305, 131072,
  /* 24431 */ 305, 305, 305, 305, 295217, 305, 305, 305, 305, 305, 305, 295217, 305, 295217, 295217, 295217, 305, 305,
  /* 24449 */ 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 295217, 295217, 295217, 295217, 295217, 295217,
  /* 24466 */ 305, 305, 305, 305, 295217, 305, 305, 305, 305, 305, 305, 305, 305, 305, 295217, 305, 295217, 295217,
  /* 24484 */ 295217, 295217, 295217, 295217, 295217, 295217, 295285, 295285, 295285, 295285, 295285, 295285, 295285,
  /* 24497 */ 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295285, 295217,
  /* 24510 */ 295217, 295217, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0,
  /* 24534 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2377, 0, 0, 2380, 0, 0, 0, 0, 2385, 0, 0, 0, 0, 0, 2391, 0, 0, 0, 0, 0, 0,
  /* 24565 */ 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 4399803, 4399803, 0,
  /* 24590 */ 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24623 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24654 */ 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24687 */ 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 1349, 529, 529, 529, 1358, 529, 529, 529, 529, 529, 529,
  /* 24708 */ 529, 529, 529, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 319488, 319488,
  /* 24734 */ 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488,
  /* 24747 */ 319488, 319488, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 319488, 0, 0, 0, 0, 0,
  /* 24774 */ 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 319488,
  /* 24801 */ 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818, 0, 0, 0, 0, 0,
  /* 24834 */ 319488, 319488, 319488, 0, 24578, 3, 0, 0, 4366336, 253952, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0,
  /* 24855 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3162, 0, 3163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24888 */ 0, 2794, 2795, 0, 2797, 0, 2799, 0, 0, 0, 0, 0, 0, 0, 0, 2804, 0, 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0,
  /* 24914 */ 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0,
  /* 24946 */ 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 358, 0, 0, 402, 0, 0, 0, 0, 0, 139264,
  /* 24975 */ 147456, 402, 0, 413, 0, 426, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25005 */ 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25037 */ 0, 0, 0, 0, 1277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25070 */ 0, 0, 0, 0, 0, 0, 0, 2353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 57904, 538, 57904, 538,
  /* 25100 */ 538, 57904, 538, 538, 57927, 57904, 538, 538, 57904, 57904, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25124 */ 0, 0, 0, 0, 327680, 327680, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 49724, 0, 0, 0, 0, 0, 0, 0,
  /* 25150 */ 49724, 49724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 327680, 327680, 1, 24578,
  /* 25176 */ 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25205 */ 0, 3216, 3217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 3946, 529, 529, 529, 529, 529,
  /* 25229 */ 529, 3952, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 61305, 57894, 327680, 327680,
  /* 25245 */ 327680, 327680, 327680, 327680, 335872, 327680, 327680, 327680, 335872, 327680, 327680, 327680, 327680,
  /* 25258 */ 327680, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25288 */ 0, 662, 0, 0, 662, 0, 0, 0, 828, 0, 0, 0, 662, 0, 0, 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0,
  /* 25317 */ 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 992, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25347 */ 0, 0, 0, 0, 0, 344064, 344064, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 344064, 344064, 1, 24578, 3,
  /* 25371 */ 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25400 */ 3482, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3950, 529, 529, 529, 529,
  /* 25423 */ 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25445 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0,
  /* 25475 */ 0, 352256, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 352256, 0, 0, 352256, 352256, 352256, 0, 352256, 0,
  /* 25497 */ 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256,
  /* 25510 */ 352256, 352256, 352256, 352256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1066, 0, 0, 0,
  /* 25537 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 352256, 352256, 352256,
  /* 25549 */ 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25576 */ 0, 0, 0, 0, 0, 3693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 1, 293, 3, 0, 0, 0, 299, 0, 0, 0,
  /* 25608 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 297, 0, 0, 0, 0, 0, 0, 0,
  /* 25641 */ 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448, 360448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25668 */ 360448, 360448, 360448, 1, 0, 3, 155943, 155943, 297, 0, 637, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0,
  /* 25689 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5767168, 0, 0, 0, 0, 4857856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25720 */ 529, 529, 529, 529, 1379, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 25741 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2471, 2472, 529, 529, 529, 57944, 57944, 57944,
  /* 25760 */ 57944, 57944, 57944, 59007, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 25775 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 25790 */ 57944, 60756, 57944, 57944, 57944, 57944, 57917, 57917, 60373, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 25805 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 25820 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59507, 529, 529, 529, 57894, 57894,
  /* 25836 */ 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405,
  /* 25868 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 3469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25901 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 25922 */ 529, 529, 529, 529, 529, 529, 1958, 529, 529, 1961, 529, 529, 529, 529, 529, 3500, 529, 529, 529, 529,
  /* 25942 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 25963 */ 529, 529, 2470, 529, 529, 529, 529, 529, 57917, 57917, 57917, 57917, 60926, 57917, 57917, 57917, 57917,
  /* 25980 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 25995 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60395, 57917, 57917, 0, 0, 0, 0,
  /* 26012 */ 3683, 0, 0, 0, 0, 3688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 57894, 529,
  /* 26042 */ 57894, 529, 529, 57894, 529, 529, 57917, 57894, 529, 529, 57894, 57894, 3704, 529, 529, 529, 3707, 529,
  /* 26060 */ 529, 529, 529, 529, 529, 529, 529, 529, 3715, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 26081 */ 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58786, 57894,
  /* 26098 */ 57894, 57894, 58790, 529, 529, 529, 529, 529, 529, 529, 57894, 61075, 57894, 57894, 57894, 61078, 57894,
  /* 26115 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61086, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 26130 */ 57894, 57894, 57894, 57894, 59386, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 26145 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58858, 57894, 57894, 57894,
  /* 26160 */ 57894, 57894, 57894, 57894, 57894, 50679, 58776, 992, 61115, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 26175 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 26190 */ 57917, 57917, 57917, 57917, 57917, 57944, 61133, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26212 */ 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894,
  /* 26233 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61136, 57944,
  /* 26248 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61144, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 26263 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 26278 */ 60091, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 3681, 0, 0, 3835, 0, 0, 0, 0,
  /* 26297 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 26324 */ 529, 529, 1363, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3857, 529, 529, 529, 3858, 3859,
  /* 26344 */ 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 26361 */ 57894, 57894, 57894, 57894, 61219, 57894, 57894, 57894, 57894, 61220, 61221, 57894, 57894, 57894, 57894,
  /* 26376 */ 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 26391 */ 57917, 57917, 57917, 61238, 57917, 57917, 57917, 57917, 57917, 57917, 59450, 59451, 57917, 57917, 57917,
  /* 26406 */ 57917, 59458, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 26421 */ 57917, 57917, 57917, 59473, 57917, 57917, 57917, 61239, 61240, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 26436 */ 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 26451 */ 57944, 61257, 57944, 57944, 57944, 57944, 61258, 61259, 57894, 57894, 57894, 57894, 57894, 61311, 57894,
  /* 26466 */ 57894, 57894, 61315, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 61321, 57917, 57917, 57917, 57917,
  /* 26481 */ 57917, 57917, 61327, 57917, 57917, 57917, 61331, 57917, 57944, 57944, 57944, 57944, 0, 0, 529, 529, 57894,
  /* 26498 */ 57894, 57917, 57917, 57944, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 57894, 57917, 57944, 0, 529,
  /* 26515 */ 57894, 57917, 57944, 0, 529, 57944, 57944, 57944, 57944, 61337, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 26531 */ 61343, 57944, 57944, 57944, 61347, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 3838,
  /* 26554 */ 0, 0, 3841, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1350, 529,
  /* 26581 */ 529, 529, 529, 529, 529, 1365, 529, 529, 529, 1370, 529, 0, 0, 0, 0, 4018, 529, 529, 529, 529, 529, 529,
  /* 26603 */ 529, 529, 529, 529, 529, 529, 529, 529, 61377, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 26620 */ 57894, 57894, 57894, 57894, 58848, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 26635 */ 57894, 57894, 57894, 57894, 57894, 57894, 50679, 58776, 992, 57894, 57894, 57894, 61393, 57917, 57917,
  /* 26650 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61409, 57944,
  /* 26665 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529,
  /* 26681 */ 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 3148, 0, 0, 57894, 57894, 57894, 57894, 57894,
  /* 26701 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 529, 529,
  /* 26719 */ 529, 529, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944,
  /* 26734 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 57894,
  /* 26753 */ 57894, 57917, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26784 */ 0, 1244, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 376832, 376832, 0, 0, 0,
  /* 26812 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 681, 0, 0, 0, 0, 0, 0, 0,
  /* 26845 */ 0, 422, 422, 422, 422, 598, 598, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
  /* 26866 */ 422, 422, 422, 422, 422, 0, 422, 0, 0, 422, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0,
  /* 26890 */ 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26920 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 367, 0, 297, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0,
  /* 26952 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0,
  /* 26985 */ 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393687, 393687,
  /* 27014 */ 393687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 662, 0, 0, 529, 844, 529, 529, 529, 859, 529, 529, 529,
  /* 27040 */ 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 0, 393687, 0, 393687, 393687, 393687, 0, 393687, 393687,
  /* 27060 */ 393687, 393687, 393687, 393687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1321, 0, 0, 0, 0,
  /* 27088 */ 0, 0, 0, 0, 0, 0, 0, 0, 393687, 393687, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0,
  /* 27113 */ 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 704, 0, 0, 0, 0,
  /* 27142 */ 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27175 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 423, 0, 0, 0, 0, 0, 423, 423, 423, 423, 423,
  /* 27202 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 0,
  /* 27223 */ 423, 0, 0, 423, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 306, 307, 308, 0, 0, 0, 0,
  /* 27248 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 303104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27280 */ 0, 750, 423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 516096,
  /* 27312 */ 0, 0, 0, 1153, 1727, 1728, 0, 0, 0, 1734, 1735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27342 */ 0, 0, 0, 0, 0, 0, 0, 2388, 0, 0, 0, 0, 0, 2295, 0, 0, 0, 0, 2297, 1735, 2298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27372 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2416, 0, 0, 0, 0, 0, 529, 529, 529, 2504, 0, 0, 0,
  /* 27402 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 27417 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58829, 57894, 57894,
  /* 27432 */ 57894, 57894, 529, 529, 529, 529, 529, 529, 529, 2504, 2938, 0, 0, 0, 0, 57894, 57894, 57894, 57894,
  /* 27451 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 27466 */ 60341, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 2593, 3005, 0,
  /* 27482 */ 0, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 27499 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 27514 */ 60710, 57917, 57944, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27543 */ 417792, 310, 311, 0, 0, 0, 0, 0, 0, 0, 1829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27574 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27605 */ 417792, 0, 0, 417792, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 3941, 529, 529, 529, 529, 3945, 529, 529, 529, 529,
  /* 27628 */ 529, 529, 529, 529, 529, 3954, 529, 529, 61300, 57894, 57894, 57894, 57894, 61304, 57894, 57894, 57894,
  /* 27645 */ 57894, 57894, 57894, 59416, 59417, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 27660 */ 57894, 57894, 57894, 57894, 50679, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 27675 */ 59486, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 27690 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59983, 57917, 57917, 57917, 57917, 57917,
  /* 27705 */ 57917, 57917, 57917, 417792, 418102, 417792, 1, 24578, 3, 0, 0, 4366972, 0, 0, 0, 0, 0, 303, 304, 311296,
  /* 27725 */ 4268032, 307, 308, 0, 434176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5627904, 5652480, 0, 5701632, 0, 0, 0,
  /* 27749 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27780 */ 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 4399804, 0, 0, 0, 0, 0, 0, 0, 0, 661, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27810 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3677, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144,
  /* 27836 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6275072, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 27847 */ 4358144, 4358144, 4358144, 4358144, 0, 916, 915, 915, 915, 915, 915, 4858771, 4875155, 915, 915, 915, 915,
  /* 27864 */ 915, 915, 915, 915, 915, 915, 6300563, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 0, 0, 991,
  /* 27885 */ 991, 991, 4826079, 991, 991, 991, 991, 915, 5751699, 915, 915, 915, 915, 915, 5874579, 915, 915, 915, 915,
  /* 27904 */ 915, 915, 915, 915, 915, 915, 915, 6275987, 915, 915, 915, 915, 915, 915, 915, 915, 915, 0, 0, 992, 991,
  /* 27925 */ 5465055, 991, 5481439, 5563359, 991, 991, 991, 5637087, 991, 5686239, 991, 991, 5751775, 991, 991, 991,
  /* 27941 */ 991, 991, 5874655, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 6276063, 4358144, 4358144,
  /* 27958 */ 6463488, 0, 0, 0, 0, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 4932499, 4940691, 915, 915,
  /* 27978 */ 915, 915, 915, 915, 5055379, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 6325139, 991, 991, 5006303,
  /* 27997 */ 991, 991, 991, 5120991, 5137375, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 6325215, 4359059,
  /* 28014 */ 4359059, 5817235, 915, 5858195, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 6120339,
  /* 28032 */ 915, 6169491, 915, 915, 915, 915, 915, 6243219, 915, 6292371, 915, 6316947, 915, 915, 915, 915, 5890963,
  /* 28049 */ 915, 915, 915, 6030227, 915, 915, 915, 915, 6161299, 915, 915, 915, 915, 915, 915, 915, 6407059, 991, 991,
  /* 28068 */ 991, 991, 991, 991, 991, 991, 4998111, 991, 6317023, 991, 991, 991, 991, 991, 991, 991, 991, 991, 6464479,
  /* 28087 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28098 */ 4932499, 4940691, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5055379, 4359059, 4359059,
  /* 28109 */ 4359059, 4359059, 4359059, 4359059, 5890963, 4359059, 4359059, 4359059, 6030227, 4359059, 4359059,
  /* 28120 */ 4359059, 4359059, 6161299, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 6407059,
  /* 28131 */ 4358144, 4358144, 4358144, 915, 915, 915, 4890624, 0, 0, 0, 0, 0, 0, 57917, 57917, 57917, 57917, 57917,
  /* 28149 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 28164 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60689, 57917, 57917, 4359059, 4359059,
  /* 28178 */ 4359059, 5792659, 5817235, 4359059, 5858195, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28189 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 6120339, 4359059, 6169491, 4359059,
  /* 28200 */ 4359059, 4359059, 4359059, 4359059, 6243219, 4359059, 6292371, 4359059, 4359059, 4359059, 4916115,
  /* 28211 */ 4359059, 4957075, 4973459, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5071763, 4359059,
  /* 28222 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5219219, 4359059, 5268371, 4359059, 4359059,
  /* 28233 */ 5309331, 5317523, 4359059, 4359059, 4359059, 5432211, 6316947, 4359059, 4359059, 4359059, 4359059,
  /* 28244 */ 4359059, 4359059, 4359059, 4359059, 4359059, 6464403, 4358144, 4358144, 4358144, 4358144, 4358144, 915,
  /* 28256 */ 915, 915, 915, 915, 0, 0, 0, 0, 0, 0, 0, 0, 4956160, 4964352, 0, 0, 0, 0, 0, 0, 57917, 57917, 57917,
  /* 28279 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 28294 */ 57917, 57917, 57917, 57917, 57917, 60368, 57917, 57917, 57917, 57917, 57917, 59994, 57917, 57917, 57917,
  /* 28309 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60007, 57917, 57917, 57917, 57917,
  /* 28324 */ 57917, 60011, 60012, 60013, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59518, 57917, 57917, 57917,
  /* 28339 */ 57917, 57917, 57917, 59524, 57917, 57917, 57917, 57917, 57917, 57917, 57894, 57944, 57944, 57944, 57944,
  /* 28354 */ 57944, 59536, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60428, 57944, 57944,
  /* 28369 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 28384 */ 57944, 57944, 57944, 57944, 61148, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 28399 */ 57944, 57944, 57944, 4358144, 4358144, 6389760, 4358144, 4358144, 6430720, 6438912, 0, 0, 0, 0, 0, 0,
  /* 28415 */ 4785043, 915, 915, 915, 4850579, 915, 915, 915, 915, 915, 4916115, 915, 4957075, 4973459, 915, 915, 915,
  /* 28432 */ 915, 915, 915, 915, 915, 5260179, 915, 915, 915, 915, 915, 915, 915, 915, 5415827, 915, 5448595, 915,
  /* 28450 */ 5464979, 915, 5481363, 5563283, 915, 915, 915, 5637011, 915, 5686163, 915, 915, 5071763, 915, 915, 915,
  /* 28466 */ 915, 915, 915, 915, 5219219, 915, 5268371, 915, 915, 5309331, 5317523, 915, 915, 915, 5432211, 915,
  /* 28482 */ 5489555, 915, 915, 915, 915, 915, 915, 915, 915, 915, 5800851, 915, 915, 5882771, 915, 915, 915, 915, 915,
  /* 28501 */ 915, 915, 915, 915, 6103955, 915, 915, 915, 6185875, 915, 915, 915, 6284179, 915, 915, 6333331, 915, 915,
  /* 28519 */ 915, 6390675, 915, 915, 6431635, 6439827, 0, 0, 0, 0, 0, 0, 4785119, 991, 991, 991, 4850655, 991, 991,
  /* 28538 */ 991, 991, 991, 4916191, 991, 4957151, 4973535, 991, 991, 991, 991, 991, 991, 5071839, 991, 991, 991, 991,
  /* 28556 */ 991, 991, 991, 991, 991, 0, 915, 4359059, 4359059, 4359059, 4359059, 4359059, 4858771, 4875155, 4359059,
  /* 28571 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28582 */ 4359059, 5260179, 4359059, 5489555, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28593 */ 4359059, 4359059, 5800851, 4359059, 4359059, 5882771, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28604 */ 4359059, 4359059, 4359059, 4359059, 6103955, 4359059, 4359059, 4359059, 6185875, 4359059, 4359059,
  /* 28615 */ 4359059, 0, 5013504, 0, 0, 6053888, 0, 0, 0, 0, 0, 0, 0, 0, 6012928, 4358144, 4358144, 5013504, 4358144,
  /* 28634 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144,
  /* 28645 */ 6284179, 4359059, 4359059, 6333331, 4359059, 4359059, 4359059, 6390675, 4359059, 4359059, 6431635,
  /* 28656 */ 6439827, 4358144, 4358144, 4358144, 6266880, 6488064, 915, 915, 915, 6267795, 6488979, 0, 0, 0, 0, 0, 0,
  /* 28673 */ 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488,
  /* 28704 */ 319488, 0, 0, 0, 0, 0, 0, 5824512, 5865472, 4358144, 4358144, 5922816, 4358144, 4358144, 6021120, 4358144,
  /* 28720 */ 6037504, 4358144, 4358144, 6078464, 6111232, 4358144, 6176768, 6209536, 6234112, 4358144, 4358144,
  /* 28731 */ 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 915, 915, 4842387, 915, 915, 915, 915, 6087571,
  /* 28746 */ 4817887, 991, 991, 991, 991, 6087647, 4817811, 4359059, 4359059, 4359059, 4359059, 6087571, 0, 5087232, 0,
  /* 28761 */ 5931008, 4358144, 5332992, 5980160, 4358144, 915, 5333907, 5981075, 915, 991, 5333983, 5981151, 915,
  /* 28774 */ 4899731, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 5112723, 915, 915, 915, 915, 915, 5284755,
  /* 28793 */ 915, 915, 915, 915, 5473171, 5522323, 915, 915, 915, 915, 5596051, 5710739, 5718931, 915, 5825427,
  /* 28808 */ 5866387, 915, 915, 5923731, 915, 915, 6022035, 915, 6038419, 915, 915, 6079379, 6112147, 915, 6177683,
  /* 28823 */ 6210451, 915, 6235027, 915, 915, 915, 915, 915, 915, 915, 0, 0, 991, 991, 991, 991, 991, 6104031, 991,
  /* 28842 */ 991, 991, 6185951, 991, 991, 991, 6284255, 991, 991, 6333407, 991, 991, 991, 6390751, 991, 991, 6431711,
  /* 28859 */ 6439903, 4785043, 4359059, 4359059, 4359059, 4850579, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28870 */ 4359059, 4359059, 4359059, 6300563, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 28881 */ 4359059, 4359059, 4359059, 4359059, 4358144, 4358144, 4358144, 4358144, 4358144, 915, 915, 915, 915, 915,
  /* 28895 */ 0, 0, 0, 0, 0, 0, 0, 3686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3699, 3700, 0, 0, 0, 0, 529,
  /* 28927 */ 529, 4020, 529, 529, 529, 529, 4025, 529, 529, 529, 529, 4030, 529, 529, 57894, 57894, 61379, 57894,
  /* 28945 */ 57894, 57894, 57894, 61384, 57894, 57894, 57894, 57894, 61389, 4842463, 991, 991, 991, 4899807, 991, 991,
  /* 28961 */ 991, 991, 991, 991, 991, 991, 991, 991, 991, 5112799, 991, 991, 991, 991, 991, 5284831, 991, 991, 991,
  /* 28980 */ 991, 5473247, 5522399, 991, 991, 991, 991, 991, 991, 991, 5211103, 991, 991, 991, 991, 5293023, 991, 991,
  /* 28998 */ 991, 991, 5366751, 991, 991, 991, 5456863, 991, 991, 991, 991, 991, 5555167, 5571551, 5579743, 5620703,
  /* 29014 */ 5669855, 991, 5596127, 5710815, 5719007, 991, 5825503, 5866463, 991, 991, 5923807, 991, 991, 6022111, 991,
  /* 29029 */ 6038495, 991, 991, 6079455, 6112223, 991, 6177759, 6210527, 991, 6235103, 991, 991, 991, 991, 991, 991,
  /* 29045 */ 991, 4359059, 4359059, 4359059, 4359059, 4359059, 5194643, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 29057 */ 4359059, 4359059, 4359059, 4907008, 0, 5079040, 6094848, 5742592, 0, 0, 0, 0, 0, 4358144, 4907008,
  /* 29072 */ 4358144, 5079040, 4359059, 4842387, 4359059, 4359059, 4359059, 4899731, 4359059, 4359059, 4359059,
  /* 29083 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5112723, 4359059, 4359059,
  /* 29094 */ 4359059, 4359059, 4359059, 5284755, 4359059, 4359059, 4359059, 4359059, 5473171, 5522323, 4359059,
  /* 29105 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5211027, 4359059, 4359059, 4359059, 4359059,
  /* 29116 */ 5292947, 4359059, 4359059, 4359059, 4359059, 5366675, 4359059, 4359059, 4359059, 5456787, 4359059,
  /* 29127 */ 4359059, 4359059, 4359059, 4359059, 5555091, 5571475, 5579667, 5620627, 5669779, 4359059, 4359059,
  /* 29138 */ 5596051, 5710739, 5718931, 4359059, 5825427, 5866387, 4359059, 4359059, 5923731, 4359059, 4359059,
  /* 29149 */ 6022035, 4359059, 6038419, 4359059, 4359059, 6079379, 6112147, 4359059, 6177683, 6210451, 4359059,
  /* 29160 */ 6235027, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 29171 */ 6275987, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4923392,
  /* 29182 */ 4358144, 4358144, 4358144, 4358144, 4358144, 915, 4924307, 915, 915, 915, 915, 4358144, 4358144, 4358144,
  /* 29196 */ 4358144, 6406144, 915, 915, 915, 915, 915, 915, 915, 915, 4998035, 915, 915, 5038995, 915, 915, 915,
  /* 29213 */ 5096339, 5104531, 915, 915, 5202835, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 5628819,
  /* 29231 */ 5653395, 915, 5702547, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915,
  /* 29250 */ 915, 5178259, 915, 915, 915, 915, 915, 5243795, 915, 915, 915, 915, 915, 915, 915, 5342099, 991, 5039071,
  /* 29268 */ 991, 991, 991, 5096415, 5104607, 991, 991, 5202911, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991,
  /* 29287 */ 5891039, 991, 991, 991, 6030303, 991, 991, 991, 991, 6161375, 991, 991, 991, 5792735, 5817311, 991,
  /* 29303 */ 5858271, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 6120415, 991, 6169567, 991, 991,
  /* 29322 */ 991, 991, 991, 6243295, 991, 6292447, 991, 991, 5219295, 991, 5268447, 991, 991, 5309407, 5317599, 991,
  /* 29338 */ 991, 991, 5432287, 991, 5489631, 991, 991, 991, 991, 991, 991, 991, 991, 991, 5800927, 991, 991, 5882847,
  /* 29356 */ 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 5178335, 991, 991, 991,
  /* 29376 */ 991, 991, 5243871, 991, 991, 991, 991, 991, 991, 991, 5342175, 991, 4358144, 6307840, 4358144, 4358144,
  /* 29392 */ 6356992, 6381568, 6397952, 4801427, 4809619, 915, 915, 4891539, 915, 4948883, 915, 915, 915, 5047187, 915,
  /* 29407 */ 915, 915, 915, 5186451, 915, 5235603, 5301139, 915, 915, 5407635, 5530515, 915, 915, 915, 991, 991, 991,
  /* 29424 */ 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 4359059, 4359059, 4359059, 4359059,
  /* 29441 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4358144, 4358144,
  /* 29452 */ 4358144, 4358144, 4358144, 4358144, 0, 915, 915, 915, 915, 915, 915, 0, 0, 0, 0, 0, 0, 915, 915, 5899155,
  /* 29472 */ 915, 915, 915, 915, 915, 915, 915, 915, 6308755, 915, 915, 6357907, 6382483, 6398867, 4801503, 4809695,
  /* 29488 */ 991, 991, 4891615, 991, 4948959, 991, 991, 991, 5047263, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991,
  /* 29507 */ 991, 5628895, 5653471, 991, 5702623, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991,
  /* 29526 */ 991, 991, 991, 991, 0, 0, 0, 0, 915, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 29542 */ 4359059, 4359059, 5186527, 991, 5235679, 5301215, 991, 991, 5407711, 5530591, 991, 991, 991, 991, 5899231,
  /* 29557 */ 991, 991, 991, 991, 991, 991, 991, 991, 6308831, 991, 991, 6357983, 6382559, 6398943, 4801427, 4809619,
  /* 29573 */ 4359059, 4359059, 4891539, 4359059, 4948883, 4359059, 4359059, 4359059, 5047187, 4359059, 4359059,
  /* 29584 */ 4359059, 4359059, 5186451, 4359059, 5235603, 5301139, 4359059, 4359059, 5407635, 5530515, 4359059,
  /* 29595 */ 4359059, 4359059, 4359059, 5899155, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 29606 */ 4359059, 6308755, 4359059, 4359059, 6357907, 6382483, 6398867, 5021696, 4358144, 4358144, 5022611, 915,
  /* 29618 */ 915, 0, 4980736, 0, 0, 0, 0, 0, 5373952, 5734400, 6045696, 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800,
  /* 29637 */ 5906432, 0, 5537792, 4358144, 4358144, 4358144, 4358144, 5324800, 5373952, 5537792, 5545984, 5734400,
  /* 29649 */ 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 6348800, 915, 4866963, 4883347,
  /* 29661 */ 915, 4981651, 915, 915, 915, 915, 915, 915, 915, 915, 5325715, 5587935, 5735391, 5972959, 991, 6046687,
  /* 29677 */ 991, 6071263, 991, 991, 991, 991, 6349791, 4359059, 4866963, 4883347, 4359059, 4981651, 4359059, 4359059,
  /* 29691 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5325715, 5374867, 5538707, 5546899, 5587859,
  /* 29702 */ 5735315, 5972883, 915, 6046611, 915, 6071187, 915, 915, 915, 915, 6349715, 991, 4867039, 4883423, 991,
  /* 29717 */ 4981727, 991, 991, 991, 991, 991, 991, 991, 991, 5325791, 5374943, 5538783, 5546975, 4359059, 6046611,
  /* 29732 */ 4359059, 6071187, 4359059, 4359059, 4359059, 4359059, 6349715, 4358144, 6144000, 915, 6144915, 0, 4988928,
  /* 29745 */ 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 5693440, 0, 6496256, 5144576, 5136384, 0,
  /* 29767 */ 5914624, 4358144, 4358144, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144,
  /* 29778 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6324224, 915, 915, 5006227, 915, 915, 915,
  /* 29792 */ 5120915, 5137299, 5006227, 4359059, 4359059, 4359059, 5120915, 5137299, 4359059, 4359059, 4359059,
  /* 29803 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 6325139, 5914624, 5915539, 0, 0, 0, 0, 0,
  /* 29818 */ 5513216, 5783552, 0, 3681, 0, 0, 0, 0, 3837, 0, 0, 0, 0, 0, 3842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529,
  /* 29845 */ 529, 529, 529, 529, 3849, 529, 529, 529, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 29863 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 915, 915, 915, 915, 915,
  /* 29877 */ 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 915, 990, 991, 991, 991,
  /* 29898 */ 991, 915, 915, 5014419, 915, 915, 915, 915, 915, 915, 915, 915, 915, 6054803, 915, 915, 915, 991, 991,
  /* 29917 */ 5014495, 991, 991, 991, 991, 991, 991, 991, 991, 991, 6054879, 991, 991, 991, 991, 991, 991, 6407135,
  /* 29935 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4998035, 4359059, 4359059,
  /* 29946 */ 5038995, 4359059, 4359059, 4359059, 5096339, 5104531, 4359059, 4359059, 5202835, 4359059, 4359059,
  /* 29957 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 5415827, 4359059, 5448595, 4359059, 5464979,
  /* 29968 */ 4359059, 5481363, 5563283, 4359059, 4359059, 4359059, 5637011, 4359059, 5686163, 4359059, 4359059,
  /* 29979 */ 5751699, 4359059, 4359059, 4359059, 4359059, 4359059, 5874579, 4359059, 4359059, 4359059, 5014419,
  /* 29990 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 6054803, 4359059,
  /* 30001 */ 4359059, 4359059, 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30019 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4931584, 4939776, 4358144, 4358144, 4358144, 4358144,
  /* 30030 */ 4358144, 4358144, 5054464, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30041 */ 5193728, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 915, 915, 915, 915, 915, 5194643,
  /* 30055 */ 915, 915, 915, 915, 915, 915, 915, 915, 991, 991, 991, 991, 991, 5194719, 991, 991, 991, 991, 991, 991,
  /* 30075 */ 991, 991, 991, 6300639, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 5809043, 4359059, 4359059,
  /* 30093 */ 4359059, 4826003, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 30104 */ 5628819, 5653395, 4359059, 5702547, 4359059, 4359059, 5809043, 4359059, 4359059, 4359059, 4359059,
  /* 30115 */ 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059, 4359059,
  /* 30126 */ 4359059, 5178259, 4359059, 4359059, 4359059, 4359059, 4359059, 5243795, 4359059, 4359059, 4359059,
  /* 30137 */ 4359059, 4359059, 4359059, 4359059, 5342099, 4359059, 4359059, 4359059, 4358144, 5226496, 4358144,
  /* 30148 */ 5742592, 4358144, 4358144, 4358144, 6094848, 915, 4907923, 915, 5079955, 915, 5227411, 915, 5743507, 915,
  /* 30162 */ 915, 915, 6095763, 915, 991, 4907999, 991, 5080031, 991, 5227487, 991, 5743583, 991, 991, 991, 991, 991,
  /* 30179 */ 4858847, 4875231, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 991, 5260255, 991, 991, 991,
  /* 30198 */ 991, 991, 991, 991, 991, 5415903, 991, 5448671, 6095839, 991, 4359059, 4907923, 4359059, 5079955, 4359059,
  /* 30213 */ 5227411, 4359059, 5743507, 4359059, 4359059, 4359059, 6095763, 4359059, 5062656, 0, 0, 0, 0, 0, 4358144,
  /* 30228 */ 5062656, 4358144, 4358144, 4358144, 4358144, 4358144, 915, 5063571, 915, 915, 915, 5211027, 915, 915, 915,
  /* 30243 */ 915, 5292947, 915, 915, 915, 915, 5366675, 915, 915, 915, 5456787, 915, 915, 915, 915, 915, 5555091,
  /* 30260 */ 5571475, 5579667, 5620627, 5669779, 915, 915, 915, 5792659, 915, 915, 915, 6226835, 991, 5063647, 991,
  /* 30275 */ 991, 991, 991, 991, 6226911, 4359059, 5063571, 4359059, 4359059, 4359059, 4359059, 4359059, 6226835, 0,
  /* 30289 */ 6086656, 0, 0, 0, 4816896, 4358144, 4358144, 4358144, 4358144, 6086656, 4817811, 6005651, 6005727,
  /* 30302 */ 6005651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3465, 0,
  /* 30334 */ 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 0,
  /* 30366 */ 0, 0, 0, 0, 0, 450560, 0, 0, 450560, 0, 450560, 450560, 450560, 450560, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0,
  /* 30390 */ 0, 450560, 0, 0, 0, 0, 0, 450560, 0, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560,
  /* 30407 */ 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30427 */ 0, 0, 0, 0, 0, 0, 0, 0, 1779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 450560, 1, 24578, 3, 0,
  /* 30455 */ 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
  /* 30483 */ 367, 367, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30516 */ 0, 0, 0, 0, 0, 0, 0, 2356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30540 */ 4358144, 4358144, 4358144, 6299648, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30551 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 304, 0,
  /* 30568 */ 0, 308, 0, 0, 0, 308, 0, 0, 0, 4931584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210112, 0, 5365760, 0,
  /* 30594 */ 5554176, 0, 0, 6316032, 0, 196608, 0, 0, 5816320, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30620 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 367, 367, 0, 0, 1214, 0, 6316032, 4358144, 4358144, 4358144, 4358144,
  /* 30641 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6463488, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0,
  /* 30654 */ 0, 0, 0, 0, 304, 0, 0, 308, 0, 0, 0, 4956160, 4964352, 0, 0, 0, 0, 0, 0, 57917, 57917, 57917, 57917,
  /* 30677 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60363, 57917,
  /* 30692 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59997, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 30707 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 30722 */ 57917, 57917, 60389, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 4358144, 4358144, 6389760,
  /* 30736 */ 4358144, 4358144, 6430720, 6438912, 916, 0, 0, 0, 916, 0, 4784128, 0, 0, 0, 4849664, 0, 0, 0, 0, 0,
  /* 30756 */ 4915200, 0, 4956160, 4972544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 0, 0, 663,
  /* 30783 */ 0, 0, 0, 0, 0, 0, 0, 663, 0, 5824512, 5865472, 4358144, 4358144, 5922816, 4358144, 4358144, 6021120,
  /* 30800 */ 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144, 6176768, 6209536, 6234112, 4358144,
  /* 30811 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 916, 0, 0, 0, 4841472, 0, 0, 0, 0, 0, 0, 0, 245760,
  /* 30830 */ 0, 0, 0, 245760, 0, 0, 245760, 245760, 245760, 0, 0, 0, 0, 0, 245760, 0, 245760, 245760, 0, 0, 0, 245760,
  /* 30852 */ 245760, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 245760, 0, 0, 245760, 0, 0, 245760, 0,
  /* 30877 */ 5718016, 0, 5824512, 5865472, 0, 0, 5922816, 0, 0, 6021120, 0, 6037504, 0, 0, 6078464, 6111232, 0,
  /* 30894 */ 6176768, 6209536, 0, 6234112, 0, 0, 0, 0, 0, 0, 0, 992, 0, 0, 0, 992, 0, 4784128, 0, 0, 0, 4849664, 0, 0,
  /* 30918 */ 0, 0, 0, 4915200, 0, 4956160, 4972544, 0, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 0, 5218304, 0,
  /* 30941 */ 5267456, 0, 0, 5308416, 5316608, 0, 0, 0, 5431296, 0, 5488640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5799936, 0, 0,
  /* 30964 */ 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 459183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459224, 459224, 459224,
  /* 30990 */ 459224, 459224, 459224, 459224, 459224, 459224, 459224, 459224, 459224, 459224, 459224, 459224, 459224,
  /* 31003 */ 459224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2306, 2307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31035 */ 0, 0, 0, 0, 0, 0, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348,
  /* 31052 */ 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348, 459348,
  /* 31065 */ 459348, 459224, 459380, 459224, 459224, 459380, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0,
  /* 31085 */ 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 425984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31114 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 507904, 0,
  /* 31146 */ 0, 0, 507904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 0, 0, 0, 0, 0, 0, 57917,
  /* 31175 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 31190 */ 60362, 57917, 57917, 57917, 57917, 57917, 60367, 57917, 57917, 57917, 57917, 57917, 57917, 60669, 57917,
  /* 31205 */ 57917, 57917, 57917, 57917, 57917, 60677, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 31220 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60703, 57917, 57917, 57917, 57917,
  /* 31235 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31258 */ 0, 0, 0, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904,
  /* 31273 */ 507904, 507904, 507904, 507904, 507904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2329, 0,
  /* 31299 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 507904, 507904, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303,
  /* 31325 */ 304, 0, 4268032, 307, 308, 0, 0, 442368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31354 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 808, 0, 0, 0, 0, 789, 0, 808, 0, 529, 847, 529, 529, 529, 529, 529, 529, 878,
  /* 31381 */ 880, 529, 529, 529, 529, 529, 529, 1, 24578, 3, 0, 0, 0, 0, 0, 516096, 0, 0, 0, 516096, 0, 0, 0, 0, 0, 0,
  /* 31407 */ 516096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31440 */ 0, 0, 0, 0, 2331, 0, 0, 0, 0, 2335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31472 */ 0, 516569, 516569, 516569, 516569, 516569, 516569, 516569, 516569, 516569, 516569, 516569, 516569, 516569,
  /* 31486 */ 516569, 516569, 516569, 516569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499712, 0, 0, 0,
  /* 31513 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 516569, 516569, 516569,
  /* 31525 */ 1, 24578, 0, 0, 0, 4366336, 0, 0, 548864, 0, 0, 303, 304, 0, 4268032, 307, 308, 409600, 0, 0, 0, 0, 0, 0,
  /* 31549 */ 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 529, 843, 529, 529, 529, 529, 529, 529, 875, 529, 529, 529, 529, 529, 529,
  /* 31574 */ 529, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 31586 */ 4358144, 4358144, 4358144, 4358144, 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552,
  /* 31601 */ 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 693, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31632 */ 0, 0, 0, 0, 0, 0, 2354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 4227366, 0, 0, 0, 0, 0, 0, 300,
  /* 31662 */ 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0, 0, 0, 0,
  /* 31696 */ 0, 0, 0, 0, 0, 540672, 0, 0, 540672, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31726 */ 0, 0, 0, 0, 0, 0, 0, 335, 336, 337, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 4227366, 0, 0, 4366336, 0, 0, 0, 0,
  /* 31754 */ 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1831, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31784 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385024, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 31805 */ 4358144, 4358144, 4358144, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307,
  /* 31827 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2351, 0, 0, 0, 0, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31860 */ 0, 0, 2406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2383, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31893 */ 0, 0, 1, 24578, 3, 155943, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31925 */ 0, 0, 0, 2417, 0, 0, 0, 57894, 57917, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917,
  /* 31943 */ 57894, 57894, 57944, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57944, 57944, 57894, 57894, 57894,
  /* 31958 */ 57894, 57944, 57944, 57894, 529, 57894, 57894, 57894, 57894, 57894, 57894, 60623, 57894, 57894, 60627,
  /* 31973 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60636, 57894, 57894, 57894, 57894,
  /* 31988 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 61317, 57917, 57917, 61319, 57917, 57917, 57917,
  /* 32003 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 61333, 1153, 1727, 0,
  /* 32019 */ 0, 0, 0, 1734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 303, 0,
  /* 32052 */ 0, 0, 0, 2295, 0, 0, 0, 0, 2297, 0, 2298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32084 */ 0, 0, 0, 0, 0, 3198, 0, 0, 0, 0, 3203, 0, 0, 0, 0, 0, 2835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32116 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 3005, 0, 0, 0, 0, 57917, 57917, 57917, 57917,
  /* 32143 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 32158 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58948, 57917, 57917, 57917, 0, 0, 0, 0,
  /* 32175 */ 1829, 0, 0, 0, 0, 0, 0, 0, 2374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32207 */ 2800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32239 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 367, 0, 0, 0, 0, 2310144, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
  /* 32269 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 57895, 57918, 57895,
  /* 32299 */ 57895, 57895, 57895, 57895, 57895, 57895, 57918, 57918, 57895, 57895, 57945, 57895, 57895, 57895, 57895,
  /* 32314 */ 57895, 57895, 57895, 57945, 57945, 57895, 57895, 57895, 57895, 57945, 57945, 57895, 529, 57895, 57895,
  /* 32329 */ 57895, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32355 */ 0, 0, 0, 0, 0, 0, 3187, 0, 0, 0, 0, 3192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3215, 0, 0, 3218, 0,
  /* 32386 */ 0, 0, 0, 0, 0, 0, 3222, 529, 529, 529, 529, 529, 529, 1, 24578, 3, 155944, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32413 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2803, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0,
  /* 32446 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 0, 573440, 573440, 573440, 0,
  /* 32473 */ 573440, 573440, 573440, 573440, 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
  /* 32498 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440,
  /* 32530 */ 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367,
  /* 32560 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440,
  /* 32579 */ 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440,
  /* 32592 */ 573440, 573440, 573440, 573440, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308,
  /* 32613 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 846,
  /* 32646 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 892, 529, 529, 0, 6356992, 3681, 0, 0, 0, 0, 0, 0,
  /* 32669 */ 0, 5496832, 0, 0, 0, 0, 0, 5611520, 0, 0, 0, 0, 0, 4947968, 5021696, 5529600, 0, 0, 5169152, 0, 0, 0,
  /* 32691 */ 4800512, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 638, 304, 0, 4268032, 641, 308, 0, 0, 0, 0,
  /* 32716 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 311, 0, 311, 0, 0, 0, 0, 0, 0,
  /* 32747 */ 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 0, 581632, 581632, 581632, 581632, 581632,
  /* 32770 */ 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 0, 0, 0,
  /* 32785 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389, 581632, 581632,
  /* 32816 */ 581632, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32842 */ 0, 0, 0, 0, 0, 0, 4399803, 4399803, 4399803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
  /* 32871 */ 0, 0, 803, 0, 0, 0, 0, 0, 0, 0, 803, 0, 3833, 4882432, 0, 0, 0, 0, 0, 0, 0, 0, 5939200, 0, 0, 5677056,
  /* 32897 */ 6365184, 4866048, 0, 6070272, 5545984, 5152768, 0, 0, 6144000, 4358144, 4866048, 4882432, 4358144,
  /* 32910 */ 4980736, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 32921 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 499712, 0, 0, 0, 0, 0, 0,
  /* 32937 */ 0, 0, 0, 0, 0, 0, 0, 0, 1886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 4358144,
  /* 32964 */ 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 4358144, 6348800, 4358144, 6144000, 0, 6144000, 0,
  /* 32977 */ 4988928, 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 3932, 0, 0, 0, 0, 0, 0, 5693440, 5005312, 4358144,
  /* 32997 */ 4358144, 4358144, 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 33008 */ 4358144, 4358144, 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3932, 0, 0, 0,
  /* 33026 */ 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2415, 0, 0,
  /* 33060 */ 0, 0, 0, 0, 0, 312, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33094 */ 0, 0, 3679, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0, 312, 0, 312, 313, 0, 312, 312, 313, 0, 0, 0, 0, 0, 0, 0,
  /* 33124 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 328, 376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0,
  /* 33155 */ 433, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 460, 474, 474, 474, 487, 487, 487, 487, 487, 487, 487, 487, 487, 507,
  /* 33180 */ 487, 487, 487, 487, 487, 487, 525, 487, 487, 487, 525, 487, 487, 487, 487, 487, 487, 530, 57896, 530,
  /* 33200 */ 57896, 530, 530, 57896, 530, 530, 57919, 57896, 530, 530, 57896, 57896, 57896, 1, 24578, 3, 155943,
  /* 33217 */ 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 646, 0, 0, 649, 650, 0, 0, 0, 0, 0,
  /* 33245 */ 0, 0, 4898816, 0, 5709824, 0, 0, 0, 5283840, 0, 0, 0, 0, 5251072, 0, 6414336, 5832704, 0, 5955584, 0, 0,
  /* 33266 */ 4358144, 4358144, 4841472, 4358144, 4358144, 4358144, 4898816, 4358144, 4358144, 4358144, 4358144,
  /* 33277 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5111808, 4358144, 4358144, 4358144,
  /* 33288 */ 4358144, 4358144, 5283840, 4358144, 4358144, 4358144, 4358144, 5472256, 5521408, 4358144, 4358144,
  /* 33299 */ 4358144, 5595136, 5709824, 5718016, 4358144, 57896, 57919, 57896, 57896, 57896, 57896, 57896, 57896,
  /* 33312 */ 57896, 57919, 57919, 57896, 57896, 57946, 57896, 57896, 57896, 57896, 57896, 57896, 57896, 57946, 57946,
  /* 33327 */ 57896, 57896, 57896, 57896, 57946, 57946, 57896, 530, 57896, 0, 747, 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 646,
  /* 33349 */ 0, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 0, 0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 1829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33382 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 367, 367, 367, 0, 0, 703, 0,
  /* 33413 */ 0, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0, 778, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 795, 0, 0,
  /* 33445 */ 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 645, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33478 */ 0, 0, 805, 0, 810, 0, 0, 835, 795, 0, 0, 0, 0, 0, 839, 840, 0, 0, 0, 0, 795, 529, 529, 849, 853, 529, 529,
  /* 33505 */ 865, 529, 529, 529, 881, 529, 886, 529, 894, 529, 529, 529, 0, 2507, 0, 0, 57894, 57894, 57894, 57894,
  /* 33525 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 33540 */ 57894, 57894, 57894, 57894, 57894, 57894, 59899, 57894, 57894, 57894, 57894, 57894, 57894, 897, 529, 529,
  /* 33556 */ 911, 529, 57894, 57894, 57894, 58268, 58272, 57894, 57894, 58284, 57894, 57894, 57894, 58300, 57894,
  /* 33571 */ 58305, 57894, 58313, 57894, 58316, 57894, 57894, 58330, 57894, 0, 57917, 57917, 57917, 58344, 58348,
  /* 33586 */ 57917, 57917, 58360, 57917, 57917, 57917, 58376, 57917, 58381, 57917, 58389, 57917, 58392, 57917, 57917,
  /* 33601 */ 58406, 57917, 0, 0, 0, 0, 58305, 57944, 57944, 57944, 58419, 58423, 57944, 57944, 58435, 57944, 57944,
  /* 33618 */ 57944, 57944, 57944, 57944, 57944, 57944, 60079, 57944, 57944, 57944, 57944, 57944, 60085, 57944, 57944,
  /* 33633 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 33648 */ 0, 0, 0, 0, 0, 0, 0, 4153, 0, 0, 0, 529, 529, 529, 529, 529, 57944, 57944, 58451, 57944, 58456, 57944,
  /* 33670 */ 58464, 57944, 58467, 57944, 57944, 58481, 57944, 849, 853, 1143, 897, 529, 529, 0, 58272, 58268, 58493,
  /* 33687 */ 58316, 57894, 57894, 155943, 1153, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 33707 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60361, 57917, 57917, 60364, 60365, 57917,
  /* 33722 */ 57917, 57917, 57917, 57917, 60370, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33750 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 1218, 0, 0, 0, 0, 1223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33783 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 0, 0, 0, 0, 1247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33816 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 0, 1281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1292, 0,
  /* 33849 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 816, 0, 0, 0, 0, 0, 0, 821, 0, 0,
  /* 33881 */ 821, 0, 0, 0, 0, 0, 821, 821, 0, 0, 0, 801, 0, 0, 529, 529, 529, 529, 529, 1414, 529, 529, 529, 529, 529,
  /* 33906 */ 529, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 33923 */ 57894, 57894, 57894, 57894, 59889, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 33938 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59389, 57894, 57894, 57894, 57894, 57894,
  /* 33953 */ 59396, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59405, 57894, 1153, 1727, 0, 0, 0, 0, 1734,
  /* 33971 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 0, 0,
  /* 34005 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 776, 0, 0, 0, 0, 0, 1797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34039 */ 0, 1811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399804, 311296, 4399804, 0, 0, 0, 311296, 0, 0, 0, 0,
  /* 34066 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1887, 0, 0, 0, 1889, 0, 0, 1890, 0,
  /* 34097 */ 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 34118 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917,
  /* 34133 */ 57917, 57917, 57917, 57917, 57917, 57917, 529, 529, 529, 529, 529, 1903, 529, 529, 529, 529, 529, 529,
  /* 34151 */ 529, 529, 529, 1916, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 34172 */ 2489, 529, 529, 529, 2492, 529, 529, 529, 529, 529, 2497, 529, 529, 529, 529, 57894, 57894, 57894, 57894,
  /* 34191 */ 59346, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59359, 57894, 57894, 57894, 57894,
  /* 34206 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 61104,
  /* 34221 */ 57917, 57917, 57917, 61107, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 34236 */ 57917, 59446, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59459, 57917, 57917, 57917,
  /* 34251 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 34266 */ 0, 0, 0, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59542, 57944,
  /* 34283 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59555, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 34298 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529,
  /* 34313 */ 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57944, 57944, 57944, 57944, 57944,
  /* 34329 */ 57944, 59614, 57944, 57944, 57944, 57944, 57944, 57944, 59620, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 34344 */ 529, 2285, 529, 529, 529, 57894, 59634, 57894, 57894, 57894, 2294, 0, 0, 0, 0, 0, 0, 57917, 57917, 57917,
  /* 34364 */ 57917, 57917, 57917, 57917, 60356, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 34379 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60001, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 34394 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 750, 57894,
  /* 34411 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 2295, 0, 0, 0, 0, 2297, 0, 2298, 0, 0, 0,
  /* 34431 */ 0, 0, 0, 0, 0, 0, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 361, 0, 0, 0, 0, 0, 0, 0,
  /* 34464 */ 367, 0, 297, 0, 0, 0, 0, 0, 0, 0, 2404, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2434, 529,
  /* 34488 */ 529, 2437, 529, 529, 529, 529, 529, 529, 2445, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 34508 */ 3712, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 34529 */ 3265, 529, 529, 529, 529, 0, 0, 57894, 57894, 57894, 57894, 57894, 529, 529, 529, 529, 529, 529, 2480,
  /* 34548 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 34569 */ 529, 529, 2500, 529, 529, 529, 529, 529, 529, 529, 529, 3257, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 34590 */ 529, 529, 529, 529, 529, 529, 529, 2938, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59418,
  /* 34608 */ 57894, 57894, 57894, 57894, 57894, 57894, 59424, 57894, 57894, 57894, 57894, 57894, 57894, 50679, 2089,
  /* 34623 */ 57917, 57917, 57917, 57917, 57917, 59440, 57917, 57917, 57894, 57894, 59933, 57894, 57894, 57894, 57894,
  /* 34638 */ 0, 0, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59954,
  /* 34655 */ 57917, 57917, 59957, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944,
  /* 34670 */ 60961, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 34685 */ 57944, 57944, 57944, 57944, 57944, 60991, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529,
  /* 34701 */ 57894, 57894, 57894, 0, 0, 57917, 59965, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 34717 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59985,
  /* 34732 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58965, 0, 58966, 58967, 57944, 57944, 57944,
  /* 34747 */ 57944, 57944, 58974, 57944, 57944, 57944, 57944, 58980, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 34762 */ 57944, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3931, 3681, 0, 0, 0, 0, 0, 0, 0,
  /* 34787 */ 57944, 60048, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 34802 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60068, 57944, 57944, 57944, 57944,
  /* 34817 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59049, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 34832 */ 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60879, 57894, 57894,
  /* 34849 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60892,
  /* 34864 */ 57894, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 60105, 57944, 57944, 57944, 57944, 2765, 529, 529,
  /* 34880 */ 529, 529, 60114, 57894, 57894, 57894, 57894, 2775, 2295, 0, 2776, 2298, 0, 0, 2778, 0, 0, 0, 0, 0, 0, 0,
  /* 34902 */ 1829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
  /* 34935 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 352256, 352256, 0, 0, 0, 0, 529, 2935,
  /* 34963 */ 529, 529, 529, 529, 529, 0, 2938, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 34982 */ 57894, 60291, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60307, 57894, 57894,
  /* 34997 */ 57894, 57894, 57894, 57894, 57894, 60312, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60318, 57894,
  /* 35012 */ 57894, 57894, 57894, 57894, 57894, 57894, 60299, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35027 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35042 */ 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 992, 0, 3005, 0, 0, 0, 0, 57917, 57917, 57917, 57917,
  /* 35061 */ 57917, 57917, 57917, 57917, 57917, 60358, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 35076 */ 57917, 57917, 60366, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58881, 57917, 57917, 57917, 58885,
  /* 35091 */ 57917, 57917, 58896, 57917, 57917, 58900, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 35106 */ 57917, 57917, 57917, 57917, 57917, 60934, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 35121 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60702, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 35136 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57917, 57917, 57917, 57917, 60402, 57917, 57917,
  /* 35151 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60413, 57917, 57917,
  /* 35166 */ 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 35181 */ 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 57944, 57944, 60423, 57944, 57944, 57944,
  /* 35203 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60431, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 35218 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0,
  /* 35237 */ 0, 0, 3681, 0, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 57944, 60478, 57944, 57944, 57944, 57944,
  /* 35255 */ 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 303, 307, 0, 0, 0, 0, 3147, 0, 0, 0, 0,
  /* 35277 */ 0, 0, 0, 1829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584,
  /* 35308 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5210112, 0, 5365760, 0, 5554176, 3151, 0, 0, 0, 0, 0, 0, 3156, 0, 0,
  /* 35335 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 403, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35368 */ 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35401 */ 3195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0,
  /* 35433 */ 0, 0, 0, 0, 0, 3208, 3209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3221, 0, 529, 529, 529,
  /* 35463 */ 529, 529, 529, 529, 0, 2938, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35482 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60655, 57894, 57894, 57894, 57894,
  /* 35497 */ 57894, 57894, 57894, 57894, 0, 0, 57917, 57917, 529, 529, 529, 529, 529, 3232, 529, 529, 3236, 529, 529,
  /* 35516 */ 529, 529, 529, 529, 529, 529, 529, 529, 3245, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3252,
  /* 35537 */ 57894, 60644, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35552 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 3005, 0, 57917,
  /* 35568 */ 57917, 57917, 57917, 57917, 58370, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 35583 */ 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944, 58412, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 35600 */ 57944, 57944, 57944, 57944, 60057, 57944, 57944, 57944, 57944, 57944, 57944, 60062, 57944, 60064, 57944,
  /* 35615 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 2766, 529, 529, 529, 57894,
  /* 35631 */ 60115, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35660 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3676, 0, 0, 0, 0, 0, 0, 0, 0, 57917, 57917, 57917, 57917, 60693, 57917,
  /* 35686 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 35701 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 60418, 57944,
  /* 35716 */ 60419, 57944, 57944, 57944, 57944, 57944, 57944, 60742, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 35731 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 35746 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61158, 57944, 57944, 529, 3418, 529, 57894, 60765, 57894,
  /* 35762 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3689, 0, 0, 0,
  /* 35795 */ 0, 0, 0, 0, 3696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 3501, 529, 529,
  /* 35822 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3518, 529, 3520, 529, 529,
  /* 35843 */ 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35860 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35875 */ 60319, 57894, 57894, 57894, 57894, 4014, 0, 4016, 0, 529, 4019, 529, 4021, 529, 529, 529, 529, 529, 529,
  /* 35894 */ 529, 529, 529, 529, 529, 57894, 61378, 57894, 61380, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35910 */ 57894, 57894, 57894, 60334, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 35925 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59431, 50679, 0, 57917, 57917,
  /* 35940 */ 57917, 57917, 57917, 57917, 57917, 57917, 57894, 57894, 57894, 57917, 61394, 57917, 61396, 57917, 57917,
  /* 35955 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 61410, 57944, 61412, 57944,
  /* 35970 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35991 */ 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 61452, 57894, 57894, 57894, 57894, 57894,
  /* 36011 */ 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 61466, 57917, 57917, 57917, 57917,
  /* 36026 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60408, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36041 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 36056 */ 57944, 57944, 57944, 57944, 60038, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 36071 */ 57944, 61480, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0,
  /* 36089 */ 0, 0, 0, 4154, 0, 4156, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1909, 529, 529, 529, 529, 529,
  /* 36111 */ 529, 529, 529, 529, 1920, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1425, 529, 529,
  /* 36132 */ 529, 529, 58776, 916, 57894, 57894, 58781, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 36148 */ 0, 0, 0, 314, 315, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36181 */ 338, 0, 0, 0, 0, 0, 0, 0, 429, 131072, 0, 0, 429, 0, 0, 0, 0, 0, 0, 0, 0, 429, 461, 0, 0, 0, 461, 461,
  /* 36209 */ 461, 461, 461, 461, 461, 461, 461, 461, 461, 524, 461, 524, 524, 524, 461, 524, 524, 524, 524, 524, 524,
  /* 36230 */ 531, 57897, 531, 57897, 531, 531, 57897, 531, 531, 57920, 57897, 531, 531, 57897, 57897, 57897, 57920,
  /* 36247 */ 57897, 57897, 57897, 57897, 57897, 57897, 57897, 57920, 57920, 57897, 57897, 57947, 57897, 57897, 57897,
  /* 36262 */ 57897, 57897, 57897, 57897, 57947, 57947, 57897, 57897, 57897, 57897, 57947, 57947, 57897, 622, 57897,
  /* 36277 */ 57974, 57974, 57974, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0,
  /* 36300 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 139264, 147456, 0, 0, 0, 0, 0,
  /* 36329 */ 57944, 57944, 57944, 57944, 57944, 58460, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529,
  /* 36345 */ 529, 529, 529, 0, 57894, 57894, 57894, 57894, 57894, 57894, 155943, 1153, 0, 303, 0, 0, 0, 0, 0, 0, 0,
  /* 36366 */ 5210112, 0, 0, 0, 0, 5292032, 0, 0, 0, 0, 5365760, 0, 0, 0, 5455872, 0, 0, 0, 0, 0, 5554176, 5570560,
  /* 36388 */ 5578752, 5619712, 5668864, 0, 0, 0, 5791744, 1846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36414 */ 0, 0, 0, 0, 1846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264,
  /* 36445 */ 147456, 0, 0, 0, 335872, 0, 529, 529, 529, 529, 529, 1969, 529, 529, 529, 529, 529, 529, 1976, 529, 529,
  /* 36466 */ 529, 529, 529, 529, 529, 529, 529, 529, 58776, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0,
  /* 36485 */ 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36501 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58938, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36516 */ 57917, 57917, 57917, 57894, 57894, 57894, 57894, 59412, 57894, 57894, 57894, 57894, 57894, 57894, 59420,
  /* 36531 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 50679, 0, 57917, 57917, 57917,
  /* 36546 */ 57917, 57917, 57917, 57917, 57917, 57917, 1269, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 36561 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59563,
  /* 36576 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917, 57917, 57917, 59512, 57917,
  /* 36591 */ 57917, 57917, 57917, 57917, 57917, 59520, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36606 */ 57917, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 36621 */ 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894, 57894, 57894, 57894, 155943, 1153, 0, 0, 1157, 0,
  /* 36640 */ 57944, 57944, 59608, 57944, 57944, 57944, 57944, 57944, 57944, 59616, 57944, 57944, 57944, 57944, 57944,
  /* 36655 */ 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 2294, 0, 0,
  /* 36673 */ 0, 0, 0, 0, 57917, 57917, 60352, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36690 */ 57917, 60360, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 60027,
  /* 36705 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 36720 */ 57944, 57944, 57944, 57944, 60751, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 36735 */ 57944, 57944, 57944, 2805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36765 */ 0, 0, 0, 0, 0, 1791, 0, 0, 0, 2860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529,
  /* 36796 */ 529, 529, 529, 2879, 529, 529, 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 36815 */ 57894, 57894, 57894, 57894, 57894, 59866, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 36830 */ 57894, 57894, 59355, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 36845 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59430, 57894, 50679, 2090, 57917, 57917, 57917,
  /* 36860 */ 57917, 57917, 57917, 57917, 57917, 529, 2883, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 36879 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2473, 529, 529,
  /* 36900 */ 529, 529, 2936, 529, 529, 529, 0, 2938, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 60288,
  /* 36919 */ 57894, 57894, 57894, 57894, 60292, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 57917,
  /* 36936 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59955, 57917, 57917,
  /* 36951 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60377, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36966 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 36981 */ 57917, 61132, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 0, 3005, 0, 0, 0, 0, 57917, 57917,
  /* 36999 */ 57917, 57917, 57917, 57917, 60355, 57917, 57917, 57917, 57917, 60359, 57917, 57917, 57917, 57917, 57917,
  /* 37014 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58403, 57917, 57917, 57917, 0, 0, 0, 0,
  /* 37031 */ 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60424,
  /* 37046 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 37061 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60071,
  /* 37076 */ 57944, 57944, 0, 321, 321, 430, 131072, 432, 434, 430, 439, 432, 439, 0, 317, 456, 456, 456, 457, 462,
  /* 37096 */ 475, 475, 475, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 509, 509, 522, 522, 523, 523, 509, 523,
  /* 37117 */ 523, 523, 509, 523, 523, 523, 523, 523, 523, 532, 57898, 532, 57898, 532, 532, 57898, 532, 532, 57921,
  /* 37136 */ 57898, 532, 532, 57898, 57898, 57921, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57921, 57921,
  /* 37151 */ 57898, 57898, 57948, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57948, 57948, 57898, 57898, 57898,
  /* 37166 */ 57898, 57948, 57948, 57898, 623, 57973, 57973, 57973, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0,
  /* 37185 */ 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 357, 358, 359, 0, 0, 0, 0, 0, 0, 0,
  /* 37215 */ 0, 0, 367, 0, 297, 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 701, 0, 0, 0, 0, 0,
  /* 37246 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 415, 139264, 147456, 0, 0, 0, 0, 424, 898, 529,
  /* 37275 */ 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 37291 */ 57894, 57894, 57894, 57894, 58317, 57894, 57894, 57894, 57894, 0, 57917, 57917, 57917, 57917, 57917,
  /* 37306 */ 57917, 57917, 58924, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 37321 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58951, 57917, 1216, 1176, 0, 0, 0,
  /* 37338 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 2320, 0,
  /* 37371 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1290, 1291, 0, 0, 0, 0,
  /* 37403 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 2882, 0,
  /* 37432 */ 0, 0, 0, 1284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37464 */ 1227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37496 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 0, 0, 1231, 0, 0,
  /* 37528 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1205, 1206, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 57894,
  /* 37559 */ 57894, 58798, 57894, 58803, 57894, 57894, 58807, 57894, 57894, 58810, 57894, 57894, 57894, 57894, 57894,
  /* 37574 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 37589 */ 57894, 57894, 59897, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 58875,
  /* 37604 */ 57917, 57917, 58879, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58893, 57917, 58898, 57917,
  /* 37619 */ 57917, 58902, 57917, 57917, 58905, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0,
  /* 37634 */ 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 37649 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60438, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 37664 */ 57944, 57944, 57944, 57944, 58999, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 37679 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 37694 */ 57944, 57944, 57944, 57944, 57944, 59603, 57944, 1153, 1727, 0, 0, 0, 0, 1734, 0, 0, 0, 0, 0, 0, 0, 1744,
  /* 37716 */ 1745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
  /* 37748 */ 0, 529, 529, 529, 1933, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 37769 */ 529, 529, 529, 529, 529, 1956, 1957, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2916, 529, 529,
  /* 37789 */ 529, 529, 529, 529, 2923, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2931, 529, 529, 529, 57894,
  /* 37809 */ 57894, 59376, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 37824 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59399, 59400, 57894, 57894, 57894, 57894, 57894,
  /* 37839 */ 57894, 57894, 0, 2595, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 37856 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58941, 57917, 57917, 57917,
  /* 37871 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59476, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 37886 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59499,
  /* 37901 */ 59500, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60672, 57917, 57917, 60676, 57917,
  /* 37916 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60685, 57917, 57917, 57917, 57917, 57917,
  /* 37931 */ 57917, 57917, 57917, 57917, 0, 57894, 57944, 57944, 58969, 57944, 57944, 58973, 57944, 57944, 57944,
  /* 37946 */ 57944, 57944, 57944, 57944, 57944, 58987, 57944, 58992, 57944, 57944, 58996, 57944, 57944, 57944, 57944,
  /* 37961 */ 59545, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59557, 57944, 57944, 57944, 57944,
  /* 37976 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59572, 57894,
  /* 37991 */ 59905, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59918,
  /* 38006 */ 57894, 57894, 57894, 57894, 57894, 59922, 59923, 59924, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 38021 */ 57894, 57894, 59352, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59363, 57894, 57894,
  /* 38036 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59914, 57894, 57894, 57894, 57894,
  /* 38051 */ 57894, 57894, 57894, 59920, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59926, 57894, 57894, 57894,
  /* 38066 */ 57894, 57944, 57944, 57944, 57944, 57944, 60077, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 38081 */ 57944, 57944, 57944, 57944, 57944, 60090, 57944, 57944, 57944, 57944, 57944, 60094, 60095, 60096, 57944,
  /* 38096 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60454, 57944, 57944, 57944, 57944, 57944,
  /* 38111 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 38126 */ 57944, 59627, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 2780, 0, 0, 0, 0, 0, 0, 0,
  /* 38148 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2340, 60398, 57917, 57917, 57917,
  /* 38177 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38192 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 38207 */ 57944, 57944, 57944, 61256, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 3180, 0, 0, 0, 0, 0,
  /* 38227 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 529, 529, 3419, 57894,
  /* 38258 */ 57894, 60766, 0, 0, 0, 0, 0, 3428, 0, 0, 0, 0, 0, 0, 0, 3432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
  /* 38288 */ 0, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38322 */ 0, 3497, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3512, 3513,
  /* 38343 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3241, 529, 529, 3244, 529, 529, 529,
  /* 38364 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1914, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 38385 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 58780, 57894, 57894, 58784, 57894,
  /* 38403 */ 57894, 57894, 57894, 57894, 57894, 57894, 60896, 57894, 60898, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 38418 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917,
  /* 38433 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61112, 57917, 57917, 60923, 57917, 57917,
  /* 38448 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38463 */ 60938, 57917, 60940, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38478 */ 60932, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38493 */ 57917, 57917, 57917, 57917, 57917, 59495, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38508 */ 57917, 57917, 57917, 57944, 57944, 57944, 60980, 57944, 60982, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 38523 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 57894,
  /* 38539 */ 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3832, 0, 529, 529, 3729, 529, 529,
  /* 38567 */ 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 38582 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59401, 57894,
  /* 38597 */ 57894, 59404, 57894, 57894, 61160, 57944, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0,
  /* 38614 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3442, 0, 0, 57894, 61450, 57894, 61451,
  /* 38642 */ 57894, 57894, 57894, 61455, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 61464, 57917,
  /* 38657 */ 61465, 57917, 57917, 57917, 61469, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38672 */ 60696, 57917, 57917, 57917, 60699, 57917, 60701, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38687 */ 60706, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 61478, 57944, 61479, 57944, 57944, 57944, 61483,
  /* 38702 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 38724 */ 529, 529, 529, 2430, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2442, 529, 529, 529, 529, 529,
  /* 38745 */ 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944,
  /* 38761 */ 57944, 57944, 57944, 57944, 4294, 0, 0, 0, 529, 529, 529, 4297, 57894, 57894, 57894, 61643, 57917, 57917,
  /* 38779 */ 57917, 57917, 57917, 57917, 59482, 57917, 57917, 57917, 59487, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38794 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 38809 */ 57917, 60704, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 61645, 57944, 57944, 57944,
  /* 38824 */ 61647, 0, 0, 529, 529, 57894, 57894, 57917, 57917, 57944, 57944, 0, 529, 57894, 57917, 57944, 0, 529,
  /* 38842 */ 57894, 57917, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 529, 529, 529, 529, 529, 529, 529, 3503, 529,
  /* 38861 */ 529, 529, 529, 529, 529, 529, 529, 3511, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 38882 */ 3523, 0, 0, 0, 376, 131072, 0, 435, 376, 0, 0, 0, 446, 452, 0, 0, 0, 376, 463, 476, 476, 476, 489, 489,
  /* 38906 */ 489, 489, 489, 489, 489, 489, 489, 489, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510,
  /* 38927 */ 510, 510, 510, 510, 533, 57899, 533, 57899, 533, 533, 57899, 533, 533, 57922, 57899, 533, 533, 57899,
  /* 38945 */ 57899, 57899, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
  /* 38970 */ 0, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 645, 740, 0, 744, 745, 645, 57899, 57922,
  /* 38998 */ 57899, 57899, 57899, 57899, 57899, 57899, 57899, 57922, 57922, 57899, 57899, 57949, 57899, 57899, 57899,
  /* 39013 */ 57899, 57899, 57899, 57899, 57949, 57949, 57899, 57899, 57899, 57899, 57949, 57949, 57899, 533, 57899,
  /* 39028 */ 58444, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529,
  /* 39044 */ 529, 529, 529, 0, 57894, 57894, 57894, 57894, 57894, 57894, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39067 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1759, 1760, 1189, 0, 1191, 1192, 0, 0, 0, 1194,
  /* 39095 */ 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 1288, 0, 0, 0,
  /* 39127 */ 0, 1293, 0, 0, 0, 0, 1296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1308, 1334, 1194, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39157 */ 529, 529, 1343, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1369, 529, 529,
  /* 39178 */ 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 39195 */ 59865, 57894, 57894, 59868, 57894, 57894, 57894, 57894, 57894, 57894, 59876, 57894, 57894, 57894, 57894,
  /* 39210 */ 58834, 57894, 57894, 57894, 57894, 58839, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 39225 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58864, 57894, 57894, 57894, 57894, 50679, 58776, 992,
  /* 39240 */ 57917, 57917, 58876, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39255 */ 57917, 57917, 57917, 57917, 58903, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39270 */ 57917, 57917, 57917, 60933, 57917, 60935, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60942, 57917,
  /* 39285 */ 57917, 60944, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58918, 57917, 57917, 57917, 57917,
  /* 39300 */ 57917, 57917, 57917, 58927, 57917, 57917, 58929, 57917, 57917, 57917, 57917, 58934, 57917, 57917, 57917,
  /* 39315 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58887, 57917, 57917, 57917, 57917, 57917,
  /* 39330 */ 57917, 57917, 57917, 57917, 58906, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 529,
  /* 39345 */ 529, 529, 1967, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 39366 */ 529, 58776, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 57917, 57917, 57917, 57917,
  /* 39384 */ 57917, 57917, 57917, 57917, 57917, 57917, 59953, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39399 */ 57917, 57917, 57917, 61122, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61130, 57917, 57917,
  /* 39414 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 61135, 57944, 57894, 57894, 59410, 57894, 57894, 57894,
  /* 39429 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 39444 */ 57894, 50679, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61121, 57917,
  /* 39459 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39474 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60033, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 39489 */ 57944, 57944, 57944, 57944, 60045, 57944, 57917, 59510, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39504 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57894, 57944, 57944,
  /* 39519 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529,
  /* 39536 */ 0, 57894, 57894, 57894, 57894, 57894, 57894, 155943, 1153, 0, 0, 1158, 0, 59606, 57944, 57944, 57944,
  /* 39553 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 39568 */ 57944, 529, 529, 529, 529, 2288, 57894, 57894, 57894, 57894, 59637, 2294, 0, 0, 0, 0, 0, 0, 57917, 60351,
  /* 39588 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39603 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60688, 57917, 57917, 57917,
  /* 39618 */ 57917, 57917, 2295, 0, 0, 0, 0, 2297, 0, 2298, 0, 0, 0, 0, 0, 2301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39647 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 2452, 529, 529, 529, 529, 529, 529,
  /* 39675 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 39696 */ 529, 529, 2932, 529, 529, 57894, 57894, 57894, 57894, 57894, 59883, 57894, 57894, 57894, 57894, 57894,
  /* 39712 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 39727 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60320, 57894, 57894, 57894, 59931, 57894, 57894,
  /* 39742 */ 57894, 57894, 57894, 57894, 0, 0, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39759 */ 59952, 57917, 57917, 57917, 57917, 59956, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59452,
  /* 39774 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59463, 57917, 57917, 57917, 57917, 57917,
  /* 39789 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59474, 57917, 57917, 60018, 57917, 60020, 57917, 57917,
  /* 39804 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60035, 57944,
  /* 39819 */ 57944, 57944, 57944, 60039, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 39834 */ 59584, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 39849 */ 57944, 57944, 57944, 57944, 57944, 57944, 59562, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 39864 */ 57944, 57944, 59571, 57944, 57944, 57944, 60101, 57944, 60103, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 39879 */ 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 2775, 2295, 0, 2776, 2298, 0, 0, 0, 0, 0, 0,
  /* 39900 */ 0, 0, 0, 0, 2403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1868, 0, 0, 0,
  /* 39933 */ 0, 0, 0, 0, 57894, 57894, 57894, 57894, 60328, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 39950 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 39965 */ 57894, 57894, 57894, 57894, 57894, 3005, 0, 57917, 57917, 0, 3005, 0, 0, 0, 0, 57917, 57917, 57917, 60353,
  /* 39984 */ 57917, 60354, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 39999 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58935, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 40014 */ 58949, 57917, 57917, 57917, 3177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40043 */ 0, 0, 0, 0, 0, 0, 0, 2393, 529, 529, 3253, 529, 529, 529, 529, 529, 529, 529, 3259, 529, 529, 529, 529,
  /* 40066 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2938, 0, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 40084 */ 57894, 57894, 58840, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58854, 57894, 57894, 57894, 57894,
  /* 40099 */ 57894, 57894, 57894, 57894, 58866, 58867, 57894, 57894, 50679, 58776, 992, 57894, 57894, 57894, 57894,
  /* 40114 */ 60645, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60651, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 40129 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 3005, 0, 57917, 57917, 57917, 57917, 57917,
  /* 40145 */ 58373, 58375, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0,
  /* 40162 */ 57894, 57944, 57944, 58417, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 40177 */ 61487, 57944, 57944, 61489, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 4023, 529,
  /* 40200 */ 529, 529, 4027, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 61382, 57894, 57894, 57894,
  /* 40217 */ 61386, 57894, 57894, 57894, 529, 529, 529, 3730, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 40234 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 40249 */ 57894, 57894, 57894, 57894, 57894, 60640, 57894, 57894, 57894, 57894, 57894, 57944, 61161, 57944, 57944,
  /* 40264 */ 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40292 */ 0, 3441, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 57944, 61264, 57944, 57944, 529, 529, 57894, 57894,
  /* 40310 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40344 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1353, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 40365 */ 1372, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 61399, 57917, 57917, 57917, 57917,
  /* 40380 */ 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 61415, 57944, 57944, 57944,
  /* 40395 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59618, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 40410 */ 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0,
  /* 40432 */ 0, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
  /* 40462 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 422,
  /* 40493 */ 0, 0, 0, 0, 131072, 0, 329, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 464, 477, 477, 477, 490, 490, 490, 500, 490,
  /* 40519 */ 500, 503, 490, 490, 490, 511, 511, 511, 511, 511, 511, 526, 511, 511, 511, 526, 511, 511, 511, 511, 511,
  /* 40540 */ 511, 534, 57900, 534, 57900, 534, 534, 57900, 534, 534, 57923, 57900, 534, 534, 57900, 57900, 57900, 1,
  /* 40558 */ 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40585 */ 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 304, 0, 0,
  /* 40618 */ 0, 0, 57900, 57923, 57900, 57900, 57900, 57900, 57900, 57900, 57900, 57923, 57923, 57900, 57900, 57950,
  /* 40634 */ 57900, 57900, 57900, 57900, 57900, 57900, 57900, 57950, 57950, 57900, 57900, 57900, 57900, 57950, 57950,
  /* 40649 */ 57900, 534, 57900, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 706, 707,
  /* 40677 */ 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 106496, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40706 */ 0, 0, 0, 0, 0, 0, 5341184, 0, 5652480, 0, 0, 717, 0, 0, 720, 0, 0, 0, 0, 0, 0, 727, 0, 729, 730, 0, 0,
  /* 40733 */ 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0,
  /* 40766 */ 0, 779, 780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 792, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
  /* 40797 */ 809, 0, 812, 0, 0, 0, 0, 0, 0, 792, 0, 804, 0, 818, 0, 730, 0, 0, 812, 824, 0, 0, 826, 0, 0, 824, 824, 0,
  /* 40825 */ 0, 0, 792, 0, 0, 0, 0, 0, 0, 645, 0, 0, 0, 805, 0, 810, 0, 796, 0, 822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0,
  /* 40856 */ 0, 0, 0, 0, 0, 0, 0, 0, 1882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529,
  /* 40887 */ 863, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 836, 0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0,
  /* 40913 */ 836, 529, 529, 850, 529, 856, 529, 529, 871, 529, 529, 882, 529, 887, 529, 529, 896, 899, 904, 529, 912,
  /* 40934 */ 529, 57894, 57894, 57894, 58269, 57894, 58275, 57894, 57894, 58290, 57894, 57894, 58301, 57894, 58306,
  /* 40949 */ 57894, 57894, 58315, 58318, 58323, 57894, 58331, 57894, 0, 57917, 57917, 57917, 58345, 57917, 58351,
  /* 40964 */ 57917, 57917, 58366, 57917, 57917, 58377, 57917, 58382, 57917, 57917, 58391, 58394, 58399, 57917, 58407,
  /* 40979 */ 57917, 0, 0, 0, 0, 58306, 57944, 57944, 57944, 58420, 57944, 58426, 57944, 57944, 58441, 57944, 57944,
  /* 40996 */ 58452, 57944, 58457, 57944, 57944, 58466, 58469, 58474, 57944, 58482, 57944, 850, 529, 529, 1144, 904,
  /* 41012 */ 529, 0, 57894, 58269, 57894, 58494, 58323, 57894, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41036 */ 0, 0, 0, 0, 0, 0, 0, 0, 1753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448, 360448, 360448, 360448,
  /* 41061 */ 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448,
  /* 41074 */ 360448, 360448, 360448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1251, 0, 0, 1200, 0, 0,
  /* 41102 */ 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1838, 0, 0, 0, 0, 0, 0, 0,
  /* 41136 */ 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41170 */ 3702, 0, 529, 57894, 57894, 57894, 57894, 57894, 58804, 57894, 57894, 57894, 58809, 57894, 57894, 57894,
  /* 41186 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58826, 57894, 57894,
  /* 41201 */ 57894, 57894, 57894, 57894, 57894, 0, 2596, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 41218 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60415,
  /* 41233 */ 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58952, 57917, 57917, 57917, 57917, 57917,
  /* 41248 */ 57917, 58963, 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 41263 */ 58978, 57944, 57944, 57944, 57944, 57944, 57944, 58993, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41284 */ 0, 0, 0, 0, 4092, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1978, 529, 529,
  /* 41306 */ 529, 529, 529, 529, 529, 529, 58776, 0, 57894, 59337, 57894, 57894, 57894, 57894, 57894, 58998, 57944,
  /* 41323 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59015,
  /* 41338 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 41353 */ 59558, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 41368 */ 57944, 57944, 59624, 57944, 57944, 57944, 1910, 529, 529, 529, 529, 59353, 57894, 57894, 57894, 57894, 0,
  /* 41385 */ 0, 59031, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59047, 57944, 57944,
  /* 41400 */ 57944, 57944, 57944, 57944, 59058, 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894,
  /* 41417 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 41432 */ 57894, 57894, 60890, 57894, 57894, 57894, 57894, 1153, 1727, 0, 0, 0, 0, 1734, 0, 0, 0, 0, 1741, 0, 1743,
  /* 41453 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41486 */ 764, 0, 0, 665, 768, 0, 0, 0, 0, 0, 775, 0, 0, 0, 1762, 0, 0, 1765, 1766, 1767, 0, 1769, 1770, 0, 0, 0,
  /* 41512 */ 1774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1790, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760,
  /* 41539 */ 245760, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 0, 0, 0, 0, 139264, 147456, 245760, 245760, 245760,
  /* 41559 */ 0, 0, 0, 131072, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 245760, 0, 245760, 0, 245760, 0, 0, 0, 0, 0, 0, 0,
  /* 41586 */ 0, 0, 0, 0, 0, 647, 757, 0, 759, 0, 761, 762, 675, 0, 0, 766, 767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41615 */ 1796, 0, 0, 1799, 0, 1801, 0, 0, 0, 0, 0, 0, 1808, 1809, 0, 0, 0, 0, 0, 1815, 0, 0, 0, 0, 1820, 1821, 0,
  /* 41642 */ 0, 0, 0, 0, 0, 659, 660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 670, 671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 683, 684,
  /* 41673 */ 0, 0, 0, 0, 1827, 0, 0, 1829, 0, 0, 0, 0, 0, 0, 0, 0, 1833, 1834, 1835, 0, 0, 0, 0, 0, 0, 1841, 0, 1843,
  /* 41701 */ 0, 0, 0, 0, 0, 0, 0, 0, 1310, 0, 529, 529, 1342, 529, 1345, 529, 529, 529, 529, 529, 529, 529, 529, 1359,
  /* 41725 */ 529, 1364, 529, 529, 1368, 529, 529, 1371, 1874, 0, 0, 0, 0, 0, 0, 1880, 1881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41751 */ 0, 0, 1874, 0, 0, 0, 1892, 1743, 1743, 1894, 529, 1896, 529, 1897, 1898, 529, 1900, 529, 529, 529, 1904,
  /* 41772 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 1917, 529, 529, 529, 529, 1921, 529, 529, 529, 529, 1925,
  /* 41792 */ 529, 1927, 529, 529, 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 41810 */ 57894, 59864, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 41825 */ 57894, 58851, 57894, 57894, 58855, 57894, 57894, 57894, 57894, 57894, 58862, 57894, 57894, 57894, 58869,
  /* 41840 */ 57894, 50679, 58776, 992, 1963, 529, 1965, 529, 1968, 529, 529, 529, 529, 529, 1975, 529, 529, 1977, 529,
  /* 41859 */ 529, 529, 529, 529, 529, 529, 529, 529, 58776, 0, 59336, 57894, 59338, 57894, 59339, 57894, 59341, 57894,
  /* 41877 */ 59343, 57894, 57894, 57894, 59347, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59360,
  /* 41892 */ 57894, 57894, 57894, 57894, 59364, 57894, 57894, 57894, 57894, 59368, 57894, 59370, 57894, 57894, 57894,
  /* 41907 */ 57894, 57894, 57894, 57894, 58808, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 41922 */ 57894, 57894, 57894, 57894, 57894, 58823, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58832, 57894,
  /* 41937 */ 59408, 57894, 59411, 57894, 57894, 57894, 57894, 57894, 59419, 57894, 57894, 59421, 57894, 57894, 57894,
  /* 41952 */ 57894, 57894, 57894, 57894, 57894, 57894, 50679, 0, 59436, 57917, 59438, 57917, 59439, 57917, 59441,
  /* 41967 */ 57917, 57917, 57917, 57917, 57917, 60021, 57917, 57917, 60024, 60025, 57917, 57944, 57944, 57944, 57944,
  /* 41982 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60041, 57944, 60043,
  /* 41997 */ 57944, 57944, 57944, 0, 0, 0, 4083, 0, 0, 0, 0, 0, 0, 0, 4090, 0, 0, 529, 529, 529, 529, 4095, 529, 529,
  /* 42021 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2892, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 42042 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 2465, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 42063 */ 529, 529, 59443, 57917, 57917, 57917, 59447, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 42078 */ 57917, 59460, 57917, 57917, 57917, 57917, 59464, 57917, 57917, 57917, 57917, 59468, 57917, 59470, 57917,
  /* 42093 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 60960, 57944, 57944, 57944, 57944,
  /* 42108 */ 60964, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60970, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42123 */ 57944, 57944, 57944, 57944, 57944, 57944, 60083, 57944, 57944, 57944, 57944, 60088, 57944, 57944, 57944,
  /* 42138 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59013, 57944, 57944, 57944,
  /* 42153 */ 59017, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59508,
  /* 42168 */ 57917, 59511, 57917, 57917, 57917, 57917, 57917, 59519, 57917, 57917, 59521, 57917, 57917, 57917, 57917,
  /* 42183 */ 57917, 57917, 57917, 57917, 57917, 57894, 59532, 57944, 59534, 57944, 59535, 57944, 59537, 57944, 59539,
  /* 42198 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60452, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42213 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42228 */ 57944, 57944, 60753, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59543, 57944,
  /* 42243 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59556, 57944, 57944, 57944, 57944, 59560, 57944,
  /* 42258 */ 57944, 57944, 57944, 59564, 57944, 59566, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42273 */ 57944, 57944, 57944, 59585, 57944, 57944, 57944, 57944, 57944, 57944, 59592, 57944, 57944, 57944, 57944,
  /* 42288 */ 57944, 57944, 57944, 57944, 59601, 57944, 57944, 57944, 57944, 57944, 57944, 59576, 59577, 59579, 57944,
  /* 42303 */ 57944, 57944, 57944, 57944, 57944, 57944, 59587, 59588, 57944, 57944, 59590, 57944, 57944, 59593, 59594,
  /* 42318 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59602, 57944, 59604, 57944, 59607, 57944, 57944, 57944,
  /* 42333 */ 57944, 57944, 59615, 57944, 57944, 59617, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42348 */ 529, 1955, 529, 2287, 529, 57894, 59398, 57894, 59636, 57894, 2294, 0, 0, 0, 0, 0, 0, 352256, 0, 352256,
  /* 42368 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0, 2295,
  /* 42401 */ 0, 0, 0, 0, 2297, 0, 2298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2305, 0, 0, 2308, 2309, 0, 0, 0, 2313, 0, 0, 0,
  /* 42430 */ 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0,
  /* 42463 */ 1829, 0, 2370, 0, 0, 0, 0, 0, 0, 0, 2376, 0, 0, 2379, 0, 0, 0, 0, 2384, 0, 0, 0, 0, 0, 2390, 0, 2392, 0,
  /* 42491 */ 0, 0, 0, 0, 0, 417792, 0, 417792, 0, 0, 0, 311, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 139264, 147456,
  /* 42517 */ 417792, 417792, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0, 417792, 417792, 0, 0, 417792,
  /* 42540 */ 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 417792, 418103, 417792, 417792,
  /* 42553 */ 418102, 418103, 417792, 417792, 418102, 417792, 418102, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0,
  /* 42573 */ 417792, 0, 0, 0, 0, 2422, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 42596 */ 2438, 529, 2440, 529, 529, 529, 529, 529, 529, 2448, 529, 2450, 529, 529, 529, 2477, 2478, 529, 529, 529,
  /* 42616 */ 529, 529, 529, 2485, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 42637 */ 2499, 529, 529, 529, 0, 0, 0, 0, 57894, 57894, 59856, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 42655 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 42670 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 42685 */ 57917, 57917, 2502, 2503, 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 42703 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59869, 57894, 59871, 57894, 57894, 57894, 57894, 57894,
  /* 42718 */ 57894, 57894, 2593, 0, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 42735 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57894, 57944, 57944, 57944, 57944,
  /* 42750 */ 57944, 57944, 57944, 57944, 57944, 57944, 59879, 57894, 59881, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 42765 */ 57894, 59887, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 42780 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60343, 57894, 57894, 57894, 57894, 57894,
  /* 42795 */ 57894, 57894, 57894, 57894, 57894, 59932, 57894, 57894, 59935, 59936, 57894, 0, 0, 0, 0, 57917, 57917,
  /* 42812 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59958,
  /* 42827 */ 57917, 59960, 57917, 57917, 57917, 57917, 57917, 58921, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 42842 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58936, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 42857 */ 57917, 57917, 57917, 57917, 57917, 60697, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 42872 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 60030,
  /* 42887 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42902 */ 57944, 60433, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42917 */ 57944, 57944, 57944, 57944, 57944, 57944, 60051, 57944, 60053, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42932 */ 57944, 60059, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 42947 */ 57944, 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 4012, 4013, 57944, 57944,
  /* 42968 */ 57944, 57944, 57944, 60104, 57944, 57944, 60107, 60108, 57944, 2440, 529, 2767, 529, 529, 59871, 57894,
  /* 42984 */ 60116, 57894, 57894, 2775, 2295, 0, 2776, 2298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2789, 0, 0, 0, 0, 0, 0, 0,
  /* 43010 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2360, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529,
  /* 43040 */ 2911, 529, 529, 529, 529, 2915, 529, 529, 529, 2920, 529, 529, 529, 529, 529, 529, 529, 529, 2928, 529,
  /* 43060 */ 529, 529, 529, 529, 529, 529, 2933, 57894, 57894, 57894, 57894, 57894, 60302, 57894, 60304, 57894, 57894,
  /* 43077 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 43092 */ 57894, 57894, 57894, 57894, 60321, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61098, 57894, 57894,
  /* 43107 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43122 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58890, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43137 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58914, 57917, 57917, 57917, 57894, 57894, 60325, 57894,
  /* 43152 */ 57894, 57894, 60330, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60338, 57894, 57894, 57894,
  /* 43167 */ 57894, 57894, 57894, 57894, 57894, 60344, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0,
  /* 43184 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59950, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43199 */ 57917, 57917, 57917, 57917, 59962, 57917, 0, 3005, 0, 0, 0, 0, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43217 */ 57917, 57917, 60357, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43232 */ 57917, 57917, 57917, 60369, 57917, 57917, 57917, 57917, 57917, 60375, 57917, 57917, 57917, 57917, 60378,
  /* 43247 */ 57917, 57917, 60380, 57917, 60381, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60390,
  /* 43262 */ 57917, 57917, 60394, 57917, 57917, 57917, 57917, 57917, 58369, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43277 */ 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43294 */ 57944, 57944, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 3935, 0, 0, 0,
  /* 43319 */ 0, 60371, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43334 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60388, 57917, 57917, 57917, 57917, 60392, 57917,
  /* 43349 */ 57917, 57917, 60397, 57944, 60422, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43364 */ 57944, 57944, 57944, 57944, 57944, 60434, 57944, 60436, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43379 */ 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0,
  /* 43398 */ 0, 3146, 0, 0, 3149, 3150, 57944, 57944, 57944, 57944, 60476, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43415 */ 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 303, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43438 */ 0, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43472 */ 0, 0, 0, 0, 0, 388, 0, 60740, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43491 */ 57944, 57944, 60747, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43506 */ 57944, 57944, 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 4010, 0, 0, 0, 529, 529,
  /* 43528 */ 3498, 529, 529, 529, 529, 529, 529, 529, 3504, 529, 529, 529, 529, 529, 3510, 529, 529, 529, 529, 529,
  /* 43548 */ 529, 529, 529, 529, 529, 3519, 3521, 529, 529, 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 43568 */ 57894, 59861, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59873, 57894,
  /* 43583 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61457, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 43598 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61471, 57917, 57917, 57917, 57917, 57917,
  /* 43613 */ 57917, 57917, 57917, 59485, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 43628 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60010, 57917,
  /* 43643 */ 57917, 57917, 57917, 60014, 57917, 57917, 3524, 529, 3526, 3527, 529, 57894, 57894, 57894, 57894, 57894,
  /* 43659 */ 57894, 60878, 57894, 57894, 57894, 57894, 57894, 60882, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 43674 */ 60888, 57894, 57894, 57894, 57894, 57894, 60894, 57894, 57894, 60897, 57894, 57894, 57894, 57894, 57894,
  /* 43689 */ 57894, 57894, 57894, 60904, 60906, 57894, 57894, 57894, 57894, 60910, 57894, 60912, 60913, 57894, 57917,
  /* 43704 */ 57917, 57917, 57917, 57917, 57917, 60920, 57917, 57917, 57917, 57917, 57917, 57917, 60022, 57917, 57917,
  /* 43719 */ 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60037,
  /* 43734 */ 57944, 57944, 60040, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 3824,
  /* 43752 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43785 */ 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 4024, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894,
  /* 43806 */ 57894, 57894, 57894, 57894, 61383, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 60924, 57917,
  /* 43821 */ 57917, 57917, 57917, 57917, 57917, 57917, 60930, 57917, 57917, 57917, 57917, 57917, 60936, 57917, 57917,
  /* 43836 */ 60939, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60946, 60948, 57917, 57917, 57917, 57917,
  /* 43851 */ 57917, 58960, 57917, 57917, 57917, 0, 57894, 57944, 58968, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43866 */ 57944, 57944, 57944, 57944, 57944, 58982, 58989, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43881 */ 57944, 57944, 57944, 60745, 57944, 57944, 57944, 60748, 57944, 60750, 57944, 57944, 57944, 57944, 57944,
  /* 43896 */ 57944, 57944, 57944, 60755, 57944, 57944, 57944, 57944, 57944, 57917, 57917, 60952, 57917, 60954, 60955,
  /* 43911 */ 57917, 57944, 57944, 57944, 57944, 57944, 57944, 60962, 57944, 57944, 57944, 57944, 57944, 60966, 57944,
  /* 43926 */ 57944, 57944, 57944, 57944, 57944, 57944, 60972, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 43941 */ 57944, 58478, 57944, 57944, 57944, 1141, 529, 529, 529, 908, 529, 0, 57894, 58492, 57894, 57894, 58327,
  /* 43958 */ 57894, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 1768, 0, 0, 1771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43987 */ 0, 0, 0, 1789, 0, 0, 57944, 60978, 57944, 57944, 60981, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 44005 */ 57944, 60988, 60990, 57944, 57944, 57944, 57944, 60994, 57944, 60996, 60997, 57944, 529, 529, 3656, 57894,
  /* 44021 */ 57894, 61003, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 0, 0, 698, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44050 */ 0, 711, 0, 0, 0, 0, 0, 0, 0, 2810, 0, 0, 0, 0, 0, 2815, 0, 2817, 2818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44081 */ 0, 0, 0, 0, 0, 0, 329, 330, 331, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3665, 0, 0, 3668, 0, 0, 0,
  /* 44112 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1259, 0, 0, 0, 0, 0, 0, 1267, 0,
  /* 44144 */ 0, 0, 0, 1271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3682, 0, 3684, 0, 0, 0, 0, 0, 0, 0, 3691, 0, 0, 0, 3694,
  /* 44174 */ 3695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 1344, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 44199 */ 1357, 529, 529, 529, 529, 1367, 529, 529, 529, 529, 529, 529, 3706, 529, 529, 529, 529, 529, 529, 529,
  /* 44219 */ 3711, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3721, 529, 529, 529, 529, 529, 529,
  /* 44240 */ 529, 0, 0, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 44259 */ 57894, 57894, 57894, 60294, 57894, 57894, 60297, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 44276 */ 61077, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61082, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 44291 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59422, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 44306 */ 57894, 50679, 0, 57917, 59437, 57917, 57917, 57917, 57917, 57917, 57917, 57894, 61093, 57894, 57894,
  /* 44321 */ 57894, 57894, 57894, 57894, 57894, 57894, 61101, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917,
  /* 44336 */ 57917, 61106, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61111, 57917, 57917, 57917, 57917, 57917,
  /* 44351 */ 57917, 60403, 57917, 57917, 57917, 60406, 60407, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 44366 */ 57917, 57917, 57917, 57917, 57917, 57944, 57944, 60417, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 44381 */ 57944, 57944, 60427, 57944, 57944, 57944, 57944, 57944, 60432, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 44396 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59589, 57944, 57944, 57944, 57944,
  /* 44411 */ 57944, 57944, 57944, 57944, 59598, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 44426 */ 57944, 57944, 61140, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 44441 */ 57944, 57944, 61151, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61159, 57944, 57944, 57944,
  /* 44456 */ 57944, 57944, 57944, 57944, 57944, 60479, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894,
  /* 44472 */ 57894, 57894, 57894, 303, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44502 */ 0, 0, 0, 0, 0, 0, 806, 0, 57944, 57944, 57944, 57944, 57944, 61263, 57944, 57944, 57944, 529, 529, 57894,
  /* 44522 */ 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3929, 3930, 0, 3681, 0, 0, 0, 0, 0, 3938, 0, 0, 0, 0, 0, 0, 2342912, 0, 0,
  /* 44550 */ 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 44566 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0,
  /* 44581 */ 0, 0, 0, 0, 0, 0, 1155, 0, 57894, 61307, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 44600 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61323, 57917, 57917, 57917, 57917, 57917,
  /* 44615 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60965,
  /* 44630 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59012,
  /* 44645 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59021, 57944, 57944, 59023, 57944, 57944, 57944, 57944,
  /* 44660 */ 59029, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61339, 57944, 57944, 57944, 57944, 57944,
  /* 44675 */ 57944, 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 4009, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 1800, 0,
  /* 44700 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 375, 0, 0, 0, 0, 0,
  /* 44732 */ 329, 375, 332, 374, 0, 0, 0, 0, 0, 0, 0, 0, 57894, 61391, 57894, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 44753 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61407, 57917, 57944, 57944, 57944, 57944, 57944,
  /* 44768 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894,
  /* 44785 */ 57894, 57894, 57894, 57894, 155943, 0, 0, 0, 0, 0, 57944, 61423, 57944, 0, 0, 0, 0, 0, 0, 4085, 0, 0, 0,
  /* 44808 */ 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 4097, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 44830 */ 529, 3861, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 61212, 57894, 57894, 57894,
  /* 44847 */ 57894, 57894, 57894, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 61482, 57944, 57944, 57944, 57944,
  /* 44862 */ 57944, 57944, 57944, 57944, 57944, 4147, 4148, 0, 0, 0, 4151, 0, 0, 0, 0, 0, 4157, 4158, 4159, 529, 529,
  /* 44883 */ 529, 0, 0, 0, 0, 57894, 59855, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 44900 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917,
  /* 44915 */ 57917, 57917, 57917, 60919, 57917, 57917, 57917, 57917, 529, 4162, 529, 4164, 529, 529, 529, 529, 61513,
  /* 44932 */ 61514, 61515, 57894, 57894, 57894, 61518, 57894, 61520, 57894, 57894, 57894, 57894, 61525, 61526, 61527,
  /* 44947 */ 61528, 57917, 57917, 57917, 61531, 57917, 61533, 57917, 57917, 57917, 57917, 57917, 61118, 57917, 57917,
  /* 44962 */ 57917, 57917, 57917, 57917, 57917, 57917, 61124, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 44977 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 44992 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60974, 57944, 57944, 57917,
  /* 45007 */ 57917, 57917, 61538, 61539, 61540, 61541, 57944, 57944, 57944, 61544, 57944, 61546, 57944, 57944, 57944,
  /* 45022 */ 57944, 61551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 1907, 1908, 529, 529,
  /* 45046 */ 529, 529, 1915, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1930,
  /* 45066 */ 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 45081 */ 0, 0, 4246, 0, 0, 0, 529, 529, 4251, 529, 529, 529, 4255, 57894, 57894, 61601, 57894, 57894, 57894, 57894,
  /* 45101 */ 57894, 57894, 60624, 57894, 60626, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 45116 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917,
  /* 45131 */ 57917, 57917, 57917, 57917, 57917, 60921, 57917, 57917, 57894, 57894, 61605, 57894, 57917, 57917, 61607,
  /* 45146 */ 57917, 57917, 57917, 61611, 57917, 57944, 57944, 61613, 57944, 57944, 57944, 61617, 57944, 0, 0, 0, 0, 0,
  /* 45164 */ 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 58282, 57894, 57894, 57894, 57894,
  /* 45181 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 57917, 57917, 57917,
  /* 45196 */ 57917, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 379, 381, 0, 0, 0, 0,
  /* 45227 */ 0, 0, 0, 0, 0, 0, 2812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1182, 0,
  /* 45260 */ 0, 0, 0, 0, 0, 1188, 0, 371, 371, 0, 131072, 371, 0, 334, 440, 371, 440, 0, 0, 440, 440, 440, 458, 440, 0,
  /* 45285 */ 0, 0, 440, 497, 497, 497, 497, 497, 497, 497, 497, 497, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
  /* 45307 */ 440, 440, 440, 440, 440, 440, 440, 535, 57901, 535, 57901, 535, 535, 57901, 535, 535, 57924, 57901, 535,
  /* 45326 */ 535, 57901, 57901, 57901, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0,
  /* 45349 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 529, 529, 529, 529, 529, 862, 529, 529, 529, 529, 529, 529,
  /* 45375 */ 529, 529, 529, 529, 57901, 57924, 57901, 57901, 57901, 57901, 57901, 57901, 57901, 57924, 57924, 57901,
  /* 45391 */ 57901, 57951, 57901, 57901, 57901, 57901, 57901, 57901, 57901, 57951, 57951, 57901, 57901, 57901, 57901,
  /* 45406 */ 57951, 57951, 57901, 535, 57901, 529, 529, 529, 529, 529, 57894, 57894, 58261, 57894, 57894, 57894, 57894,
  /* 45423 */ 57894, 57894, 58294, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 45438 */ 0, 57917, 57917, 58337, 57917, 57917, 57917, 57917, 57917, 61242, 57917, 57917, 57917, 57917, 57917,
  /* 45453 */ 57917, 57944, 57944, 57944, 57944, 57944, 57944, 61250, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 45468 */ 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894, 57894,
  /* 45485 */ 57894, 57894, 155943, 1153, 0, 0, 0, 0, 58445, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 45502 */ 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 45519 */ 155943, 1153, 0, 303, 0, 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769,
  /* 45549 */ 730, 0, 0, 773, 0, 0, 0, 0, 0, 0, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 0, 0, 0, 0, 0, 0, 0,
  /* 45576 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57894, 57894, 58799, 57894,
  /* 45605 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 45620 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 50679, 58776,
  /* 45635 */ 992, 0, 0, 0, 0, 1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 45666 */ 529, 529, 3493, 529, 529, 529, 529, 529, 529, 1966, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 45687 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0,
  /* 45706 */ 0, 0, 0, 57917, 57917, 57917, 57917, 59947, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 45723 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60698, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 45738 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57894, 59409, 57894, 57894,
  /* 45753 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 45768 */ 57894, 57894, 57894, 50679, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 45783 */ 61246, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 45798 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894,
  /* 45814 */ 57894, 2294, 1728, 59509, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 45829 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57894, 57944, 57944, 57944, 57944, 57944,
  /* 45844 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61346, 57944, 57944, 529, 57894, 0, 0, 0,
  /* 45861 */ 4007, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 59990, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 45881 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 45896 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 60073, 57944, 57944, 57944, 57944, 57944,
  /* 45911 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 45926 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59605, 0, 0, 2859, 0,
  /* 45943 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 45971 */ 3948, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 45988 */ 57894, 57894, 57894, 57894, 61572, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 46003 */ 57917, 57917, 57917, 57917, 60401, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 46018 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944,
  /* 46033 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61255, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 46048 */ 57944, 0, 0, 0, 0, 0, 3666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46081 */ 0, 771, 0, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61141, 57944, 57944, 57944, 57944,
  /* 46099 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 46114 */ 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 57917, 57917, 57944, 57944,
  /* 46131 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 4250, 529,
  /* 46150 */ 529, 529, 529, 529, 529, 61600, 57894, 57894, 57894, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303,
  /* 46171 */ 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2816, 0, 0, 2819, 0, 0, 0, 0, 0, 0, 2825,
  /* 46201 */ 0, 0, 0, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 61606, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 46220 */ 61612, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529,
  /* 46239 */ 57894, 57894, 57894, 57894, 57894, 57894, 58283, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 46254 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 57917, 57917, 57917, 57917, 57894, 57894, 57894,
  /* 46269 */ 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0,
  /* 46286 */ 0, 4296, 529, 529, 529, 61642, 57894, 57894, 57894, 61644, 57917, 57917, 57917, 57917, 57917, 58961,
  /* 46302 */ 58962, 57917, 57917, 0, 57894, 57944, 57944, 57944, 57944, 58972, 57944, 57944, 57944, 57944, 57944,
  /* 46317 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46338 */ 0, 529, 529, 529, 529, 4161, 57917, 61646, 57944, 57944, 57944, 0, 0, 529, 529, 57894, 57894, 57917,
  /* 46356 */ 57917, 57944, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 57894, 57917,
  /* 46373 */ 57944, 0, 529, 529, 529, 529, 529, 529, 529, 529, 3710, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 46394 */ 529, 529, 529, 529, 3720, 529, 529, 529, 529, 529, 3725, 529, 3727, 0, 0, 0, 0, 131072, 0, 0, 0, 441, 0,
  /* 46417 */ 441, 447, 0, 441, 441, 441, 0, 441, 478, 478, 478, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
  /* 46439 */ 491, 491, 491, 491, 491, 491, 536, 57902, 536, 57902, 536, 536, 57902, 536, 536, 57925, 57902, 536, 536,
  /* 46458 */ 57902, 57902, 57902, 57925, 57902, 57902, 57902, 57902, 57902, 57902, 57902, 57925, 57925, 57902, 57902,
  /* 46473 */ 57952, 57902, 57902, 57902, 57902, 57902, 57902, 57902, 57952, 57952, 57902, 57902, 57902, 57902, 57952,
  /* 46488 */ 57952, 57902, 536, 57902, 57902, 57902, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0,
  /* 46509 */ 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 841, 0, 0, 529, 529, 529, 529, 529, 864, 529, 529, 529,
  /* 46536 */ 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 0, 1285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46566 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0, 2421, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 46594 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2496, 529,
  /* 46615 */ 2498, 529, 529, 529, 0, 0, 0, 3207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529,
  /* 46646 */ 529, 529, 529, 529, 529, 529, 3495, 529, 529, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46669 */ 0, 0, 0, 0, 0, 0, 3433, 0, 0, 0, 3437, 0, 0, 0, 0, 0, 3443, 0, 0, 0, 0, 0, 0, 2351104, 0, 0, 0, 0, 0, 0,
  /* 46699 */ 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 46712 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46729 */ 0, 0, 303, 0, 0, 0, 0, 0, 0, 3471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3488, 529, 529, 529,
  /* 46760 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3240, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 46781 */ 529, 529, 529, 529, 529, 529, 529, 529, 0, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 46799 */ 57894, 57894, 57894, 57894, 529, 3525, 529, 529, 529, 60872, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 46815 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60889,
  /* 46830 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59911, 57894, 57894, 57894, 57894, 59916, 57894,
  /* 46845 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 46860 */ 57894, 57894, 59393, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59402, 57894, 57894, 57894,
  /* 46875 */ 57894, 57894, 57894, 57894, 57894, 57894, 60899, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 46890 */ 57894, 60908, 57894, 57894, 60911, 57894, 57894, 57894, 60914, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 46905 */ 57917, 57917, 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 46920 */ 57944, 57944, 57944, 58984, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60950, 57917, 57917, 60953,
  /* 46935 */ 57917, 57917, 57917, 60956, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 46950 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60973, 57944, 57944, 57944, 0, 0, 0, 0, 0,
  /* 46968 */ 0, 0, 0, 0, 0, 4089, 0, 4091, 0, 529, 529, 529, 529, 529, 4096, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 46991 */ 529, 529, 529, 529, 3506, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 47012 */ 529, 529, 529, 1950, 529, 529, 529, 529, 529, 529, 529, 529, 1959, 529, 529, 529, 57944, 57944, 57944,
  /* 47031 */ 57944, 57944, 57944, 57944, 60983, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60992,
  /* 47046 */ 57944, 57944, 60995, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47067 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3439, 0, 0, 0, 0, 0, 529, 3705, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 47094 */ 529, 529, 529, 529, 529, 529, 529, 529, 3717, 529, 529, 529, 529, 529, 529, 529, 3722, 529, 3724, 529,
  /* 47114 */ 529, 529, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 59860, 57894, 57894, 57894, 57894, 57894,
  /* 47132 */ 57894, 57894, 57894, 57894, 57894, 57894, 59872, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 2594, 0,
  /* 47148 */ 0, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47164 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60008, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47179 */ 57917, 57917, 57917, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 61076, 57894, 57894, 57894, 57894,
  /* 47196 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61088, 57894, 57894,
  /* 47211 */ 57894, 57894, 57894, 57894, 57894, 57894, 60648, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 47226 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 2597, 57917, 57917, 57894,
  /* 47242 */ 57894, 57894, 61094, 57894, 61096, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 47257 */ 57894, 57917, 57917, 61105, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47272 */ 57917, 58928, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47287 */ 57917, 58947, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61117, 57917, 57917, 57917, 57917,
  /* 47302 */ 57917, 57917, 57917, 57917, 61123, 57917, 61125, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47317 */ 57917, 57917, 57917, 57944, 57944, 61134, 57944, 57944, 57944, 4081, 0, 4082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47338 */ 0, 0, 529, 4093, 529, 4094, 529, 529, 529, 4098, 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 0, 0,
  /* 47361 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 47376 */ 57894, 57894, 57894, 57894, 59894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 47391 */ 57894, 57894, 3681, 0, 0, 0, 3836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3844, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 47419 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2444, 529, 529, 529,
  /* 47440 */ 529, 2449, 529, 529, 3854, 529, 529, 529, 529, 529, 529, 529, 529, 3860, 529, 529, 529, 529, 529, 529,
  /* 47460 */ 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61216, 57894, 57894, 57894, 1,
  /* 47476 */ 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 651,
  /* 47503 */ 0, 57917, 57917, 57917, 61241, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944,
  /* 47518 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61254, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 47533 */ 57944, 57944, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 3934, 0, 0, 0, 0,
  /* 47558 */ 0, 61260, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0,
  /* 47577 */ 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 47609 */ 529, 529, 529, 3850, 529, 529, 57894, 61627, 61628, 57894, 57894, 57917, 57917, 61631, 61632, 57917,
  /* 47625 */ 57917, 57944, 57944, 61635, 61636, 57944, 57944, 0, 0, 0, 0, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 47643 */ 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 47658 */ 57944, 57944, 0, 0, 0, 0, 0, 529, 529, 4279, 4280, 529, 529, 57894, 0, 0, 0, 0, 689, 690, 0, 0, 0, 0, 695,
  /* 47683 */ 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0,
  /* 47715 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 854, 529, 529, 529,
  /* 47744 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3262, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 47765 */ 529, 0, 0, 57894, 57894, 57894, 57894, 57894, 529, 529, 529, 529, 913, 57894, 57894, 57894, 57894, 58273,
  /* 47783 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 47798 */ 57894, 58332, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59995, 57917, 57917, 57917, 57917,
  /* 47813 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47828 */ 57917, 57917, 57917, 57917, 57917, 57917, 59501, 57917, 57917, 59504, 57917, 57917, 57917, 58349, 57917,
  /* 47843 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 47858 */ 58408, 0, 0, 0, 0, 57894, 57944, 57944, 57944, 57944, 58424, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 47875 */ 57944, 57944, 57944, 59046, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529,
  /* 47890 */ 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58293, 57894,
  /* 47906 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 57917, 57917, 57917,
  /* 47921 */ 57917, 529, 1409, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776,
  /* 47941 */ 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60308, 57894,
  /* 47956 */ 57894, 57894, 57894, 60311, 57894, 57894, 60313, 57894, 60314, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 47971 */ 57894, 57894, 57894, 57944, 57944, 57944, 59038, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 47986 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 48003 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60885,
  /* 48018 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48033 */ 57944, 61265, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0,
  /* 48059 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3847, 529, 529, 529, 529, 529, 529, 529, 3852, 0, 427, 427,
  /* 48086 */ 0, 131072, 427, 0, 0, 0, 427, 0, 448, 0, 0, 0, 0, 427, 336, 479, 479, 479, 492, 492, 492, 492, 492, 492,
  /* 48110 */ 492, 492, 492, 492, 512, 520, 520, 520, 520, 520, 520, 527, 520, 520, 520, 527, 520, 520, 520, 520, 520,
  /* 48131 */ 520, 537, 57903, 537, 57903, 537, 537, 57903, 537, 537, 57926, 57903, 537, 537, 57903, 57903, 57903, 1,
  /* 48149 */ 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48176 */ 0, 0, 1200, 0, 0, 1203, 1204, 0, 0, 0, 0, 1208, 0, 0, 0, 367, 367, 0, 0, 0, 0, 57903, 57926, 57903, 57903,
  /* 48201 */ 57903, 57903, 57903, 57903, 57903, 57926, 57926, 57903, 57903, 57953, 57903, 57903, 57903, 57903, 57903,
  /* 48216 */ 57903, 57903, 57953, 57953, 57903, 57903, 57903, 57903, 57953, 57953, 57903, 537, 57903, 777, 0, 0, 781,
  /* 48233 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 1853,
  /* 48266 */ 0, 0, 0, 0, 0, 0, 1751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1869, 1870, 0, 0, 0, 1873, 0, 0, 0, 0, 837, 797, 0,
  /* 48296 */ 0, 837, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 857, 529, 866, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 48320 */ 529, 529, 529, 529, 1384, 529, 529, 529, 529, 529, 529, 529, 1393, 529, 529, 1395, 529, 529, 529, 529,
  /* 48340 */ 1400, 529, 529, 529, 529, 529, 529, 529, 914, 57894, 57894, 57894, 57894, 57894, 58276, 57894, 58285,
  /* 48357 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58333, 0,
  /* 48372 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60023, 57917, 57917, 57917, 57944, 57944, 57944, 57944,
  /* 48387 */ 57944, 57944, 60032, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60044,
  /* 48402 */ 57944, 57944, 57917, 58352, 57917, 58361, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 48417 */ 57917, 57917, 57917, 57917, 58409, 0, 0, 0, 0, 57894, 57944, 57944, 57944, 57944, 57944, 58427, 57944,
  /* 48434 */ 58436, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60743, 57944, 57944, 57944, 57944, 57944,
  /* 48449 */ 57944, 57944, 60749, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48464 */ 57944, 57944, 57944, 59054, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 48481 */ 57894, 57894, 57894, 0, 0, 1249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48511 */ 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0, 0, 0, 0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48543 */ 1326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064,
  /* 48563 */ 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 0,
  /* 48577 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 1412, 529, 529, 1416, 529, 529, 529, 529, 529,
  /* 48603 */ 1423, 529, 529, 529, 1430, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 48620 */ 57894, 57894, 57894, 61102, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 48635 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48650 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48665 */ 58792, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58811, 57894, 57894, 57894, 57894,
  /* 48680 */ 57894, 57894, 57894, 57894, 57894, 58821, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 48695 */ 57894, 57894, 59888, 57894, 57894, 57894, 59891, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 48710 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60907, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 48725 */ 57894, 57917, 60915, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58916, 57917, 57917, 57917,
  /* 48740 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 48755 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58946, 57917, 57917, 58950, 57917, 57917, 57917, 57917,
  /* 48770 */ 57917, 59449, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59461, 57917, 57917, 57917,
  /* 48785 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58931, 57917,
  /* 48800 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 48815 */ 57917, 57917, 58957, 57917, 57917, 57917, 58964, 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944,
  /* 48830 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58981, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48845 */ 57944, 57944, 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 3927, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 3936, 0, 0, 0,
  /* 48870 */ 57944, 59000, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59010, 57944, 57944, 57944,
  /* 48885 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48900 */ 57944, 57944, 60752, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 48915 */ 57944, 57944, 57944, 57944, 59041, 57944, 57944, 59045, 57944, 57944, 57944, 57944, 57944, 59052, 57944,
  /* 48930 */ 57944, 57944, 59059, 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 48947 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58309, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 48962 */ 0, 57917, 57917, 57917, 57917, 0, 1824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48991 */ 0, 0, 0, 0, 0, 0, 0, 0, 1822, 0, 0, 0, 0, 1848, 1849, 0, 1851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49021 */ 1865, 0, 1867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49053 */ 0, 0, 0, 0, 0, 0, 313, 312, 0, 0, 0, 312, 312, 313, 313, 529, 529, 529, 529, 529, 529, 1971, 529, 529,
  /* 49077 */ 529, 529, 529, 529, 529, 529, 529, 529, 1981, 1983, 529, 529, 529, 529, 58776, 0, 57894, 57894, 57894,
  /* 49096 */ 57894, 57894, 57894, 57894, 0, 0, 0, 0, 57917, 57917, 57917, 59946, 57917, 59948, 57917, 57917, 57917,
  /* 49113 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60678, 57917, 57917,
  /* 49128 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60691,
  /* 49143 */ 57894, 57894, 57894, 57894, 57894, 59414, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 49158 */ 57894, 59425, 59427, 57894, 57894, 57894, 57894, 50679, 0, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49173 */ 57917, 57917, 57917, 58883, 57917, 57917, 57917, 58892, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49188 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59978, 57917, 57917, 57917,
  /* 49203 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944,
  /* 49218 */ 59610, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59621, 59623, 57944, 57944,
  /* 49233 */ 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0,
  /* 49255 */ 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1816, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49289 */ 0, 0, 2343, 0, 0, 0, 0, 0, 2349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49321 */ 0, 0, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 450560, 0, 2367, 0, 0,
  /* 49347 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49380 */ 3220, 0, 0, 0, 529, 3224, 529, 529, 529, 529, 57894, 57894, 57894, 59934, 57894, 57894, 57894, 0, 0, 0, 0,
  /* 49401 */ 57917, 57917, 57917, 57917, 57917, 57917, 59949, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49416 */ 57917, 57917, 57917, 59961, 57917, 57917, 57917, 57917, 57917, 59480, 59481, 59483, 57917, 57917, 57917,
  /* 49431 */ 57917, 57917, 57917, 57917, 59491, 59492, 57917, 59494, 57917, 57917, 59497, 59498, 57917, 57917, 57917,
  /* 49446 */ 57917, 57917, 57917, 57917, 59506, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60106, 57944,
  /* 49461 */ 57944, 57944, 2441, 529, 529, 529, 529, 59872, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49483 */ 0, 0, 2300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2807, 0, 0, 0, 0, 0, 0,
  /* 49514 */ 2811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2824, 0, 0, 0, 0, 0, 0, 0, 2832, 0, 0, 0, 0, 2834, 0, 0, 0,
  /* 49545 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2844, 2845, 0, 0, 2848, 0, 0, 2851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2840, 0,
  /* 49575 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49609 */ 0, 2861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2871, 0, 0, 0, 0, 529, 2875, 529, 529, 529, 529, 529, 529,
  /* 49637 */ 529, 0, 0, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60289, 57894, 57894, 57894, 57894,
  /* 49656 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61225, 57894, 57894, 57894, 57917, 57917, 57917, 57917,
  /* 49671 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59528, 57917,
  /* 49686 */ 57917, 57917, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 2934, 529, 529,
  /* 49702 */ 529, 529, 529, 529, 0, 0, 0, 0, 0, 0, 57894, 60284, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 49721 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60654, 57894, 57894, 57894, 57894,
  /* 49736 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 57917, 57917, 57894, 57894, 60326, 57894, 57894,
  /* 49752 */ 57894, 57894, 57894, 57894, 60333, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 49767 */ 57894, 60342, 57894, 57894, 57894, 60345, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 49782 */ 61100, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49797 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60410, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49812 */ 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917, 57917, 57917, 60374, 57917,
  /* 49827 */ 57917, 57917, 57917, 57917, 57917, 57917, 60379, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60385,
  /* 49842 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60393, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49857 */ 60694, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60700, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 49872 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 61248, 57944, 57944,
  /* 49887 */ 57944, 61251, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917,
  /* 49902 */ 57917, 60400, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60409, 57917,
  /* 49917 */ 57917, 57917, 60412, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 60416, 57944, 57944, 57944, 57944,
  /* 49932 */ 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 3823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49959 */ 0, 0, 0, 0, 0, 3459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 57944, 60450, 57944,
  /* 49982 */ 57944, 57944, 57944, 57944, 57944, 57944, 60458, 57944, 57944, 57944, 57944, 57944, 57944, 60465, 57944,
  /* 49997 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60058, 57944, 57944,
  /* 50012 */ 57944, 57944, 57944, 57944, 57944, 57944, 60065, 57944, 60067, 57944, 60070, 57944, 57944, 57944, 57944,
  /* 50027 */ 57944, 57944, 60474, 57944, 57944, 57944, 60477, 57944, 57944, 57944, 57944, 57944, 57944, 3137, 529, 529,
  /* 50043 */ 529, 529, 60484, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 3145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1196, 0, 0, 0,
  /* 50068 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 3155, 0, 0, 0, 0, 0, 0, 3159, 0,
  /* 50100 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3173, 3174, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50133 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50168 */ 2359296, 420, 420, 0, 0, 0, 0, 0, 0, 3205, 0, 0, 0, 0, 3210, 0, 0, 0, 3212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50197 */ 0, 0, 0, 0, 0, 529, 529, 529, 3225, 529, 529, 529, 0, 0, 0, 0, 59854, 57894, 57894, 57894, 57894, 57894,
  /* 50219 */ 57894, 57894, 59862, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 50234 */ 57894, 57894, 57894, 57894, 60653, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 50249 */ 57894, 57894, 57894, 0, 0, 57917, 57917, 529, 529, 529, 3230, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 50269 */ 529, 529, 529, 529, 529, 529, 529, 3246, 3247, 529, 529, 529, 529, 3250, 529, 529, 529, 529, 529, 529,
  /* 50289 */ 529, 529, 529, 1382, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 50310 */ 529, 529, 529, 529, 529, 1987, 58776, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 529, 529, 529,
  /* 50328 */ 529, 529, 3255, 529, 529, 529, 3258, 529, 3260, 529, 529, 529, 529, 529, 529, 529, 3264, 529, 529, 529,
  /* 50348 */ 529, 529, 0, 0, 57894, 57894, 57894, 60616, 57894, 57894, 57894, 57894, 57894, 57894, 60900, 57894, 57894,
  /* 50365 */ 60902, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917,
  /* 50380 */ 60916, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61245, 57917, 57917, 57944, 57944,
  /* 50395 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 50410 */ 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50431 */ 0, 0, 0, 57894, 57894, 57894, 57894, 60621, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 50448 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60637, 60638, 57894, 57894, 57894, 57894, 60641, 57894,
  /* 50463 */ 57894, 57894, 57894, 57894, 57894, 57894, 59350, 59351, 57894, 57894, 57894, 57894, 59358, 57894, 57894,
  /* 50478 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59373,
  /* 50493 */ 57894, 57917, 60665, 57917, 57917, 57917, 57917, 57917, 60670, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 50508 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60686, 60687, 57917, 57917, 57917,
  /* 50523 */ 57917, 60690, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 61543, 57944, 57944, 57944, 57944,
  /* 50538 */ 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 4022, 529, 529, 529,
  /* 50561 */ 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 61381, 57894, 57894, 57894, 57894, 57894,
  /* 50578 */ 57894, 57894, 57894, 57894, 58842, 57894, 57894, 58849, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 50593 */ 57894, 57894, 57894, 58863, 57894, 57894, 57894, 57894, 57894, 50679, 58776, 992, 57944, 57944, 60714,
  /* 50608 */ 57944, 57944, 57944, 57944, 57944, 60719, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 50623 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60735, 60736, 57944, 57944, 57944, 57944, 60739, 529,
  /* 50638 */ 529, 529, 57894, 57894, 57894, 3423, 0, 0, 3426, 3427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50665 */ 0, 0, 0, 0, 0, 0, 0, 1301, 0, 0, 0, 0, 1306, 0, 0, 3468, 0, 0, 0, 0, 3472, 0, 0, 0, 0, 3477, 0, 0, 0, 0,
  /* 50695 */ 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 3492, 529, 529, 529, 529, 3496, 529, 529, 529, 529, 529, 529,
  /* 50718 */ 529, 3502, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3516, 529, 529, 529,
  /* 50739 */ 529, 529, 529, 529, 529, 529, 529, 529, 1383, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 50760 */ 529, 529, 529, 529, 529, 529, 529, 1405, 57944, 57944, 61261, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 50777 */ 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50807 */ 0, 0, 0, 0, 0, 3845, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3507, 529,
  /* 50830 */ 3509, 529, 529, 529, 529, 529, 529, 3515, 529, 529, 3517, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 3940,
  /* 50852 */ 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894,
  /* 50873 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 50888 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61390, 57894, 61392, 57917, 57917,
  /* 50903 */ 57917, 57917, 57917, 57917, 57917, 57917, 61401, 57917, 61403, 61404, 57917, 61406, 57917, 61408, 57944,
  /* 50918 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61417, 57944, 61419, 61420, 57944, 57944, 57944, 57944,
  /* 50933 */ 57944, 57944, 57944, 57944, 61340, 57944, 61342, 57944, 57944, 57944, 57944, 57944, 57944, 529, 57894, 0,
  /* 50949 */ 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 393687, 0, 393687, 393687, 393687, 393687, 393687,
  /* 50972 */ 393687, 393687, 393687, 393687, 393687, 393687, 393687, 393687, 393687, 393687, 393687, 393687, 393687,
  /* 50985 */ 393687, 393687, 393687, 0, 61422, 57944, 61424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 51009 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3955, 529, 57894, 57894, 57894, 57894,
  /* 51028 */ 57894, 57894, 57894, 57894, 529, 529, 4217, 529, 4218, 529, 529, 529, 57894, 57894, 57894, 57894, 57894,
  /* 51045 */ 57894, 61568, 57894, 61569, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 61576,
  /* 51060 */ 57917, 61577, 57917, 57917, 57917, 57917, 57917, 59516, 59517, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 51075 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57894, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51090 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60084, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51105 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59018, 57944, 57944, 57944,
  /* 51120 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917, 57917, 57944, 57944, 57944,
  /* 51135 */ 57944, 57944, 57944, 61584, 57944, 61585, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 51154 */ 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 51170 */ 57894, 57894, 57894, 57894, 61087, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57944,
  /* 51185 */ 57944, 57944, 57944, 0, 0, 529, 529, 57894, 57894, 57917, 57917, 57944, 57944, 4309, 4310, 61655, 61656,
  /* 51202 */ 61657, 0, 529, 57894, 57917, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 529, 529, 529, 529, 529, 529,
  /* 51221 */ 529, 57894, 57894, 57894, 57894, 61517, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 51236 */ 57917, 57917, 57917, 57917, 61530, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61244, 57917,
  /* 51251 */ 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51266 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894,
  /* 51282 */ 57894, 2294, 0, 57904, 57927, 57904, 57904, 57904, 57904, 57904, 57904, 57904, 57927, 57927, 57904, 57904,
  /* 51298 */ 57954, 57904, 57904, 57904, 57904, 57904, 57904, 57904, 57954, 57954, 57904, 57904, 57904, 57904, 57954,
  /* 51313 */ 57954, 57904, 538, 57904, 57904, 57904, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0,
  /* 51334 */ 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1228, 0, 0, 0, 0, 0, 0, 1235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51366 */ 0, 0, 57894, 57894, 57894, 57894, 58836, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 51382 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 51397 */ 50679, 58776, 992, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 383, 0,
  /* 51425 */ 139264, 147456, 0, 0, 408, 0, 0, 0, 131072, 0, 0, 0, 442, 0, 442, 0, 453, 442, 442, 442, 0, 442, 480, 480,
  /* 51449 */ 480, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 539, 57905, 539,
  /* 51470 */ 57905, 539, 539, 57905, 539, 539, 57928, 57905, 539, 539, 57905, 57905, 57905, 57928, 57905, 57905, 57905,
  /* 51487 */ 57905, 57905, 57905, 57905, 57928, 57928, 57905, 57905, 57955, 57905, 57905, 57905, 57905, 57905, 57905,
  /* 51502 */ 57905, 57955, 57955, 57905, 57905, 57905, 57905, 57955, 57955, 57905, 539, 57905, 57905, 57905, 1, 24578,
  /* 51518 */ 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51546 */ 1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2358, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51578 */ 2366, 900, 529, 529, 529, 529, 57894, 57894, 58262, 57894, 57894, 57894, 58278, 57894, 57894, 57894,
  /* 51594 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58319, 57894, 57894, 57894, 57894, 0, 57917, 57917,
  /* 51609 */ 58338, 57917, 57917, 57917, 57917, 58878, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 51624 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58909, 58911, 57917, 57917, 57917,
  /* 51639 */ 57917, 57917, 57917, 57917, 57917, 60405, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60411,
  /* 51654 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51669 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51684 */ 57944, 57944, 57944, 57944, 61156, 57944, 57944, 57944, 57944, 57917, 57917, 58354, 57917, 57917, 57917,
  /* 51699 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58395, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894,
  /* 51716 */ 57944, 57944, 58413, 57944, 57944, 57944, 58429, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51731 */ 57944, 60453, 57944, 57944, 57944, 57944, 60457, 57944, 57944, 57944, 60462, 57944, 57944, 57944, 57944,
  /* 51746 */ 57944, 57944, 57944, 57944, 60470, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 51761 */ 60721, 57944, 57944, 60725, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60734,
  /* 51776 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 3922, 529, 61267, 57894, 0, 0, 0, 0, 0, 0,
  /* 51795 */ 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0,
  /* 51827 */ 0, 0, 1185, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51858 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 0, 0, 0, 0, 212992, 212992, 212992, 0, 0, 0, 0, 0, 1252, 0, 0,
  /* 51886 */ 0, 0, 0, 0, 0, 0, 0, 1263, 1264, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1884, 0, 0, 0, 0,
  /* 51917 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 4026, 529, 4028, 4029, 529, 4031,
  /* 51942 */ 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61385, 57894, 61387, 61388, 57894, 0, 0, 0,
  /* 51959 */ 1240, 0, 0, 0, 0, 0, 0, 529, 1341, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1354, 1361, 529, 529,
  /* 51982 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 1422, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894,
  /* 52002 */ 57894, 58782, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59886, 57894, 57894, 57894,
  /* 52017 */ 57894, 57894, 57894, 57894, 57894, 59893, 57894, 59895, 57894, 59898, 57894, 57894, 57894, 57894, 57894,
  /* 52032 */ 57894, 57894, 57894, 57894, 58841, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52047 */ 58857, 57894, 57894, 57894, 57894, 57894, 57894, 58868, 57894, 50679, 58776, 992, 1374, 529, 1376, 529,
  /* 52063 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1396,
  /* 52084 */ 529, 1398, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1418, 529, 529, 529, 529, 529, 529, 1429, 529,
  /* 52104 */ 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58789, 57894, 529, 529,
  /* 52120 */ 1411, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1426, 529, 529, 529, 58776, 916, 57894,
  /* 52139 */ 58779, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58844, 57894, 57894, 57894,
  /* 52154 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58861, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52169 */ 50679, 58776, 992, 57894, 58793, 58800, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58813,
  /* 52184 */ 57894, 58815, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52199 */ 57894, 57894, 57894, 57894, 57894, 59362, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52214 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58835, 57894, 58837, 57894, 57894, 57894, 57894, 57894,
  /* 52229 */ 57894, 57894, 58850, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58865,
  /* 52244 */ 57894, 57894, 57894, 50679, 58776, 992, 57917, 58874, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 52259 */ 57917, 57917, 57917, 57917, 58888, 58895, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58908,
  /* 52274 */ 57917, 58910, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59996, 57917, 57917, 57917, 57917,
  /* 52289 */ 57917, 60002, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 52304 */ 57917, 57917, 57917, 57917, 61127, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944,
  /* 52319 */ 57944, 57944, 57944, 57944, 57944, 57944, 59002, 57944, 59004, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52334 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52349 */ 59025, 57944, 59027, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 529, 529, 529, 529,
  /* 52373 */ 529, 529, 529, 529, 4099, 529, 4101, 529, 529, 4103, 529, 57944, 57944, 57944, 57944, 59040, 57944, 57944,
  /* 52391 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59055, 57944, 57944, 57944, 529, 1354, 529,
  /* 52407 */ 1411, 529, 529, 58793, 57894, 57894, 58850, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61313, 57894,
  /* 52423 */ 57894, 57894, 61316, 57917, 57917, 57917, 57917, 61320, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 52438 */ 57917, 57917, 61329, 57917, 57917, 57917, 61332, 57944, 57944, 57944, 57944, 57944, 59546, 59547, 57944,
  /* 52453 */ 57944, 57944, 57944, 59554, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52468 */ 57944, 57944, 57944, 57944, 57944, 59569, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52483 */ 60055, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52498 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59595, 59596, 57944, 57944, 57944, 57944, 57944,
  /* 52513 */ 57944, 57944, 57944, 0, 2316, 0, 2317, 0, 0, 0, 0, 0, 0, 0, 0, 2325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 52541 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483328, 0, 0, 0, 0, 0, 0, 0, 0, 57917, 59991, 57917, 57917, 57917, 57917,
  /* 52567 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60003, 57917, 57917, 57917, 57917, 57917,
  /* 52582 */ 57917, 57917, 60009, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60015, 57944, 60074, 57944, 57944,
  /* 52597 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60086, 57944, 57944, 57944,
  /* 52612 */ 57944, 57944, 57944, 57944, 60092, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60098, 57894, 57894,
  /* 52627 */ 57894, 57894, 60301, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52642 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52657 */ 57894, 57894, 60348, 57894, 57894, 0, 3152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3165, 0,
  /* 52684 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2404, 2405, 0, 0, 2407, 0, 0, 0, 0, 2412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 52715 */ 529, 529, 3229, 529, 529, 529, 529, 529, 529, 3237, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 52736 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2468, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 52757 */ 57894, 57894, 57894, 60620, 57894, 57894, 57894, 57894, 57894, 57894, 60628, 57894, 57894, 57894, 57894,
  /* 52772 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52787 */ 57894, 57894, 59896, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57944, 57944,
  /* 52802 */ 57944, 57944, 57944, 57944, 57944, 60718, 57944, 57944, 57944, 57944, 57944, 57944, 60726, 57944, 57944,
  /* 52817 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52832 */ 529, 57894, 4004, 0, 4006, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 3470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 52861 */ 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 890, 529, 529,
  /* 52885 */ 3728, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52902 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 52917 */ 57894, 60661, 57894, 0, 0, 57917, 57917, 529, 529, 4163, 529, 4165, 529, 529, 529, 57894, 57894, 57894,
  /* 52935 */ 57894, 57894, 57894, 57894, 61519, 57894, 61521, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917,
  /* 52950 */ 57917, 57917, 57917, 61532, 57917, 61534, 57917, 57917, 61581, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 52965 */ 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 57894,
  /* 52985 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61083, 57894, 57894, 57894,
  /* 53000 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59915, 57894, 57894, 57894, 57894, 57894,
  /* 53015 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59927, 57894, 57894, 57894, 61626,
  /* 53030 */ 57894, 57894, 57894, 57894, 57917, 61630, 57917, 57917, 57917, 57917, 57944, 61634, 57944, 57944, 57944,
  /* 53045 */ 57944, 0, 0, 0, 0, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917,
  /* 53063 */ 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 529, 4278,
  /* 53081 */ 529, 529, 529, 529, 57894, 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 53112 */ 0, 0, 0, 0, 0, 0, 3176, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 449, 0, 0, 0, 0, 0, 465, 481, 481, 481, 465,
  /* 53141 */ 465, 465, 465, 465, 465, 465, 465, 465, 465, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513,
  /* 53162 */ 513, 513, 513, 513, 513, 540, 57906, 540, 57906, 540, 540, 57906, 540, 540, 57929, 57906, 540, 540, 57906,
  /* 53181 */ 57906, 57906, 1, 24578, 3, 155943, 156283, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
  /* 53206 */ 0, 0, 0, 0, 0, 0, 0, 1773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 1300,
  /* 53238 */ 0, 0, 0, 0, 0, 0, 1307, 0, 57906, 57929, 57906, 57906, 57906, 57906, 57906, 57906, 57906, 57929, 57929,
  /* 53257 */ 57906, 57906, 57956, 57906, 57906, 57906, 57906, 57906, 57906, 57906, 57956, 57956, 57906, 57906, 57906,
  /* 53272 */ 57906, 57956, 57956, 57906, 540, 57906, 57917, 57917, 58355, 57917, 57917, 58371, 57917, 57917, 57917,
  /* 53287 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944, 57944,
  /* 53304 */ 57944, 57944, 57944, 58430, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60480, 57944,
  /* 53319 */ 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 648,
  /* 53342 */ 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3716, 529,
  /* 53364 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3243, 529, 529, 529, 529, 529,
  /* 53385 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 58446, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 53403 */ 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894, 57894, 57894,
  /* 53420 */ 57894, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1752, 0, 0, 0, 0, 0,
  /* 53450 */ 0, 0, 0, 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3197, 0, 0, 0, 0, 0, 0, 0, 0, 1190, 0, 0, 0,
  /* 53482 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 2321,
  /* 53514 */ 2322, 0, 2324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2338, 0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
  /* 53545 */ 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1355, 529, 529, 529, 529, 529, 529, 529,
  /* 53567 */ 529, 529, 529, 529, 529, 1385, 529, 529, 529, 1389, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 53588 */ 529, 529, 529, 529, 2921, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 53609 */ 1946, 529, 529, 529, 529, 529, 1953, 529, 529, 529, 529, 529, 529, 529, 529, 1962, 529, 529, 529, 529,
  /* 53629 */ 1413, 529, 529, 529, 529, 529, 1421, 529, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 57894,
  /* 53648 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61226, 57894, 57894, 57917, 57917, 57917,
  /* 53663 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59462,
  /* 53678 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57894,
  /* 53693 */ 58794, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 53708 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 53723 */ 57894, 57894, 57894, 59903, 59904, 58833, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 53738 */ 57894, 57894, 57894, 57894, 57894, 58852, 57894, 57894, 57894, 57894, 57894, 58860, 57894, 57894, 57894,
  /* 53753 */ 57894, 57894, 57894, 57894, 50679, 58776, 992, 57917, 58955, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 53768 */ 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 53783 */ 57944, 58983, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60746,
  /* 53798 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 53813 */ 57944, 57944, 57944, 57944, 60730, 57944, 57944, 60733, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 53828 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59042, 57944, 57944, 57944, 57944, 57944, 59050,
  /* 53843 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 1355, 529, 529, 1720, 529, 58794, 57894, 57894,
  /* 53859 */ 57894, 59069, 57894, 57894, 57894, 57894, 57894, 57894, 61097, 57894, 61099, 57894, 57894, 57894, 57894,
  /* 53874 */ 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61110, 57917,
  /* 53889 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 60957, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 53904 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 53919 */ 57944, 59022, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 1153, 0, 0, 1730, 0, 0, 0, 0, 1737,
  /* 53938 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1755, 0, 0, 0, 1758, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0,
  /* 53970 */ 808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 693, 0, 0, 789, 0, 0, 0, 0, 808, 1761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 54002 */ 0, 0, 0, 0, 1775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3193, 0, 0, 0, 0, 0, 0, 0,
  /* 54035 */ 3200, 0, 0, 0, 529, 1931, 529, 529, 529, 529, 529, 529, 529, 529, 1942, 529, 529, 529, 529, 529, 529, 529,
  /* 54057 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1394, 529, 529, 529, 529, 529, 529,
  /* 54078 */ 529, 529, 529, 529, 59374, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59385, 57894, 57894,
  /* 54094 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 54109 */ 57894, 57894, 57894, 57894, 57894, 50679, 2091, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 54124 */ 57944, 57944, 57944, 57944, 57944, 57944, 59548, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 54139 */ 57944, 59559, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59570,
  /* 54154 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60720, 57944, 60723, 57944, 57944, 57944,
  /* 54169 */ 57944, 60728, 57944, 57944, 57944, 60731, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 54184 */ 57944, 57944, 57944, 529, 3138, 529, 529, 529, 57894, 60485, 57894, 57894, 57894, 0, 0, 3143, 3144, 0, 0,
  /* 54203 */ 0, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 57944, 59581, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 54220 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 54235 */ 57944, 57944, 57944, 57944, 57944, 60069, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529,
  /* 54251 */ 2479, 529, 529, 529, 529, 2484, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 54272 */ 529, 529, 529, 529, 529, 529, 1952, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 59880, 57894,
  /* 54292 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 54307 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59929,
  /* 54322 */ 57894, 59964, 57917, 57917, 57917, 57917, 59969, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 54337 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 54352 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60047, 57944, 57944, 57944,
  /* 54367 */ 57944, 60052, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 54382 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 54397 */ 60442, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3429, 0, 0, 0, 0,
  /* 54420 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 54451 */ 3499, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 54472 */ 529, 529, 529, 529, 529, 529, 529, 529, 2930, 529, 529, 529, 529, 529, 57917, 57917, 57917, 60925, 57917,
  /* 54491 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 54506 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59988, 57917,
  /* 54521 */ 57917, 61092, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 54536 */ 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 54551 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57894, 57894, 57894, 57917, 57917, 57917,
  /* 54566 */ 57917, 61397, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944,
  /* 54581 */ 57944, 57944, 61413, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 57894,
  /* 54596 */ 57894, 0, 0, 0, 3925, 0, 0, 3928, 0, 0, 0, 0, 3681, 3933, 0, 0, 0, 0, 0, 0, 57917, 61580, 57944, 57944,
  /* 54620 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61588, 0, 0, 0, 0, 0, 0, 529, 529,
  /* 54639 */ 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61081, 57894,
  /* 54655 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61091, 343,
  /* 54670 */ 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 342, 297, 0, 0, 0, 0, 0,
  /* 54703 */ 0, 0, 2401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
  /* 54735 */ 0, 1265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1277, 0, 0, 0, 390, 391, 393, 343, 0, 0, 0, 0, 0, 0, 342, 0, 0,
  /* 54765 */ 0, 0, 342, 0, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2801,
  /* 54797 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 343, 390, 0, 0, 0,
  /* 54829 */ 139264, 147456, 0, 343, 0, 0, 425, 0, 0, 0, 0, 131072, 0, 436, 342, 0, 0, 0, 0, 454, 0, 0, 0, 342, 0, 482,
  /* 54855 */ 482, 482, 482, 498, 498, 498, 498, 498, 498, 498, 498, 498, 482, 482, 482, 482, 482, 482, 482, 482, 482,
  /* 54876 */ 482, 482, 482, 482, 482, 482, 482, 482, 541, 57907, 541, 57907, 541, 541, 57907, 541, 541, 57930, 57907,
  /* 54895 */ 541, 541, 57907, 57907, 57907, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308,
  /* 54917 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1859, 1860, 0, 1861, 1862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1871,
  /* 54947 */ 0, 0, 57907, 57930, 57907, 57907, 57907, 57907, 57907, 57907, 57907, 57930, 57930, 57907, 57943, 57957,
  /* 54963 */ 57943, 57943, 57943, 57943, 57943, 57943, 57943, 57957, 57957, 57943, 57943, 57943, 57943, 57957, 57957,
  /* 54978 */ 57943, 541, 57907, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 55009 */ 0, 0, 0, 0, 0, 0, 0, 1784, 1785, 1786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 815, 0, 798, 0, 0, 817, 0, 668, 0, 794,
  /* 55038 */ 0, 0, 0, 0, 0, 817, 794, 0, 817, 815, 0, 0, 829, 0, 0, 0, 664, 832, 0, 794, 0, 0, 0, 0, 0, 838, 0, 0, 0,
  /* 55067 */ 0, 798, 664, 842, 0, 529, 845, 529, 529, 529, 861, 529, 529, 877, 529, 529, 529, 529, 891, 529, 529, 529,
  /* 55089 */ 0, 0, 0, 2509, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55106 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59877, 57894, 529, 529, 909, 529,
  /* 55122 */ 529, 57894, 57894, 58263, 57894, 57894, 57894, 58280, 57894, 57894, 58296, 57894, 57894, 57894, 57894,
  /* 55137 */ 58310, 57894, 57894, 57894, 57894, 58328, 57894, 57894, 0, 57917, 57917, 58339, 57917, 57917, 57917,
  /* 55152 */ 57917, 58959, 57917, 57917, 57917, 57917, 0, 58834, 57944, 57944, 58970, 57944, 57944, 57944, 57944,
  /* 55167 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58997, 57944, 57944,
  /* 55182 */ 57944, 57944, 57944, 57944, 57944, 57944, 60426, 57944, 57944, 60429, 60430, 57944, 57944, 57944, 57944,
  /* 55197 */ 57944, 60435, 57944, 60437, 57944, 57944, 57944, 57944, 60441, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55212 */ 57944, 57944, 57944, 57944, 57944, 61145, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55227 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60463, 57944, 57944, 57944,
  /* 55242 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917, 57917, 58356, 57917, 57917, 58372,
  /* 55257 */ 57917, 57917, 57917, 57917, 58386, 57917, 57917, 57917, 57917, 58404, 57917, 57917, 0, 0, 0, 0, 57894,
  /* 55274 */ 57944, 57944, 58414, 57944, 57944, 57944, 58431, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55289 */ 57944, 60744, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55304 */ 57944, 57944, 60754, 57944, 57944, 60757, 57944, 57944, 60760, 58447, 57944, 57944, 57944, 57944, 58461,
  /* 55319 */ 57944, 57944, 57944, 57944, 58479, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894,
  /* 55336 */ 57894, 57894, 57894, 155943, 1153, 0, 303, 0, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 55362 */ 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 1215, 0, 0, 0, 1336, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529,
  /* 55390 */ 529, 529, 529, 529, 529, 529, 529, 1356, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1386,
  /* 55411 */ 529, 529, 529, 529, 1391, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1399, 529, 529, 529, 1406, 529,
  /* 55431 */ 529, 529, 529, 529, 1380, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 55452 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 1404, 57894, 58795, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55470 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58819, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55485 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 55500 */ 57917, 57917, 57917, 57917, 57917, 61236, 57917, 57917, 57917, 57917, 57917, 57944, 59033, 57944, 57944,
  /* 55515 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55530 */ 57944, 529, 1717, 529, 1719, 529, 529, 59066, 57894, 57894, 59068, 57894, 57894, 57894, 57894, 57894,
  /* 55546 */ 57894, 58838, 57894, 57894, 57894, 58845, 58847, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55561 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58870, 50679, 58776, 992, 529, 529, 529, 529,
  /* 55577 */ 1902, 529, 529, 529, 529, 529, 529, 529, 529, 1913, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 55598 */ 529, 529, 529, 529, 529, 529, 529, 2897, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 55619 */ 57894, 57894, 57894, 59345, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59356, 57894, 57894,
  /* 55634 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55649 */ 57894, 57894, 59428, 57894, 57894, 57894, 50679, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 55664 */ 57917, 57917, 57917, 59445, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59456, 57917, 57917,
  /* 55679 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 55694 */ 57917, 57917, 57917, 59531, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55709 */ 59541, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59552, 57944, 57944, 57944, 57944, 57944,
  /* 55724 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55739 */ 57944, 57944, 60439, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60444, 57944, 57944, 57944, 57944,
  /* 55754 */ 57944, 57944, 57944, 57944, 59582, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 55769 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529,
  /* 55784 */ 3655, 529, 57894, 61002, 57894, 0, 0, 0, 0, 0, 0, 0, 2399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2410, 0,
  /* 55812 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529,
  /* 55843 */ 0, 0, 0, 0, 0, 529, 529, 529, 2427, 2428, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 55866 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 3248, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 55887 */ 2476, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 55908 */ 529, 529, 2495, 529, 529, 529, 529, 529, 529, 529, 0, 2938, 0, 0, 0, 0, 57894, 57894, 57894, 57894, 57894,
  /* 55929 */ 57894, 57894, 57894, 60290, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58843,
  /* 55944 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55959 */ 57894, 57894, 57894, 50679, 58776, 992, 57894, 57894, 57894, 57894, 57894, 59908, 57894, 57894, 57894,
  /* 55974 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 55989 */ 57894, 57894, 57894, 57894, 57894, 59928, 57894, 57894, 57894, 57894, 57894, 57894, 59349, 57894, 57894,
  /* 56004 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59361, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56019 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 56034 */ 57917, 57917, 57917, 57917, 57917, 61237, 57917, 57917, 57917, 57917, 57917, 60017, 57917, 57917, 57917,
  /* 56049 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 60029, 57944, 60031, 57944, 57944, 57944,
  /* 56064 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60727, 57944, 57944,
  /* 56079 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0,
  /* 56096 */ 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 57944, 60100, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 56117 */ 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 56138 */ 0, 0, 0, 0, 2814, 0, 0, 0, 0, 0, 0, 0, 0, 2822, 0, 0, 0, 2826, 0, 0, 0, 2830, 0, 0, 0, 0, 0, 2783, 0,
  /* 56167 */ 2785, 0, 0, 2788, 0, 0, 0, 0, 0, 0, 2793, 0, 0, 0, 2796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2326,
  /* 56196 */ 2327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 56229 */ 0, 2806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2820, 0, 2821, 0, 2823, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 56260 */ 0, 0, 0, 2813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 0, 0,
  /* 56293 */ 0, 0, 0, 2857, 0, 0, 0, 0, 0, 2863, 0, 0, 0, 0, 2866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2874, 0, 529, 529, 529,
  /* 56322 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 1912, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 56343 */ 529, 529, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56360 */ 57894, 58787, 57894, 57894, 57894, 529, 529, 529, 529, 529, 2885, 529, 529, 2888, 2889, 529, 529, 529,
  /* 56378 */ 529, 529, 2894, 529, 2896, 529, 529, 529, 529, 2900, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 56398 */ 529, 529, 2486, 529, 529, 529, 529, 529, 2490, 2491, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 56418 */ 529, 529, 529, 529, 2893, 529, 2895, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 56439 */ 529, 1945, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2463, 529, 529,
  /* 56460 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2906, 529, 529, 529, 529, 529, 529, 529,
  /* 56481 */ 529, 2914, 529, 529, 529, 529, 529, 529, 2922, 529, 529, 529, 529, 529, 2927, 529, 529, 529, 529, 529,
  /* 56501 */ 529, 529, 529, 529, 529, 529, 529, 2918, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 56522 */ 529, 529, 529, 529, 529, 529, 1919, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 60298,
  /* 56542 */ 57894, 57894, 57894, 57894, 57894, 60303, 57894, 60305, 57894, 57894, 57894, 57894, 60309, 57894, 57894,
  /* 56557 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60315, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56572 */ 57894, 57894, 59912, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56587 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 50679, 2090, 57917, 57917, 57917,
  /* 56602 */ 57917, 57917, 57917, 57917, 57917, 57894, 60324, 57894, 57894, 57894, 57894, 57894, 57894, 60332, 57894,
  /* 56617 */ 57894, 57894, 57894, 57894, 60337, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56632 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58818, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56647 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58853, 57894, 57894, 57894, 57894, 57894,
  /* 56662 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 50679, 58776, 992, 57917, 60372, 57917, 57917, 57917,
  /* 56677 */ 57917, 60376, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60382, 57917, 57917, 57917,
  /* 56692 */ 57917, 57917, 57917, 57917, 57917, 57917, 60391, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944,
  /* 56707 */ 57944, 60958, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 56722 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60975, 57944, 57917, 60399, 57917, 57917, 57917, 57917,
  /* 56737 */ 57917, 60404, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 56752 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60036,
  /* 56767 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60447, 57944,
  /* 56782 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60456, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 56797 */ 60464, 57944, 57944, 57944, 57944, 57944, 60469, 57944, 57944, 57944, 57944, 57944, 529, 529, 3819, 57894,
  /* 56813 */ 57894, 61165, 3822, 0, 0, 0, 0, 3826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2409, 0, 0, 0,
  /* 56843 */ 0, 0, 0, 0, 0, 0, 0, 0, 2419, 0, 529, 529, 529, 3254, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 56867 */ 529, 529, 529, 529, 3263, 529, 529, 3266, 529, 529, 3269, 0, 0, 60614, 57894, 57894, 57894, 57894, 57894,
  /* 56886 */ 57894, 57894, 59382, 57894, 57894, 57894, 59387, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56901 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59395, 57894, 57894,
  /* 56916 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60646,
  /* 56931 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 56946 */ 60656, 57894, 57894, 60659, 57894, 57894, 60662, 0, 0, 60663, 57917, 57917, 57917, 57917, 59448, 57917,
  /* 56962 */ 57917, 57917, 57917, 59454, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59465,
  /* 56977 */ 57917, 57917, 57917, 57917, 59469, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60695, 57917,
  /* 56992 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60705,
  /* 57007 */ 57917, 57917, 60708, 57917, 57917, 60711, 60712, 3417, 529, 529, 60764, 57894, 57894, 0, 0, 0, 0, 0, 0, 0,
  /* 57027 */ 0, 0, 0, 0, 0, 0, 0, 0, 3434, 3435, 0, 0, 0, 0, 3440, 0, 0, 0, 0, 0, 0, 0, 0, 2402, 0, 0, 0, 0, 0, 0, 0,
  /* 57058 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1328, 0, 1330, 0, 0, 1169, 0, 529, 529, 529, 529,
  /* 57087 */ 529, 57894, 57894, 60874, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 57102 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60891, 57894, 60893, 57894, 57894, 57894,
  /* 57117 */ 57894, 57894, 57894, 61222, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917,
  /* 57132 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61235, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 57147 */ 57917, 59971, 57917, 59973, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 57162 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60414, 57917, 57917, 57917, 57944,
  /* 57177 */ 57944, 57944, 57944, 57944, 57944, 60420, 60977, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60984,
  /* 57192 */ 57944, 57944, 60986, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 57207 */ 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 3827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57235 */ 0, 0, 1175, 0, 0, 0, 0, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3661, 0, 3663, 0, 0, 0, 3667, 0, 0, 0, 0, 0, 0,
  /* 57265 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 3227, 529, 529, 529,
  /* 57294 */ 529, 529, 529, 3708, 3709, 529, 529, 529, 529, 3713, 3714, 529, 529, 529, 529, 529, 3718, 529, 529, 529,
  /* 57314 */ 529, 529, 529, 529, 3723, 529, 529, 529, 529, 529, 529, 529, 529, 1939, 529, 529, 529, 1944, 529, 529,
  /* 57334 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2925, 529, 529, 529,
  /* 57355 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 61095, 57894, 57894, 57894,
  /* 57372 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 57387 */ 57917, 61108, 61109, 57917, 57917, 57917, 57917, 61113, 61114, 57944, 57944, 61137, 61138, 57944, 57944,
  /* 57402 */ 57944, 57944, 61142, 61143, 57944, 57944, 57944, 57944, 57944, 61147, 57944, 57944, 57944, 57944, 57944,
  /* 57417 */ 57944, 57944, 57944, 61153, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 57432 */ 57944, 60987, 57944, 60989, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529,
  /* 57448 */ 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681,
  /* 57478 */ 0, 3834, 0, 0, 0, 0, 0, 3840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529,
  /* 57507 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 2439, 529, 529, 2443, 529, 529, 529, 2447, 529, 529, 529,
  /* 57527 */ 529, 529, 3855, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894,
  /* 57547 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61217, 57894, 57894, 57894, 57894, 57894,
  /* 57562 */ 57894, 59380, 59381, 59383, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59391, 59392, 57894, 59394,
  /* 57577 */ 57894, 57894, 59397, 59398, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59406, 57894, 57894, 57894,
  /* 57592 */ 61309, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 57607 */ 57917, 57917, 57917, 57917, 61325, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944,
  /* 57622 */ 57944, 57944, 57944, 57944, 60963, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 57637 */ 57944, 57944, 57944, 57944, 57944, 57944, 60976, 57894, 57894, 57894, 57917, 57917, 61395, 57917, 57917,
  /* 57652 */ 57917, 57917, 61400, 57917, 57917, 57917, 57917, 61405, 57917, 57917, 57917, 57944, 57944, 61411, 57944,
  /* 57667 */ 57944, 57944, 57944, 61416, 57944, 57944, 57944, 57944, 61421, 57917, 57917, 57944, 57944, 57944, 57944,
  /* 57682 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 529, 529, 529, 4252,
  /* 57701 */ 4253, 529, 529, 57894, 57894, 57894, 61602, 61603, 57894, 57894, 57894, 57917, 57917, 57917, 61608, 61609,
  /* 57717 */ 57917, 57917, 57917, 57944, 57944, 57944, 61614, 61615, 57944, 57944, 57944, 0, 0, 0, 0, 0, 529, 529, 529,
  /* 57736 */ 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 60877, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 57752 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59353,
  /* 57767 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 57782 */ 57894, 57894, 59371, 59372, 57894, 57894, 57917, 57944, 57944, 57944, 57944, 0, 0, 529, 529, 57894, 57894,
  /* 57799 */ 57917, 57917, 57944, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 57894, 57917, 57944, 4319, 4320, 61665,
  /* 57816 */ 61666, 61667, 0, 529, 529, 529, 529, 529, 529, 529, 529, 61565, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 57834 */ 57894, 57894, 57894, 57894, 57894, 57894, 61573, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 57849 */ 57917, 57917, 58385, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944,
  /* 57866 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 345, 346, 347, 348, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57889 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 297, 0, 0, 0, 0, 0, 0, 0, 2787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57922 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57956 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1787, 0, 0, 0, 0, 0, 0, 0, 349, 131072, 347, 0,
  /* 57987 */ 349, 348, 347, 348, 0, 347, 348, 348, 348, 459, 466, 483, 483, 483, 494, 494, 494, 494, 501, 494, 494,
  /* 58008 */ 501, 501, 501, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 542,
  /* 58029 */ 57908, 542, 57908, 542, 542, 57908, 542, 542, 57931, 57908, 542, 542, 57908, 57908, 57908, 1, 24578, 3,
  /* 58047 */ 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 647, 0, 0, 0, 0, 652,
  /* 58073 */ 57908, 57931, 57908, 57908, 57908, 57908, 57908, 57908, 57908, 57931, 57931, 57908, 57908, 57958, 57908,
  /* 58088 */ 57908, 57908, 57908, 57908, 57908, 57908, 57958, 57958, 57908, 57908, 57908, 57908, 57958, 57958, 57908,
  /* 58103 */ 542, 57908, 653, 654, 655, 656, 657, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 673, 0, 675, 676, 0,
  /* 58130 */ 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 1253, 0, 0, 0, 1258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 0, 0,
  /* 58162 */ 0, 0, 0, 0, 0, 0, 3160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3196, 0, 0,
  /* 58195 */ 0, 0, 0, 3201, 0, 0, 715, 0, 0, 0, 719, 0, 721, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
  /* 58226 */ 0, 0, 0, 0, 0, 0, 0, 0, 2867, 2817, 0, 0, 0, 0, 0, 2872, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 2881,
  /* 58253 */ 529, 0, 0, 0, 0, 783, 784, 0, 786, 787, 0, 0, 0, 0, 786, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0,
  /* 58283 */ 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1246, 811, 0, 0,
  /* 58316 */ 691, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 767, 823, 0, 0, 0, 0, 0, 0, 827, 698, 0, 0, 831, 0, 0, 0, 0, 0,
  /* 58347 */ 0, 0, 2837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0,
  /* 58379 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 540672, 0, 833, 0, 0, 0, 691, 698, 0, 0, 691,
  /* 58407 */ 831, 831, 0, 0, 0, 0, 0, 529, 529, 851, 855, 858, 529, 867, 529, 529, 529, 883, 885, 888, 529, 529, 529,
  /* 58430 */ 0, 0, 0, 0, 57894, 57894, 57894, 57894, 59858, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 58447 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59921, 57894, 57894,
  /* 58462 */ 57894, 57894, 59925, 57894, 57894, 57894, 57894, 57894, 59930, 901, 905, 529, 529, 529, 57894, 57894,
  /* 58478 */ 57894, 58270, 58274, 58277, 57894, 58286, 57894, 57894, 57894, 58302, 58304, 58307, 57894, 57894, 57894,
  /* 58493 */ 58320, 58324, 57894, 57894, 57894, 0, 57917, 57917, 57917, 58346, 58350, 58353, 57917, 58362, 57917,
  /* 58508 */ 57917, 57917, 58378, 58380, 58383, 57917, 57917, 57917, 58396, 58400, 57917, 57917, 57917, 0, 0, 0, 0,
  /* 58525 */ 58411, 57944, 57944, 57944, 58421, 58425, 58428, 57944, 58437, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 58540 */ 57944, 57944, 61484, 57944, 61486, 57944, 57944, 61488, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 58561 */ 529, 529, 529, 529, 529, 529, 529, 1348, 529, 529, 529, 529, 529, 1360, 529, 529, 529, 529, 529, 529, 529,
  /* 58582 */ 529, 57944, 57944, 58453, 58455, 58458, 57944, 57944, 57944, 58471, 58475, 57944, 57944, 57944, 851, 1142,
  /* 58598 */ 529, 901, 905, 1146, 0, 58491, 58270, 57894, 58320, 58324, 58496, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 58620 */ 0, 0, 0, 0, 0, 0, 0, 0, 1748, 1749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760,
  /* 58647 */ 245760, 245760, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 58676 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 0, 2359296, 0, 0, 0, 2359296, 0, 2359296, 2359296, 2359296,
  /* 58697 */ 2359296, 529, 529, 529, 1378, 529, 529, 529, 1381, 529, 529, 529, 529, 529, 529, 529, 1388, 529, 529,
  /* 58716 */ 1392, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1403, 529, 529, 529, 529, 529, 529, 529,
  /* 58736 */ 1417, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894,
  /* 58754 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61459, 57894, 57894, 61461, 57894, 57917, 57917, 57917,
  /* 58769 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61473, 57917, 57917, 61475, 57917, 529, 1410, 529,
  /* 58785 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 1424, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894,
  /* 58804 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60335, 57894, 57894, 57894, 57894,
  /* 58819 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60346, 57894, 57894, 57894, 57894,
  /* 58834 */ 57894, 57917, 57917, 57917, 58958, 57917, 57917, 57917, 57917, 57917, 0, 57894, 57944, 57944, 57944,
  /* 58849 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 58864 */ 57944, 57944, 57944, 61150, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 58879 */ 57944, 57944, 57944, 57944, 57944, 59006, 57944, 57944, 57944, 59009, 57944, 57944, 57944, 57944, 57944,
  /* 58894 */ 57944, 57944, 59016, 57944, 57944, 59020, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 58909 */ 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 2777, 0, 0, 0,
  /* 58931 */ 0, 59032, 57944, 57944, 59039, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 58946 */ 59053, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894,
  /* 58963 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60884, 57894, 57894, 57894, 57894, 57894,
  /* 58978 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58814, 58816, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 58993 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60631, 57894, 57894,
  /* 59008 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59023 */ 59919, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59038 */ 0, 0, 0, 1826, 0, 1828, 0, 0, 0, 1830, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59070 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 1876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59102 */ 1760, 0, 0, 0, 0, 0, 0, 529, 1895, 529, 529, 529, 0, 0, 0, 0, 57894, 57894, 57894, 59857, 57894, 59859,
  /* 59124 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59139 */ 57894, 57894, 57894, 57894, 57917, 57917, 57917, 61229, 57917, 57917, 57917, 61232, 57917, 57917, 57917,
  /* 59154 */ 57917, 57917, 57917, 57917, 57917, 57917, 529, 529, 529, 1901, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 59172 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1923, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 59193 */ 529, 529, 1943, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 59214 */ 529, 529, 1984, 529, 529, 529, 58776, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 529, 529, 1932,
  /* 59232 */ 529, 529, 529, 1936, 529, 529, 1941, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 59253 */ 529, 529, 529, 529, 529, 529, 529, 529, 3267, 529, 529, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59272 */ 57894, 59344, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59287 */ 57894, 57894, 57894, 57894, 57894, 57894, 59366, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59302 */ 57894, 57894, 60903, 57894, 60905, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917,
  /* 59317 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59974, 57917, 57917, 57917, 57917,
  /* 59332 */ 57917, 57917, 59979, 57917, 59981, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 59347 */ 57917, 57917, 61247, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61252, 57944, 57944, 57944, 57944,
  /* 59362 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894,
  /* 59378 */ 57894, 2775, 2295, 0, 2776, 2298, 0, 0, 0, 0, 0, 0, 57894, 59375, 57894, 57894, 57894, 59379, 57894,
  /* 59397 */ 57894, 59384, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59412 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60658, 57894, 57894, 57894, 57894,
  /* 59427 */ 0, 0, 57917, 57917, 57917, 59444, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 59443 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59466, 57917, 57917, 57917, 57917, 57917,
  /* 59458 */ 57917, 57917, 57917, 57917, 57917, 58387, 57917, 57917, 57917, 57917, 58405, 57917, 57917, 0, 0, 0, 0,
  /* 59475 */ 57894, 57944, 57944, 58415, 57944, 57944, 57944, 57944, 57944, 57944, 59475, 57917, 57917, 57917, 59479,
  /* 59490 */ 57917, 57917, 59484, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 59505 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60707,
  /* 59520 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 59575, 57944, 57944, 59580, 57944, 57944, 57944, 57944,
  /* 59535 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 59550 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59026, 57944, 57944, 57944, 57944, 0, 0, 2296, 0,
  /* 59567 */ 1157, 0, 0, 0, 0, 2299, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59599 */ 0, 0, 0, 0, 0, 0, 1277, 0, 2474, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 59622 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1407, 57894,
  /* 59642 */ 57894, 57894, 59906, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59657 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59672 */ 57894, 0, 0, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60078, 57944, 57944, 57944,
  /* 59688 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 59703 */ 57944, 57944, 57944, 57944, 57944, 57944, 3654, 529, 529, 61001, 57894, 57894, 0, 0, 0, 0, 0, 2808, 0, 0,
  /* 59723 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2831, 0, 0, 0, 0, 0, 0, 4268032,
  /* 59755 */ 0, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0,
  /* 59789 */ 0, 0, 307, 0, 0, 0, 529, 529, 529, 529, 2937, 529, 529, 0, 0, 0, 2939, 0, 1990, 57894, 57894, 57894,
  /* 59811 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59826 */ 57894, 60632, 57894, 57894, 60635, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 59841 */ 57894, 57894, 57894, 0, 0, 0, 3006, 0, 2090, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 59858 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 59873 */ 57917, 57917, 57917, 57917, 58913, 57917, 57917, 57917, 57917, 60713, 57944, 57944, 57944, 57944, 57944,
  /* 59888 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 59903 */ 57944, 57944, 57944, 57944, 57944, 57944, 60737, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 59918 */ 57944, 60080, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 59933 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60466, 57944, 57944, 57944, 57944, 57944,
  /* 59948 */ 57944, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 3425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59970 */ 3431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60003 */ 0, 0, 0, 1266, 1268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60035 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1872, 0, 61306, 57894, 57894, 57894, 57894, 57894,
  /* 60060 */ 61312, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 61318, 57917, 57917, 57917, 57917, 61322, 57917,
  /* 60075 */ 57917, 57917, 57917, 57917, 61328, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 60090 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 4212, 0, 529, 529, 529,
  /* 60111 */ 529, 57944, 61334, 57944, 57944, 57944, 57944, 61338, 57944, 57944, 57944, 57944, 57944, 61344, 57944,
  /* 60126 */ 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 4011, 0, 0, 0, 0, 0, 0, 1255, 1829, 0,
  /* 60151 */ 0, 0, 0, 1262, 1262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 3489, 529,
  /* 60181 */ 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 61398, 57917,
  /* 60198 */ 57917, 57917, 61402, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 61414,
  /* 60213 */ 57944, 57944, 57944, 61418, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 4086, 0, 0, 0, 0, 0, 0, 529, 529,
  /* 60236 */ 529, 529, 529, 529, 529, 529, 529, 4100, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3238, 529, 529,
  /* 60257 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3251, 529, 529, 529, 529, 57917,
  /* 60277 */ 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0,
  /* 60294 */ 4247, 0, 4249, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61079,
  /* 60312 */ 61080, 57894, 57894, 57894, 57894, 61084, 61085, 57894, 57894, 57894, 57894, 57894, 61089, 57894, 57894,
  /* 60327 */ 57894, 57894, 57917, 57944, 57944, 57944, 57944, 0, 0, 529, 529, 57894, 57894, 57917, 57917, 57944, 57944,
  /* 60344 */ 0, 529, 57894, 57917, 57944, 4314, 4315, 61660, 61661, 61662, 0, 529, 57894, 57917, 57944, 0, 529, 529,
  /* 60362 */ 529, 529, 529, 529, 529, 1906, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1918, 529, 529, 529, 529, 529,
  /* 60383 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3863, 529, 529, 57894, 57894, 57894, 57894, 57894,
  /* 60401 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58817, 57894, 57894, 57894, 58820, 57894,
  /* 60416 */ 57894, 57894, 57894, 57894, 57894, 57894, 58827, 57894, 57894, 58831, 57894, 57894, 0, 0, 392, 0, 0, 0,
  /* 60434 */ 396, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3678, 0, 0, 0, 0,
  /* 60467 */ 0, 350, 0, 410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 0, 0, 0, 410, 0, 350, 0, 139264, 147456, 0,
  /* 60496 */ 0, 0, 0, 0, 0, 0, 0, 0, 1255, 0, 0, 0, 750, 1262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60529 */ 0, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 437, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0,
  /* 60561 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515,
  /* 60586 */ 515, 515, 515, 515, 543, 57909, 543, 57909, 543, 543, 57909, 543, 543, 57932, 57909, 543, 543, 57909,
  /* 60604 */ 57909, 57932, 57909, 57909, 57909, 57909, 57909, 57909, 57909, 57932, 57932, 57909, 57909, 57959, 57909,
  /* 60619 */ 57909, 57909, 57909, 57909, 57909, 57909, 57959, 57959, 57909, 57909, 57909, 57909, 57959, 57959, 57909,
  /* 60634 */ 624, 57909, 57975, 57975, 57975, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307,
  /* 60655 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3453, 0, 0, 0, 0, 0, 3456, 0, 3458, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60686 */ 3466, 0, 529, 529, 910, 529, 529, 57894, 57894, 58264, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 60703 */ 57894, 57894, 57894, 57894, 58311, 57894, 57894, 57894, 57894, 58329, 57894, 57894, 0, 57917, 57917,
  /* 60718 */ 58340, 57917, 57917, 57917, 57917, 59514, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 60733 */ 57917, 59525, 59527, 57917, 57917, 57917, 57917, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 60748 */ 57944, 57944, 57944, 57944, 57944, 57944, 59011, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 60763 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59591, 57944, 57944, 57944, 57944,
  /* 60778 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58462,
  /* 60793 */ 57944, 57944, 57944, 57944, 58480, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894,
  /* 60810 */ 57894, 57894, 57894, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1746, 1747, 0, 0, 0, 0, 0,
  /* 60837 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 1170, 0,
  /* 60870 */ 0, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 57894, 58796, 57894, 57894, 57894, 57894, 58806, 57894, 57894,
  /* 60891 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58822, 57894,
  /* 60906 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61224, 57894, 57894, 57894, 57894, 57917,
  /* 60921 */ 57917, 57917, 57917, 57917, 61230, 57917, 57917, 57917, 61234, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 60936 */ 57917, 57917, 57917, 57917, 58877, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58891,
  /* 60951 */ 57917, 57917, 57917, 57917, 58901, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 60966 */ 57917, 57917, 57917, 58398, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944, 57944, 57944,
  /* 60983 */ 57944, 57944, 57944, 57944, 57944, 57917, 57917, 58917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 60998 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58939, 57917, 57917,
  /* 61013 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 61028 */ 57944, 57944, 58976, 57944, 57944, 57944, 57944, 57944, 58988, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 61043 */ 57917, 57917, 58956, 57917, 57917, 57917, 57917, 57917, 57917, 0, 57894, 57944, 57944, 57944, 58971,
  /* 61058 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58985, 57944, 57944, 57944, 57944, 58995,
  /* 61073 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60985, 57944, 57944, 57944, 57944, 57944,
  /* 61088 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0,
  /* 61105 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3830, 0, 3831, 0, 0, 0, 0, 57944, 59034, 57944, 57944, 57944, 57944,
  /* 61130 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59051, 57944, 57944, 57944, 57944, 57944, 57944, 529,
  /* 61145 */ 1357, 529, 529, 529, 529, 58796, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61223, 57894,
  /* 61161 */ 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 61231, 57917, 57917, 57917,
  /* 61176 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60931, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 61191 */ 57917, 57917, 57917, 57917, 60941, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 1153, 0,
  /* 61207 */ 0, 1731, 0, 0, 0, 0, 1738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61239 */ 2312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1776, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61271 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2337, 0, 0, 0, 1823, 0, 0, 0, 0, 0, 0, 0,
  /* 61303 */ 1259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2361, 0, 2363, 0, 0, 0,
  /* 61335 */ 0, 0, 1732, 0, 0, 0, 0, 0, 0, 1739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2315,
  /* 61367 */ 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 475136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61399 */ 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 2454, 529, 529, 529, 529, 529, 529,
  /* 61425 */ 2459, 529, 2461, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 61446 */ 2924, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2912,
  /* 61467 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 61488 */ 529, 529, 529, 529, 0, 0, 57894, 57894, 57894, 57894, 57894, 0, 0, 2597, 0, 0, 0, 57917, 57917, 57917,
  /* 61508 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 61523 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58912, 57917, 57917, 57917, 58915, 57917, 3939, 0,
  /* 61539 */ 0, 0, 0, 0, 529, 3942, 529, 529, 3944, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 61561 */ 57894, 61301, 57894, 57894, 61303, 57894, 57894, 57894, 1, 24578, 3, 155943, 156283, 297, 0, 0, 0, 0, 0,
  /* 61580 */ 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2868, 0, 0, 0, 0, 0, 0, 0, 0, 529,
  /* 61610 */ 529, 529, 529, 529, 529, 2880, 529, 529, 57944, 57944, 61335, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 61627 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0,
  /* 61649 */ 0, 0, 0, 0, 0, 3183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1273, 0,
  /* 61682 */ 0, 0, 0, 0, 0, 0, 4015, 0, 4017, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 61705 */ 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917,
  /* 61720 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61741 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2339, 0, 57917, 57917, 58357, 57917, 57917,
  /* 61769 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0,
  /* 61786 */ 57894, 57944, 57944, 57944, 57944, 57944, 57944, 58432, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 61801 */ 57944, 57944, 61341, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 57894, 0, 4005, 0, 0, 4008, 0,
  /* 61819 */ 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 2838, 0, 0, 0, 0, 0, 2842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61851 */ 0, 0, 2856, 0, 1163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61884 */ 0, 0, 221654, 221654, 529, 529, 529, 2909, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 61904 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 0, 0, 57894, 57894, 57894,
  /* 61925 */ 57894, 60617, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60451, 57944, 57944, 57944, 57944, 57944,
  /* 61940 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 61955 */ 57944, 57944, 57944, 57944, 59597, 57944, 57944, 59600, 57944, 57944, 57944, 57944, 57917, 61116, 57917,
  /* 61970 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 61985 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 62000 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60969, 57944, 57944, 57944,
  /* 62015 */ 57944, 57944, 57944, 57944, 0, 0, 0, 352, 131072, 0, 0, 352, 399, 0, 399, 0, 0, 399, 399, 399, 352, 399,
  /* 62037 */ 0, 0, 0, 399, 399, 399, 399, 399, 502, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
  /* 62059 */ 399, 399, 399, 399, 544, 57910, 544, 57910, 544, 544, 57910, 544, 544, 57933, 57910, 544, 544, 57910,
  /* 62077 */ 57910, 57910, 57933, 57910, 57910, 57910, 57910, 57910, 57910, 57910, 57933, 57933, 57910, 57910, 57960,
  /* 62092 */ 57910, 57910, 57910, 57910, 57910, 57910, 57910, 57960, 57960, 57910, 57910, 57910, 57910, 57960, 57960,
  /* 62107 */ 57910, 544, 57910, 57910, 57910, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307,
  /* 62128 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3671, 3672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62161 */ 0, 0, 0, 363, 364, 365, 366, 0, 0, 367, 0, 297, 0, 0, 0, 0, 0, 813, 814, 0, 0, 0, 0, 0, 0, 768, 0, 0, 819,
  /* 62190 */ 0, 0, 665, 0, 0, 0, 819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62223 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4359060, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 62241 */ 4358144, 0, 834, 0, 0, 0, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 0, 529, 529, 852, 529, 529, 529, 868, 872, 529,
  /* 62267 */ 529, 529, 529, 529, 893, 895, 529, 529, 529, 529, 529, 529, 529, 1937, 1938, 1940, 529, 529, 529, 529,
  /* 62287 */ 529, 529, 529, 1948, 1949, 529, 1951, 529, 529, 1954, 1955, 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0,
  /* 62309 */ 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 62325 */ 57894, 57894, 60295, 57894, 57894, 529, 906, 529, 529, 529, 57894, 57894, 58265, 58271, 57894, 57894,
  /* 62341 */ 57894, 58287, 58291, 57894, 57894, 57894, 57894, 57894, 58312, 58314, 57894, 57894, 58325, 57894, 57894,
  /* 62356 */ 57894, 0, 57917, 57917, 58341, 58347, 57917, 57917, 57917, 58363, 58367, 57917, 57917, 57917, 57917,
  /* 62371 */ 57917, 58388, 58390, 57917, 57917, 58401, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944, 58416,
  /* 62388 */ 58422, 57944, 57944, 57944, 58438, 58442, 57944, 57944, 57944, 57944, 57944, 58463, 58465, 57944, 57944,
  /* 62403 */ 58476, 57944, 57944, 57944, 852, 529, 895, 529, 906, 529, 0, 57894, 58271, 58314, 57894, 58325, 57894,
  /* 62420 */ 155943, 1153, 0, 303, 0, 0, 0, 0, 0, 0, 1286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62451 */ 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 3226, 529, 0, 0, 1217, 0, 1219, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62479 */ 0, 0, 0, 0, 0, 1236, 0, 1238, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0,
  /* 62508 */ 499712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62541 */ 0, 0, 0, 1250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
  /* 62574 */ 0, 0, 0, 0, 4268782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
  /* 62607 */ 309, 0, 0, 0, 0, 0, 1335, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 62633 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2446, 529, 529, 529, 529, 529, 1375, 1377, 529, 529,
  /* 62653 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 62674 */ 529, 529, 529, 1401, 529, 529, 529, 0, 0, 2508, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 62693 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59870, 57894, 57894, 59874, 57894, 57894,
  /* 62708 */ 57894, 59878, 529, 529, 529, 529, 529, 1415, 529, 529, 529, 529, 529, 529, 529, 529, 1427, 1428, 529, 529,
  /* 62728 */ 58776, 916, 57894, 57894, 57894, 57894, 58783, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0,
  /* 62745 */ 0, 57917, 57917, 59945, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 62760 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60681, 57917, 57917, 60684, 57917, 57917, 57917, 57917,
  /* 62775 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 59003, 59005, 57944, 57944, 57944, 57944,
  /* 62790 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 62805 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59030, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 62820 */ 59044, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59056, 59057, 57944, 57944, 529, 529, 1718,
  /* 62836 */ 529, 529, 1721, 57894, 57894, 59067, 57894, 57894, 59070, 0, 1847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62860 */ 0, 0, 0, 0, 0, 0, 0, 0, 1793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1810, 0, 0, 0, 0, 0, 0, 0,
  /* 62893 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1233, 1234, 0, 0,
  /* 62925 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 1899, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 62950 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1924, 529, 529, 529, 529, 529, 529, 529, 0, 2938, 0, 0,
  /* 62972 */ 0, 0, 57894, 57894, 57894, 60286, 57894, 60287, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 62988 */ 57894, 57894, 57894, 57894, 57894, 59357, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 63003 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58856, 57894, 57894, 57894, 57894, 57894,
  /* 63018 */ 57894, 57894, 57894, 57894, 57894, 50679, 58776, 992, 529, 1964, 529, 529, 529, 1970, 529, 529, 529, 529,
  /* 63036 */ 529, 529, 529, 529, 529, 1979, 529, 529, 529, 529, 1985, 529, 529, 58776, 0, 57894, 57894, 57894, 57894,
  /* 63055 */ 57894, 57894, 57894, 0, 0, 0, 0, 57917, 59944, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 63072 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59530, 57917, 57894, 57944,
  /* 63087 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59342, 57894, 57894, 57894, 57894, 57894,
  /* 63102 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 63117 */ 57894, 57894, 57894, 59367, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 59943, 57917,
  /* 63134 */ 57917, 57917, 57917, 57917, 57917, 57917, 59951, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 63149 */ 57917, 57917, 57917, 57917, 59457, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 63164 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60683, 57917, 57917, 57917, 57917,
  /* 63179 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59407, 57894, 57894, 57894, 59413, 57894, 57894, 57894,
  /* 63194 */ 57894, 57894, 57894, 57894, 57894, 57894, 59423, 57894, 57894, 57894, 57894, 59429, 57894, 57894, 50679,
  /* 63209 */ 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59442, 57917, 57917, 57917, 59513, 57917, 57917,
  /* 63224 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59523, 57917, 57917, 57917, 57917, 59529, 57917, 57917,
  /* 63239 */ 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59538, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 63254 */ 57944, 57944, 57944, 61485, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63275 */ 529, 529, 529, 529, 529, 2429, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2441, 529, 529, 529,
  /* 63296 */ 529, 529, 529, 529, 529, 529, 57944, 57944, 59609, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 63313 */ 57944, 59619, 57944, 57944, 57944, 57944, 59625, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894,
  /* 63329 */ 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 1312, 0, 0, 0, 0, 0, 0, 0, 0, 1318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63358 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3486, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2394, 0, 2396,
  /* 63383 */ 2397, 2398, 0, 2400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2408, 0, 0, 0, 0, 2413, 2414, 0, 0, 0, 0, 0, 2418, 0,
  /* 63411 */ 0, 0, 0, 0, 0, 1313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1319, 1280, 0, 1303, 1322, 0, 1325, 0, 0, 1239, 0, 0, 0,
  /* 63439 */ 0, 0, 1333, 0, 0, 1215, 1333, 1340, 529, 529, 529, 529, 1346, 529, 529, 529, 529, 1352, 529, 529, 529,
  /* 63460 */ 529, 529, 529, 529, 529, 529, 529, 1373, 0, 0, 0, 0, 0, 2424, 529, 529, 529, 529, 529, 529, 2431, 529,
  /* 63482 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2466, 529, 529,
  /* 63503 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2455, 529, 529, 529, 529,
  /* 63524 */ 529, 529, 529, 529, 2462, 529, 2464, 529, 2467, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 63544 */ 529, 529, 529, 3508, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 63565 */ 1982, 529, 529, 529, 529, 529, 58776, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 529, 2475, 529,
  /* 63583 */ 529, 529, 529, 529, 2481, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 63604 */ 529, 529, 529, 529, 529, 529, 529, 529, 3268, 529, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 63623 */ 57894, 57894, 59907, 57894, 57894, 57894, 57894, 57894, 59913, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 63638 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 63653 */ 58859, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 50679, 58776, 992, 0, 2781, 2782, 0, 0, 0,
  /* 63671 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 0, 2833,
  /* 63705 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664, 0, 0, 667,
  /* 63738 */ 668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 2886, 529, 529, 529,
  /* 63765 */ 529, 529, 2891, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 63786 */ 529, 2898, 529, 529, 529, 529, 529, 529, 529, 2903, 529, 529, 529, 529, 529, 2907, 529, 529, 529, 529,
  /* 63806 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 63827 */ 529, 529, 529, 529, 529, 3726, 529, 57894, 57894, 57894, 60300, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 63844 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60316,
  /* 63859 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 2598, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 63876 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 63891 */ 57917, 61131, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 63906 */ 60448, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 63921 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 63936 */ 60072, 57944, 57944, 0, 3178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63966 */ 0, 0, 0, 0, 0, 352256, 352256, 529, 3228, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 63988 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 0, 0, 57894, 60615,
  /* 64009 */ 57894, 57894, 57894, 60618, 57894, 60619, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64024 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64039 */ 57894, 57894, 57894, 57894, 57894, 59902, 57894, 57894, 57917, 57917, 57917, 60667, 57917, 60668, 57917,
  /* 64054 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 64069 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59986, 57917, 57917, 57917, 57917,
  /* 64084 */ 57917, 57944, 57944, 57944, 57944, 60716, 57944, 60717, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 64099 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 64114 */ 57944, 57944, 57944, 60093, 57944, 57944, 57944, 57944, 60097, 57944, 57944, 0, 0, 0, 3445, 0, 0, 0, 0, 0,
  /* 64134 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1276, 0, 0, 0, 529, 529, 529, 529,
  /* 64165 */ 529, 57894, 60873, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64180 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59900, 57894,
  /* 64195 */ 57894, 57894, 57894, 57894, 57894, 57944, 57944, 57944, 61336, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 64210 */ 57944, 57944, 57944, 61345, 57944, 57944, 57944, 529, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0,
  /* 64233 */ 0, 0, 0, 3211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 870, 529,
  /* 64262 */ 529, 529, 529, 529, 889, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 61453, 57894, 57894, 57894,
  /* 64279 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 61467, 57917, 57917,
  /* 64294 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58884, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 64309 */ 58899, 57917, 57917, 57917, 58904, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 64324 */ 57917, 60026, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60034, 57944, 57944, 57944, 57944, 57944,
  /* 64339 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894,
  /* 64355 */ 57894, 303, 307, 0, 0, 0, 0, 0, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 61481, 57944, 57944, 57944,
  /* 64375 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4155, 0, 529, 529, 529, 529,
  /* 64397 */ 529, 529, 529, 529, 529, 1419, 529, 529, 529, 529, 529, 529, 529, 529, 58776, 916, 57894, 57894, 57894,
  /* 64416 */ 57894, 57894, 57894, 57894, 57894, 57894, 58788, 57894, 57894, 57917, 57917, 57944, 57944, 57944, 57944,
  /* 64431 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 4245, 0, 0, 0, 0, 529, 529, 529, 529,
  /* 64450 */ 529, 4254, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59885, 57894, 57894, 57894, 57894, 57894,
  /* 64466 */ 57894, 59890, 57894, 59892, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64481 */ 57894, 57894, 57894, 57894, 61462, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 64496 */ 57917, 57917, 57917, 57917, 57917, 61476, 57894, 61604, 57894, 57894, 57917, 57917, 57917, 57917, 57917,
  /* 64511 */ 61610, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 61616, 57944, 57944, 0, 0, 4275, 0, 4277, 529,
  /* 64528 */ 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 60876, 57894, 57894, 57894, 57894, 60880, 57894,
  /* 64544 */ 57894, 57894, 57894, 57894, 57894, 57894, 60886, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64559 */ 57894, 57894, 60649, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64574 */ 57894, 57894, 57894, 57894, 57894, 3005, 0, 57917, 57917, 57894, 57894, 57894, 57894, 57894, 57917, 57917,
  /* 64590 */ 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 4295, 0, 529, 529, 529, 529,
  /* 64608 */ 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944,
  /* 64623 */ 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 4276, 0, 529, 529, 529, 529, 529, 529, 57894, 353, 0, 0, 0, 0,
  /* 64645 */ 0, 397, 398, 400, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 401, 0, 0, 406, 0, 0, 0, 0, 0, 370, 0, 0, 0,
  /* 64675 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 370, 0, 387, 0, 0, 0, 0, 0, 0, 1879,
  /* 64707 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1865, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 64735 */ 529, 529, 529, 529, 529, 529, 4032, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 64752 */ 57894, 57894, 57894, 61103, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 64767 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58897, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 64782 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58930, 57917, 58932, 57917, 57917, 57917,
  /* 64797 */ 57917, 57917, 57917, 57917, 58945, 57917, 57917, 57917, 57917, 57917, 57917, 378, 409, 0, 400, 401, 0, 0,
  /* 64815 */ 370, 0, 0, 353, 0, 0, 370, 0, 412, 414, 0, 370, 401, 0, 0, 370, 378, 0, 139264, 147456, 401, 0, 412, 0, 0,
  /* 64840 */ 0, 131072, 0, 438, 0, 443, 0, 443, 0, 414, 443, 443, 443, 0, 467, 0, 0, 0, 495, 495, 495, 495, 495, 495,
  /* 64864 */ 495, 495, 495, 495, 516, 516, 516, 516, 516, 516, 516, 528, 516, 516, 516, 528, 516, 516, 516, 516, 516,
  /* 64885 */ 516, 545, 57911, 545, 57911, 545, 545, 57911, 545, 545, 57934, 57911, 545, 545, 57911, 57911, 57934,
  /* 64902 */ 57911, 57911, 57911, 57911, 57911, 57911, 57911, 57934, 57934, 57911, 57911, 57961, 57911, 57911, 57911,
  /* 64917 */ 57911, 57911, 57911, 57911, 57961, 57961, 57911, 57911, 57911, 57911, 57961, 57961, 57911, 625, 57911,
  /* 64932 */ 57976, 57976, 57976, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0,
  /* 64955 */ 644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4857856, 4874240,
  /* 64974 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 64985 */ 4358144, 4358144, 5259264, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65014 */ 0, 0, 0, 0, 0, 644, 529, 529, 529, 529, 529, 57894, 57894, 58266, 57894, 57894, 57894, 57894, 57894,
  /* 65033 */ 57894, 58297, 58299, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0,
  /* 65048 */ 57917, 57917, 58342, 57917, 57917, 57917, 57917, 59515, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 65063 */ 57917, 57917, 57917, 59526, 57917, 57917, 57917, 57917, 57917, 57894, 57944, 57944, 57944, 57944, 57944,
  /* 65078 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58484, 529, 529, 529, 529, 1145, 914, 0, 57894, 57894,
  /* 65095 */ 57894, 57894, 58495, 58333, 155943, 1153, 0, 0, 0, 0, 58448, 58450, 57944, 57944, 57944, 57944, 57944,
  /* 65112 */ 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894, 57894,
  /* 65129 */ 57894, 57894, 155943, 1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65158 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 65176 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 1164, 0, 0, 1166,
  /* 65193 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696, 697, 0, 367, 367, 367, 0,
  /* 65224 */ 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 1226, 0, 0, 1229, 0, 0, 0,
  /* 65256 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 491520, 524288, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65286 */ 0, 0, 0, 0, 1312, 1338, 1339, 0, 1312, 529, 529, 529, 529, 529, 529, 1347, 529, 529, 529, 1351, 529, 529,
  /* 65308 */ 1362, 529, 529, 1366, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1420, 529, 529, 529, 529, 529, 529,
  /* 65328 */ 529, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 65344 */ 58846, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 65359 */ 57894, 57894, 57894, 57894, 50679, 58776, 992, 57894, 57894, 58801, 57894, 57894, 58805, 57894, 57894,
  /* 65374 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 65389 */ 58824, 57894, 57894, 57894, 58828, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60331, 57894, 57894,
  /* 65404 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 65419 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60639, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 65434 */ 57894, 57917, 57917, 57917, 58919, 57917, 57917, 57917, 58923, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 65449 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 65464 */ 57917, 57917, 57917, 58943, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 1792, 0, 1794, 0, 0, 0, 1798,
  /* 65482 */ 0, 0, 0, 1802, 0, 0, 0, 0, 1807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3673, 3674,
  /* 65513 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59549, 57944, 57944, 57944,
  /* 65534 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59567,
  /* 65549 */ 59568, 57944, 57944, 57944, 57944, 57944, 529, 3818, 529, 57894, 61164, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65570 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2318, 0, 2319, 0, 0,
  /* 65602 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 0,
  /* 65635 */ 0, 0, 0, 3164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65668 */ 0, 0, 0, 0, 0, 0, 0, 401408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65701 */ 2378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2389, 0, 0, 0, 0, 0, 0, 0, 0, 3687, 0, 0, 0, 3690, 0, 0, 0, 0, 0, 0,
  /* 65732 */ 0, 0, 3698, 0, 0, 0, 0, 0, 0, 3701, 0, 3703, 529, 2420, 0, 0, 2423, 0, 529, 529, 2426, 529, 529, 529, 529,
  /* 65757 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776,
  /* 65778 */ 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 59992, 59993, 57917, 57917, 57917,
  /* 65793 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60004, 57917, 57917, 57917, 57917, 57917,
  /* 65808 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58889, 57917, 57917, 57917, 57917,
  /* 65823 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 65838 */ 61129, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 60016, 57917,
  /* 65853 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 60028, 57944, 57944, 57944,
  /* 65868 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 65883 */ 59626, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 57944, 57944, 60075,
  /* 65900 */ 60076, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60087, 57944,
  /* 65915 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61490,
  /* 65930 */ 0, 0, 4149, 4150, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 4160, 529, 60099, 57944, 57944, 57944, 57944, 57944,
  /* 65952 */ 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 2768, 2769, 57894, 57894, 57894, 60117, 60118, 0, 0,
  /* 65969 */ 1732, 0, 0, 1739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1855, 0, 1857, 0, 0, 0, 0, 0, 0, 0, 1864, 0, 0, 0, 0, 0, 0,
  /* 65999 */ 0, 0, 0, 0, 0, 0, 0, 663, 0, 0, 529, 529, 529, 529, 529, 860, 529, 529, 876, 529, 529, 529, 529, 529, 529,
  /* 66024 */ 529, 529, 529, 2908, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2919, 529, 529, 529, 529, 529, 529,
  /* 66045 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 61210, 57894, 57894,
  /* 66063 */ 57894, 61213, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60329, 57894,
  /* 66078 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 66093 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60347, 57894, 57894,
  /* 66108 */ 57894, 57944, 57944, 57944, 57944, 57944, 60449, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 66123 */ 57944, 57944, 57944, 60461, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 66138 */ 57944, 57944, 57944, 61146, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61152, 57944, 61154,
  /* 66153 */ 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 3256, 529, 529, 529, 529, 529,
  /* 66171 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 0, 2508, 57894, 57894, 57894, 57894,
  /* 66190 */ 57894, 57894, 57894, 57894, 61314, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 66205 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61330, 57917, 57917, 57944, 57944, 57894, 57894,
  /* 66220 */ 61308, 57894, 61310, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 66235 */ 57917, 57917, 57917, 57917, 61324, 57917, 61326, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944,
  /* 66250 */ 57944, 57944, 57944, 57944, 57944, 61545, 57944, 61547, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 0,
  /* 66269 */ 0, 0, 0, 4214, 529, 529, 529, 61449, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 66287 */ 57894, 57894, 57894, 57894, 57894, 61463, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 66302 */ 57917, 57917, 57917, 57917, 57917, 57917, 59488, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 66317 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60384, 57917, 57917, 57917, 57917,
  /* 66332 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60396, 57917, 61477, 57944, 57944, 57944, 57944, 57944,
  /* 66347 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 0, 0, 0, 0, 0, 4152, 0, 0, 0, 0,
  /* 66368 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 1974, 529, 529, 529, 529, 529, 529, 1980, 529, 529, 529, 529,
  /* 66389 */ 529, 529, 58776, 1989, 57894, 57894, 57894, 57894, 57894, 59340, 57894, 529, 529, 529, 529, 529, 4166,
  /* 66406 */ 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61522, 57894, 57894,
  /* 66421 */ 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59455, 57917, 57917, 57917,
  /* 66436 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 66451 */ 57917, 57917, 57917, 60387, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61535,
  /* 66466 */ 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61548, 57944,
  /* 66481 */ 57944, 57944, 0, 4208, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 4215, 529, 529, 529, 529, 529, 529, 529, 1972,
  /* 66504 */ 1973, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776, 0, 57894, 57894, 57894,
  /* 66524 */ 57894, 57894, 57894, 57894, 0, 0, 2597, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 66541 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59959, 57917, 57917, 59963, 4216, 529, 529, 529,
  /* 66557 */ 529, 529, 529, 529, 57894, 57894, 61566, 57894, 61567, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 66573 */ 57894, 57917, 57917, 61574, 57917, 61575, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60671,
  /* 66588 */ 57917, 60674, 57917, 57917, 57917, 57917, 60679, 57917, 57917, 57917, 60682, 57917, 57917, 57917, 57917,
  /* 66603 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60000, 57917, 57917, 57917, 57917, 60005, 57917,
  /* 66618 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59489, 57917,
  /* 66633 */ 57917, 57917, 57917, 57917, 59496, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59505, 57917,
  /* 66648 */ 57917, 57917, 57917, 57944, 57944, 61582, 57944, 61583, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 66663 */ 57944, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 66683 */ 58279, 57894, 57894, 58295, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 66698 */ 57894, 0, 57917, 57917, 57917, 57917, 413, 0, 0, 0, 131072, 0, 356, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0,
  /* 66722 */ 484, 484, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517, 521, 521, 521, 521, 521, 517, 521, 521, 521, 517, 521,
  /* 66747 */ 521, 521, 521, 521, 521, 546, 57912, 546, 57912, 546, 546, 57912, 546, 546, 57935, 57912, 546, 546, 57912,
  /* 66766 */ 57912, 57935, 57912, 57912, 57912, 57912, 57912, 57912, 57912, 57935, 57935, 57912, 57912, 57962, 57912,
  /* 66781 */ 57912, 57912, 57912, 57912, 57912, 57912, 57962, 57962, 57912, 57912, 57912, 57912, 57962, 57962, 57912,
  /* 66796 */ 626, 57912, 57977, 57977, 57977, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307,
  /* 66817 */ 308, 0, 0, 0, 0, 645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 1181, 0, 1320, 0, 0, 0, 0, 0, 0,
  /* 66848 */ 0, 0, 0, 1306, 0, 0, 0, 0, 686, 687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 367, 0, 0, 0, 0, 0, 0, 0,
  /* 66879 */ 0, 708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 66913 */ 0, 0, 0, 1210, 0, 367, 367, 0, 1213, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0, 796, 529, 848,
  /* 66942 */ 529, 529, 529, 529, 869, 873, 879, 529, 884, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2458, 529, 529,
  /* 66963 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3719,
  /* 66984 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 902, 529, 529, 529, 529, 57894, 57894, 58267, 57894, 57894,
  /* 67003 */ 57894, 57894, 58288, 58292, 58298, 57894, 58303, 57894, 57894, 57894, 57894, 57894, 58321, 57894, 57894,
  /* 67018 */ 57894, 57894, 0, 57917, 57917, 58343, 57917, 57917, 57917, 57917, 59968, 57917, 59970, 57917, 57917,
  /* 67033 */ 57917, 57917, 57917, 57917, 57917, 59976, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 67048 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59493, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 67063 */ 57917, 57917, 59502, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58364, 58368, 58374, 57917,
  /* 67078 */ 58379, 57917, 57917, 57917, 57917, 57917, 58397, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944,
  /* 67095 */ 57944, 58418, 57944, 57944, 57944, 57944, 58439, 58443, 58449, 57944, 58454, 57944, 57944, 57944, 57944,
  /* 67110 */ 57944, 58472, 57944, 57944, 57944, 57944, 529, 529, 529, 902, 529, 529, 0, 57894, 57894, 57894, 58321,
  /* 67127 */ 57894, 57894, 155943, 1153, 0, 303, 0, 0, 0, 0, 0, 0, 2346, 0, 0, 0, 0, 0, 0, 2350, 0, 0, 2352, 0, 0, 0,
  /* 67153 */ 0, 2357, 0, 0, 0, 0, 2362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 67185 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3170, 0, 0, 0, 0, 3175, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0, 0, 0,
  /* 67217 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 450560, 450560,
  /* 67244 */ 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207, 0, 1209, 0, 0, 367, 367, 0,
  /* 67274 */ 0, 0, 0, 1280, 0, 0, 0, 0, 0, 0, 0, 0, 1289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1297, 0, 0, 1167, 0, 0, 0, 1303,
  /* 67304 */ 0, 1305, 0, 0, 0, 0, 0, 0, 0, 2864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2870, 0, 0, 0, 0, 0, 529, 529, 529, 529,
  /* 67333 */ 529, 529, 529, 529, 529, 529, 529, 529, 2435, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 67354 */ 529, 529, 1387, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1402, 529,
  /* 67374 */ 1408, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1431, 58776, 916,
  /* 67394 */ 58778, 57894, 57894, 57894, 57894, 57894, 58785, 57894, 57894, 57894, 57894, 58791, 58873, 57917, 57917,
  /* 67409 */ 57917, 57917, 57917, 58880, 57917, 57917, 57917, 57917, 58886, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 67424 */ 57917, 57917, 57917, 57917, 58907, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0,
  /* 67439 */ 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58975, 57944, 57944, 57944, 58979, 57944, 57944,
  /* 67454 */ 58990, 57944, 57944, 58994, 57944, 57944, 57944, 57917, 57917, 57917, 58920, 57917, 57917, 57917, 57917,
  /* 67469 */ 58925, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58933, 57917, 57917, 57917, 58940,
  /* 67484 */ 58942, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59453, 57917, 57917, 57917, 57917,
  /* 67499 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59471, 59472,
  /* 67514 */ 57917, 57917, 57917, 57944, 59001, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 67529 */ 57944, 57944, 59014, 57944, 57944, 57944, 57944, 59019, 57944, 57944, 57944, 57944, 57944, 59024, 57944,
  /* 67544 */ 57944, 57944, 59028, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58468, 57944, 57944, 57944,
  /* 67559 */ 57944, 529, 529, 529, 898, 529, 529, 0, 57894, 57894, 57894, 58317, 57894, 57894, 155943, 1153, 0, 0, 0,
  /* 67578 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 57944, 59035,
  /* 67610 */ 59037, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 67625 */ 57944, 57944, 59060, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 67642 */ 57894, 57894, 57894, 57894, 57894, 60883, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 67657 */ 57894, 57894, 57894, 57894, 61227, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 67672 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60680, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 67687 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 1153, 0, 0, 0, 1732, 0, 0, 0, 0, 1739, 0, 0, 0, 0,
  /* 67709 */ 0, 0, 0, 0, 0, 0, 1750, 1751, 0, 0, 0, 0, 0, 1757, 0, 0, 0, 0, 0, 0, 0, 0, 5898240, 5963776, 0, 0,
  /* 67735 */ 6193152, 0, 0, 5406720, 6397952, 5300224, 5234688, 5423104, 0, 0, 0, 0, 5988352, 0, 0, 6135808, 6307840,
  /* 67752 */ 0, 5996544, 4800512, 0, 0, 0, 1795, 0, 0, 0, 0, 0, 0, 0, 0, 1804, 1805, 0, 0, 0, 0, 0, 0, 1812, 0, 0, 0,
  /* 67779 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3223, 529, 529, 529, 529, 529, 0,
  /* 67809 */ 0, 0, 0, 0, 1878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1891, 0, 1893, 1869, 529, 529, 529,
  /* 67838 */ 529, 529, 529, 529, 529, 529, 2483, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 67859 */ 2494, 529, 529, 529, 529, 529, 529, 529, 0, 0, 2508, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 67879 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59388, 57894,
  /* 67894 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 67909 */ 57894, 61228, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61233, 57917, 57917, 57917, 57917, 57917,
  /* 67924 */ 57917, 57917, 57917, 529, 529, 529, 529, 529, 529, 1905, 529, 529, 529, 529, 1911, 529, 529, 529, 529,
  /* 67943 */ 529, 529, 529, 529, 529, 529, 1922, 529, 529, 529, 529, 1926, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 67963 */ 2457, 529, 529, 529, 2460, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 67984 */ 529, 529, 529, 58776, 916, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 68000 */ 57894, 57894, 57894, 57894, 57894, 57894, 59348, 57894, 57894, 57894, 57894, 59354, 57894, 57894, 57894,
  /* 68015 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59365, 57894, 57894, 57894, 57894, 59369, 57894, 57894,
  /* 68030 */ 57894, 57894, 57894, 57894, 57894, 57894, 61456, 57894, 61458, 57894, 57894, 61460, 57894, 57894, 57917,
  /* 68045 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61470, 57917, 61472, 57917, 57917, 61474, 57917, 57917,
  /* 68060 */ 57944, 57944, 59544, 57944, 57944, 57944, 57944, 59550, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68075 */ 57944, 57944, 57944, 59561, 57944, 57944, 57944, 57944, 59565, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68090 */ 57944, 57944, 57944, 529, 529, 57894, 57894, 3924, 0, 0, 0, 3926, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0,
  /* 68113 */ 3937, 0, 0, 57944, 57944, 57944, 57944, 59578, 57944, 57944, 57944, 59583, 57944, 57944, 57944, 57944,
  /* 68129 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68144 */ 57944, 57944, 57944, 57944, 60066, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68159 */ 57944, 57944, 59612, 59613, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68174 */ 57944, 57944, 57944, 2284, 529, 2286, 529, 529, 59633, 57894, 59635, 57894, 57894, 0, 0, 0, 0, 0, 0, 2786,
  /* 68194 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2798, 0, 0, 0, 0, 0, 2802, 0, 0, 0, 0, 0, 0, 0, 0, 1254, 0, 0,
  /* 68226 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2790, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 68258 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 2877, 2878, 529, 529, 529, 529, 2341, 2342, 0,
  /* 68285 */ 0, 2344, 2345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2365, 0, 0, 0, 0, 0,
  /* 68317 */ 0, 2809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 0,
  /* 68349 */ 417792, 0, 0, 0, 0, 2369, 0, 0, 0, 0, 0, 0, 0, 2373, 0, 0, 0, 0, 0, 0, 0, 2381, 0, 0, 0, 0, 2386, 0, 0, 0,
  /* 68379 */ 0, 0, 0, 0, 0, 0, 0, 1856, 0, 0, 0, 0, 0, 0, 0, 1863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 68411 */ 1295, 0, 1175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529,
  /* 68442 */ 529, 529, 529, 529, 57917, 57917, 57917, 59967, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 68458 */ 57917, 57917, 57917, 59977, 57917, 57917, 57917, 59980, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 68473 */ 57917, 57917, 57917, 57917, 57917, 59522, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57894,
  /* 68488 */ 57944, 59533, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59540, 57917, 57917, 57917, 60019, 57917,
  /* 68503 */ 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68518 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60042, 57944, 57944, 60046, 57944, 57944, 57944,
  /* 68533 */ 60050, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60060, 57944, 57944,
  /* 68548 */ 57944, 60063, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529,
  /* 68563 */ 529, 3139, 529, 529, 57894, 57894, 60486, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57944, 57944, 57944,
  /* 68585 */ 60102, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 68601 */ 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2779, 0, 0, 0, 0, 0, 2862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2869,
  /* 68631 */ 0, 0, 0, 0, 0, 0, 529, 529, 2876, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2890, 529, 529,
  /* 68654 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1986, 529,
  /* 68675 */ 58776, 1990, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 529, 529, 529, 529, 2884, 529, 529, 529,
  /* 68692 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2899, 529, 529, 529, 529, 2902, 529, 529,
  /* 68713 */ 2904, 529, 2905, 60323, 57894, 57894, 60327, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 68728 */ 57894, 60336, 57894, 57894, 57894, 60339, 60340, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 68743 */ 57894, 57894, 57894, 57894, 57894, 60629, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 68758 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60642, 57894, 57894, 57894, 57944, 57944, 57944, 57944,
  /* 68773 */ 57944, 57944, 57944, 60425, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68788 */ 57944, 57944, 57944, 57944, 57944, 60440, 57944, 57944, 57944, 57944, 60443, 57944, 57944, 57944, 57944,
  /* 68803 */ 57944, 57944, 57944, 57944, 58470, 57944, 57944, 57944, 57944, 529, 529, 529, 900, 529, 529, 0, 57894,
  /* 68820 */ 57894, 57894, 58319, 57894, 57894, 295, 1153, 0, 0, 1157, 0, 60445, 57944, 60446, 57944, 57944, 57944,
  /* 68837 */ 57944, 57944, 57944, 57944, 57944, 57944, 60455, 57944, 57944, 60459, 57944, 57944, 57944, 57944, 57944,
  /* 68852 */ 57944, 57944, 57944, 57944, 60468, 57944, 57944, 57944, 60471, 60472, 57944, 57944, 57944, 57944, 57944,
  /* 68867 */ 57944, 57944, 59008, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 68882 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 57894,
  /* 68898 */ 57894, 57894, 0, 3660, 0, 0, 3153, 3154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 68928 */ 3171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 68961 */ 0, 0, 0, 2359296, 367, 0, 0, 0, 0, 0, 3204, 0, 3206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3219,
  /* 68991 */ 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 2432, 529, 529, 529, 529, 2436, 529, 529, 529,
  /* 69014 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2487, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 69035 */ 529, 529, 529, 529, 529, 529, 529, 2501, 529, 529, 529, 529, 3231, 529, 3234, 529, 529, 529, 529, 3239,
  /* 69055 */ 529, 529, 529, 3242, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3864,
  /* 69076 */ 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 69091 */ 57894, 57894, 57894, 57894, 57894, 60622, 57894, 60625, 57894, 57894, 57894, 57894, 60630, 57894, 57894,
  /* 69106 */ 57894, 60633, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60643,
  /* 69121 */ 57894, 57894, 57894, 57894, 57894, 57894, 59909, 59910, 57894, 57894, 57894, 57894, 57894, 57894, 59917,
  /* 69136 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 69151 */ 57894, 57894, 60634, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 69166 */ 57894, 57894, 60692, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 69181 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 69196 */ 60709, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 69211 */ 57944, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 69231 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 69246 */ 57894, 57894, 61090, 57894, 57944, 60741, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 69261 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 69276 */ 57944, 57944, 57944, 60758, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58473, 57944, 57944,
  /* 69291 */ 57944, 57944, 529, 529, 529, 903, 529, 529, 0, 57894, 57894, 57894, 58322, 57894, 57894, 155943, 1153, 0,
  /* 69309 */ 0, 0, 0, 1733, 0, 0, 0, 0, 1740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 69342 */ 2850, 0, 0, 0, 0, 0, 2855, 0, 0, 3444, 0, 0, 3446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3457, 0,
  /* 69372 */ 0, 3460, 0, 3461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 69404 */ 0, 0, 0, 0, 0, 0, 0, 1840, 0, 0, 0, 0, 0, 1845, 0, 529, 529, 529, 529, 529, 57894, 57894, 57894, 60875,
  /* 69428 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60887,
  /* 69443 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60306, 57894, 57894, 57894, 57894, 57894,
  /* 69458 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 69473 */ 57894, 57894, 50679, 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60895, 57894, 57894,
  /* 69488 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60909, 57894,
  /* 69503 */ 57894, 57894, 57894, 57894, 57917, 57917, 57917, 60917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 69518 */ 57917, 60929, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60937, 57917, 57917, 57917, 57917,
  /* 69533 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59975, 57917, 57917, 57917, 57917,
  /* 69548 */ 57917, 57917, 57917, 57917, 59982, 57917, 59984, 57917, 59987, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 69563 */ 60951, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 60959, 57944, 57944, 57944, 57944, 57944,
  /* 69578 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60971, 57944, 57944, 57944, 57944, 57944,
  /* 69593 */ 57944, 57944, 57944, 57944, 57944, 59553, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 69608 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60732, 57944, 57944,
  /* 69623 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60979, 57944, 57944, 57944, 57944,
  /* 69638 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60993, 57944, 57944, 57944,
  /* 69653 */ 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 3825, 0, 0, 0, 0, 0, 3828, 0, 0, 0, 0, 0, 0,
  /* 69678 */ 0, 0, 0, 0, 0, 0, 0, 3664, 0, 0, 0, 0, 0, 0, 0, 3670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 69711 */ 0, 0, 0, 0, 0, 0, 1839, 0, 0, 0, 0, 0, 0, 0, 0, 57944, 57944, 57944, 57944, 61139, 57944, 57944, 57944,
  /* 69734 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61149, 57944, 57944, 57944,
  /* 69749 */ 57944, 57944, 57944, 61155, 57944, 61157, 57944, 57944, 57944, 0, 0, 0, 0, 0, 4084, 0, 0, 4087, 0, 0, 0,
  /* 69770 */ 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 4102, 529, 529, 4104, 3853, 529, 529, 529,
  /* 69791 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3862, 529, 529, 529, 57894, 57894, 57894, 57894, 57894,
  /* 69810 */ 61211, 57894, 57894, 57894, 61215, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60647, 57894, 57894,
  /* 69825 */ 57894, 60650, 57894, 60652, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60657, 57894, 57894,
  /* 69840 */ 57894, 57894, 57894, 0, 0, 57917, 57917, 57944, 57944, 57944, 57944, 61262, 57944, 57944, 57944, 57944,
  /* 69856 */ 529, 529, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2323, 0, 0,
  /* 69885 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2336, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 4168,
  /* 69912 */ 57894, 57894, 57894, 61516, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61524, 57894, 57917,
  /* 69927 */ 57917, 57917, 61529, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61119, 57917, 57917, 57917,
  /* 69942 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 69957 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60967, 57944,
  /* 69972 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917, 57917, 61537, 57917, 57944,
  /* 69987 */ 57944, 57944, 61542, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61550, 57944, 0, 0, 0, 0, 0,
  /* 70005 */ 4209, 4210, 4211, 0, 4213, 529, 529, 529, 529, 529, 529, 529, 529, 2482, 529, 529, 529, 529, 529, 529,
  /* 70025 */ 529, 2488, 529, 529, 529, 529, 529, 529, 2493, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 70045 */ 1910, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1928, 1929,
  /* 70065 */ 529, 529, 529, 529, 529, 529, 4219, 4220, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70082 */ 57894, 61570, 61571, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61578,
  /* 70097 */ 61579, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61586, 61587, 57944,
  /* 70112 */ 57944, 0, 0, 0, 0, 4248, 0, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70132 */ 58281, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70147 */ 57894, 0, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 4304, 0, 529, 4305, 57894, 61650,
  /* 70164 */ 57917, 61651, 57944, 61652, 0, 529, 57894, 57917, 57944, 0, 529, 57894, 57917, 57944, 0, 529, 57894,
  /* 70181 */ 57917, 57944, 0, 529, 529, 529, 529, 529, 529, 529, 2456, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 70201 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3249, 529, 529, 529, 529,
  /* 70222 */ 529, 529, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70255 */ 0, 0, 1819, 0, 0, 0, 0, 0, 428, 428, 0, 131072, 428, 0, 0, 0, 428, 0, 0, 455, 0, 0, 0, 428, 0, 485, 485,
  /* 70282 */ 485, 0, 0, 361, 361, 361, 361, 504, 361, 361, 361, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
  /* 70304 */ 485, 485, 485, 485, 485, 485, 547, 57913, 547, 57913, 547, 547, 57913, 547, 547, 57936, 57913, 547, 547,
  /* 70323 */ 57913, 57913, 57913, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0,
  /* 70346 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 262144, 262144, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70375 */ 57913, 57936, 57913, 57913, 57913, 57913, 57913, 57913, 57913, 57936, 57936, 57913, 57913, 57963, 57913,
  /* 70390 */ 57913, 57913, 57913, 57913, 57913, 57913, 57963, 57963, 57913, 57913, 57913, 57913, 57963, 57963, 57913,
  /* 70405 */ 547, 57913, 529, 907, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58289, 57894, 57894,
  /* 70422 */ 57894, 57894, 57894, 58308, 57894, 57894, 57894, 57894, 58326, 57894, 57894, 57894, 0, 57917, 57917,
  /* 70437 */ 57917, 57917, 57917, 57917, 57917, 60927, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 70452 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60945, 57917, 60947, 57917, 57917,
  /* 70467 */ 57917, 57917, 57917, 58365, 57917, 57917, 57917, 57917, 57917, 58384, 57917, 57917, 57917, 57917, 58402,
  /* 70482 */ 57917, 57917, 57917, 0, 0, 0, 0, 58308, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58440, 57944,
  /* 70499 */ 57944, 57944, 57944, 57944, 57944, 57944, 59043, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 70514 */ 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70531 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70546 */ 0, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 58459, 57944, 57944, 57944, 57944, 58477,
  /* 70561 */ 57944, 57944, 57944, 529, 529, 529, 529, 907, 529, 0, 57894, 57894, 57894, 57894, 58326, 57894, 155943,
  /* 70578 */ 1153, 0, 1154, 0, 0, 0, 0, 0, 0, 2836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70610 */ 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 1159, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70642 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 57894, 58797, 57894, 57894, 57894, 57894, 57894,
  /* 70666 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70681 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60322, 57894, 58953, 57917, 57917,
  /* 70696 */ 57917, 57917, 57917, 57917, 57917, 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 70711 */ 57944, 57944, 58977, 57944, 57944, 57944, 58986, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 70726 */ 57944, 57944, 57944, 59048, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 1358, 529, 529,
  /* 70742 */ 529, 529, 58797, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 1764, 0, 0, 0, 0, 0, 0, 0, 1772, 0, 0, 0,
  /* 70766 */ 0, 0, 0, 0, 0, 0, 1782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2841, 0, 0, 0, 0, 2843, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70798 */ 0, 2852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1850, 0, 1852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70830 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 0, 0, 529, 529, 529, 529, 1934, 529, 529, 529, 529, 529,
  /* 70855 */ 529, 529, 529, 529, 529, 529, 1947, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1960, 529,
  /* 70876 */ 529, 529, 0, 2506, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70893 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59875, 57894, 57894, 57894, 1,
  /* 70908 */ 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0,
  /* 70935 */ 0, 0, 0, 0, 0, 6283264, 6332416, 0, 0, 0, 5881856, 0, 5382144, 0, 0, 0, 0, 0, 0, 6266880, 4784128,
  /* 70956 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 70967 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368640,
  /* 70985 */ 0, 0, 0, 57894, 57894, 57894, 59377, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 71002 */ 57894, 59390, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 59403,
  /* 71017 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60901, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 71032 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 60918, 57917, 57917, 57917,
  /* 71047 */ 57917, 60922, 57894, 57894, 57894, 57894, 57894, 59415, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 71062 */ 57894, 57894, 57894, 59426, 57894, 57894, 57894, 57894, 57894, 50679, 0, 57917, 57917, 57917, 57917,
  /* 71077 */ 57917, 57917, 57917, 57917, 57917, 59972, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 71092 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59467,
  /* 71107 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59477, 57917, 57917, 57917, 57917,
  /* 71122 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59490, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 71137 */ 57917, 57917, 57917, 57917, 57917, 59503, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60928, 57917,
  /* 71152 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 71167 */ 60943, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61120, 57917, 57917, 57917, 57917,
  /* 71182 */ 57917, 57917, 61126, 57917, 61128, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944,
  /* 71197 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60968, 57944, 57944,
  /* 71212 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59573, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71227 */ 57944, 57944, 57944, 57944, 57944, 59586, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71242 */ 57944, 57944, 57944, 57944, 59599, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71257 */ 60081, 60082, 57944, 57944, 57944, 57944, 57944, 57944, 60089, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71272 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529, 0, 57894, 57894, 57894,
  /* 71289 */ 57894, 57894, 57894, 295, 1153, 0, 0, 0, 0, 57944, 57944, 57944, 59611, 57944, 57944, 57944, 57944, 57944,
  /* 71307 */ 57944, 57944, 57944, 57944, 57944, 59622, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529,
  /* 71323 */ 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 3181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 71351 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 71385 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 507904, 57917, 57917, 59966, 57917, 57917, 57917, 57917,
  /* 71408 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 71423 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60949, 57944, 57944,
  /* 71438 */ 60049, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71453 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71468 */ 57944, 60759, 57944, 60421, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71483 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71498 */ 57944, 57944, 57944, 57944, 57944, 60473, 529, 529, 529, 529, 529, 3233, 529, 3235, 529, 529, 529, 529,
  /* 71516 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 58776,
  /* 71537 */ 1990, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 60666, 57917, 57917, 57917, 57917,
  /* 71552 */ 57917, 57917, 60673, 57917, 60675, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 71567 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60386, 57917, 57917, 57917, 57917,
  /* 71582 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 60715, 57944, 57944, 57944, 57944,
  /* 71597 */ 57944, 57944, 60722, 57944, 60724, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 71612 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60729, 57944, 57944, 57944, 57944, 57944,
  /* 71627 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 57894, 57894, 57894, 0, 0, 0, 0, 0,
  /* 71646 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3669, 0, 0, 0, 0, 0, 0, 0,
  /* 71679 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 3856, 529,
  /* 71709 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 71728 */ 57894, 57894, 57894, 57894, 57894, 57894, 61218, 57894, 57894, 57894, 57894, 57894, 57894, 61454, 57894,
  /* 71743 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 61468,
  /* 71758 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 57894, 57944, 57944, 57944, 57944,
  /* 71773 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 58991, 57944, 57944, 57944,
  /* 71788 */ 57944, 57944, 529, 529, 529, 529, 529, 529, 4167, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 71805 */ 57894, 57894, 57894, 57894, 61523, 57894, 57894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 71820 */ 57917, 57917, 59998, 59999, 57917, 57917, 57917, 57917, 57917, 57917, 60006, 57917, 57917, 57917, 57917,
  /* 71835 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58393, 57917, 57917, 57917, 57917, 0, 0, 0,
  /* 71852 */ 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57917, 61536, 57917, 57917,
  /* 71867 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 61549, 57944, 57944, 0, 0, 0,
  /* 71884 */ 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 529, 529, 2913, 529, 529, 2917, 529, 529, 529, 529,
  /* 71907 */ 529, 529, 529, 529, 529, 2926, 529, 529, 529, 2929, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 71928 */ 3505, 529, 529, 529, 529, 529, 529, 529, 529, 529, 3514, 529, 529, 529, 529, 529, 529, 529, 529, 3522,
  /* 71948 */ 529, 57894, 57894, 57894, 61629, 57894, 57917, 57917, 57917, 57917, 61633, 57917, 57944, 57944, 57944,
  /* 71963 */ 57944, 61637, 57944, 0, 0, 0, 0, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57917, 57917, 57917,
  /* 71981 */ 57917, 57917, 57917, 57917, 57917, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 4274, 0, 0, 0,
  /* 71998 */ 0, 529, 529, 529, 529, 4281, 529, 57894, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72027 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2829, 0, 0, 0, 0, 372, 372, 0, 131072, 372, 0, 0, 0, 372, 0, 0, 0, 0,
  /* 72057 */ 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 57914,
  /* 72089 */ 57937, 57914, 57914, 57914, 57914, 57914, 57914, 57914, 57937, 57937, 57914, 57914, 57964, 57914, 57914,
  /* 72104 */ 57914, 57914, 57914, 57914, 57914, 57964, 57964, 57914, 57914, 57914, 57914, 57964, 57964, 57914, 548,
  /* 72119 */ 57914, 57914, 57914, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307, 308, 0, 0, 0,
  /* 72142 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72175 */ 529, 529, 529, 3491, 529, 529, 529, 529, 529, 529, 57917, 57917, 58358, 57917, 57917, 57917, 57917, 57917,
  /* 72193 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894, 57944, 57944,
  /* 72210 */ 57944, 57944, 57944, 57944, 58433, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 59551, 57944,
  /* 72225 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 72240 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60467, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 72255 */ 57944, 1309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72288 */ 3467, 57894, 57894, 57894, 58802, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 72303 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 72318 */ 57894, 57894, 57894, 0, 0, 57917, 60664, 57944, 59036, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 72334 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 529, 529, 529, 529, 529,
  /* 72351 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60881, 57894, 57894, 57894, 57894,
  /* 72366 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60310, 57894, 57894,
  /* 72381 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 1825, 0,
  /* 72398 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1331, 0, 0, 0, 529,
  /* 72431 */ 529, 529, 529, 529, 1935, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 72452 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1397, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894,
  /* 72472 */ 57894, 59378, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 72487 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 72502 */ 59901, 57894, 57894, 57894, 57917, 57917, 57917, 59478, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 72517 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 72532 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 59989, 57917, 57917, 57944, 59574, 57944, 57944, 57944,
  /* 72547 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 72562 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60738, 57944, 0, 0, 0,
  /* 72579 */ 0, 0, 3447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2828, 0, 0,
  /* 72612 */ 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72646 */ 516569, 516569, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 364, 0, 0, 0, 0, 363, 0, 0, 0, 139264,
  /* 72674 */ 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72707 */ 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 444, 0, 444, 0, 364, 444, 444, 444,
  /* 72733 */ 0, 468, 0, 0, 0, 496, 496, 499, 499, 499, 499, 499, 505, 506, 499, 518, 518, 518, 518, 518, 518, 518, 518,
  /* 72756 */ 518, 518, 518, 518, 518, 518, 518, 518, 518, 549, 57915, 549, 57915, 549, 549, 57915, 549, 549, 57938,
  /* 72775 */ 57915, 549, 549, 57915, 57915, 57938, 57915, 57915, 57915, 57915, 57915, 57915, 57915, 57938, 57938,
  /* 72790 */ 57915, 57915, 57965, 57915, 57915, 57915, 57915, 57915, 57915, 57915, 57965, 57965, 57915, 57915, 57915,
  /* 72805 */ 57915, 57965, 57965, 57915, 627, 57915, 57978, 57978, 57978, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0,
  /* 72824 */ 0, 303, 304, 0, 0, 307, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0, 0, 0, 0, 1270, 0,
  /* 72854 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 903, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 72875 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 58322, 57894, 57894, 57894, 57894,
  /* 72890 */ 0, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 61243, 57917, 57917, 57917, 57917, 57944, 57944,
  /* 72905 */ 57944, 57944, 57944, 61249, 57944, 57944, 57944, 61253, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 72920 */ 57944, 57944, 57944, 57944, 57944, 58483, 529, 854, 529, 529, 529, 913, 0, 58273, 57894, 57894, 57894,
  /* 72937 */ 57894, 58332, 155943, 1153, 0, 0, 0, 0, 0, 2368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72966 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1788, 0, 0, 0, 0, 0, 0, 0, 0, 529, 2425, 529, 529, 529, 529, 529, 529,
  /* 72994 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2469, 529,
  /* 73015 */ 529, 529, 529, 529, 529, 57944, 57944, 60475, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 73031 */ 57944, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726,
  /* 73054 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 0, 0, 0, 0, 0, 57917, 57917, 58359, 57917, 57917, 57917,
  /* 73080 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 0, 0, 0, 0, 57894,
  /* 73097 */ 57944, 57944, 57944, 57944, 57944, 57944, 58434, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 73112 */ 60054, 57944, 60056, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 73127 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60460, 57944, 57944, 57944, 57944, 57944,
  /* 73142 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 0, 1248, 0, 0, 0, 0, 0, 0, 0, 1256,
  /* 73162 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 320,
  /* 73193 */ 0, 1153, 0, 1729, 0, 0, 0, 0, 1736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73225 */ 0, 0, 329, 0, 0, 374, 374, 407, 0, 529, 529, 529, 2505, 0, 0, 0, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 73247 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 73262 */ 57894, 57894, 57894, 57894, 60317, 57894, 57894, 57894, 57894, 57894, 57894, 0, 0, 0, 0, 2784, 0, 0, 0, 0,
  /* 73282 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3464, 0, 0, 0, 529, 529, 529, 529,
  /* 73314 */ 529, 529, 529, 2887, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 73335 */ 529, 529, 529, 529, 529, 529, 529, 58776, 1991, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 529, 908,
  /* 73353 */ 529, 529, 529, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 73369 */ 57894, 57894, 57894, 57894, 57894, 58327, 57894, 57894, 57894, 0, 57917, 57917, 57917, 57917, 57917,
  /* 73384 */ 57917, 58922, 57917, 57917, 58926, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 73399 */ 57917, 58937, 57917, 57917, 58944, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58882, 57917,
  /* 73414 */ 57917, 57917, 57917, 57917, 58894, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 73429 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 60383, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 73444 */ 57917, 57917, 57917, 57917, 57917, 57917, 57917, 58954, 57917, 57917, 57917, 57917, 57917, 57917, 57917,
  /* 73459 */ 57917, 0, 57894, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944,
  /* 73474 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 60061, 57944, 57944, 57944, 57944, 57944,
  /* 73489 */ 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 57944, 529, 2451, 529, 2453, 529, 529, 529,
  /* 73506 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 73527 */ 529, 529, 529, 529, 2901, 529, 529, 529, 529, 529, 529, 57894, 57894, 57894, 57894, 59882, 57894, 59884,
  /* 73545 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 73560 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60660, 57894, 57894, 0, 0, 57917,
  /* 73576 */ 57917, 0, 2858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529,
  /* 73605 */ 529, 529, 529, 529, 2433, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 73626 */ 529, 529, 61209, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 61214, 57894, 57894, 57894, 57894,
  /* 73641 */ 57894, 529, 529, 529, 529, 2910, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,
  /* 73661 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 2938, 0, 57894, 57894, 57894, 57894,
  /* 73680 */ 57894, 529, 529, 529, 57894, 57894, 57894, 0, 3424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73707 */ 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 3680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73741 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 451,
  /* 73770 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73804 */ 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 0,
  /* 73833 */ 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73863 */ 2310144, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 2310563,
  /* 73884 */ 2310563, 0, 0, 2310144, 0, 0, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741,
  /* 73898 */ 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310741,
  /* 73909 */ 2310741, 2310741, 2310741, 2310741, 2310741, 2310741, 2310144, 2310741, 2310144, 0, 0, 0, 2310563, 0, 0,
  /* 73924 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262739, 0, 0, 0, 2310144,
  /* 73955 */ 2310144, 2310741, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0,
  /* 73978 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 1261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74010 */ 308, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 2318336, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74040 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1241, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144,
  /* 74064 */ 4358144, 4358144, 4358144, 4358144, 6275072, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 74075 */ 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3157, 0, 0,
  /* 74099 */ 0, 0, 3161, 0, 0, 0, 0, 0, 0, 0, 3167, 3168, 3169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1257, 0, 0, 0, 0, 0, 0,
  /* 74129 */ 0, 0, 0, 0, 0, 0, 0, 1272, 0, 1274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74161 */ 469, 2335206, 2335206, 2335206, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 2335239, 2335239,
  /* 74177 */ 2335239, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307, 308, 0, 0, 0, 0, 0, 0, 0,
  /* 74202 */ 0, 0, 0, 0, 0, 0, 4276224, 1261, 0, 0, 0, 0, 0, 0, 1269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2335239, 2335239,
  /* 74229 */ 2335239, 2335239, 2335239, 2335239, 2335239, 2335239, 2335239, 2335239, 2335239, 2335239, 2335239,
  /* 74240 */ 2335239, 2335239, 2335239, 2335239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3455, 0, 0, 0,
  /* 74266 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2342912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74299 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2853, 2854, 0, 0, 0, 0, 0, 0, 0, 420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74331 */ 2359296, 0, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296,
  /* 74343 */ 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74364 */ 0, 0, 0, 0, 270336, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 74381 */ 4358144, 2359296, 2359296, 2359296, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 303, 304, 0, 4268032, 307,
  /* 74401 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5341184,
  /* 74432 */ 0, 5652480, 0, 0, 0, 2367488, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74461 */ 0, 0, 0, 0, 0, 0, 1329, 0, 0, 1332, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 74480 */ 4358144, 6275072, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 915,
  /* 74493 */ 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3476, 0, 0, 0, 0, 0, 0, 3483, 0, 0, 3485, 0,
  /* 74521 */ 0, 529, 529, 3490, 529, 529, 529, 529, 529, 529, 529, 0, 0, 0, 0, 0, 0, 57894, 57894, 60285, 57894, 57894,
  /* 74543 */ 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 60293, 57894, 57894, 57894, 57894, 0,
  /* 74558 */ 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74587 */ 0, 991, 4359059, 5333907, 5981075, 4359059, 0, 5439488, 5128192, 4358144, 5129107, 915, 5129183, 991,
  /* 74601 */ 5129107, 4359059, 0, 4358144, 915, 991, 4359059, 0, 4358144, 915, 991, 4359059, 0, 4358144, 915, 991,
  /* 74617 */ 4359059, 6004736, 6004736, 0, 0, 0, 1, 24578, 3, 155943, 155943, 297, 0, 0, 0, 0, 0, 303, 304, 0, 0, 307,
  /* 74639 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 466944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74670 */ 0, 0, 212992, 212992, 212992, 0, 0, 0, 0, 0, 4366336, 0, 0, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0,
  /* 74696 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3172, 0, 0, 0, 0, 0, 0, 0, 0, 5840896,
  /* 74727 */ 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0,
  /* 74758 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2382, 0, 0, 0, 0, 2387, 0, 0, 0, 0, 0, 0, 0,
  /* 74790 */ 4882432, 0, 0, 0, 0, 0, 0, 0, 0, 5939200, 0, 0, 5677056, 6365184, 4866048, 0, 6070272, 5545984, 5152768,
  /* 74809 */ 0, 0, 6144000, 4358144, 4866048, 4882432, 4358144, 4980736, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 74822 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 74833 */ 4358144, 4358144, 5177344, 4358144, 4358144, 4358144, 4358144, 4358144, 5242880, 4358144, 4358144,
  /* 74844 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5341184, 4358144, 4358144, 4358144, 4358144, 6045696,
  /* 74855 */ 4358144, 6070272, 4358144, 4358144, 4358144, 4358144, 6348800, 4358144, 6144000, 0, 6144000, 0, 4988928,
  /* 74868 */ 5005312, 0, 0, 0, 0, 5775360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5693440, 5005312, 4358144, 4358144, 4358144,
  /* 74889 */ 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 74900 */ 4358144, 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 5513216, 5783552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74921 */ 2310144, 0, 0, 0, 0, 0, 0, 0, 2310144, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 2310144, 0,
  /* 74946 */ 0, 0, 0, 0, 2310144, 0, 0, 2310144, 0, 0, 2310144, 0, 2310144, 2310144, 0, 2310144, 0, 2310144, 2310144,
  /* 74965 */ 0
];

JSONiqParser.EXPECTED =
[
  /*    0 */ 338, 346, 354, 451, 646, 362, 748, 370, 376, 384, 1362, 1369, 421, 392, 457, 405, 418, 429, 1529, 1366,
  /*   20 */ 437, 445, 465, 410, 473, 661, 481, 499, 507, 515, 523, 531, 539, 547, 555, 563, 571, 744, 397, 2077, 586,
  /*   41 */ 586, 585, 2155, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586,
  /*   62 */ 586, 586, 586, 586, 586, 911, 2099, 594, 602, 610, 625, 851, 639, 1906, 1498, 1081, 654, 1980, 1058, 964,
  /*   82 */ 669, 681, 873, 673, 689, 1116, 711, 1845, 706, 724, 737, 756, 1244, 762, 1131, 1311, 770, 778, 786, 1665,
  /*  102 */ 617, 794, 1748, 802, 817, 837, 845, 2224, 926, 859, 867, 694, 881, 889, 2152, 897, 899, 1281, 907, 919,
  /*  122 */ 716, 941, 577, 729, 949, 957, 972, 980, 988, 996, 1004, 1011, 1019, 1460, 1027, 1035, 1043, 1051, 2187,
  /*  141 */ 1067, 1393, 1075, 1101, 1089, 1617, 1793, 1097, 1109, 1176, 1989, 1991, 1763, 1799, 1796, 2137, 1124, 1304,
  /*  159 */ 2052, 1139, 1884, 1267, 1154, 1162, 1184, 1192, 1200, 1208, 631, 1822, 1222, 1230, 1238, 1252, 1260, 1214,
  /*  177 */ 1388, 1289, 1297, 1456, 1319, 491, 824, 1327, 1731, 1733, 1969, 1342, 1975, 2030, 1357, 1377, 1411, 1169,
  /*  195 */ 1419, 1427, 2209, 2092, 1435, 1442, 1450, 586, 2279, 1468, 1334, 1476, 1484, 1146, 1492, 2231, 1504, 1512,
  /*  213 */ 1520, 2245, 1537, 1552, 1560, 2248, 1985, 809, 1568, 1576, 1349, 1590, 1598, 1582, 1606, 1625, 1640, 1655,
  /*  231 */ 1673, 933, 1681, 1689, 1697, 1705, 1713, 1721, 1741, 1756, 1771, 1779, 2173, 1787, 1807, 1815, 2073, 1830,
  /*  249 */ 1403, 1544, 1838, 1383, 1613, 1853, 1861, 1398, 1869, 1877, 1274, 1632, 1892, 1900, 1914, 1922, 1930, 1938,
  /*  267 */ 1946, 1954, 1962, 2289, 1999, 2007, 2015, 2023, 2038, 2046, 1647, 2168, 2060, 2068, 1662, 2085, 829, 2107,
  /*  285 */ 698, 1525, 2115, 2123, 2131, 487, 2145, 2163, 2181, 2195, 2203, 2217, 2239, 2256, 2264, 2272, 586, 586,
  /*  303 */ 586, 586, 1727, 586, 2287, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586,
  /*  324 */ 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 1061, 2297, 2301, 2308, 2308, 2308, 2303,
  /*  344 */ 2307, 2308, 2314, 2312, 2325, 2318, 2322, 2329, 2332, 2336, 2340, 2344, 2348, 2352, 3498, 3498, 2777, 2357,
  /*  362 */ 2402, 3498, 3498, 2778, 3498, 3498, 2784, 3580, 2610, 2436, 2409, 2409, 2409, 2476, 2441, 2441, 2416, 2516,
  /*  380 */ 2516, 2516, 2516, 2434, 2400, 3498, 3498, 3498, 3498, 3498, 3108, 3580, 2516, 2516, 2516, 2528, 2420, 3498,
  /*  398 */ 3498, 3498, 2642, 3498, 2650, 3498, 3498, 2610, 2610, 2610, 2610, 2408, 2409, 2409, 2409, 2410, 2441, 2441,
  /*  416 */ 2441, 2496, 2409, 2409, 2439, 2441, 2441, 2441, 2441, 2441, 2378, 2516, 2516, 2497, 2516, 2516, 2516, 2516,
  /*  434 */ 2516, 2380, 2620, 2409, 2409, 2441, 2441, 2441, 2441, 2441, 2431, 2516, 2516, 2516, 2516, 2517, 2446, 3498,
  /*  452 */ 3498, 2363, 3498, 3498, 2369, 3498, 3498, 2427, 3498, 3498, 3498, 2608, 2610, 3498, 4656, 3498, 2631, 2610,
  /*  470 */ 2610, 2610, 2489, 2516, 2516, 2516, 2516, 2388, 3498, 3498, 3100, 2441, 2441, 2498, 2516, 2516, 2386, 3498,
  /*  488 */ 3498, 2637, 5103, 3498, 3498, 3498, 3498, 3964, 3865, 3498, 3870, 4656, 3633, 2610, 2610, 2407, 2409, 2409,
  /*  506 */ 2495, 2441, 2497, 2516, 2516, 2458, 3498, 3850, 3635, 2610, 2436, 2437, 2441, 2442, 2516, 2465, 3123, 2632,
  /*  524 */ 2474, 2438, 2454, 2516, 2480, 2487, 2408, 2440, 2499, 2507, 2609, 2409, 2441, 2516, 3634, 2474, 2452, 2515,
  /*  542 */ 2485, 2474, 2494, 2504, 2617, 2513, 2521, 2525, 2532, 2536, 2540, 2544, 2548, 2552, 2562, 2562, 2553, 2557,
  /*  560 */ 2561, 2562, 2566, 2570, 2574, 2578, 2582, 2586, 2590, 2594, 2598, 2602, 2614, 3498, 3498, 3498, 2629, 3498,
  /*  578 */ 3498, 2664, 3162, 3498, 3498, 3498, 3156, 3727, 3498, 3498, 3498, 3498, 3498, 3498, 3498, 3498, 2912, 2687,
  /*  596 */ 2690, 2693, 2697, 2701, 2705, 2712, 2717, 3498, 3498, 3498, 3498, 3498, 2723, 2729, 3101, 2735, 2654, 3498,
  /*  614 */ 2739, 2743, 2746, 3498, 2461, 3498, 4449, 2922, 2927, 3365, 2932, 3178, 3713, 2745, 2750, 2713, 2718, 3498,
  /*  632 */ 3498, 2901, 3498, 4431, 3498, 3679, 2392, 2758, 2762, 3498, 3498, 3498, 3554, 2766, 3498, 2610, 2490, 2375,
  /*  650 */ 2441, 2384, 2500, 2396, 2793, 3498, 3498, 3498, 3498, 3144, 2797, 3498, 2632, 2610, 2610, 2490, 2409, 2409,
  /*  668 */ 2452, 5139, 2821, 3936, 2826, 3498, 3498, 3498, 3498, 2841, 3498, 3498, 3498, 4234, 2837, 3498, 3498, 3498,
  /*  686 */ 3498, 3498, 2836, 3213, 3498, 2849, 4234, 2856, 3498, 3498, 3498, 3064, 3498, 3498, 3498, 3498, 2960, 4038,
  /*  704 */ 3498, 3498, 3394, 3498, 3498, 3498, 3347, 3498, 3498, 3498, 3144, 2864, 3498, 3498, 3498, 3088, 3498, 3498,
  /*  722 */ 3498, 4654, 3393, 3498, 3498, 3498, 3346, 3498, 3498, 3498, 3161, 3498, 3498, 3625, 4453, 2881, 3498, 3498,
  /*  740 */ 3250, 4829, 4433, 2875, 3498, 2636, 3498, 4975, 3498, 3498, 3498, 3498, 2631, 2610, 2610, 2610, 3027, 2880,
  /*  758 */ 3498, 2895, 2875, 3498, 2886, 4361, 3498, 3028, 3498, 3498, 4360, 3498, 4197, 4715, 4471, 3495, 3495, 3495,
  /*  776 */ 4715, 4052, 4472, 4472, 4472, 4700, 2905, 4195, 4471, 4748, 4473, 4051, 4196, 4084, 4081, 4083, 2909, 2916,
  /*  794 */ 2936, 2938, 2942, 2942, 2945, 3498, 2954, 2952, 2982, 2988, 4973, 2992, 3498, 3001, 3423, 3498, 2671, 3498,
  /*  812 */ 3561, 3552, 3498, 4733, 4617, 2994, 3225, 3498, 2955, 4362, 3498, 3857, 3498, 2725, 4699, 3877, 3850, 3498,
  /*  830 */ 3498, 3498, 3498, 5043, 5111, 3498, 3498, 3232, 4114, 3152, 3011, 3020, 3897, 3426, 3359, 3025, 3498, 3498,
  /*  848 */ 3498, 3976, 3032, 3498, 3498, 3039, 5049, 3579, 2423, 2653, 3498, 4758, 3498, 4859, 2971, 3021, 3498, 3498,
  /*  866 */ 3055, 4245, 3498, 3498, 3498, 3498, 3060, 4362, 3498, 3498, 3498, 3498, 2836, 4362, 3498, 2960, 3056, 3498,
  /*  884 */ 3498, 3498, 4018, 3068, 3440, 3075, 3498, 2623, 3498, 3127, 4045, 4862, 3264, 3093, 3498, 3498, 3498, 3498,
  /*  902 */ 3498, 3092, 3097, 3498, 3498, 3169, 3133, 2664, 3139, 3498, 3498, 3498, 3498, 3113, 2663, 2871, 3498, 3087,
  /*  920 */ 3143, 3498, 3498, 3498, 2664, 3139, 3498, 2768, 3044, 4451, 3049, 3498, 2390, 3498, 2808, 3498, 4302, 3800,
  /*  938 */ 4313, 4484, 4959, 2852, 3499, 3498, 3149, 4910, 3171, 2719, 3157, 2623, 4757, 3166, 3175, 3887, 3184, 3498,
  /*  956 */ 3190, 3194, 3498, 3887, 3184, 3498, 2448, 3199, 3498, 2814, 3498, 3498, 3498, 3498, 3040, 4912, 3627, 3500,
  /*  974 */ 3991, 3206, 3210, 3217, 3498, 3257, 3200, 3498, 3222, 3498, 3256, 3218, 3098, 3229, 4486, 3240, 4225, 3498,
  /*  992 */ 3248, 4223, 4227, 4162, 3255, 5165, 3261, 4226, 3268, 4163, 4224, 3276, 3280, 3302, 3326, 3326, 3291, 3295,
  /* 1010 */ 3299, 3568, 3306, 2605, 3325, 3322, 3310, 3314, 3315, 3319, 3330, 3334, 3336, 3549, 3340, 3343, 3351, 3363,
  /* 1028 */ 4439, 4869, 4318, 3369, 3373, 3377, 3381, 3385, 3385, 3386, 3498, 3498, 3927, 3498, 3651, 4826, 3006, 3507,
  /* 1046 */ 3448, 3390, 3398, 4013, 3404, 3408, 4356, 4502, 3417, 3947, 3433, 4500, 3498, 2859, 2805, 3498, 3498, 3498,
  /* 1064 */ 3498, 3498, 2353, 4471, 3079, 4127, 3454, 3460, 3468, 5072, 3475, 3483, 3498, 3498, 3498, 2961, 3492, 3498,
  /* 1082 */ 3498, 3212, 4999, 3123, 5140, 2788, 4577, 3495, 3560, 4735, 4511, 3498, 3498, 3511, 3516, 3512, 3498, 3498,
  /* 1100 */ 3498, 3498, 3498, 3420, 3498, 4120, 4828, 3505, 4305, 3536, 3540, 3546, 4307, 3559, 4418, 4511, 3498, 2863,
  /* 1118 */ 4245, 3498, 3498, 3498, 4363, 2868, 3623, 3921, 4612, 3588, 3498, 3528, 3632, 3498, 2885, 4911, 2890, 2894,
  /* 1136 */ 3413, 3498, 2892, 3077, 3498, 3498, 3789, 3498, 3498, 5046, 3498, 2928, 4139, 4432, 4317, 4330, 2996, 2789,
  /* 1154 */ 3201, 5048, 3498, 3518, 3498, 3488, 3498, 4998, 3498, 4284, 4000, 3498, 4282, 3498, 3655, 3498, 3113, 3963,
  /* 1172 */ 3498, 4161, 3990, 3498, 3113, 3565, 3498, 3498, 3498, 3498, 3498, 3573, 4807, 3069, 2508, 3498, 3005, 3071,
  /* 1190 */ 3941, 3070, 2997, 2997, 2997, 4807, 3004, 3071, 3071, 3071, 3661, 2996, 3003, 2997, 4808, 2509, 2997, 4610,
  /* 1208 */ 4601, 4603, 3668, 3669, 3664, 3673, 3498, 3498, 3271, 4228, 3498, 3498, 3498, 3272, 3708, 3712, 3498, 3964,
  /* 1226 */ 3717, 3498, 4914, 3835, 5014, 2678, 3723, 3732, 4381, 3741, 3749, 3753, 3771, 4285, 3757, 3762, 3769, 3775,
  /* 1244 */ 3498, 3498, 3411, 3498, 3251, 3815, 4359, 3498, 3965, 4441, 3498, 3780, 3498, 2644, 3784, 3793, 2658, 3797,
  /* 1262 */ 3804, 3808, 3498, 3400, 3819, 3498, 3121, 3498, 3517, 3650, 3498, 3519, 3498, 2984, 4665, 3498, 3498, 3498,
  /* 1280 */ 4993, 3498, 3105, 2954, 3112, 3500, 3498, 3233, 3118, 3964, 3717, 3498, 3833, 3195, 3498, 3841, 3845, 2659,
  /* 1298 */ 2983, 3855, 3498, 3498, 4770, 3946, 3498, 3128, 3640, 3498, 3498, 3498, 3631, 3498, 2899, 3498, 3726, 4195,
  /* 1316 */ 4470, 3498, 3497, 3498, 5133, 3498, 3498, 3498, 3498, 3498, 3861, 3884, 3498, 3498, 3498, 3498, 3498, 4135,
  /* 1334 */ 3498, 3498, 4269, 3498, 3498, 3893, 3007, 4315, 4622, 3907, 3498, 3498, 3498, 3498, 3913, 3498, 3498, 4298,
  /* 1352 */ 2858, 3498, 3498, 3498, 3952, 4276, 3932, 3498, 3498, 4170, 3498, 3498, 3498, 3634, 2610, 2610, 2610, 2610,
  /* 1370 */ 2407, 2409, 2409, 2409, 2409, 2409, 2414, 4635, 3946, 3498, 3498, 4513, 3940, 3498, 3498, 3498, 4759, 4594,
  /* 1388 */ 3498, 3498, 3498, 4246, 3827, 3498, 3498, 3498, 3482, 3487, 3498, 3498, 3498, 3234, 4628, 3498, 3498, 3498,
  /* 1406 */ 3498, 4759, 4571, 4776, 4641, 4634, 3945, 3498, 3498, 3951, 3957, 3283, 3287, 3969, 3498, 3498, 3974, 3498,
  /* 1424 */ 4432, 3456, 4211, 3848, 3498, 3981, 3498, 4693, 3946, 3498, 3988, 3358, 4017, 4644, 3462, 3471, 3461, 4023,
  /* 1442 */ 4023, 4643, 4643, 3462, 3462, 3462, 3463, 4022, 4642, 4023, 4644, 4027, 4023, 3462, 3498, 3498, 3498, 4819,
  /* 1460 */ 3498, 3498, 3498, 3498, 3357, 3498, 3651, 5097, 2832, 4056, 4060, 4064, 4068, 4069, 4073, 4077, 4089, 4095,
  /* 1478 */ 4099, 4104, 4108, 4112, 2822, 4126, 4118, 3450, 4667, 4124, 4131, 3498, 3498, 4270, 4145, 4149, 3498, 3498,
  /* 1496 */ 3180, 4155, 3498, 3498, 3498, 5007, 2776, 2782, 3498, 3498, 3016, 4160, 4836, 3498, 3498, 4920, 3498, 4703,
  /* 1514 */ 3895, 4440, 4209, 3599, 2997, 4940, 4167, 3498, 3498, 3498, 2708, 3498, 3498, 3498, 4037, 3498, 3498, 3498,
  /* 1532 */ 3498, 3580, 3498, 3498, 3635, 4178, 3498, 3244, 3498, 3498, 3498, 4183, 3498, 3498, 4575, 3737, 5105, 4581,
  /* 1550 */ 4953, 3128, 4191, 3498, 3498, 4731, 3498, 2918, 4201, 4207, 5099, 4215, 4946, 4222, 3498, 3498, 2403, 4179,
  /* 1568 */ 4233, 3641, 4238, 4229, 4904, 3498, 3498, 3953, 4245, 3498, 3498, 3498, 3498, 4243, 3498, 3498, 3498, 5066,
  /* 1586 */ 3498, 3498, 3498, 4981, 4244, 4829, 4250, 4504, 2917, 3813, 4275, 4256, 4903, 3498, 3498, 4261, 3498, 3498,
  /* 1604 */ 3498, 4982, 4362, 3787, 3603, 3811, 4274, 4239, 4280, 3498, 3498, 4593, 4587, 3498, 3498, 3498, 3498, 3523,
  /* 1622 */ 3527, 3498, 3498, 4289, 3498, 3498, 4289, 3498, 3498, 4989, 3498, 3498, 4671, 3498, 3498, 3498, 4992, 4721,
  /* 1640 */ 3498, 5113, 4830, 3602, 3765, 4541, 4156, 3498, 3498, 4970, 3498, 3498, 3498, 4588, 4979, 4203, 3498, 3498,
  /* 1658 */ 2817, 3498, 3582, 3358, 3498, 3498, 5026, 3498, 3498, 3498, 3498, 3498, 3442, 3498, 3498, 2816, 4801, 4309,
  /* 1676 */ 4029, 4296, 5146, 3498, 5147, 4335, 3045, 4322, 4328, 4485, 4342, 4342, 4375, 4334, 3045, 3045, 3045, 3642,
  /* 1694 */ 4959, 4341, 4353, 3903, 4959, 4960, 3464, 4339, 4958, 4346, 4956, 4350, 4367, 4371, 4374, 3498, 3498, 3498,
  /* 1712 */ 3866, 4379, 3014, 2646, 4385, 4264, 4389, 4393, 4397, 4401, 4404, 4408, 4411, 4412, 4416, 3498, 3498, 3498,
  /* 1730 */ 5163, 3498, 3498, 3498, 3498, 4134, 3908, 3498, 3498, 3498, 5159, 3498, 4422, 4865, 4085, 4682, 4427, 3837,
  /* 1748 */ 3498, 3499, 2959, 4756, 3498, 2965, 2969, 2975, 4437, 3610, 4446, 5119, 4457, 4463, 4141, 3498, 3577, 3618,
  /* 1766 */ 3586, 3592, 4709, 3498, 3596, 4469, 3434, 4477, 3498, 3498, 2960, 4423, 4481, 4490, 4494, 4429, 4498, 3128,
  /* 1784 */ 4194, 4508, 5153, 4521, 3498, 3498, 3498, 3675, 4522, 3498, 3498, 3532, 4380, 3498, 3498, 3498, 3498, 3607,
  /* 1802 */ 3498, 3498, 3498, 3498, 3879, 3498, 4526, 4530, 4534, 3498, 3498, 4539, 4545, 4680, 4267, 2923, 4549, 3129,
  /* 1820 */ 3501, 4100, 3498, 3683, 3687, 3691, 3695, 3699, 3703, 3707, 3498, 4563, 3498, 3498, 3498, 3498, 3498, 4567,
  /* 1838 */ 3501, 4777, 3498, 3498, 3498, 3033, 4585, 3498, 3758, 4362, 3498, 3498, 3251, 2876, 2370, 4593, 4587, 4598,
  /* 1856 */ 3498, 4551, 3736, 4607, 4616, 4621, 2481, 4791, 3498, 3498, 3498, 3236, 3185, 3498, 4292, 4633, 3498, 3498,
  /* 1874 */ 3498, 3235, 4629, 4639, 3498, 4553, 4648, 4661, 3128, 4913, 3498, 3789, 3498, 3498, 3518, 3498, 3498, 3646,
  /* 1892 */ 4724, 4079, 4686, 4692, 3125, 3498, 4622, 4697, 3498, 4622, 4707, 3498, 2960, 4713, 3498, 3498, 3555, 2767,
  /* 1910 */ 3498, 3498, 3498, 2772, 4719, 4723, 4728, 4739, 3099, 4758, 3498, 4746, 3498, 4623, 3498, 3498, 4752, 3498,
  /* 1928 */ 4622, 4763, 5031, 4767, 4651, 3498, 4774, 3776, 4754, 4459, 3498, 4624, 4781, 3823, 3983, 3114, 4442, 4754,
  /* 1946 */ 4785, 4741, 3984, 4789, 4789, 4795, 3823, 4799, 4805, 4805, 4812, 3202, 3744, 4816, 4823, 3202, 5130, 3745,
  /* 1964 */ 4834, 2468, 2470, 4840, 3822, 3498, 3891, 3498, 3901, 3286, 3934, 3498, 3498, 3498, 4622, 3918, 3498, 3498,
  /* 1982 */ 3498, 3553, 2801, 3498, 3498, 3498, 2671, 3498, 3498, 3498, 3498, 3498, 3572, 3516, 3498, 3498, 3498, 3657,
  /* 2000 */ 4848, 4852, 4856, 4873, 4877, 4881, 4885, 4888, 4892, 4896, 4900, 3498, 3498, 3498, 3541, 4908, 5005, 5018,
  /* 2018 */ 5022, 4918, 4924, 4555, 4535, 4930, 4934, 3498, 2843, 4657, 4938, 2829, 3498, 3914, 3498, 3498, 3498, 3925,
  /* 2036 */ 3470, 2371, 2845, 4944, 3498, 3498, 3542, 4950, 2358, 4324, 3145, 5059, 4964, 4006, 2365, 4701, 3498, 3498,
  /* 2054 */ 3639, 3498, 3498, 3488, 3619, 3353, 4986, 4997, 3498, 3498, 4257, 5003, 5016, 5020, 3145, 4252, 4926, 3243,
  /* 2072 */ 5011, 3498, 3498, 3498, 4559, 3498, 3498, 3498, 3498, 3498, 3728, 3498, 3498, 5035, 3498, 3498, 3498, 3498,
  /* 2090 */ 3498, 5039, 3498, 3969, 3080, 3946, 4151, 3498, 3873, 3498, 3498, 4465, 2668, 3498, 3851, 2676, 2683, 3542,
  /* 2108 */ 5081, 3821, 5053, 5058, 3734, 5063, 5070, 3498, 4036, 5029, 3498, 3498, 3498, 3498, 4036, 5076, 3498, 3498,
  /* 2126 */ 5080, 2359, 3186, 5085, 4674, 5094, 3498, 3498, 3498, 3498, 2978, 3498, 3498, 3880, 3498, 3498, 3498, 3498,
  /* 2144 */ 3617, 2948, 4113, 3498, 3498, 3498, 2638, 5109, 3498, 3970, 3084, 3498, 3498, 3498, 3498, 3498, 2658, 3498,
  /* 2162 */ 3498, 3613, 3829, 3719, 2625, 4688, 3498, 3498, 3498, 4589, 4007, 3498, 3498, 3498, 4517, 3498, 3498, 3498,
  /* 2180 */ 3674, 3428, 5005, 3498, 3498, 3958, 5090, 3498, 3498, 3928, 3498, 4091, 3438, 3920, 3446, 3498, 4678, 3498,
  /* 2198 */ 3498, 3498, 5089, 3498, 5117, 5123, 3727, 4966, 3498, 3498, 3429, 3498, 3498, 3974, 3498, 3995, 4004, 3581,
  /* 2216 */ 4011, 4218, 3498, 3498, 4676, 3498, 3498, 5087, 3498, 3977, 3498, 3498, 3498, 3498, 3037, 3498, 2753, 3498,
  /* 2234 */ 3498, 3498, 3498, 2754, 3909, 4867, 5127, 4925, 3498, 3498, 3959, 3498, 3498, 4174, 3498, 3498, 3498, 3498,
  /* 2252 */ 3498, 2672, 3498, 3498, 4187, 3498, 3958, 5137, 3498, 4186, 2645, 4741, 5144, 3498, 2810, 3498, 5151, 3498,
  /* 2270 */ 5157, 2371, 4742, 3135, 2371, 3498, 3998, 2679, 2731, 3498, 4033, 3498, 3498, 3051, 4042, 5054, 4049, 3498,
  /* 2288 */ 4702, 3498, 3498, 3498, 3498, 3498, 3498, 3478, 4844, 7300, 5169, 6426, 6429, 5179, 5187, 5226, 5226, 5189,
  /* 2306 */ 7401, 5200, 5226, 5226, 5226, 5226, 5195, 5199, 5226, 5226, 5227, 5193, 5208, 5187, 5212, 7403, 5225, 5216,
  /* 2324 */ 5224, 5226, 5204, 7402, 5226, 5231, 5244, 5245, 5245, 5241, 5234, 5249, 5237, 5253, 5260, 5267, 5263, 5256,
  /* 2342 */ 5271, 5277, 5274, 5281, 5279, 5283, 5287, 7301, 5169, 5783, 5298, 5973, 5973, 5973, 5172, 5972, 5973, 5973,
  /* 2360 */ 5973, 5346, 5978, 5304, 5310, 5973, 6016, 5973, 7444, 5973, 6615, 5973, 5973, 5973, 5347, 6895, 6895, 6896,
  /* 2378 */ 5422, 5407, 5409, 5409, 5435, 5335, 5321, 5329, 5409, 5409, 5341, 5345, 5973, 5973, 5170, 5973, 6614, 6597,
  /* 2396 */ 5336, 6895, 5367, 5375, 7160, 5785, 5787, 5973, 5973, 5973, 5352, 5335, 5341, 6895, 6895, 6895, 6895, 5422,
  /* 2414 */ 6895, 6897, 5422, 5422, 5397, 5409, 5376, 5786, 5300, 5973, 5171, 5809, 6352, 5973, 6558, 5973, 6018, 5422,
  /* 2432 */ 5422, 5434, 5409, 5335, 5342, 6895, 6895, 6895, 5419, 5422, 5422, 5422, 5422, 5409, 5343, 5439, 5973, 5973,
  /* 2450 */ 5290, 6207, 6895, 5420, 5422, 5422, 5422, 5424, 5409, 5340, 5344, 5973, 5323, 6486, 5968, 5409, 5409, 5450,
  /* 2468 */ 5346, 6091, 6115, 6091, 5776, 5973, 5335, 5335, 6895, 6895, 6895, 6898, 5400, 5973, 6015, 5973, 5325, 5426,
  /* 2486 */ 5973, 5973, 5335, 5335, 5335, 5343, 6895, 6895, 6895, 5421, 5422, 5422, 5422, 5423, 5409, 5409, 5409, 5340,
  /* 2504 */ 5424, 5409, 5409, 5410, 5973, 5973, 5973, 5676, 5973, 6895, 5422, 5422, 5409, 5409, 5409, 5409, 5335, 5409,
  /* 2522 */ 5973, 5334, 5341, 6895, 5421, 5423, 5409, 5335, 5343, 5414, 5427, 5334, 5343, 5421, 5434, 5332, 5452, 5425,
  /* 2540 */ 5456, 5460, 5459, 5458, 5457, 5973, 5464, 6393, 7392, 5475, 5499, 5468, 5472, 5538, 5538, 5538, 5485, 5512,
  /* 2558 */ 5478, 5489, 5493, 5496, 5538, 5538, 5538, 5538, 5509, 5511, 5582, 5503, 5538, 5538, 5507, 5518, 5538, 5516,
  /* 2576 */ 5539, 5522, 5529, 5533, 5537, 5546, 5543, 5557, 5561, 5561, 5563, 5565, 5569, 5573, 5577, 7395, 5581, 5586,
  /* 2594 */ 5525, 5481, 5590, 5594, 5598, 5596, 5604, 5600, 5608, 5612, 5973, 5871, 5748, 5752, 5973, 5334, 5335, 5335,
  /* 2612 */ 5335, 5335, 6560, 6446, 5891, 5973, 5334, 5335, 6895, 5415, 5787, 5973, 5323, 5973, 5973, 5816, 5745, 6863,
  /* 2630 */ 6450, 5973, 5973, 5333, 5335, 5335, 5629, 5973, 5973, 5973, 5684, 5620, 5973, 6594, 6090, 5973, 5973, 5973,
  /* 2648 */ 6727, 5973, 5973, 6316, 5973, 5869, 6301, 5973, 5973, 5763, 5973, 6875, 5973, 5973, 6122, 6019, 5973, 5973,
  /* 2666 */ 5973, 5765, 5316, 7172, 6058, 5973, 5353, 5357, 5361, 5973, 5313, 7476, 5973, 5973, 5349, 5973, 5973, 7179,
  /* 2684 */ 6730, 6727, 5742, 6587, 5646, 5689, 5694, 5693, 5698, 5702, 5703, 5707, 5708, 5712, 5716, 5717, 5728, 5721,
  /* 2702 */ 5723, 5727, 5723, 5722, 5732, 5735, 5973, 5354, 5358, 5362, 6021, 5973, 5973, 5317, 5371, 5371, 5663, 5973,
  /* 2720 */ 5973, 5973, 5766, 7182, 5741, 5973, 5973, 5349, 7433, 6325, 6571, 5973, 5973, 5350, 5973, 5759, 5973, 5973,
  /* 2738 */ 7478, 5770, 5973, 5973, 5175, 5791, 6623, 5801, 5973, 5973, 5973, 5799, 7426, 5802, 5306, 5973, 5354, 6856,
  /* 2756 */ 6134, 5973, 5820, 5174, 5973, 5832, 5859, 5839, 5847, 5174, 5840, 5848, 5973, 5973, 5973, 5804, 5858, 5854,
  /* 2774 */ 5841, 5849, 5971, 5973, 5973, 5973, 5823, 5973, 6221, 5662, 5973, 5973, 5380, 5387, 6301, 5973, 5973, 5973,
  /* 2792 */ 5870, 5881, 5887, 5841, 5899, 7264, 5909, 5182, 5362, 7265, 5889, 5183, 5363, 5908, 5841, 5899, 5973, 5393,
  /* 2810 */ 5973, 5973, 6479, 5973, 6649, 5661, 5973, 5973, 5392, 5973, 5973, 6299, 5973, 5973, 5973, 5877, 5781, 5913,
  /* 2828 */ 5363, 5973, 5429, 7431, 6616, 5828, 6870, 6020, 7262, 5908, 5841, 5914, 5174, 5918, 5663, 5973, 5973, 5430,
  /* 2846 */ 7432, 7439, 5973, 6059, 5922, 6615, 5973, 5633, 5637, 6726, 5888, 5842, 5362, 5973, 5973, 5973, 7263, 6059,
  /* 2864 */ 5883, 5889, 5843, 5363, 5909, 5842, 5362, 5973, 5650, 5369, 5661, 5946, 5973, 5973, 5973, 5922, 5947, 5973,
  /* 2882 */ 5973, 5973, 5934, 6721, 5973, 5973, 5973, 5939, 5973, 6448, 5973, 5445, 5935, 5973, 5973, 5973, 5940, 5444,
  /* 2900 */ 5952, 5973, 5973, 5549, 5553, 7308, 5973, 5973, 7307, 5973, 6355, 6353, 5973, 5674, 6326, 5681, 6355, 5973,
  /* 2918 */ 5973, 5973, 5976, 5978, 5997, 5973, 5173, 5973, 5973, 5324, 5973, 5973, 5973, 5977, 6010, 6029, 6033, 6036,
  /* 2936 */ 6038, 6038, 6042, 6042, 6044, 6046, 6046, 6046, 6046, 6046, 6047, 6051, 5973, 5683, 5619, 5623, 6140, 5174,
  /* 2954 */ 5973, 5973, 5632, 5636, 6140, 6099, 5973, 5973, 5973, 5978, 6926, 5973, 7115, 6055, 5675, 5973, 6319, 5973,
  /* 2972 */ 6573, 6144, 6730, 7224, 7213, 6081, 5973, 5685, 5621, 5625, 6015, 6115, 5973, 5973, 5973, 5983, 6071, 5973,
  /* 2990 */ 5973, 6073, 5737, 6074, 5973, 7273, 5973, 5973, 5675, 5973, 5973, 7271, 6086, 5973, 5973, 5677, 5973, 5973,
  /* 3008 */ 5973, 6613, 5973, 5973, 6572, 7222, 5973, 5744, 5973, 5973, 6574, 5355, 6109, 5973, 6114, 5973, 6650, 6127,
  /* 3026 */ 6133, 5973, 5973, 5747, 5941, 5947, 6134, 5973, 5973, 5973, 5985, 6304, 6129, 5973, 5973, 5747, 5973, 5973,
  /* 3044 */ 5803, 5973, 5973, 5973, 6002, 6139, 6601, 5973, 5973, 5747, 5975, 5978, 6149, 6164, 6155, 5363, 5834, 6150,
  /* 3062 */ 6165, 6943, 5835, 6151, 6166, 6944, 7075, 5973, 5973, 5973, 6014, 5973, 5973, 5638, 6436, 5973, 5973, 5794,
  /* 3080 */ 5973, 5973, 5973, 6383, 6160, 6170, 6943, 5973, 5766, 5294, 6163, 6215, 5973, 7069, 6161, 6171, 6954, 6954,
  /* 3098 */ 5973, 5973, 5973, 6016, 5973, 5973, 5173, 5973, 6180, 6179, 5973, 5773, 5382, 6013, 6185, 5973, 5973, 5973,
  /* 3116 */ 6019, 7487, 6057, 5677, 6104, 5973, 5795, 5973, 5973, 6018, 5973, 5873, 5973, 5973, 5973, 6015, 6874, 6648,
  /* 3134 */ 6838, 5973, 5973, 5816, 5973, 5293, 6162, 6214, 5170, 6215, 5973, 5973, 5973, 6059, 5973, 5874, 5973, 5973,
  /* 3152 */ 6056, 5676, 5973, 6104, 5766, 6207, 6170, 6174, 5973, 5765, 6206, 6163, 6173, 5973, 6056, 5870, 5973, 6571,
  /* 3170 */ 5973, 6729, 6017, 6650, 5973, 6727, 6016, 6650, 5973, 5800, 5973, 5973, 5353, 6855, 6172, 5170, 5973, 5973,
  /* 3188 */ 5973, 6062, 5973, 7500, 5292, 6209, 6173, 5973, 5973, 5973, 6088, 6213, 6175, 5973, 5973, 5973, 6091, 6062,
  /* 3206 */ 5871, 5973, 6573, 6729, 6219, 6838, 5973, 5973, 5863, 5973, 6573, 6225, 6237, 6175, 5973, 5973, 7226, 6227,
  /* 3224 */ 6239, 5973, 5803, 5973, 5805, 6017, 5631, 7229, 5973, 5874, 5973, 5973, 5973, 5984, 5988, 7142, 5973, 6572,
  /* 3242 */ 6729, 5868, 5973, 6015, 5973, 5973, 7228, 6230, 5973, 5973, 5863, 6572, 5973, 5753, 5973, 5973, 5973, 6225,
  /* 3260 */ 6237, 7053, 5870, 6570, 6730, 6016, 5973, 6650, 6019, 6235, 6231, 5973, 5894, 6642, 6637, 5754, 5754, 5973,
  /* 3278 */ 5973, 6493, 5973, 7054, 5871, 5347, 5973, 7435, 6835, 5973, 5866, 5973, 6123, 5751, 5973, 5973, 6493, 7053,
  /* 3296 */ 5870, 5973, 6494, 5753, 5973, 5347, 5750, 5754, 5973, 6492, 5754, 5973, 5748, 7054, 5751, 5973, 5973, 7230,
  /* 3314 */ 5870, 5747, 6496, 5973, 5973, 6495, 5973, 5973, 5749, 5753, 5973, 5747, 5751, 5973, 5973, 6492, 5754, 5973,
  /* 3332 */ 5864, 5747, 6449, 7087, 5973, 7087, 5973, 5869, 5973, 6448, 5869, 6447, 6447, 6447, 5973, 5929, 5889, 5947,
  /* 3350 */ 5973, 6849, 6849, 5973, 5973, 5869, 5349, 7247, 6437, 5973, 5973, 5973, 6302, 7484, 6403, 5174, 5973, 5670,
  /* 3368 */ 6006, 7434, 6449, 6059, 6247, 6255, 6264, 6261, 6268, 6271, 6277, 6273, 6281, 6283, 6283, 6281, 6287, 6292,
  /* 3386 */ 6292, 6292, 6292, 6288, 6110, 6838, 5794, 5973, 5930, 5781, 5948, 5973, 5973, 6330, 5973, 5973, 5893, 6632,
  /* 3404 */ 5973, 7203, 5973, 6346, 7419, 5973, 6705, 5973, 5934, 5973, 5973, 5446, 5174, 5973, 6731, 6359, 5973, 5973,
  /* 3422 */ 7248, 5973, 5973, 7272, 5973, 5736, 5973, 5973, 5683, 6966, 5875, 6360, 5973, 5973, 5973, 6376, 6979, 5173,
  /* 3440 */ 5973, 5973, 5974, 5634, 5638, 6600, 5973, 6449, 6059, 6341, 5973, 5973, 5876, 6817, 5826, 5973, 5973, 5977,
  /* 3458 */ 5973, 5347, 6372, 5973, 5973, 5973, 6437, 5973, 5973, 6002, 5973, 6380, 5973, 5973, 5974, 5973, 6437, 6742,
  /* 3476 */ 5656, 7040, 5973, 5973, 7277, 7283, 5973, 6925, 6195, 6743, 6942, 6942, 5973, 5973, 5973, 6439, 6196, 5370,
  /* 3494 */ 6156, 5973, 5973, 7308, 5973, 5973, 5973, 5973, 5323, 5973, 5349, 5973, 6613, 6313, 5973, 6447, 5973, 5973,
  /* 3512 */ 7316, 7320, 6740, 6200, 6200, 5973, 5973, 5973, 6455, 6573, 5973, 5973, 7317, 7321, 6197, 6201, 5973, 5973,
  /* 3530 */ 5973, 6540, 6019, 7318, 7322, 6198, 5973, 6570, 6093, 6978, 6309, 5973, 5973, 5973, 6560, 7279, 5973, 6250,
  /* 3548 */ 5349, 6446, 5973, 6448, 6446, 5973, 5973, 5973, 7261, 5853, 5840, 6838, 5795, 5973, 5973, 5973, 6447, 7318,
  /* 3566 */ 6397, 6199, 5754, 5973, 5347, 5750, 5973, 6122, 7319, 6398, 6200, 5973, 6439, 5973, 5973, 6017, 5973, 5973,
  /* 3584 */ 5973, 5390, 6402, 5173, 5973, 5973, 6017, 5975, 5973, 6251, 5350, 6503, 6017, 5973, 6407, 5973, 5973, 7398,
  /* 3602 */ 5973, 5973, 7415, 5973, 5973, 6685, 6412, 6417, 5973, 5973, 7425, 5973, 5973, 7482, 5872, 6441, 5973, 5973,
  /* 3620 */ 6570, 6093, 6423, 6093, 6423, 5973, 5973, 6017, 6018, 5631, 7229, 6540, 6433, 5973, 5973, 5973, 6570, 5335,
  /* 3638 */ 5335, 6015, 6456, 6616, 5973, 5973, 6437, 6573, 6439, 5973, 6570, 6368, 6573, 5973, 5973, 5973, 6571, 5973,
  /* 3656 */ 6461, 5973, 5973, 6058, 7289, 5973, 6870, 5973, 5676, 5676, 5676, 5676, 6868, 5675, 5973, 5677, 6868, 6869,
  /* 3674 */ 5973, 5973, 5973, 6617, 7092, 5973, 6839, 6444, 6467, 6475, 5973, 7054, 6483, 5743, 6956, 5743, 6485, 6490,
  /* 3692 */ 6500, 6508, 7137, 6512, 6516, 6516, 6518, 6522, 6522, 6522, 6522, 6527, 6526, 6529, 6533, 6534, 6534, 6534,
  /* 3710 */ 6534, 6528, 6538, 5973, 5973, 5973, 6628, 5551, 6616, 5973, 5973, 6061, 5973, 7434, 5973, 6449, 6835, 5973,
  /* 3728 */ 5973, 5973, 5972, 5973, 6785, 5174, 5973, 6875, 5743, 5973, 6729, 5973, 6354, 5754, 5973, 5904, 5973, 5973,
  /* 3746 */ 7487, 5973, 5973, 5754, 5973, 5973, 7150, 5973, 7034, 5973, 7035, 6568, 5973, 5973, 5973, 6649, 5973, 6579,
  /* 3764 */ 6569, 5973, 5975, 5925, 6445, 5973, 6584, 5973, 6067, 6566, 5973, 6580, 5973, 5973, 5973, 6684, 5973, 6471,
  /* 3782 */ 5975, 6551, 5349, 5973, 7435, 6446, 6447, 5973, 5973, 6456, 5973, 5973, 6835, 5973, 6591, 5973, 6605, 5812,
  /* 3800 */ 5973, 5975, 5981, 7435, 6622, 5973, 5973, 6451, 5973, 6627, 6627, 5973, 5976, 6910, 6445, 5973, 5973, 6448,
  /* 3818 */ 6616, 6636, 6703, 5973, 5973, 6093, 5973, 5973, 5973, 6643, 6638, 5973, 5973, 6093, 5978, 5873, 6444, 6549,
  /* 3836 */ 5170, 5973, 5973, 6064, 6181, 5349, 5973, 6437, 6447, 5973, 6836, 5869, 5868, 6019, 6018, 5973, 5973, 5973,
  /* 3854 */ 5667, 6450, 6647, 5973, 5973, 6097, 5973, 6023, 6665, 6659, 7510, 5552, 5973, 5973, 5973, 6805, 5874, 5669,
  /* 3872 */ 6550, 5973, 5977, 7435, 6836, 5867, 6875, 5973, 6019, 6686, 6457, 6202, 6671, 6655, 7508, 5973, 5978, 5291,
  /* 3890 */ 6208, 5973, 6442, 5975, 5973, 6796, 6444, 5973, 5973, 6120, 5973, 5348, 5973, 6437, 5973, 7435, 6572, 6691,
  /* 3908 */ 7509, 5973, 5973, 5973, 6867, 5973, 7501, 7505, 7509, 5973, 7504, 7508, 5973, 5973, 6251, 5350, 5973, 5973,
  /* 3926 */ 6680, 5973, 5973, 6296, 5973, 5973, 5865, 5973, 5972, 6123, 5973, 5973, 6191, 5930, 7507, 5973, 5973, 5973,
  /* 3944 */ 6870, 7506, 7510, 5973, 5973, 5973, 6732, 6614, 5973, 5973, 5973, 6902, 5359, 5974, 5973, 5973, 5973, 6963,
  /* 3962 */ 6967, 6696, 5973, 5973, 5973, 6972, 5551, 6384, 5973, 5973, 5973, 7068, 7503, 7510, 5973, 5973, 6303, 6128,
  /* 3980 */ 6134, 5973, 6695, 5973, 5973, 6333, 5973, 5973, 5973, 7226, 6385, 5973, 5973, 5973, 7054, 6614, 5973, 5977,
  /* 3998 */ 5348, 5973, 5973, 5973, 7183, 6441, 7434, 6835, 5973, 5868, 5973, 5973, 5973, 5973, 6700, 5973, 5973, 6338,
  /* 4016 */ 5973, 7434, 5973, 5973, 5973, 7076, 7434, 5973, 5973, 7433, 5973, 7434, 5973, 5973, 7434, 6570, 5868, 7226,
  /* 4034 */ 6709, 7417, 5973, 5978, 5618, 5622, 6751, 5973, 5973, 6716, 6725, 5973, 5978, 6058, 6014, 6869, 6616, 5973,
  /* 4052 */ 5973, 6353, 6838, 5973, 6562, 6257, 6737, 6747, 6712, 5383, 6756, 6760, 6764, 6769, 6769, 6769, 6765, 6773,
  /* 4070 */ 6773, 6773, 6775, 6777, 6777, 6777, 6777, 6781, 6784, 5973, 5973, 6354, 5973, 6354, 5973, 5973, 6353, 5973,
  /* 4088 */ 5973, 5973, 6802, 5973, 5973, 6366, 5973, 6830, 5973, 5973, 6811, 6100, 5973, 5973, 5973, 7113, 5973, 6559,
  /* 4106 */ 5973, 6145, 6015, 7409, 5973, 6837, 6116, 6449, 5973, 5973, 5973, 7116, 5973, 6816, 5973, 5973, 6367, 5744,
  /* 4124 */ 5973, 6888, 6818, 5973, 5973, 5973, 7157, 6828, 5973, 6829, 5973, 5978, 6672, 6676, 7509, 5924, 6798, 5973,
  /* 4142 */ 5973, 6374, 7060, 5973, 6834, 6844, 6835, 6082, 6449, 5973, 5973, 6382, 6386, 6861, 5973, 5973, 5973, 7206,
  /* 4160 */ 6857, 5973, 5973, 5973, 7226, 6228, 5753, 6504, 6837, 6449, 5973, 5978, 6690, 7508, 5351, 5355, 5359, 5363,
  /* 4178 */ 5352, 5356, 5360, 5174, 5973, 6892, 5357, 5361, 5973, 5978, 6965, 6559, 5973, 5973, 7511, 5973, 6874, 5973,
  /* 4196 */ 5973, 5973, 7309, 5973, 5973, 6797, 6445, 5973, 5973, 6438, 5393, 6614, 5973, 6562, 5973, 5973, 6437, 6836,
  /* 4214 */ 5869, 5892, 5973, 5675, 5973, 5978, 6965, 7494, 6419, 5973, 5973, 5973, 7227, 6229, 5754, 5973, 5973, 5973,
  /* 4232 */ 6135, 6911, 5973, 5973, 5973, 7262, 5973, 6570, 5891, 5973, 5973, 6902, 5359, 5363, 5973, 5973, 5973, 5895,
  /* 4250 */ 5973, 6449, 5973, 5973, 6444, 5973, 5890, 5973, 5973, 5973, 7278, 5964, 6906, 5362, 5973, 5979, 7332, 6060,
  /* 4268 */ 7446, 5973, 5973, 6789, 6882, 5973, 5973, 6616, 5973, 7435, 5973, 6838, 5973, 7207, 5973, 5973, 6462, 5973,
  /* 4286 */ 5973, 5973, 6578, 5973, 7247, 6917, 5973, 5983, 5987, 7141, 5973, 7206, 5973, 5973, 6477, 5358, 6921, 5973,
  /* 4304 */ 6446, 6448, 5973, 6060, 6342, 5973, 5973, 5975, 7170, 6571, 7206, 5973, 5973, 6561, 5973, 5973, 7435, 6448,
  /* 4322 */ 6446, 6449, 5978, 5973, 5973, 6020, 6437, 6931, 5973, 5973, 6570, 7468, 6930, 5973, 5973, 6001, 5973, 7434,
  /* 4340 */ 6571, 7052, 6437, 5973, 5973, 7052, 6000, 7434, 6571, 6000, 6935, 6571, 6001, 6001, 5973, 5973, 7052, 5973,
  /* 4358 */ 6350, 5973, 5939, 5945, 5174, 5973, 5973, 5973, 5882, 6001, 7291, 7434, 6936, 7293, 7293, 7293, 7293, 6437,
  /* 4376 */ 5973, 5973, 7435, 6940, 6202, 5973, 5973, 5973, 6555, 6948, 6562, 5869, 5219, 5973, 6960, 5220, 6971, 5744,
  /* 4394 */ 6976, 6463, 6730, 6608, 5902, 6983, 6987, 6999, 6990, 6993, 6995, 7003, 7013, 7013, 7012, 7005, 7007, 7008,
  /* 4412 */ 7017, 7017, 7017, 7017, 7018, 7022, 5973, 5973, 6586, 5973, 5978, 6807, 5657, 5973, 5973, 6610, 5973, 5973,
  /* 4430 */ 5172, 5973, 5973, 6614, 5973, 5973, 5940, 5973, 6362, 5973, 5973, 6616, 5973, 5973, 5973, 6332, 7041, 5973,
  /* 4448 */ 5975, 5973, 5992, 5973, 5973, 5631, 5635, 5639, 5973, 5973, 7051, 5973, 5973, 6683, 7487, 5973, 7058, 5973,
  /* 4466 */ 5973, 6728, 5980, 6375, 5973, 5973, 5973, 7307, 5973, 5973, 7307, 5973, 7065, 5973, 7073, 5745, 5973, 6730,
  /* 4484 */ 5973, 6002, 5973, 5973, 7052, 5869, 6355, 5973, 5869, 7028, 5973, 7246, 5892, 6612, 6065, 6447, 5973, 5973,
  /* 4502 */ 6733, 6361, 5973, 5973, 5960, 6115, 5324, 5973, 7080, 5975, 6408, 5973, 5973, 5978, 7503, 5973, 7091, 7099,
  /* 4520 */ 7103, 7092, 7108, 7104, 5973, 5973, 5973, 6618, 7093, 7109, 6134, 5973, 5973, 7330, 7328, 5973, 5973, 5973,
  /* 4538 */ 7407, 6805, 6940, 6616, 5973, 6437, 5779, 5746, 6728, 5973, 6353, 6066, 6448, 5973, 5973, 6806, 6616, 5973,
  /* 4556 */ 5973, 6812, 5170, 5983, 7120, 7095, 7129, 5984, 7121, 7126, 7130, 5985, 7122, 7127, 5363, 5986, 7094, 7128,
  /* 4574 */ 5174, 6806, 6941, 5973, 5743, 5875, 7081, 7241, 5892, 5973, 5173, 6791, 7339, 7129, 5973, 5973, 5973, 7462,
  /* 4592 */ 7451, 5982, 5986, 6792, 7340, 7129, 6840, 6839, 6437, 5973, 6014, 5675, 5973, 5675, 5973, 6355, 5869, 7028,
  /* 4610 */ 5973, 6014, 5973, 6868, 5170, 5973, 7163, 5973, 5973, 5973, 7499, 7134, 5973, 5973, 5973, 7500, 7252, 6839,
  /* 4628 */ 5988, 7340, 7256, 5973, 5973, 7255, 5973, 5973, 5973, 7502, 7506, 6839, 6437, 7113, 5973, 5973, 5973, 7435,
  /* 4646 */ 5973, 5973, 6354, 5973, 7146, 5973, 6016, 6839, 5973, 6017, 6016, 5973, 5973, 5973, 5428, 7163, 5973, 5973,
  /* 4664 */ 7154, 7193, 7176, 5973, 5973, 6822, 5973, 5982, 7192, 7188, 5972, 5746, 5973, 5973, 6964, 7493, 5973, 5973,
  /* 4682 */ 7026, 7148, 6060, 7032, 7211, 6061, 5973, 5973, 6823, 6090, 6065, 5973, 5973, 5973, 7503, 7236, 5973, 5973,
  /* 4700 */ 5973, 6836, 5973, 5973, 5973, 5975, 5973, 7217, 5973, 5973, 5973, 6837, 5794, 7235, 6115, 5973, 5973, 6837,
  /* 4718 */ 5973, 7234, 7417, 5973, 6839, 5873, 5973, 5973, 5978, 7197, 7197, 5973, 6353, 5973, 6019, 6881, 6115, 5973,
  /* 4736 */ 5973, 6390, 5973, 7240, 5973, 5973, 5346, 5973, 5973, 5973, 6683, 7245, 5973, 5973, 6838, 5973, 5973, 6684,
  /* 4754 */ 7488, 5973, 5973, 5973, 6839, 5973, 5973, 5973, 5982, 7252, 5973, 5973, 5993, 6059, 5973, 6092, 5973, 6023,
  /* 4772 */ 6654, 6659, 6684, 6062, 5973, 5973, 6839, 6437, 5973, 5874, 5973, 6022, 6062, 6333, 6115, 5973, 7260, 5973,
  /* 4790 */ 6334, 5973, 5973, 6840, 5973, 5973, 6334, 5973, 7269, 6332, 6062, 5973, 5973, 6851, 5973, 6333, 6115, 5973,
  /* 4808 */ 5973, 6869, 5973, 5676, 6333, 6115, 6062, 5346, 5973, 7485, 6115, 5973, 6024, 6666, 6660, 5973, 7487, 6060,
  /* 4826 */ 6093, 5744, 6308, 5973, 5973, 5973, 6446, 6447, 7486, 6092, 5973, 5973, 6874, 7512, 6091, 5973, 6093, 6091,
  /* 4844 */ 5958, 7052, 5869, 7054, 5973, 6354, 6440, 5442, 7200, 5973, 5955, 5979, 5973, 7054, 5403, 6057, 5677, 5973,
  /* 4862 */ 6105, 5973, 6572, 5973, 5744, 5973, 6728, 6559, 5973, 6243, 5973, 6470, 7458, 7168, 5962, 7297, 7305, 7313,
  /* 4880 */ 7326, 5653, 7336, 7344, 7347, 7350, 7354, 7357, 7359, 7357, 7363, 7364, 7369, 7368, 7364, 7373, 7374, 7374,
  /* 4898 */ 7375, 7381, 7379, 7385, 7389, 5973, 6059, 6847, 5973, 5973, 7279, 7285, 5869, 5973, 6570, 5973, 5973, 5973,
  /* 4916 */ 5873, 6444, 6059, 5973, 5973, 5973, 6880, 7417, 6442, 5973, 5815, 5744, 5973, 5973, 5973, 7469, 6322, 5755,
  /* 4934 */ 7413, 5973, 5973, 7423, 7430, 5973, 5973, 5973, 6886, 6016, 7440, 5973, 5973, 5973, 6886, 6059, 7285, 5870,
  /* 4952 */ 5873, 5973, 6063, 6447, 5973, 6002, 6000, 5973, 6000, 5973, 5973, 7052, 6875, 5973, 5746, 5973, 6824, 5973,
  /* 4970 */ 5615, 7450, 7456, 5973, 6078, 5973, 5973, 5643, 5973, 7451, 5868, 5973, 5973, 6904, 5360, 5174, 5974, 7463,
  /* 4988 */ 7452, 5973, 6087, 6916, 5973, 5985, 7187, 7220, 5973, 6870, 6868, 5973, 5973, 5973, 6573, 7284, 5871, 5875,
  /* 5006 */ 5973, 5973, 5973, 6876, 5973, 7467, 6089, 6838, 5973, 6088, 5973, 5973, 6092, 5973, 5980, 5973, 5973, 6022,
  /* 5024 */ 6188, 5973, 5974, 5617, 6544, 6751, 5973, 5973, 5973, 6951, 6353, 5614, 5618, 6545, 6752, 5615, 6542, 5624,
  /* 5042 */ 5868, 5616, 6543, 6750, 5973, 6091, 6413, 5973, 5973, 5973, 6572, 5981, 5973, 6020, 5973, 5973, 6059, 5973,
  /* 5060 */ 5973, 6443, 5973, 6648, 5973, 6015, 5973, 6091, 6905, 5361, 7467, 6719, 5973, 5973, 6924, 6194, 6751, 6868,
  /* 5078 */ 5973, 6115, 7473, 7285, 5872, 5973, 5973, 5973, 6442, 5973, 5973, 6963, 7492, 5973, 5973, 5973, 6017, 6824,
  /* 5096 */ 6090, 5973, 6091, 7433, 5973, 5973, 5779, 5620, 5624, 5973, 5973, 7027, 6441, 5624, 5973, 6115, 6870, 5973,
  /* 5114 */ 5973, 6915, 5174, 6728, 5872, 5973, 5973, 7039, 7045, 6093, 5980, 5973, 6061, 6093, 5981, 6061, 5973, 6091,
  /* 5132 */ 7488, 5973, 6025, 6667, 6661, 6967, 5973, 5973, 5973, 7047, 5892, 5869, 6875, 5744, 5973, 5973, 7061, 6437,
  /* 5150 */ 5973, 5973, 6478, 5973, 5973, 7085, 5973, 6477, 5973, 5973, 5973, 7166, 6616, 5973, 7498, 5973, 5974, 7228,
  /* 5168 */ 5973, 1048576, 1073741824, 0, 0, 0, 0x80000000, 0, 0, 0, -1979711488, 4194560, 4196352, 270532608, 2097152,
  /* 5183 */ 4194304, 8388608, 234881024, 268435456, 541065216, -2143289344, 4194304, 4194304, 16777216, 4194432,
  /* 5193 */ 37748736, -1606418432, 541065216, 541065216, 541065216, 541065216, -2143289344, -2143289344, -2143289344,
  /* 5202 */ 4194304, 4194304, -2143289088, 4196352, -1606418432, -1606418432, 4194304, 4196352, -1606418432,
  /* 5211 */ -1606418432, 4196352, 276901888, 8540160, -1606418432, 8425488, 4194304, 4194304, 4194304, 513, 32768, 0,
  /* 5223 */ 0, 4194304, 541065216, 4194304, 4194304, 4194304, 4194304, 4194432, 541065216, 37748736, 742391808,
  /* 5234 */ 239075328, 239075328, 171966464, 775946240, 4718592, 64, 4718592, 171966464, 239075328, 171966464,
  /* 5244 */ 775946240, 171966464, 171966464, 171966464, 171966464, 239075328, 239075328, 775946240, 775946240, 2097216,
  /* 5254 */ 4720640, 541589504, 4194368, -2143285440, -1606414528, -1606414528, 541589504, 541589504, 4194400, 4194368,
  /* 5264 */ 541065312, 541065280, -2143289280, -2142763008, 541589504, 541065280, 4194368, -2143285440, -2143285408,
  /* 5273 */ -2143285408, -2143285440, -2143285440, -2143285440, -2143285440, -2142761152, -1606414528, -2143285440,
  /* 5281 */ -2143285440, -1605890240, -2142761152, -2109731008, 776470528, -1908404416, 775946304, 775946304,
  /* 5289 */ -1908404416, 2, 4, 8, 64, 128, 512, 1024, 2048, 0, 256, 2048, 2048, 2048, 2048, 8192, 8392704, 0, 0,
  /* 5308 */ -570425344, 32505856, 16384, 1536, 1792, 0, 0x80000000, 65536, 65536, 0, 65536, 262144, 1048576, 96, 96, 0,
  /* 5324 */ 0, 0, 1073741824, 0, 0, 0, 1536, 64, 524352, 0, 0, 524288, 524288, 524288, 524288, 0, 524352, 524288,
  /* 5342 */ 524288, 524288, 64, 64, 64, 0, 0, 0, 8, 0, 0, 0, 12, 32, 64, 1024, 2048, 57344, 262144, 50331648,
  /* 5362 */ 268435456, 1073741824, 0x80000000, 0, 0, 64, 64, 262144, 1048576, 4194304, 16777216, 33554432, 268435456,
  /* 5375 */ 0, 128, 128, 128, 128, 0, 8388608, 4096, 4096, 4096, 4096, 29696, 4096, 1536, 1024, 0, 0, 32768, 50331648,
  /* 5394 */ 268435456, 0, 0, 96, 0, 64, 524352, 524288, 64, 0, 0, 32768, 268435456, 96, 64, 524352, 524352, 524352,
  /* 5412 */ 524352, 0, 64, 64, 128, 128, 128, 64, 64, 64, 96, 96, 96, 96, 524352, 524352, 0, 0, 0, 15, 208, 15360, 96,
  /* 5435 */ 524352, 524352, 524352, 524288, 64, 64, 128, 2048, 64, 0, 0, 2048, 131072, 524288, 4194304, 524352, 524288,
  /* 5452 */ 524288, 64, 64, 96, 524288, 64, 96, 524352, 0, 524288, 64, 96, 0, 4096, 536870912, 1073741824, 1056,
  /* 5469 */ 262176, 1048608, 2097184, 4194336, 536870944, 32, 32, 4, 1073872896, 32, 34, 34, 40, 262176, 42, 106, 32,
  /* 5486 */ 524320, 32, 1073872896, 48, 1120, 96, 4195360, 6291488, 2097184, 2097184, 4194336, 4194336, 32, 32, 40, 96,
  /* 5502 */ 160, 96, 6292512, 4195360, 2097184, 56, 262184, 40, 262184, 40, 40, 262176, 32, 96, 56, 262184, 40, 40,
  /* 5520 */ 4195104, 6292512, 0, 4, 262184, 262184, 32, 42, 224, 40, 4196128, 32, 262184, 34, 42, 32, 327155712, 34,
  /* 5538 */ 32, 32, 32, 32, 56, 1056, 1056, 2098208, 42, 1056, 4194336, 32, 128, 2048, 262144, 524288, 33554432,
  /* 5555 */ 134217728, 0, 4457568, -326784344, -322851160, -322851160, -322698144, -322698144, -322698144, -322698144,
  /* 5565 */ -322695456, -322695456, -322695456, -322695456, -322597152, -320598176, -322597152, -322597144, -321548576,
  /* 5574 */ -320598168, -322597144, -322588952, -321548568, -322588952, -321548568, -322597144, 96, 32, 32, 40, 1120,
  /* 5586 */ 262176, 32, 32, 41, 293601323, 293601323, 293863467, 293699627, 293617707, 293716011, 293702203, 293702203,
  /* 5598 */ 293702203, 293702203, 293702267, 297896507, 293964347, 297896507, 293702203, 293702203, 297896507,
  /* 5607 */ 293964347, 297896507, -322597144, -37744981, -322597144, -321548568, -37482773, 0, 0, 1, 2, 12, 16, 64,
  /* 5621 */ 128, 1024, 2048, 4096, 8192, 65536, 131072, 0, 0, 318767104, 0, 0, 1, 4, 8, 32, 64, 512, 2048, 16384,
  /* 5641 */ 67108864, 0, 0, 65536, 201326592, 0x80000000, -2147418112, 5242880, -1842937664, 0, 32, 64, 65536, 4224,
  /* 5655 */ 65536, 16777216, 33554432, 67108864, 134217728, 536870912, 33554432, 268435456, 536870912, 0x80000000, 0,
  /* 5666 */ 0, 0, 262144, 65536, 0, 0, 1, 1, -2147483646, 0, 0, 0, 1024, 0, 0, 524288, 5242880, 0, 0, 2, 8, 16, 64,
  /* 5689 */ 201330721, 201330721, 201330721, -2111369023, -2111360575, -2111369023, -2111369023, -2111369023,
  /* 5697 */ -2111369023, -1977151295, -1977151293, -1910042431, -1893265183, -2111368509, -1893265183, -1893265183,
  /* 5705 */ -1893265183, -553689472, -553656704, -553689472, -553656704, -553689472, -553689472, -553656704,
  /* 5713 */ -553656704, -553689472, -553689472, -553656704, -553656704, -553656704, -553656704, -553656672, -553656664,
  /* 5722 */ -553656672, -553656672, -553656672, -553656672, -553656670, -553656608, -553656672, -553656672, -553656672,
  /* 5731 */ -553656664, -536912159, -553656671, -536879391, -536879391, 0, 0, 0, 1040, 1040, 0, 328192, 0, 0, 0, 256,
  /* 5747 */ 0, 0, 0, 512, 2048, 131072, 33554432, 536870912, 0, 0, 0, 528, 0, 458880, 2097152, -1845493760, 462976,
  /* 5764 */ -2113929216, 0, 0, 2, 12, 64, 471424, 0, -2113929216, 0, 0, 8388608, 8388608, 0, 64, 0, 0, 524288, 1048576,
  /* 5783 */ 2097152, 4194304, 128, 128, 2048, 2048, 2048, 0, -1912602624, 18874368, 463488, 0, 0, 8388608, 1073741824,
  /* 5798 */ 0, 0, 1040000, 15728640, -570425344, 0, 0, 0, 2014, 0, 0, 0, 128, 196608, 2097152, 8388608, 536870912, 0,
  /* 5816 */ 0, 16777216, 0, 0, 0, 256, 12288, 0, 0, 16777216, 16777216, 33554432, 0, 0, 4, 134217728, 167772160,
  /* 5833 */ 234881024, 0, 0, 2, 204, 768, 196608, 786432, 1048576, 2097152, 4194304, 8388608, 134217728, 268435456,
  /* 5847 */ 4194304, 8388608, 503316480, 1073741824, 0x80000000, 0, 7168, 16384, 32768, 196608, 786432, 0, 128, 512,
  /* 5861 */ 7168, 16384, 0, 512, 0, 0, 4096, 1048576, 0, 0, 0, 4096, 0, 0, 8192, 0, 0, 0, 44, 64576, 234881024, 128,
  /* 5883 */ 512, 3072, 16384, 32768, 4096, 16384, 131072, 524288, 1048576, 2097152, 0, 0, 0, 62, 64, 128, 234881024,
  /* 5900 */ 268435456, 1073741824, 0x80000000, 2097152, 0, 0, 96, 2260992, 16384, 32768, 131072, 524288, 1048576,
  /* 5913 */ 8388608, 33554432, 201326592, 268435456, 1073741824, 0, 1048576, 4194304, 268435456, 131072, 2097152, 0, 0,
  /* 5926 */ 2, 67108864, 0, 0, 512, 3072, 16384, 131072, 1048576, 4194304, 0x80000000, 0, 0, 0, 512, 3072, 131072,
  /* 5943 */ 524288, 1048576, 524288, 1048576, 4194304, 134217728, 0x80000000, 0, 0, 524288, 4194304, 0x80000000, 0, 0,
  /* 5957 */ 33554432, 33554432, 0x80000000, 0, 0, 2048, 32768, 0, 0, 64, 2048, 18432, 67108864, 1073741824,
  /* 5971 */ 0x80000000, 16777216, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 4, 16, 224, 256, 512, 32768, 16384, 8192, 0,
  /* 5995 */ 0, 8192, 16384, 0, 67108864, 0, 0, 33554432, 268435456, 0, 0, 18952, 0, 65, 100663298, 18952, 1024, 65,
  /* 6013 */ 1024, 1024, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 6, 56, 128, 2101248, 524288, 1024, 268436480, 1024, 19017,
  /* 6035 */ -1744550912, 8388624, 8388624, -1739308032, -1739308032, -1739308032, -1739308032, -1736162288,
  /* 6043 */ -1736162288, -1736162288, -1736162288, -7868466, -7868466, -7868466, -7868466, -7868450, -7868450,
  /* 6052 */ -7868450, -7868450, -7868450, 65, 0, 2, 33554432, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 0, 254, 1024, 5521408,
  /* 6073 */ -1744830464, 0, 0, -1744830464, 0, 0, 1040, 8667136, -1744830464, 0, 0, 0, 12288, -67108864, 0, 0, 0,
  /* 6090 */ 16384, 0, 0, 0, 64, 0, 0, 0, 1073741824, 18432, 0, 0, 0, 9216, 0, 4096, 2097152, 0, 0, 278528, 0, 0, 0,
  /* 6113 */ 18432, 16, 8388608, 0, 0, 0, 13312, 5242880, 0x80000000, 0, 0, 4, 16, 0, 518144, 8388608, 50331648,
  /* 6130 */ 201326592, 805306368, -1073741824, 805306368, -1073741824, 0, 0, 0, 24576, 2048, 16384, 67108864,
  /* 6142 */ 134217728, 268435456, 72, 0, 0, 0, 29696, 204, 768, 1024, 10240, 16384, 32768, 50331648, 67108864,
  /* 6157 */ 134217728, 805306368, 0, 768, 1024, 2048, 8192, 16384, 32768, 458752, 8388608, 50331648, 67108864, 16384,
  /* 6171 */ 32768, 458752, 50331648, 67108864, 536870912, 1073741824, 0, 0, 0, 208, 0, 0, 0, 131584, 16384, 67108864,
  /* 6187 */ 268435456, 0, 0, 67108864, 0, 0, 134217728, 128, 256, 3584, 16384, 32768, 524288, 4194304, 33554432,
  /* 6202 */ 134217728, 536870912, 0, 0, 64, 128, 512, 2048, 8192, 16384, 458752, 16384, 458752, 50331648, 67108864,
  /* 6217 */ 805306368, 1073741824, 16, 0, 0, 1048576, 4194304, 33554432, 4, 8, 128, 512, 2048, 196608, 262144,
  /* 6232 */ 33554432, 536870912, 0, 8, 512, 2048, 196608, 262144, 50331648, 536870912, 1073741824, 64, 64, 16392,
  /* 6246 */ 268435456, 0, 537395200, 537395200, 0, 0, 134217728, 4096, 0, 0, 537395200, 0, 32768, 0, 2048, 0, 4212736,
  /* 6263 */ 4212736, 4212736, 537395200, 4212736, 1082130432, 537427968, 4212736, 51380242, 51380242, 22038531,
  /* 6273 */ 22366211, 22366211, 22366211, 55592978, 22366219, 22366211, 22366219, 22366227, 55592978, 55592978,
  /* 6283 */ 55592978, 55592978, 324028498, 55592978, 55592978, 1062785014, 1062785014, 1062785014, 0, 1062785014,
  /* 6293 */ 1062785014, 1062785014, 1062785014, 16384, 32768, 268435456, 0, 0, 201326592, 0, 0, 0, 1998, 518144,
  /* 6307 */ 8388608, 8192, 2097152, 0, 0x80000000, 0, 4096, 0, 8, 0, 0, 486539264, 0, 0, 2101248, 0, 0, 3751936, 0, 0,
  /* 6327 */ 5242880, 0, 0, 0, 557056, 0, 0, 4, 64, 128, 8388608, 18, 17825792, 33554432, 0, 0, 536870912, 0, 0, 346112,
  /* 6347 */ 0, 0, 11, 0, 82, 301989888, 0, 0, 0, 2048, 0, 0, 577408, 22020096, 1040187392, 0, 0, 0, 393744, 0, 524288,
  /* 6368 */ 0, 64, 0, 2097152, 0, 327680, 0, 0, 7, 27756528, -503316480, 0, 80, 268435456, 0, 0, 8, 16, 512, 402653184,
  /* 6388 */ 0, 0, 0, 16, 33554432, 0, 0, 536870912, 1073741824, 256, 1536, 16384, 32768, 524288, 0, 256, 8192, 2097152,
  /* 6406 */ 268435456, 1, 0, 0, 65536, 262144, 256, 1536, 32768, 524288, 0, 4194304, 134217728, 536870912, 0, 4194304,
  /* 6422 */ 131072, 8192, 2097152, 0x80000000, 0, 0, 1075838976, 2097152, 2097152, 268435456, 4194432, 1536, 32768,
  /* 6435 */ 524288, 134217728, 268435456, 0, 0, 0, 32768, 0, 0, 0, 65536, 0, 0, 0, 131072, 0, 0, 0, 48, 25165824, 0,
  /* 6456 */ 64, 1536, 32768, 524288, 4194304, 0, 1536, 32768, 0, 0, 256, 1, 256, 67174400, 33554432, 8192, 0, 0, 65536,
  /* 6475 */ 16384, 1073741824, 0, 0, 8, 64, 0, 0, 0, 1073741824, 16384, 0, 0, 16384, 16384, 8, 8, 0, 0, 8, 512, 2048,
  /* 6497 */ 131072, 536870912, 0, 8, 268435456, 134217728, 131072, 128, 536870912, 0, 0, 8, 131072, 4194304,
  /* 6511 */ -2146430976, 16908320, 547389524, 547389524, 547389524, 555909216, 555909216, 555909216, 555909216,
  /* 6520 */ 564297840, 564297844, 564297844, 564297844, 564297844, 564297844, 1001055742, 1001055742, 1001056254,
  /* 6529 */ 1001055742, 1001056254, 1001056254, 1001055742, 1001055742, 1001056254, 1001056254, 1001056254, 1001056254,
  /* 6538 */ 1001056254, 1001056254, 0, 0, 16, 64, 128, 3072, 4096, 8192, 65536, 1, 0, 256, 67108864, 1073741824, 0, 0,
  /* 6556 */ 84, 2129920, 8388608, 4096, 0, 0, 0, 32, 0, 0, 1280, 2809856, 58720256, 939524096, 0, 0, 0, 524288, 0, 0,
  /* 6576 */ 0, 28, 0, 254, 1792, 2809856, 58720256, 939524096, 0, 939524096, 0, 0, 16, 33554432, 0x80000000, 4096,
  /* 6592 */ 1048576, 0x80000000, 0, 1, 285212672, 0, 0, 524288, 134217728, 268435456, 0x80000000, 0, 0, 0, 20, 64,
  /* 6608 */ 32768, 0, 2097152, 0, 1572864, 0, 0, 0, 134217728, 0, 0, 0, 7, 16, 163840, 0, 0, 0, 1007232, 52, 0, 0, 0,
  /* 6631 */ 1040000, 64, 128, 1280, 24576, 163840, 524288, 2097152, 58720256, 402653184, 536870912, 128, 1792, 24576,
  /* 6645 */ 163840, 524288, 25165824, 0, 0, 0, 1048576, 4194304, 0, 56, 128, 1280, 8192, 524288, 16384, 131072, 524288,
  /* 6662 */ 58720256, 402653184, 0, 56, 128, 1792, 8192, 16384, 131072, 2, 4, 24, 32, 128, 1792, 8192, 524288,
  /* 6679 */ 16777216, 262144, 33554432, 134217728, 0, 2, 4, 16, 64, 128, 256, 4, 8, 16, 1024, 16777216, 4, 8, 16,
  /* 6698 */ 402653184, 0, 0, 8, 16, 402653184, 536870912, 0, 0, 18, 33554432, 256, 512, 2048, 8192, 8192, 34816, 9216,
  /* 6716 */ 67108866, 12, 4, 16384, 0, 0, 4194304, 0x80000000, 0, 65536, 67108864, 0, 0, 0, 262144, 0, 0, 0, 118,
  /* 6735 */ 577408, 22020096, 268435460, 32768, 8192, 2048, 16384, 32768, 524288, 1048576, 4194304, 16777216, 8192,
  /* 6748 */ 3670016, 2048, 8192, 65536, 131072, 1048576, 0, 0, 29712, 29712, 29712, 29840, 536900624, 29712, 29840,
  /* 6763 */ 29840, 4224144, 144384, 144384, 144384, -754647956, 144384, 144384, 144384, 144384, -754647956, -754647956,
  /* 6775 */ -754647956, -754647956, -754647940, -754647940, -754647940, -754647940, -754516884, -754647956, -754516884,
  /* 6784 */ -754516884, 0, 0, 0, 1052672, 4, 8, 256, 512, 1024, 32768, 65536, 2, 67108864, 12, 16384, 0, 65536, 0, 4,
  /* 6804 */ 268435456, 0, 2, 4, 32, 524288, 1048576, 34816, 0, 0, 0, 1114112, 44, 64576, 319029248, -1073741824, 0, 0,
  /* 6822 */ 60, 0, 0, 0, 2097152, 0, 0, 319160320, 0, 0, 0, 3670016, 28672, 0, 0, 0, 4194304, 0, 0, 0, 8192, 268435456,
  /* 6844 */ 16, 0, 128, 536870912, 4194304, 131072, 0, 131072, 0, 0, 131072, 1024, 2048, 61440, 262144, 318767104,
  /* 6860 */ -1073741824, 318767104, -1073741824, 0, 0, 32, 524288, 28, 0, 0, 0, 8388608, 0, 0, 393216, 0, 0, 0,
  /* 6878 */ 16777216, 0x80000000, 4, 8, 2048, 8192, 32768, 8388608, 0, 24576, 0, 0, 60, 64576, 12, 16, 32, 64, 64, 64,
  /* 6898 */ 64, 32, 96, 96, 0, 8, 64, 2048, 16384, 32768, 262144, 50331648, 2, 67108864, 16384, 0, 65536, 16384, 32768,
  /* 6917 */ 50331648, 268435456, 0x80000000, 0, 0, 50331648, 268435456, 0, 2, 4, 112, 128, 256, 0, 524288, 536870912,
  /* 6933 */ 0, 0, 33554432, 268435456, 0, 268435456, 0, 524288, 1048576, 33554432, 67108864, 134217728, 805306368,
  /* 6946 */ 1073741824, 0x80000000, 256, 0, 2048, 0, 2, 4, 134217728, 805306368, 1073741824, 0, 67174400, 0, 256,
  /* 6961 */ 262144, 2113536, 0, 2, 8, 64, 128, 1024, 4096, 0, 256, 0, 0, 32, 128, 2097152, 135790592, 0, 256, 0, 8192,
  /* 6982 */ 2097152, 4, 0, 0, 33554624, 4, 131585, 0, 131585, 4, 393745, 1610612736, 1610612736, 393753, 393753,
  /* 6997 */ 393753, 393753, 0, 135790592, 131585, 131585, 805708305, 805708305, 1879450129, 1879450129, -483948553,
  /* 7008 */ -475559945, -483948553, -483948553, -475559945, 1879450129, 1879450129, 1879450129, 1879450129, 805708561,
  /* 7017 */ -475559945, -475559945, -475559945, -475559945, -215504905, -475559945, -207116297, -207116297, -207116297,
  /* 7026 */ 0, 4096, 4194304, 1, 512, 32768, 0, 2113536, 0, 0, 116, 0, 0, 401936, 805306368, 0, 0, 0, 393752, 0,
  /* 7046 */ 1879048192, 0, 0, 128, 131072, 402192, 0, 0, 0, 33554432, 0, 0, 7, 19367920, -503316480, 0, 0, 0, 50331648,
  /* 7065 */ 0, 19376112, -234881024, 0, 2, 12, 192, 768, 27764720, -234881024, 0, 0, 220, 0, 0, 24, 0, 0, 0, 167772160,
  /* 7085 */ 8704, 268435456, 0, 0, 512, 131072, 7, 16, 480, 1536, 32768, 65536, 393216, 2097152, 32768, 65536, 2490368,
  /* 7102 */ 16777216, 33554432, 536870912, -1073741824, 0, 0, 65536, 10878976, 16777216, 33554432, 536870912, 8192,
  /* 7114 */ 268435456, 0, 0, 520, 0, 65, 16, 224, 256, 1536, 32768, 65536, 65536, 393216, 10485760, 16777216, 33554432,
  /* 7131 */ 1073741824, 0x80000000, 0, 192, 0, 0, 131072, 131072, 131072, 134217736, 32768, 131072, 262144, 2097152,
  /* 7145 */ 16777216, 4096, 1, 512, 32768, 0, 0, 112, 25165824, 0, 192, 131072, 0, 2, 16, 1048576, 128, 128, 128, 0,
  /* 7165 */ 2097152, 0, 0, 262144, 33554432, 0, 2, 0, 65536, 65536, 262144, 131072, 2097152, 16777216, 0, 2, 65536,
  /* 7182 */ 262656, 0, 0, 0, 1536, 512, 32768, 131072, 2097152, 8388608, 4, 16, 224, 512, 32768, 4, 524288, 134217728,
  /* 7200 */ 0, 2, 301989888, 0, 3, 22020096, 0, 0, 536870912, 131072, 0, 4096, 32768, 0, 0, 1024, 278528, 16, 192,
  /* 7219 */ 32768, 8388608, 16777216, 0, 0, 1024, 585, 0, 0, 4, 8, 512, 2048, 0, 0, 2, 4, 16, 192, 32768, 0, 4096, 0,
  /* 7242 */ 128, 0, 16384, 64, 128, 0, 0, 16384, 32768, 0, 16, 64, 128, 8388608, 16777216, 1073741824, 0, 0, 4, 0, 0,
  /* 7263 */ 128, 512, 3072, 4096, 16384, 32768, 4, 128, 0, 0, 1998, 59238400, -67108864, 0, 0, 32, 512, 2048, 32768,
  /* 7282 */ 262144, 32768, 262144, 524288, 8388608, 0, 0, 0, 8192, 0, 33554432, 268435456, 268435456, 268435456,
  /* 7296 */ 268435456, -2113929216, 100663296, 100663296, 2, 4, 8, 262144, 262144, 2048, 33554436, 0, 0, 2048, 4194304,
  /* 7311 */ 0, 0, 33554436, 4224, 4224, 0, 4, 16, 32, 64, 128, 256, 1536, 2048, 16384, 100663296, 4224, 0, 0, 9728,
  /* 7331 */ 268435456, 0, 0, 513, 32768, 262400, 65536, 65536, 65536, 131072, 262144, 2097152, 8388608, 4224,
  /* 7345 */ -1072627712, 805306384, -1342177264, -1070006272, -1070006272, -1069989376, -1069989376, -1069989376,
  /* 7353 */ -1069989360, -1065795072, -1061600768, -1069989376, -258932720, -258932720, -258932720, -258932720,
  /* 7361 */ -225378288, -258932720, -225378288, 1260767, 1260767, 34815199, 1260767, 1260767, 34815199, 34815199,
  /* 7371 */ 1260767, 34815199, 1260767, 169032927, 169032927, 169032927, 169032927, 1242774751, 169032927, 169032927,
  /* 7381 */ -1978450721, 169032927, -1978450721, 169032927, -1978450721, -1978450721, -225231649, -1173144353,
  /* 7389 */ -225231649, -225231649, -91013921, 0, 4, 32, 32, 0, 32, 0, 0, 524288, 3145728, 541065216, 541065216,
  /* 7404 */ 541065216, 4194304, 4198144, 16, 536870912, 0, 0, 29824, 536870912, 7946240, 12140544, 0, 0, 32768,
  /* 7418 */ 8388608, 0, 0, 19, 0, 0, 9502720, 1610612736, 0, 0, 0, 32505856, 208, 15360, 1245184, 0, 0, 0, 268435456,
  /* 7437 */ 0, 0, 0, 15, 9633792, 0, 0, 3670016, 0, 0, 16384, 2097152, 0, 80, 128, 7168, 8192, 196608, 1048576, 196608,
  /* 7457 */ 1048576, 0, 0, 32768, 33554436, 1, 2, 12, 80, 128, 0, 3145728, 0, 0, 0, 3735552, 32, 512, 2048, 262144,
  /* 7477 */ 262144, 0, 0, 1, 4096, 32, 262144, 524288, 0, 0, 64, 128, 8388608, 0, 0, 128, 1024, 4096, 8192, 0, 0, 1, 1,
  /* 7500 */ 0, 0, 2, 4, 8, 16, 512, 1024, 16777216, 33554432, 402653184, 0, 0, 0, 393216, 0
];

JSONiqParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'$$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'false'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'jsoniq'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'null'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'select'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'true'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

// End
