// This file was generated on Fri Jul 12, 2013 13:57 (UTC+01) by REx v5.25 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net>
// REx command line: JSONiqParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "JSONiqParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module){
                                                            var JSONiqParser = exports.JSONiqParser = function JSONiqParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 40 "JSONiqParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? JSONiqParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = JSONiqParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [JSONiqParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(279);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Module();
    shift(25);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 170:                       // 'jsoniq'
      lookahead2W(170);             // S^WS | '#' | '(' | '(:' | 'encoding' | 'version'
      break;
    default:
      lk = l1;
    }
    if (lk == 64682                 // 'jsoniq' 'encoding'
     || lk == 137898)               // 'jsoniq' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(279);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 185:                       // 'module'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | 'namespace'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 95929:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(170);                     // 'jsoniq'
    lookahead1W(119);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      break;
    default:
      shift(269);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      lookahead1W(112);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 126)                // 'encoding'
      {
        shift(126);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
    }
    lookahead1W(29);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(142);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(185);                     // 'module'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(30);                // S^WS | '(:' | '='
    shift(61);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(29);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(279);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(208);           // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
                                    // 'construction' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'ft-option' | 'function' | 'index' | 'integrity' | 'namespace' | 'option' |
                                    // 'ordering' | 'revalidation' | 'updating' | 'variable'
        break;
      case 155:                     // 'import'
        lookahead2W(171);           // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
        break;
      default:
        lk = l1;
      }
      if (lk != 43117               // 'declare' 'base-uri'
       && lk != 44141               // 'declare' 'boundary-space'
       && lk != 50797               // 'declare' 'construction'
       && lk != 53869               // 'declare' 'copy-namespaces'
       && lk != 54893               // 'declare' 'decimal-format'
       && lk != 56429               // 'declare' 'default'
       && lk != 73325               // 'declare' 'ft-option'
       && lk != 94875               // 'import' 'module'
       && lk != 95853               // 'declare' 'namespace'
       && lk != 106093              // 'declare' 'ordering'
       && lk != 115821              // 'declare' 'revalidation'
       && lk != 117403)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(200);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 56429)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 95853:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 155:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 73325:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(29);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(279);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(202);           // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      if (lk != 17005               // 'declare' '%'
       && lk != 49261               // 'declare' 'collection'
       && lk != 52333               // 'declare' 'context'
       && lk != 75373               // 'declare' 'function'
       && lk != 80493               // 'declare' 'index'
       && lk != 83565               // 'declare' 'integrity'
       && lk != 104045              // 'declare' 'option'
       && lk != 134765              // 'declare' 'updating'
       && lk != 137325)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(198);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 52333:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 104045:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(29);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(54);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 109:                       // 'declare'
      lookahead2W(196);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 56429)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 44141:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 43117:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50797:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 106093:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 115821:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53869:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    shift(86);                      // 'boundary-space'
    lookahead1W(137);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 218:                       // 'preserve'
      shift(218);                   // 'preserve'
      break;
    default:
      shift(246);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(41);                // S^WS | '(:' | 'collation'
    shift(95);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(41);                // S^WS | '(:' | 'collation'
    shiftT(95);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    shift(84);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'construction'
    shift(99);                      // 'construction'
    lookahead1W(137);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 246:                       // 'strip'
      shift(246);                   // 'strip'
      break;
    default:
      shift(218);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(70);                // S^WS | '(:' | 'ordering'
    shift(207);                     // 'ordering'
    lookahead1W(135);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    default:
      shift(262);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    shift(205);                     // 'order'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shift(124);                     // 'empty'
    lookahead1W(124);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 149:                       // 'greatest'
      shift(149);                   // 'greatest'
      break;
    default:
      shift(176);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    shiftT(205);                    // 'order'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shiftT(124);                    // 'empty'
    lookahead1W(124);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 149:                       // 'greatest'
      shiftT(149);                  // 'greatest'
      break;
    default:
      shiftT(176);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(47);                // S^WS | '(:' | 'copy-namespaces'
    shift(105);                     // 'copy-namespaces'
    lookahead1W(132);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(42);                      // ','
    lookahead1W(126);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 218:                       // 'preserve'
      shift(218);                   // 'preserve'
      break;
    default:
      shift(193);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 159:                       // 'inherit'
      shift(159);                   // 'inherit'
      break;
    default:
      shift(192);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(117);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_EQName();
      break;
    default:
      shift(110);                   // 'default'
      lookahead1W(48);              // S^WS | '(:' | 'decimal-format'
      shift(107);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(204);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 54)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 108:                       // 'decimal-separator'
      shift(108);                   // 'decimal-separator'
      break;
    case 151:                       // 'grouping-separator'
      shift(151);                   // 'grouping-separator'
      break;
    case 158:                       // 'infinity'
      shift(158);                   // 'infinity'
      break;
    case 182:                       // 'minus-sign'
      shift(182);                   // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      shift(68);                    // 'NaN'
      break;
    case 213:                       // 'percent'
      shift(213);                   // 'percent'
      break;
    case 212:                       // 'per-mille'
      shift(212);                   // 'per-mille'
      break;
    case 280:                       // 'zero-digit'
      shift(280);                   // 'zero-digit'
      break;
    case 117:                       // 'digit'
      shift(117);                   // 'digit'
      break;
    default:
      shift(211);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 155:                       // 'import'
      lookahead2W(130);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 117403:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(155);                     // 'import'
    lookahead1W(74);                // S^WS | '(:' | 'schema'
    shift(229);                     // 'schema'
    lookahead1W(141);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(111);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
      break;
    default:
      shift(110);                   // 'default'
      lookahead1W(50);              // S^WS | '(:' | 'element'
      shift(122);                   // 'element'
      lookahead1W(63);              // S^WS | '(:' | 'namespace'
      shift(187);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(155);                     // 'import'
    lookahead1W(62);                // S^WS | '(:' | 'module'
    shift(185);                     // 'module'
    lookahead1W(91);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 187)                  // 'namespace'
    {
      shift(187);                   // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
      whitespace();
      parse_NCName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(111);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    whitespace();
    parse_NCName();
    lookahead1W(30);                // S^WS | '(:' | '='
    shift(61);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(118);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    default:
      shift(147);                   // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(118);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    default:
      shiftT(147);                  // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    shiftT(187);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'ft-option'
    shift(143);                     // 'ft-option'
    lookahead1W(82);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(109);                     // 'declare'
    for (;;)
    {
      lookahead1W(194);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 263)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 263:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 268:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 147:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 96:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 157:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(263);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(33);                      // '%'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(195);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(192);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(192);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        whitespace();
        parse_Literal();
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(33);                     // '%'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_EQName();
    lookahead1W(195);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(192);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
      try_Literal();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(192);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
                                    // 'false' | 'null' | 'true'
        try_Literal();
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(268);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(109);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      shift(53);                    // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(134);                   // 'external'
      lookahead1W(107);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'context'
    shift(102);                     // 'context'
    lookahead1W(58);                // S^WS | '(:' | 'item'
    shift(167);                     // 'item'
    lookahead1W(157);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(250);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(109);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      shift(53);                    // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(134);                   // 'external'
      lookahead1W(107);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(153);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_EQName();
    lookahead1W(153);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'option'
    shift(203);                     // 'option'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(201);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(201);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(151);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
      parse_ForClause();
      break;
    case 177:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(151);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
      try_ForClause();
      break;
    case 177:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 272:                       // 'where'
      parse_WhereClause();
      break;
    case 150:                       // 'group'
      parse_GroupByClause();
      break;
    case 205:                       // 'order'
    case 241:                       // 'stable'
      parse_OrderByClause();
      break;
    case 106:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_InitialClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 272:                       // 'where'
      try_WhereClause();
      break;
    case 150:                       // 'group'
      try_GroupByClause();
      break;
    case 205:                       // 'order'
    case 241:                       // 'stable'
      try_OrderByClause();
      break;
    case 106:                       // 'count'
      try_CountClause();
      break;
    default:
      try_InitialClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    default:
      shift(142);                   // 'from'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    default:
      shiftT(142);                  // 'from'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(183);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(174);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(160);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(125);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 232)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(183);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(174);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(160);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(125);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 232)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(73);                      // 'allowing'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shift(124);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(73);                     // 'allowing'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shiftT(124);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(82);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(82);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(232);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(232);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(177);                     // 'let'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(95);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(177);                    // 'let'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(95);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(108);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(108);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    default:
      shift(142);                   // 'from'
    }
    lookahead1W(139);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    default:
      shiftT(142);                  // 'from'
    }
    lookahead1W(139);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(257);                     // 'tumbling'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shift(275);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(113);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 202)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(257);                    // 'tumbling'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shiftT(275);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(113);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 202)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(239);                     // 'sliding'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shift(275);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(113);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(239);                    // 'sliding'
    lookahead1W(86);                // S^WS | '(:' | 'window'
    shiftT(275);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(113);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(242);                     // 'start'
    lookahead1W(182);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shift(271);                     // 'when'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(242);                    // 'start'
    lookahead1W(182);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shiftT(271);                    // 'when'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 202)                  // 'only'
    {
      shift(202);                   // 'only'
    }
    lookahead1W(53);                // S^WS | '(:' | 'end'
    shift(127);                     // 'end'
    lookahead1W(182);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shift(271);                     // 'when'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 202)                  // 'only'
    {
      shiftT(202);                  // 'only'
    }
    lookahead1W(53);                // S^WS | '(:' | 'end'
    shiftT(127);                    // 'end'
    lookahead1W(182);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(84);                // S^WS | '(:' | 'when'
    shiftT(271);                    // 'when'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(175);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(163);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 219)                  // 'previous'
    {
      shift(219);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(131);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 190)                  // 'next'
    {
      shift(190);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_CurrentItem();
    }
    lookahead1W(175);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(163);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 219)                  // 'previous'
    {
      shiftT(219);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_PreviousItem();
    }
    lookahead1W(131);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 190)                  // 'next'
    {
      shiftT(190);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(106);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(106);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(272);                     // 'where'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(272);                    // 'where'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(150);                     // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    shift(88);                      // 'by'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(150);                    // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    shiftT(88);                     // 'by'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(203);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(203);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    if (l1 == 53                    // ':='
     || l1 == 80)                   // 'as'
    {
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(28);              // S^WS | '(:' | ':='
      shift(53);                    // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 95)                   // 'collation'
    {
      shift(95);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    if (l1 == 53                    // ':='
     || l1 == 80)                   // 'as'
    {
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(28);              // S^WS | '(:' | ':='
      shiftT(53);                   // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 95)                   // 'collation'
    {
      shiftT(95);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    try_ExprSingle();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 205:                       // 'order'
      shift(205);                   // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shift(88);                    // 'by'
      break;
    default:
      shift(241);                   // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      shift(205);                   // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shift(88);                    // 'by'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shiftT(88);                   // 'by'
      break;
    default:
      shiftT(241);                  // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      shiftT(205);                  // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shiftT(88);                   // 'by'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(203);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(203);             // S^WS | '(:' | ',' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' |
                                    // 'return' | 'select' | 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        shift(81);                  // 'ascending'
        break;
      default:
        shift(114);                 // 'descending'
      }
    }
    lookahead1W(207);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'from' | 'group' |
                                    // 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 124)                  // 'empty'
    {
      shift(124);                   // 'empty'
      lookahead1W(124);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 149:                     // 'greatest'
        shift(149);                 // 'greatest'
        break;
      default:
        shift(176);                 // 'least'
      }
    }
    lookahead1W(206);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'from' | 'group' | 'let' |
                                    // 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      shift(95);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        shiftT(81);                 // 'ascending'
        break;
      default:
        shiftT(114);                // 'descending'
      }
    }
    lookahead1W(207);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'from' | 'group' |
                                    // 'let' | 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 124)                  // 'empty'
    {
      shiftT(124);                  // 'empty'
      lookahead1W(124);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 149:                     // 'greatest'
        shiftT(149);                // 'greatest'
        break;
      default:
        shiftT(176);                // 'least'
      }
    }
    lookahead1W(206);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'from' | 'group' | 'let' |
                                    // 'order' | 'return' | 'select' | 'stable' | 'where'
    if (l1 == 95)                   // 'collation'
    {
      shiftT(95);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    default:
      shift(130);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(113);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(113);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shift(156);                   // 'in'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(228);                     // 'satisfies'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    default:
      shiftT(130);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(113);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(113);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shiftT(156);                  // 'in'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(228);                    // 'satisfies'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(248);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(248);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(89);                    // 'case'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(89);                   // 'case'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(259);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(150);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
    }
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(259);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(150);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
    }
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(89);                      // 'case'
    lookahead1W(257);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
    }
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceTypeUnion();
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(89);                     // 'case'
    lookahead1W(257);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
    }
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceTypeUnion();
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | 'return' | 'select' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shift(284);                   // '|'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(164);             // S^WS | '(:' | 'return' | 'select' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shiftT(284);                  // '|'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(154);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shift(250);                     // 'then'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(123);                     // 'else'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(154);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shiftT(250);                    // 'then'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    shiftT(123);                    // 'else'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(209);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ':=' | ';' | ']' | 'after' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'else' | 'empty' | 'end' | 'for' | 'from' | 'group' |
                                    // 'into' | 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(209);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ':=' | ';' | ']' | 'after' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'else' | 'empty' | 'end' | 'for' | 'from' | 'group' |
                                    // 'into' | 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(256);                     // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(256);                    // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_TryTargetExpr();
    shiftT(287);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(92);                      // 'catch'
    lookahead1W(241);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_CatchErrorList();
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(92);                     // 'catch'
    lookahead1W(241);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_CatchErrorList();
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(140);             // S^WS | '(:' | '{' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shift(284);                   // '|'
      lookahead1W(241);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(140);             // S^WS | '(:' | '{' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shiftT(284);                  // '|'
      lookahead1W(241);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 204)                // 'or'
      {
        break;
      }
      shift(204);                   // 'or'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 204)                // 'or'
      {
        break;
      }
      shiftT(204);                  // 'or'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_NotExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      shift(76);                    // 'and'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      whitespace();
      parse_NotExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_NotExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      shiftT(76);                   // 'and'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      try_NotExpr();
    }
  }

  function parse_NotExpr()
  {
    eventHandler.startNonterminal("NotExpr", e0);
    for (;;)
    {
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shift(196);                   // 'not'
    }
    whitespace();
    parse_ComparisonExpr();
    eventHandler.endNonterminal("NotExpr", e0);
  }

  function try_NotExpr()
  {
    for (;;)
    {
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shiftT(196);                  // 'not'
    }
    try_ComparisonExpr();
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 148                   // 'ge'
     || l1 == 152                   // 'gt'
     || l1 == 166                   // 'is'
     || l1 == 175                   // 'le'
     || l1 == 181                   // 'lt'
     || l1 == 189)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 148:                     // 'ge'
      case 152:                     // 'gt'
      case 175:                     // 'le'
      case 181:                     // 'lt'
      case 189:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 64:                      // '>>'
      case 166:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 148                   // 'ge'
     || l1 == 152                   // 'gt'
     || l1 == 166                   // 'is'
     || l1 == 175                   // 'le'
     || l1 == 181                   // 'lt'
     || l1 == 189)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 148:                     // 'ge'
      case 152:                     // 'gt'
      case 175:                     // 'le'
      case 181:                     // 'lt'
      case 189:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 64:                      // '>>'
      case 166:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      shift(100);                   // 'contains'
      lookahead1W(77);              // S^WS | '(:' | 'text'
      shift(249);                   // 'text'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 277)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      shiftT(100);                  // 'contains'
      lookahead1W(77);              // S^WS | '(:' | 'text'
      shiftT(249);                  // 'text'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 277)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 285)                // '||'
      {
        break;
      }
      shift(285);                   // '||'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 285)                // '||'
      {
        break;
      }
      shiftT(285);                  // '||'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 253)                  // 'to'
    {
      shift(253);                   // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 253)                  // 'to'
    {
      shiftT(253);                  // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shift(41);                  // '+'
        break;
      default:
        shift(43);                  // '-'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shiftT(41);                 // '+'
        break;
      default:
        shiftT(43);                 // '-'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 153                 // 'idiv'
       && l1 != 183)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shift(39);                  // '*'
        break;
      case 119:                     // 'div'
        shift(119);                 // 'div'
        break;
      case 153:                     // 'idiv'
        shift(153);                 // 'idiv'
        break;
      default:
        shift(183);                 // 'mod'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 153                 // 'idiv'
       && l1 != 183)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shiftT(39);                 // '*'
        break;
      case 119:                     // 'div'
        shiftT(119);                // 'div'
        break;
      case 153:                     // 'idiv'
        shiftT(153);                // 'idiv'
        break;
      default:
        shiftT(183);                // 'mod'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 284)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        shift(260);                 // 'union'
        break;
      default:
        shift(284);                 // '|'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 284)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        shiftT(260);                // 'union'
        break;
      default:
        shiftT(284);                // '|'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (l1 != 132                 // 'except'
       && l1 != 164)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 164:                     // 'intersect'
        shift(164);                 // 'intersect'
        break;
      default:
        shift(132);                 // 'except'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      if (l1 != 132                 // 'except'
       && l1 != 164)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 164:                     // 'intersect'
        shiftT(164);                // 'intersect'
        break;
      default:
        shiftT(132);                // 'except'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '|}' | '}'
    if (l1 == 162)                  // 'instance'
    {
      shift(162);                   // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shift(200);                   // 'of'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '|}' | '}'
    if (l1 == 162)                  // 'instance'
    {
      shiftT(162);                  // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shiftT(200);                  // 'of'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 254)                  // 'treat'
    {
      shift(254);                   // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 254)                  // 'treat'
    {
      shiftT(254);                  // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 91)                   // 'castable'
    {
      shift(91);                    // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 91)                   // 'castable'
    {
      shiftT(91);                   // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 90)                   // 'cast'
    {
      shift(90);                    // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 90)                   // 'cast'
    {
      shiftT(90);                   // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shift(43);                  // '-'
        break;
      default:
        shift(41);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shiftT(43);                 // '-'
        break;
      default:
        shiftT(41);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(190);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 89354:                     // 'validate' 'lax'
    case 125706:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144138:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(190);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 89354:                     // 'validate' 'lax'
    case 125706:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144138:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shift(26);                    // '!'
      lookahead1W(265);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shiftT(26);                   // '!'
      lookahead1W(265);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      shift(61);                    // '='
      break;
    case 27:                        // '!='
      shift(27);                    // '!='
      break;
    case 55:                        // '<'
      shift(55);                    // '<'
      break;
    case 59:                        // '<='
      shift(59);                    // '<='
      break;
    case 62:                        // '>'
      shift(62);                    // '>'
      break;
    default:
      shift(63);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      shiftT(61);                   // '='
      break;
    case 27:                        // '!='
      shiftT(27);                   // '!='
      break;
    case 55:                        // '<'
      shiftT(55);                   // '<'
      break;
    case 59:                        // '<='
      shiftT(59);                   // '<='
      break;
    case 62:                        // '>'
      shiftT(62);                   // '>'
      break;
    default:
      shiftT(63);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    default:
      shift(148);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    default:
      shiftT(148);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 58:                        // '<<'
      shift(58);                    // '<<'
      break;
    default:
      shift(64);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 58:                        // '<<'
      shiftT(58);                   // '<<'
      break;
    default:
      shiftT(64);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(266);                     // 'validate'
    lookahead1W(176);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 281)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        shift(258);                 // 'type'
        lookahead1W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(266);                    // 'validate'
    lookahead1W(176);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 281)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        shiftT(258);                // 'type'
        lookahead1W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    default:
      shift(245);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    default:
      shiftT(245);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(281);                     // '{'
    lookahead1W(278);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(281);                    // '{'
    lookahead1W(278);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      try_Expr();
    }
    shiftT(287);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(36);                      // '(#'
    lookahead1(239);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(0);                // PragmaContents
      shift(1);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(30);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(36);                     // '(#'
    lookahead1(239);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(1);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(30);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 47:                        // '/'
      shift(47);                    // '/'
      lookahead1W(290);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'text' | 'times' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' | '{' | '{|' |
                                    // '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 53:                      // ':='
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 209:                     // 'paragraphs'
      case 237:                     // 'sentences'
      case 252:                     // 'times'
      case 279:                     // 'words'
      case 284:                     // '|'
      case 285:                     // '||'
      case 286:                     // '|}'
      case 287:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      shift(48);                    // '//'
      lookahead1W(260);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 47:                        // '/'
      shiftT(47);                   // '/'
      lookahead1W(290);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | ')' | '*' | '+' | ',' |
                                    // '-' | ':' | ':=' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'text' | 'times' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' | '{' | '{|' |
                                    // '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 53:                      // ':='
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 209:                     // 'paragraphs'
      case 237:                     // 'sentences'
      case 252:                     // 'times'
      case 279:                     // 'words'
      case 284:                     // '|'
      case 285:                     // '||'
      case 286:                     // '|}'
      case 287:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      shiftT(48);                   // '//'
      lookahead1W(260);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_PostfixExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 53                  // ':='
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 139                 // 'for'
       && lk != 142                 // 'from'
       && lk != 148                 // 'ge'
       && lk != 150                 // 'group'
       && lk != 152                 // 'gt'
       && lk != 153                 // 'idiv'
       && lk != 162                 // 'instance'
       && lk != 164                 // 'intersect'
       && lk != 165                 // 'into'
       && lk != 166                 // 'is'
       && lk != 175                 // 'le'
       && lk != 177                 // 'let'
       && lk != 181                 // 'lt'
       && lk != 183                 // 'mod'
       && lk != 184                 // 'modify'
       && lk != 189                 // 'ne'
       && lk != 202                 // 'only'
       && lk != 204                 // 'or'
       && lk != 205                 // 'order'
       && lk != 209                 // 'paragraphs'
       && lk != 224                 // 'return'
       && lk != 228                 // 'satisfies'
       && lk != 233                 // 'select'
       && lk != 237                 // 'sentences'
       && lk != 241                 // 'stable'
       && lk != 242                 // 'start'
       && lk != 252                 // 'times'
       && lk != 253                 // 'to'
       && lk != 254                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 284                 // '|'
       && lk != 285                 // '||'
       && lk != 286                 // '|}'
       && lk != 287                 // '}'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 24090               // '!' '/'
       && lk != 24602               // '!' '//'
       && lk != 34330               // '!' '@'
       && lk != 61978               // '!' 'document-node'
       && lk != 96282               // '!' 'namespace-node'
       && lk != 99354               // '!' 'node'
       && lk != 117786              // '!' 'schema-attribute'
       && lk != 118298)             // '!' 'schema-element'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              shiftT(47);           // '/'
              break;
            case 48:                // '//'
              shiftT(48);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(269);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 34330               // '!' '@'
       && lk != 61978               // '!' 'document-node'
       && lk != 96282               // '!' 'namespace-node'
       && lk != 99354               // '!' 'node'
       && lk != 117786              // '!' 'schema-attribute'
       && lk != 118298)             // '!' 'schema-element'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        shift(47);                  // '/'
        break;
      case 48:                      // '//'
        shift(48);                  // '//'
        break;
      default:
        shift(26);                  // '!'
      }
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_PostfixExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' |
                                    // 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 53                  // ':='
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 139                 // 'for'
       && lk != 142                 // 'from'
       && lk != 148                 // 'ge'
       && lk != 150                 // 'group'
       && lk != 152                 // 'gt'
       && lk != 153                 // 'idiv'
       && lk != 162                 // 'instance'
       && lk != 164                 // 'intersect'
       && lk != 165                 // 'into'
       && lk != 166                 // 'is'
       && lk != 175                 // 'le'
       && lk != 177                 // 'let'
       && lk != 181                 // 'lt'
       && lk != 183                 // 'mod'
       && lk != 184                 // 'modify'
       && lk != 189                 // 'ne'
       && lk != 202                 // 'only'
       && lk != 204                 // 'or'
       && lk != 205                 // 'order'
       && lk != 209                 // 'paragraphs'
       && lk != 224                 // 'return'
       && lk != 228                 // 'satisfies'
       && lk != 233                 // 'select'
       && lk != 237                 // 'sentences'
       && lk != 241                 // 'stable'
       && lk != 242                 // 'start'
       && lk != 252                 // 'times'
       && lk != 253                 // 'to'
       && lk != 254                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 284                 // '|'
       && lk != 285                 // '||'
       && lk != 286                 // '|}'
       && lk != 287                 // '}'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 24090               // '!' '/'
       && lk != 24602               // '!' '//'
       && lk != 34330               // '!' '@'
       && lk != 61978               // '!' 'document-node'
       && lk != 96282               // '!' 'namespace-node'
       && lk != 99354               // '!' 'node'
       && lk != 117786              // '!' 'schema-attribute'
       && lk != 118298)             // '!' 'schema-element'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              shiftT(47);           // '/'
              break;
            case 48:                // '//'
              shiftT(48);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(269);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 34330               // '!' '@'
       && lk != 61978               // '!' 'document-node'
       && lk != 96282               // '!' 'namespace-node'
       && lk != 99354               // '!' 'node'
       && lk != 117786              // '!' 'schema-attribute'
       && lk != 118298)             // '!' 'schema-element'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        shiftT(47);                 // '/'
        break;
      case 48:                      // '//'
        shiftT(48);                 // '//'
        break;
      default:
        shiftT(26);                 // '!'
      }
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '$$' | '%' | '(' | '(:' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(247);             // EQName^Token | S^WS | '(' | '(:' | '::' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 122:                       // 'element'
      lookahead2W(243);             // EQName^Token | S^WS | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 187:                       // 'namespace'
      lookahead2W(291);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(255);             // NCName^Token | S^WS | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(101);             // S^WS | '(' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 234:                       // 'self'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12935                 // 'false' EOF
     || lk == 12997                 // 'null' EOF
     || lk == 13055                 // 'true' EOF
     || lk == 13447                 // 'false' '!'
     || lk == 13509                 // 'null' '!'
     || lk == 13567                 // 'true' '!'
     || lk == 13959                 // 'false' '!='
     || lk == 14021                 // 'null' '!='
     || lk == 14079                 // 'true' '!='
     || lk == 19591                 // 'false' ')'
     || lk == 19653                 // 'null' ')'
     || lk == 19711                 // 'true' ')'
     || lk == 20103                 // 'false' '*'
     || lk == 20165                 // 'null' '*'
     || lk == 20223                 // 'true' '*'
     || lk == 21127                 // 'false' '+'
     || lk == 21189                 // 'null' '+'
     || lk == 21247                 // 'true' '+'
     || lk == 21639                 // 'false' ','
     || lk == 21701                 // 'null' ','
     || lk == 21759                 // 'true' ','
     || lk == 22151                 // 'false' '-'
     || lk == 22213                 // 'null' '-'
     || lk == 22271                 // 'true' '-'
     || lk == 24199                 // 'false' '/'
     || lk == 24261                 // 'null' '/'
     || lk == 24319                 // 'true' '/'
     || lk == 24711                 // 'false' '//'
     || lk == 24773                 // 'null' '//'
     || lk == 24831                 // 'true' '//'
     || lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855                 // 'true' ':'
     || lk == 27271                 // 'false' ':='
     || lk == 27333                 // 'null' ':='
     || lk == 27391                 // 'true' ':='
     || lk == 27783                 // 'false' ';'
     || lk == 27845                 // 'null' ';'
     || lk == 27903                 // 'true' ';'
     || lk == 28295                 // 'false' '<'
     || lk == 28357                 // 'null' '<'
     || lk == 28415                 // 'true' '<'
     || lk == 29831                 // 'false' '<<'
     || lk == 29893                 // 'null' '<<'
     || lk == 29951                 // 'true' '<<'
     || lk == 30343                 // 'false' '<='
     || lk == 30405                 // 'null' '<='
     || lk == 30463                 // 'true' '<='
     || lk == 31367                 // 'false' '='
     || lk == 31429                 // 'null' '='
     || lk == 31487                 // 'true' '='
     || lk == 31879                 // 'false' '>'
     || lk == 31941                 // 'null' '>'
     || lk == 31999                 // 'true' '>'
     || lk == 32391                 // 'false' '>='
     || lk == 32453                 // 'null' '>='
     || lk == 32511                 // 'true' '>='
     || lk == 32903                 // 'false' '>>'
     || lk == 32965                 // 'null' '>>'
     || lk == 33023                 // 'true' '>>'
     || lk == 35463                 // 'false' '['
     || lk == 35525                 // 'null' '['
     || lk == 35583                 // 'true' '['
     || lk == 35975                 // 'false' ']'
     || lk == 36037                 // 'null' ']'
     || lk == 36095                 // 'true' ']'
     || lk == 36487                 // 'false' 'after'
     || lk == 36539                 // 'namespace' 'after'
     || lk == 36549                 // 'null' 'after'
     || lk == 36607                 // 'true' 'after'
     || lk == 39047                 // 'false' 'and'
     || lk == 39099                 // 'namespace' 'and'
     || lk == 39109                 // 'null' 'and'
     || lk == 39167                 // 'true' 'and'
     || lk == 41095                 // 'false' 'as'
     || lk == 41147                 // 'namespace' 'as'
     || lk == 41157                 // 'null' 'as'
     || lk == 41215                 // 'true' 'as'
     || lk == 41607                 // 'false' 'ascending'
     || lk == 41659                 // 'namespace' 'ascending'
     || lk == 41669                 // 'null' 'ascending'
     || lk == 41727                 // 'true' 'ascending'
     || lk == 42119                 // 'false' 'at'
     || lk == 42171                 // 'namespace' 'at'
     || lk == 42181                 // 'null' 'at'
     || lk == 42239                 // 'true' 'at'
     || lk == 43655                 // 'false' 'before'
     || lk == 43707                 // 'namespace' 'before'
     || lk == 43717                 // 'null' 'before'
     || lk == 43775                 // 'true' 'before'
     || lk == 45191                 // 'false' 'by'
     || lk == 45253                 // 'null' 'by'
     || lk == 45311                 // 'true' 'by'
     || lk == 45703                 // 'false' 'case'
     || lk == 45755                 // 'namespace' 'case'
     || lk == 45765                 // 'null' 'case'
     || lk == 45823                 // 'true' 'case'
     || lk == 46215                 // 'false' 'cast'
     || lk == 46267                 // 'namespace' 'cast'
     || lk == 46277                 // 'null' 'cast'
     || lk == 46335                 // 'true' 'cast'
     || lk == 46727                 // 'false' 'castable'
     || lk == 46779                 // 'namespace' 'castable'
     || lk == 46789                 // 'null' 'castable'
     || lk == 46847                 // 'true' 'castable'
     || lk == 48775                 // 'false' 'collation'
     || lk == 48827                 // 'namespace' 'collation'
     || lk == 48837                 // 'null' 'collation'
     || lk == 48895                 // 'true' 'collation'
     || lk == 51335                 // 'false' 'contains'
     || lk == 51397                 // 'null' 'contains'
     || lk == 51455                 // 'true' 'contains'
     || lk == 54407                 // 'false' 'count'
     || lk == 54459                 // 'namespace' 'count'
     || lk == 54469                 // 'null' 'count'
     || lk == 54527                 // 'true' 'count'
     || lk == 56455                 // 'false' 'default'
     || lk == 56507                 // 'namespace' 'default'
     || lk == 56517                 // 'null' 'default'
     || lk == 56575                 // 'true' 'default'
     || lk == 58503                 // 'false' 'descending'
     || lk == 58555                 // 'namespace' 'descending'
     || lk == 58565                 // 'null' 'descending'
     || lk == 58623                 // 'true' 'descending'
     || lk == 61063                 // 'false' 'div'
     || lk == 61115                 // 'namespace' 'div'
     || lk == 61125                 // 'null' 'div'
     || lk == 61183                 // 'true' 'div'
     || lk == 63111                 // 'false' 'else'
     || lk == 63163                 // 'namespace' 'else'
     || lk == 63173                 // 'null' 'else'
     || lk == 63231                 // 'true' 'else'
     || lk == 63623                 // 'false' 'empty'
     || lk == 63675                 // 'namespace' 'empty'
     || lk == 63685                 // 'null' 'empty'
     || lk == 63743                 // 'true' 'empty'
     || lk == 65159                 // 'false' 'end'
     || lk == 65211                 // 'namespace' 'end'
     || lk == 65221                 // 'null' 'end'
     || lk == 65279                 // 'true' 'end'
     || lk == 66183                 // 'false' 'eq'
     || lk == 66235                 // 'namespace' 'eq'
     || lk == 66245                 // 'null' 'eq'
     || lk == 66303                 // 'true' 'eq'
     || lk == 67719                 // 'false' 'except'
     || lk == 67771                 // 'namespace' 'except'
     || lk == 67781                 // 'null' 'except'
     || lk == 67839                 // 'true' 'except'
     || lk == 71303                 // 'false' 'for'
     || lk == 71355                 // 'namespace' 'for'
     || lk == 71365                 // 'null' 'for'
     || lk == 71423                 // 'true' 'for'
     || lk == 72839                 // 'false' 'from'
     || lk == 72891                 // 'namespace' 'from'
     || lk == 72901                 // 'null' 'from'
     || lk == 72959                 // 'true' 'from'
     || lk == 75911                 // 'false' 'ge'
     || lk == 75963                 // 'namespace' 'ge'
     || lk == 75973                 // 'null' 'ge'
     || lk == 76031                 // 'true' 'ge'
     || lk == 76935                 // 'false' 'group'
     || lk == 76987                 // 'namespace' 'group'
     || lk == 76997                 // 'null' 'group'
     || lk == 77055                 // 'true' 'group'
     || lk == 77959                 // 'false' 'gt'
     || lk == 78011                 // 'namespace' 'gt'
     || lk == 78021                 // 'null' 'gt'
     || lk == 78079                 // 'true' 'gt'
     || lk == 78471                 // 'false' 'idiv'
     || lk == 78523                 // 'namespace' 'idiv'
     || lk == 78533                 // 'null' 'idiv'
     || lk == 78591                 // 'true' 'idiv'
     || lk == 83079                 // 'false' 'instance'
     || lk == 83131                 // 'namespace' 'instance'
     || lk == 83141                 // 'null' 'instance'
     || lk == 83199                 // 'true' 'instance'
     || lk == 84103                 // 'false' 'intersect'
     || lk == 84155                 // 'namespace' 'intersect'
     || lk == 84165                 // 'null' 'intersect'
     || lk == 84223                 // 'true' 'intersect'
     || lk == 84615                 // 'false' 'into'
     || lk == 84667                 // 'namespace' 'into'
     || lk == 84677                 // 'null' 'into'
     || lk == 84735                 // 'true' 'into'
     || lk == 85127                 // 'false' 'is'
     || lk == 85179                 // 'namespace' 'is'
     || lk == 85189                 // 'null' 'is'
     || lk == 85247                 // 'true' 'is'
     || lk == 89735                 // 'false' 'le'
     || lk == 89787                 // 'namespace' 'le'
     || lk == 89797                 // 'null' 'le'
     || lk == 89855                 // 'true' 'le'
     || lk == 90759                 // 'false' 'let'
     || lk == 90811                 // 'namespace' 'let'
     || lk == 90821                 // 'null' 'let'
     || lk == 90879                 // 'true' 'let'
     || lk == 92807                 // 'false' 'lt'
     || lk == 92859                 // 'namespace' 'lt'
     || lk == 92869                 // 'null' 'lt'
     || lk == 92927                 // 'true' 'lt'
     || lk == 93831                 // 'false' 'mod'
     || lk == 93883                 // 'namespace' 'mod'
     || lk == 93893                 // 'null' 'mod'
     || lk == 93951                 // 'true' 'mod'
     || lk == 94343                 // 'false' 'modify'
     || lk == 94395                 // 'namespace' 'modify'
     || lk == 94405                 // 'null' 'modify'
     || lk == 94463                 // 'true' 'modify'
     || lk == 96903                 // 'false' 'ne'
     || lk == 96955                 // 'namespace' 'ne'
     || lk == 96965                 // 'null' 'ne'
     || lk == 97023                 // 'true' 'ne'
     || lk == 103559                // 'false' 'only'
     || lk == 103611                // 'namespace' 'only'
     || lk == 103621                // 'null' 'only'
     || lk == 103679                // 'true' 'only'
     || lk == 104583                // 'false' 'or'
     || lk == 104635                // 'namespace' 'or'
     || lk == 104645                // 'null' 'or'
     || lk == 104703                // 'true' 'or'
     || lk == 105095                // 'false' 'order'
     || lk == 105147                // 'namespace' 'order'
     || lk == 105157                // 'null' 'order'
     || lk == 105215                // 'true' 'order'
     || lk == 107143                // 'false' 'paragraphs'
     || lk == 107205                // 'null' 'paragraphs'
     || lk == 107263                // 'true' 'paragraphs'
     || lk == 114823                // 'false' 'return'
     || lk == 114875                // 'namespace' 'return'
     || lk == 114885                // 'null' 'return'
     || lk == 114943                // 'true' 'return'
     || lk == 116871                // 'false' 'satisfies'
     || lk == 116923                // 'namespace' 'satisfies'
     || lk == 116933                // 'null' 'satisfies'
     || lk == 116991                // 'true' 'satisfies'
     || lk == 119431                // 'false' 'select'
     || lk == 119483                // 'namespace' 'select'
     || lk == 119493                // 'null' 'select'
     || lk == 119551                // 'true' 'select'
     || lk == 121479                // 'false' 'sentences'
     || lk == 121541                // 'null' 'sentences'
     || lk == 121599                // 'true' 'sentences'
     || lk == 123527                // 'false' 'stable'
     || lk == 123579                // 'namespace' 'stable'
     || lk == 123589                // 'null' 'stable'
     || lk == 123647                // 'true' 'stable'
     || lk == 124039                // 'false' 'start'
     || lk == 124091                // 'namespace' 'start'
     || lk == 124101                // 'null' 'start'
     || lk == 124159                // 'true' 'start'
     || lk == 129159                // 'false' 'times'
     || lk == 129221                // 'null' 'times'
     || lk == 129279                // 'true' 'times'
     || lk == 129671                // 'false' 'to'
     || lk == 129723                // 'namespace' 'to'
     || lk == 129733                // 'null' 'to'
     || lk == 129791                // 'true' 'to'
     || lk == 130183                // 'false' 'treat'
     || lk == 130235                // 'namespace' 'treat'
     || lk == 130245                // 'null' 'treat'
     || lk == 130303                // 'true' 'treat'
     || lk == 133255                // 'false' 'union'
     || lk == 133307                // 'namespace' 'union'
     || lk == 133317                // 'null' 'union'
     || lk == 133375                // 'true' 'union'
     || lk == 139399                // 'false' 'where'
     || lk == 139451                // 'namespace' 'where'
     || lk == 139461                // 'null' 'where'
     || lk == 139519                // 'true' 'where'
     || lk == 141447                // 'false' 'with'
     || lk == 141499                // 'namespace' 'with'
     || lk == 141509                // 'null' 'with'
     || lk == 141567                // 'true' 'with'
     || lk == 142983                // 'false' 'words'
     || lk == 143045                // 'null' 'words'
     || lk == 143103                // 'true' 'words'
     || lk == 145543                // 'false' '|'
     || lk == 145605                // 'null' '|'
     || lk == 145663                // 'true' '|'
     || lk == 146055                // 'false' '||'
     || lk == 146117                // 'null' '||'
     || lk == 146175                // 'true' '||'
     || lk == 146567                // 'false' '|}'
     || lk == 146629                // 'null' '|}'
     || lk == 146687                // 'true' '|}'
     || lk == 147079                // 'false' '}'
     || lk == 147141                // 'null' '}'
     || lk == 147199)               // 'true' '}'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 147:                       // 'function'
    case 281:                       // '{'
    case 283:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9915:                      // 'namespace' NCName^Token
    case 9948:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18055:                     // 'false' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18117:                     // 'null' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18175:                     // 'true' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 36435:                     // 'attribute' 'after'
    case 36474:                     // 'element' 'after'
    case 36572:                     // 'processing-instruction' 'after'
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37563:                     // 'namespace' 'allowing'
    case 37596:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38075:                     // 'namespace' 'ancestor'
    case 38108:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 38620:                     // 'processing-instruction' 'ancestor-or-self'
    case 38995:                     // 'attribute' 'and'
    case 39034:                     // 'element' 'and'
    case 39132:                     // 'processing-instruction' 'and'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40123:                     // 'namespace' 'append'
    case 40156:                     // 'processing-instruction' 'append'
    case 41043:                     // 'attribute' 'as'
    case 41082:                     // 'element' 'as'
    case 41180:                     // 'processing-instruction' 'as'
    case 41555:                     // 'attribute' 'ascending'
    case 41594:                     // 'element' 'ascending'
    case 41692:                     // 'processing-instruction' 'ascending'
    case 42067:                     // 'attribute' 'at'
    case 42106:                     // 'element' 'at'
    case 42204:                     // 'processing-instruction' 'at'
    case 42683:                     // 'namespace' 'attribute'
    case 42716:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43195:                     // 'namespace' 'base-uri'
    case 43228:                     // 'processing-instruction' 'base-uri'
    case 43603:                     // 'attribute' 'before'
    case 43642:                     // 'element' 'before'
    case 43740:                     // 'processing-instruction' 'before'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44252:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44731:                     // 'namespace' 'break'
    case 44764:                     // 'processing-instruction' 'break'
    case 45651:                     // 'attribute' 'case'
    case 45690:                     // 'element' 'case'
    case 45788:                     // 'processing-instruction' 'case'
    case 46163:                     // 'attribute' 'cast'
    case 46202:                     // 'element' 'cast'
    case 46300:                     // 'processing-instruction' 'cast'
    case 46675:                     // 'attribute' 'castable'
    case 46714:                     // 'element' 'castable'
    case 46812:                     // 'processing-instruction' 'castable'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47291:                     // 'namespace' 'catch'
    case 47324:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48315:                     // 'namespace' 'child'
    case 48348:                     // 'processing-instruction' 'child'
    case 48723:                     // 'attribute' 'collation'
    case 48762:                     // 'element' 'collation'
    case 48860:                     // 'processing-instruction' 'collation'
    case 49851:                     // 'namespace' 'comment'
    case 49884:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50363:                     // 'namespace' 'constraint'
    case 50396:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50875:                     // 'namespace' 'construction'
    case 50908:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52411:                     // 'namespace' 'context'
    case 52444:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52923:                     // 'namespace' 'continue'
    case 52956:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53435:                     // 'namespace' 'copy'
    case 53468:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 53980:                     // 'processing-instruction' 'copy-namespaces'
    case 54355:                     // 'attribute' 'count'
    case 54394:                     // 'element' 'count'
    case 54492:                     // 'processing-instruction' 'count'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55004:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55995:                     // 'namespace' 'declare'
    case 56028:                     // 'processing-instruction' 'declare'
    case 56403:                     // 'attribute' 'default'
    case 56442:                     // 'element' 'default'
    case 56540:                     // 'processing-instruction' 'default'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57019:                     // 'namespace' 'delete'
    case 57052:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57531:                     // 'namespace' 'descendant'
    case 57564:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58076:                     // 'processing-instruction' 'descendant-or-self'
    case 58451:                     // 'attribute' 'descending'
    case 58490:                     // 'element' 'descending'
    case 58588:                     // 'processing-instruction' 'descending'
    case 61011:                     // 'attribute' 'div'
    case 61050:                     // 'element' 'div'
    case 61148:                     // 'processing-instruction' 'div'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61627:                     // 'namespace' 'document'
    case 61660:                     // 'processing-instruction' 'document'
    case 62139:                     // 'namespace' 'document-node'
    case 62172:                     // 'processing-instruction' 'document-node'
    case 62651:                     // 'namespace' 'element'
    case 62684:                     // 'processing-instruction' 'element'
    case 63059:                     // 'attribute' 'else'
    case 63098:                     // 'element' 'else'
    case 63196:                     // 'processing-instruction' 'else'
    case 63571:                     // 'attribute' 'empty'
    case 63610:                     // 'element' 'empty'
    case 63708:                     // 'processing-instruction' 'empty'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64220:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64699:                     // 'namespace' 'encoding'
    case 64732:                     // 'processing-instruction' 'encoding'
    case 65107:                     // 'attribute' 'end'
    case 65146:                     // 'element' 'end'
    case 65244:                     // 'processing-instruction' 'end'
    case 66131:                     // 'attribute' 'eq'
    case 66170:                     // 'element' 'eq'
    case 66268:                     // 'processing-instruction' 'eq'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66747:                     // 'namespace' 'every'
    case 66780:                     // 'processing-instruction' 'every'
    case 67667:                     // 'attribute' 'except'
    case 67706:                     // 'element' 'except'
    case 67804:                     // 'processing-instruction' 'except'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68283:                     // 'namespace' 'exit'
    case 68316:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68795:                     // 'namespace' 'external'
    case 68828:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'false'
    case 69242:                     // 'element' 'false'
    case 69307:                     // 'namespace' 'false'
    case 69340:                     // 'processing-instruction' 'false'
    case 69715:                     // 'attribute' 'first'
    case 69754:                     // 'element' 'first'
    case 69819:                     // 'namespace' 'first'
    case 69852:                     // 'processing-instruction' 'first'
    case 70227:                     // 'attribute' 'following'
    case 70266:                     // 'element' 'following'
    case 70331:                     // 'namespace' 'following'
    case 70364:                     // 'processing-instruction' 'following'
    case 70739:                     // 'attribute' 'following-sibling'
    case 70778:                     // 'element' 'following-sibling'
    case 70843:                     // 'namespace' 'following-sibling'
    case 70876:                     // 'processing-instruction' 'following-sibling'
    case 71251:                     // 'attribute' 'for'
    case 71290:                     // 'element' 'for'
    case 71388:                     // 'processing-instruction' 'for'
    case 72787:                     // 'attribute' 'from'
    case 72826:                     // 'element' 'from'
    case 72924:                     // 'processing-instruction' 'from'
    case 73299:                     // 'attribute' 'ft-option'
    case 73338:                     // 'element' 'ft-option'
    case 73403:                     // 'namespace' 'ft-option'
    case 73436:                     // 'processing-instruction' 'ft-option'
    case 75451:                     // 'namespace' 'function'
    case 75484:                     // 'processing-instruction' 'function'
    case 75859:                     // 'attribute' 'ge'
    case 75898:                     // 'element' 'ge'
    case 75996:                     // 'processing-instruction' 'ge'
    case 76883:                     // 'attribute' 'group'
    case 76922:                     // 'element' 'group'
    case 77020:                     // 'processing-instruction' 'group'
    case 77907:                     // 'attribute' 'gt'
    case 77946:                     // 'element' 'gt'
    case 78044:                     // 'processing-instruction' 'gt'
    case 78419:                     // 'attribute' 'idiv'
    case 78458:                     // 'element' 'idiv'
    case 78556:                     // 'processing-instruction' 'idiv'
    case 79035:                     // 'namespace' 'if'
    case 79068:                     // 'processing-instruction' 'if'
    case 79443:                     // 'attribute' 'import'
    case 79482:                     // 'element' 'import'
    case 79547:                     // 'namespace' 'import'
    case 79580:                     // 'processing-instruction' 'import'
    case 79955:                     // 'attribute' 'in'
    case 79994:                     // 'element' 'in'
    case 80059:                     // 'namespace' 'in'
    case 80092:                     // 'processing-instruction' 'in'
    case 80467:                     // 'attribute' 'index'
    case 80506:                     // 'element' 'index'
    case 80571:                     // 'namespace' 'index'
    case 80604:                     // 'processing-instruction' 'index'
    case 82515:                     // 'attribute' 'insert'
    case 82554:                     // 'element' 'insert'
    case 82619:                     // 'namespace' 'insert'
    case 82652:                     // 'processing-instruction' 'insert'
    case 83027:                     // 'attribute' 'instance'
    case 83066:                     // 'element' 'instance'
    case 83164:                     // 'processing-instruction' 'instance'
    case 83539:                     // 'attribute' 'integrity'
    case 83578:                     // 'element' 'integrity'
    case 83643:                     // 'namespace' 'integrity'
    case 83676:                     // 'processing-instruction' 'integrity'
    case 84051:                     // 'attribute' 'intersect'
    case 84090:                     // 'element' 'intersect'
    case 84188:                     // 'processing-instruction' 'intersect'
    case 84563:                     // 'attribute' 'into'
    case 84602:                     // 'element' 'into'
    case 84700:                     // 'processing-instruction' 'into'
    case 85075:                     // 'attribute' 'is'
    case 85114:                     // 'element' 'is'
    case 85212:                     // 'processing-instruction' 'is'
    case 85691:                     // 'namespace' 'item'
    case 85724:                     // 'processing-instruction' 'item'
    case 86099:                     // 'attribute' 'json'
    case 86138:                     // 'element' 'json'
    case 86203:                     // 'namespace' 'json'
    case 86236:                     // 'processing-instruction' 'json'
    case 87123:                     // 'attribute' 'jsoniq'
    case 87162:                     // 'element' 'jsoniq'
    case 87227:                     // 'namespace' 'jsoniq'
    case 87260:                     // 'processing-instruction' 'jsoniq'
    case 88659:                     // 'attribute' 'last'
    case 88698:                     // 'element' 'last'
    case 88763:                     // 'namespace' 'last'
    case 88796:                     // 'processing-instruction' 'last'
    case 89171:                     // 'attribute' 'lax'
    case 89210:                     // 'element' 'lax'
    case 89275:                     // 'namespace' 'lax'
    case 89308:                     // 'processing-instruction' 'lax'
    case 89683:                     // 'attribute' 'le'
    case 89722:                     // 'element' 'le'
    case 89820:                     // 'processing-instruction' 'le'
    case 90707:                     // 'attribute' 'let'
    case 90746:                     // 'element' 'let'
    case 90844:                     // 'processing-instruction' 'let'
    case 91731:                     // 'attribute' 'loop'
    case 91770:                     // 'element' 'loop'
    case 91835:                     // 'namespace' 'loop'
    case 91868:                     // 'processing-instruction' 'loop'
    case 92755:                     // 'attribute' 'lt'
    case 92794:                     // 'element' 'lt'
    case 92892:                     // 'processing-instruction' 'lt'
    case 93779:                     // 'attribute' 'mod'
    case 93818:                     // 'element' 'mod'
    case 93916:                     // 'processing-instruction' 'mod'
    case 94291:                     // 'attribute' 'modify'
    case 94330:                     // 'element' 'modify'
    case 94428:                     // 'processing-instruction' 'modify'
    case 94803:                     // 'attribute' 'module'
    case 94842:                     // 'element' 'module'
    case 94907:                     // 'namespace' 'module'
    case 94940:                     // 'processing-instruction' 'module'
    case 95827:                     // 'attribute' 'namespace'
    case 95866:                     // 'element' 'namespace'
    case 95931:                     // 'namespace' 'namespace'
    case 95964:                     // 'processing-instruction' 'namespace'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96476:                     // 'processing-instruction' 'namespace-node'
    case 96851:                     // 'attribute' 'ne'
    case 96890:                     // 'element' 'ne'
    case 96988:                     // 'processing-instruction' 'ne'
    case 99515:                     // 'namespace' 'node'
    case 99548:                     // 'processing-instruction' 'node'
    case 99923:                     // 'attribute' 'nodes'
    case 99962:                     // 'element' 'nodes'
    case 100027:                    // 'namespace' 'nodes'
    case 100060:                    // 'processing-instruction' 'nodes'
    case 100947:                    // 'attribute' 'null'
    case 100986:                    // 'element' 'null'
    case 101051:                    // 'namespace' 'null'
    case 101084:                    // 'processing-instruction' 'null'
    case 101459:                    // 'attribute' 'object'
    case 101498:                    // 'element' 'object'
    case 101563:                    // 'namespace' 'object'
    case 101596:                    // 'processing-instruction' 'object'
    case 103507:                    // 'attribute' 'only'
    case 103546:                    // 'element' 'only'
    case 103644:                    // 'processing-instruction' 'only'
    case 104019:                    // 'attribute' 'option'
    case 104058:                    // 'element' 'option'
    case 104123:                    // 'namespace' 'option'
    case 104156:                    // 'processing-instruction' 'option'
    case 104531:                    // 'attribute' 'or'
    case 104570:                    // 'element' 'or'
    case 104668:                    // 'processing-instruction' 'or'
    case 105043:                    // 'attribute' 'order'
    case 105082:                    // 'element' 'order'
    case 105180:                    // 'processing-instruction' 'order'
    case 105555:                    // 'attribute' 'ordered'
    case 105594:                    // 'element' 'ordered'
    case 105659:                    // 'namespace' 'ordered'
    case 105692:                    // 'processing-instruction' 'ordered'
    case 106067:                    // 'attribute' 'ordering'
    case 106106:                    // 'element' 'ordering'
    case 106171:                    // 'namespace' 'ordering'
    case 106204:                    // 'processing-instruction' 'ordering'
    case 107603:                    // 'attribute' 'parent'
    case 107642:                    // 'element' 'parent'
    case 107707:                    // 'namespace' 'parent'
    case 107740:                    // 'processing-instruction' 'parent'
    case 110675:                    // 'attribute' 'preceding'
    case 110714:                    // 'element' 'preceding'
    case 110779:                    // 'namespace' 'preceding'
    case 110812:                    // 'processing-instruction' 'preceding'
    case 111187:                    // 'attribute' 'preceding-sibling'
    case 111226:                    // 'element' 'preceding-sibling'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 111324:                    // 'processing-instruction' 'preceding-sibling'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 112860:                    // 'processing-instruction' 'processing-instruction'
    case 113747:                    // 'attribute' 'rename'
    case 113786:                    // 'element' 'rename'
    case 113851:                    // 'namespace' 'rename'
    case 113884:                    // 'processing-instruction' 'rename'
    case 114259:                    // 'attribute' 'replace'
    case 114298:                    // 'element' 'replace'
    case 114363:                    // 'namespace' 'replace'
    case 114396:                    // 'processing-instruction' 'replace'
    case 114771:                    // 'attribute' 'return'
    case 114810:                    // 'element' 'return'
    case 114908:                    // 'processing-instruction' 'return'
    case 115283:                    // 'attribute' 'returning'
    case 115322:                    // 'element' 'returning'
    case 115387:                    // 'namespace' 'returning'
    case 115420:                    // 'processing-instruction' 'returning'
    case 115795:                    // 'attribute' 'revalidation'
    case 115834:                    // 'element' 'revalidation'
    case 115899:                    // 'namespace' 'revalidation'
    case 115932:                    // 'processing-instruction' 'revalidation'
    case 116819:                    // 'attribute' 'satisfies'
    case 116858:                    // 'element' 'satisfies'
    case 116956:                    // 'processing-instruction' 'satisfies'
    case 117331:                    // 'attribute' 'schema'
    case 117370:                    // 'element' 'schema'
    case 117435:                    // 'namespace' 'schema'
    case 117468:                    // 'processing-instruction' 'schema'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 117980:                    // 'processing-instruction' 'schema-attribute'
    case 118459:                    // 'namespace' 'schema-element'
    case 118492:                    // 'processing-instruction' 'schema-element'
    case 118867:                    // 'attribute' 'score'
    case 118906:                    // 'element' 'score'
    case 118971:                    // 'namespace' 'score'
    case 119004:                    // 'processing-instruction' 'score'
    case 119379:                    // 'attribute' 'select'
    case 119418:                    // 'element' 'select'
    case 119516:                    // 'processing-instruction' 'select'
    case 119891:                    // 'attribute' 'self'
    case 119930:                    // 'element' 'self'
    case 119995:                    // 'namespace' 'self'
    case 120028:                    // 'processing-instruction' 'self'
    case 122451:                    // 'attribute' 'sliding'
    case 122490:                    // 'element' 'sliding'
    case 122555:                    // 'namespace' 'sliding'
    case 122588:                    // 'processing-instruction' 'sliding'
    case 122963:                    // 'attribute' 'some'
    case 123002:                    // 'element' 'some'
    case 123067:                    // 'namespace' 'some'
    case 123100:                    // 'processing-instruction' 'some'
    case 123475:                    // 'attribute' 'stable'
    case 123514:                    // 'element' 'stable'
    case 123612:                    // 'processing-instruction' 'stable'
    case 123987:                    // 'attribute' 'start'
    case 124026:                    // 'element' 'start'
    case 124124:                    // 'processing-instruction' 'start'
    case 125523:                    // 'attribute' 'strict'
    case 125562:                    // 'element' 'strict'
    case 125627:                    // 'namespace' 'strict'
    case 125660:                    // 'processing-instruction' 'strict'
    case 127163:                    // 'namespace' 'switch'
    case 127196:                    // 'processing-instruction' 'switch'
    case 127675:                    // 'namespace' 'text'
    case 127708:                    // 'processing-instruction' 'text'
    case 129619:                    // 'attribute' 'to'
    case 129658:                    // 'element' 'to'
    case 129756:                    // 'processing-instruction' 'to'
    case 130131:                    // 'attribute' 'treat'
    case 130170:                    // 'element' 'treat'
    case 130268:                    // 'processing-instruction' 'treat'
    case 130643:                    // 'attribute' 'true'
    case 130682:                    // 'element' 'true'
    case 130747:                    // 'namespace' 'true'
    case 130780:                    // 'processing-instruction' 'true'
    case 131155:                    // 'attribute' 'try'
    case 131194:                    // 'element' 'try'
    case 131259:                    // 'namespace' 'try'
    case 131292:                    // 'processing-instruction' 'try'
    case 131667:                    // 'attribute' 'tumbling'
    case 131706:                    // 'element' 'tumbling'
    case 131771:                    // 'namespace' 'tumbling'
    case 131804:                    // 'processing-instruction' 'tumbling'
    case 132179:                    // 'attribute' 'type'
    case 132218:                    // 'element' 'type'
    case 132283:                    // 'namespace' 'type'
    case 132316:                    // 'processing-instruction' 'type'
    case 132795:                    // 'namespace' 'typeswitch'
    case 132828:                    // 'processing-instruction' 'typeswitch'
    case 133203:                    // 'attribute' 'union'
    case 133242:                    // 'element' 'union'
    case 133340:                    // 'processing-instruction' 'union'
    case 134227:                    // 'attribute' 'unordered'
    case 134266:                    // 'element' 'unordered'
    case 134331:                    // 'namespace' 'unordered'
    case 134364:                    // 'processing-instruction' 'unordered'
    case 134739:                    // 'attribute' 'updating'
    case 134778:                    // 'element' 'updating'
    case 134843:                    // 'namespace' 'updating'
    case 134876:                    // 'processing-instruction' 'updating'
    case 136275:                    // 'attribute' 'validate'
    case 136314:                    // 'element' 'validate'
    case 136379:                    // 'namespace' 'validate'
    case 136412:                    // 'processing-instruction' 'validate'
    case 136787:                    // 'attribute' 'value'
    case 136826:                    // 'element' 'value'
    case 136891:                    // 'namespace' 'value'
    case 136924:                    // 'processing-instruction' 'value'
    case 137299:                    // 'attribute' 'variable'
    case 137338:                    // 'element' 'variable'
    case 137403:                    // 'namespace' 'variable'
    case 137436:                    // 'processing-instruction' 'variable'
    case 137811:                    // 'attribute' 'version'
    case 137850:                    // 'element' 'version'
    case 137915:                    // 'namespace' 'version'
    case 137948:                    // 'processing-instruction' 'version'
    case 139347:                    // 'attribute' 'where'
    case 139386:                    // 'element' 'where'
    case 139484:                    // 'processing-instruction' 'where'
    case 139859:                    // 'attribute' 'while'
    case 139898:                    // 'element' 'while'
    case 139963:                    // 'namespace' 'while'
    case 139996:                    // 'processing-instruction' 'while'
    case 141395:                    // 'attribute' 'with'
    case 141434:                    // 'element' 'with'
    case 141532:                    // 'processing-instruction' 'with'
    case 143955:                    // 'attribute' '{'
    case 143969:                    // 'comment' '{'
    case 143992:                    // 'document' '{'
    case 143994:                    // 'element' '{'
    case 144059:                    // 'namespace' '{'
    case 144078:                    // 'ordered' '{'
    case 144092:                    // 'processing-instruction' '{'
    case 144121:                    // 'text' '{'
    case 144134:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(247);             // EQName^Token | S^WS | '(' | '(:' | '::' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 122:                       // 'element'
      lookahead2W(243);             // EQName^Token | S^WS | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 187:                       // 'namespace'
      lookahead2W(291);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(255);             // NCName^Token | S^WS | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(101);             // S^WS | '(' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 234:                       // 'self'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12935                 // 'false' EOF
     || lk == 12997                 // 'null' EOF
     || lk == 13055                 // 'true' EOF
     || lk == 13447                 // 'false' '!'
     || lk == 13509                 // 'null' '!'
     || lk == 13567                 // 'true' '!'
     || lk == 13959                 // 'false' '!='
     || lk == 14021                 // 'null' '!='
     || lk == 14079                 // 'true' '!='
     || lk == 19591                 // 'false' ')'
     || lk == 19653                 // 'null' ')'
     || lk == 19711                 // 'true' ')'
     || lk == 20103                 // 'false' '*'
     || lk == 20165                 // 'null' '*'
     || lk == 20223                 // 'true' '*'
     || lk == 21127                 // 'false' '+'
     || lk == 21189                 // 'null' '+'
     || lk == 21247                 // 'true' '+'
     || lk == 21639                 // 'false' ','
     || lk == 21701                 // 'null' ','
     || lk == 21759                 // 'true' ','
     || lk == 22151                 // 'false' '-'
     || lk == 22213                 // 'null' '-'
     || lk == 22271                 // 'true' '-'
     || lk == 24199                 // 'false' '/'
     || lk == 24261                 // 'null' '/'
     || lk == 24319                 // 'true' '/'
     || lk == 24711                 // 'false' '//'
     || lk == 24773                 // 'null' '//'
     || lk == 24831                 // 'true' '//'
     || lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855                 // 'true' ':'
     || lk == 27271                 // 'false' ':='
     || lk == 27333                 // 'null' ':='
     || lk == 27391                 // 'true' ':='
     || lk == 27783                 // 'false' ';'
     || lk == 27845                 // 'null' ';'
     || lk == 27903                 // 'true' ';'
     || lk == 28295                 // 'false' '<'
     || lk == 28357                 // 'null' '<'
     || lk == 28415                 // 'true' '<'
     || lk == 29831                 // 'false' '<<'
     || lk == 29893                 // 'null' '<<'
     || lk == 29951                 // 'true' '<<'
     || lk == 30343                 // 'false' '<='
     || lk == 30405                 // 'null' '<='
     || lk == 30463                 // 'true' '<='
     || lk == 31367                 // 'false' '='
     || lk == 31429                 // 'null' '='
     || lk == 31487                 // 'true' '='
     || lk == 31879                 // 'false' '>'
     || lk == 31941                 // 'null' '>'
     || lk == 31999                 // 'true' '>'
     || lk == 32391                 // 'false' '>='
     || lk == 32453                 // 'null' '>='
     || lk == 32511                 // 'true' '>='
     || lk == 32903                 // 'false' '>>'
     || lk == 32965                 // 'null' '>>'
     || lk == 33023                 // 'true' '>>'
     || lk == 35463                 // 'false' '['
     || lk == 35525                 // 'null' '['
     || lk == 35583                 // 'true' '['
     || lk == 35975                 // 'false' ']'
     || lk == 36037                 // 'null' ']'
     || lk == 36095                 // 'true' ']'
     || lk == 36487                 // 'false' 'after'
     || lk == 36539                 // 'namespace' 'after'
     || lk == 36549                 // 'null' 'after'
     || lk == 36607                 // 'true' 'after'
     || lk == 39047                 // 'false' 'and'
     || lk == 39099                 // 'namespace' 'and'
     || lk == 39109                 // 'null' 'and'
     || lk == 39167                 // 'true' 'and'
     || lk == 41095                 // 'false' 'as'
     || lk == 41147                 // 'namespace' 'as'
     || lk == 41157                 // 'null' 'as'
     || lk == 41215                 // 'true' 'as'
     || lk == 41607                 // 'false' 'ascending'
     || lk == 41659                 // 'namespace' 'ascending'
     || lk == 41669                 // 'null' 'ascending'
     || lk == 41727                 // 'true' 'ascending'
     || lk == 42119                 // 'false' 'at'
     || lk == 42171                 // 'namespace' 'at'
     || lk == 42181                 // 'null' 'at'
     || lk == 42239                 // 'true' 'at'
     || lk == 43655                 // 'false' 'before'
     || lk == 43707                 // 'namespace' 'before'
     || lk == 43717                 // 'null' 'before'
     || lk == 43775                 // 'true' 'before'
     || lk == 45191                 // 'false' 'by'
     || lk == 45253                 // 'null' 'by'
     || lk == 45311                 // 'true' 'by'
     || lk == 45703                 // 'false' 'case'
     || lk == 45755                 // 'namespace' 'case'
     || lk == 45765                 // 'null' 'case'
     || lk == 45823                 // 'true' 'case'
     || lk == 46215                 // 'false' 'cast'
     || lk == 46267                 // 'namespace' 'cast'
     || lk == 46277                 // 'null' 'cast'
     || lk == 46335                 // 'true' 'cast'
     || lk == 46727                 // 'false' 'castable'
     || lk == 46779                 // 'namespace' 'castable'
     || lk == 46789                 // 'null' 'castable'
     || lk == 46847                 // 'true' 'castable'
     || lk == 48775                 // 'false' 'collation'
     || lk == 48827                 // 'namespace' 'collation'
     || lk == 48837                 // 'null' 'collation'
     || lk == 48895                 // 'true' 'collation'
     || lk == 51335                 // 'false' 'contains'
     || lk == 51397                 // 'null' 'contains'
     || lk == 51455                 // 'true' 'contains'
     || lk == 54407                 // 'false' 'count'
     || lk == 54459                 // 'namespace' 'count'
     || lk == 54469                 // 'null' 'count'
     || lk == 54527                 // 'true' 'count'
     || lk == 56455                 // 'false' 'default'
     || lk == 56507                 // 'namespace' 'default'
     || lk == 56517                 // 'null' 'default'
     || lk == 56575                 // 'true' 'default'
     || lk == 58503                 // 'false' 'descending'
     || lk == 58555                 // 'namespace' 'descending'
     || lk == 58565                 // 'null' 'descending'
     || lk == 58623                 // 'true' 'descending'
     || lk == 61063                 // 'false' 'div'
     || lk == 61115                 // 'namespace' 'div'
     || lk == 61125                 // 'null' 'div'
     || lk == 61183                 // 'true' 'div'
     || lk == 63111                 // 'false' 'else'
     || lk == 63163                 // 'namespace' 'else'
     || lk == 63173                 // 'null' 'else'
     || lk == 63231                 // 'true' 'else'
     || lk == 63623                 // 'false' 'empty'
     || lk == 63675                 // 'namespace' 'empty'
     || lk == 63685                 // 'null' 'empty'
     || lk == 63743                 // 'true' 'empty'
     || lk == 65159                 // 'false' 'end'
     || lk == 65211                 // 'namespace' 'end'
     || lk == 65221                 // 'null' 'end'
     || lk == 65279                 // 'true' 'end'
     || lk == 66183                 // 'false' 'eq'
     || lk == 66235                 // 'namespace' 'eq'
     || lk == 66245                 // 'null' 'eq'
     || lk == 66303                 // 'true' 'eq'
     || lk == 67719                 // 'false' 'except'
     || lk == 67771                 // 'namespace' 'except'
     || lk == 67781                 // 'null' 'except'
     || lk == 67839                 // 'true' 'except'
     || lk == 71303                 // 'false' 'for'
     || lk == 71355                 // 'namespace' 'for'
     || lk == 71365                 // 'null' 'for'
     || lk == 71423                 // 'true' 'for'
     || lk == 72839                 // 'false' 'from'
     || lk == 72891                 // 'namespace' 'from'
     || lk == 72901                 // 'null' 'from'
     || lk == 72959                 // 'true' 'from'
     || lk == 75911                 // 'false' 'ge'
     || lk == 75963                 // 'namespace' 'ge'
     || lk == 75973                 // 'null' 'ge'
     || lk == 76031                 // 'true' 'ge'
     || lk == 76935                 // 'false' 'group'
     || lk == 76987                 // 'namespace' 'group'
     || lk == 76997                 // 'null' 'group'
     || lk == 77055                 // 'true' 'group'
     || lk == 77959                 // 'false' 'gt'
     || lk == 78011                 // 'namespace' 'gt'
     || lk == 78021                 // 'null' 'gt'
     || lk == 78079                 // 'true' 'gt'
     || lk == 78471                 // 'false' 'idiv'
     || lk == 78523                 // 'namespace' 'idiv'
     || lk == 78533                 // 'null' 'idiv'
     || lk == 78591                 // 'true' 'idiv'
     || lk == 83079                 // 'false' 'instance'
     || lk == 83131                 // 'namespace' 'instance'
     || lk == 83141                 // 'null' 'instance'
     || lk == 83199                 // 'true' 'instance'
     || lk == 84103                 // 'false' 'intersect'
     || lk == 84155                 // 'namespace' 'intersect'
     || lk == 84165                 // 'null' 'intersect'
     || lk == 84223                 // 'true' 'intersect'
     || lk == 84615                 // 'false' 'into'
     || lk == 84667                 // 'namespace' 'into'
     || lk == 84677                 // 'null' 'into'
     || lk == 84735                 // 'true' 'into'
     || lk == 85127                 // 'false' 'is'
     || lk == 85179                 // 'namespace' 'is'
     || lk == 85189                 // 'null' 'is'
     || lk == 85247                 // 'true' 'is'
     || lk == 89735                 // 'false' 'le'
     || lk == 89787                 // 'namespace' 'le'
     || lk == 89797                 // 'null' 'le'
     || lk == 89855                 // 'true' 'le'
     || lk == 90759                 // 'false' 'let'
     || lk == 90811                 // 'namespace' 'let'
     || lk == 90821                 // 'null' 'let'
     || lk == 90879                 // 'true' 'let'
     || lk == 92807                 // 'false' 'lt'
     || lk == 92859                 // 'namespace' 'lt'
     || lk == 92869                 // 'null' 'lt'
     || lk == 92927                 // 'true' 'lt'
     || lk == 93831                 // 'false' 'mod'
     || lk == 93883                 // 'namespace' 'mod'
     || lk == 93893                 // 'null' 'mod'
     || lk == 93951                 // 'true' 'mod'
     || lk == 94343                 // 'false' 'modify'
     || lk == 94395                 // 'namespace' 'modify'
     || lk == 94405                 // 'null' 'modify'
     || lk == 94463                 // 'true' 'modify'
     || lk == 96903                 // 'false' 'ne'
     || lk == 96955                 // 'namespace' 'ne'
     || lk == 96965                 // 'null' 'ne'
     || lk == 97023                 // 'true' 'ne'
     || lk == 103559                // 'false' 'only'
     || lk == 103611                // 'namespace' 'only'
     || lk == 103621                // 'null' 'only'
     || lk == 103679                // 'true' 'only'
     || lk == 104583                // 'false' 'or'
     || lk == 104635                // 'namespace' 'or'
     || lk == 104645                // 'null' 'or'
     || lk == 104703                // 'true' 'or'
     || lk == 105095                // 'false' 'order'
     || lk == 105147                // 'namespace' 'order'
     || lk == 105157                // 'null' 'order'
     || lk == 105215                // 'true' 'order'
     || lk == 107143                // 'false' 'paragraphs'
     || lk == 107205                // 'null' 'paragraphs'
     || lk == 107263                // 'true' 'paragraphs'
     || lk == 114823                // 'false' 'return'
     || lk == 114875                // 'namespace' 'return'
     || lk == 114885                // 'null' 'return'
     || lk == 114943                // 'true' 'return'
     || lk == 116871                // 'false' 'satisfies'
     || lk == 116923                // 'namespace' 'satisfies'
     || lk == 116933                // 'null' 'satisfies'
     || lk == 116991                // 'true' 'satisfies'
     || lk == 119431                // 'false' 'select'
     || lk == 119483                // 'namespace' 'select'
     || lk == 119493                // 'null' 'select'
     || lk == 119551                // 'true' 'select'
     || lk == 121479                // 'false' 'sentences'
     || lk == 121541                // 'null' 'sentences'
     || lk == 121599                // 'true' 'sentences'
     || lk == 123527                // 'false' 'stable'
     || lk == 123579                // 'namespace' 'stable'
     || lk == 123589                // 'null' 'stable'
     || lk == 123647                // 'true' 'stable'
     || lk == 124039                // 'false' 'start'
     || lk == 124091                // 'namespace' 'start'
     || lk == 124101                // 'null' 'start'
     || lk == 124159                // 'true' 'start'
     || lk == 129159                // 'false' 'times'
     || lk == 129221                // 'null' 'times'
     || lk == 129279                // 'true' 'times'
     || lk == 129671                // 'false' 'to'
     || lk == 129723                // 'namespace' 'to'
     || lk == 129733                // 'null' 'to'
     || lk == 129791                // 'true' 'to'
     || lk == 130183                // 'false' 'treat'
     || lk == 130235                // 'namespace' 'treat'
     || lk == 130245                // 'null' 'treat'
     || lk == 130303                // 'true' 'treat'
     || lk == 133255                // 'false' 'union'
     || lk == 133307                // 'namespace' 'union'
     || lk == 133317                // 'null' 'union'
     || lk == 133375                // 'true' 'union'
     || lk == 139399                // 'false' 'where'
     || lk == 139451                // 'namespace' 'where'
     || lk == 139461                // 'null' 'where'
     || lk == 139519                // 'true' 'where'
     || lk == 141447                // 'false' 'with'
     || lk == 141499                // 'namespace' 'with'
     || lk == 141509                // 'null' 'with'
     || lk == 141567                // 'true' 'with'
     || lk == 142983                // 'false' 'words'
     || lk == 143045                // 'null' 'words'
     || lk == 143103                // 'true' 'words'
     || lk == 145543                // 'false' '|'
     || lk == 145605                // 'null' '|'
     || lk == 145663                // 'true' '|'
     || lk == 146055                // 'false' '||'
     || lk == 146117                // 'null' '||'
     || lk == 146175                // 'true' '||'
     || lk == 146567                // 'false' '|}'
     || lk == 146629                // 'null' '|}'
     || lk == 146687                // 'true' '|}'
     || lk == 147079                // 'false' '}'
     || lk == 147141                // 'null' '}'
     || lk == 147199)               // 'true' '}'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 147:                       // 'function'
    case 281:                       // '{'
    case 283:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9915:                      // 'namespace' NCName^Token
    case 9948:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18055:                     // 'false' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18117:                     // 'null' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18175:                     // 'true' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 36435:                     // 'attribute' 'after'
    case 36474:                     // 'element' 'after'
    case 36572:                     // 'processing-instruction' 'after'
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37563:                     // 'namespace' 'allowing'
    case 37596:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38075:                     // 'namespace' 'ancestor'
    case 38108:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 38620:                     // 'processing-instruction' 'ancestor-or-self'
    case 38995:                     // 'attribute' 'and'
    case 39034:                     // 'element' 'and'
    case 39132:                     // 'processing-instruction' 'and'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40123:                     // 'namespace' 'append'
    case 40156:                     // 'processing-instruction' 'append'
    case 41043:                     // 'attribute' 'as'
    case 41082:                     // 'element' 'as'
    case 41180:                     // 'processing-instruction' 'as'
    case 41555:                     // 'attribute' 'ascending'
    case 41594:                     // 'element' 'ascending'
    case 41692:                     // 'processing-instruction' 'ascending'
    case 42067:                     // 'attribute' 'at'
    case 42106:                     // 'element' 'at'
    case 42204:                     // 'processing-instruction' 'at'
    case 42683:                     // 'namespace' 'attribute'
    case 42716:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43195:                     // 'namespace' 'base-uri'
    case 43228:                     // 'processing-instruction' 'base-uri'
    case 43603:                     // 'attribute' 'before'
    case 43642:                     // 'element' 'before'
    case 43740:                     // 'processing-instruction' 'before'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44252:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44731:                     // 'namespace' 'break'
    case 44764:                     // 'processing-instruction' 'break'
    case 45651:                     // 'attribute' 'case'
    case 45690:                     // 'element' 'case'
    case 45788:                     // 'processing-instruction' 'case'
    case 46163:                     // 'attribute' 'cast'
    case 46202:                     // 'element' 'cast'
    case 46300:                     // 'processing-instruction' 'cast'
    case 46675:                     // 'attribute' 'castable'
    case 46714:                     // 'element' 'castable'
    case 46812:                     // 'processing-instruction' 'castable'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47291:                     // 'namespace' 'catch'
    case 47324:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48315:                     // 'namespace' 'child'
    case 48348:                     // 'processing-instruction' 'child'
    case 48723:                     // 'attribute' 'collation'
    case 48762:                     // 'element' 'collation'
    case 48860:                     // 'processing-instruction' 'collation'
    case 49851:                     // 'namespace' 'comment'
    case 49884:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50363:                     // 'namespace' 'constraint'
    case 50396:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50875:                     // 'namespace' 'construction'
    case 50908:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52411:                     // 'namespace' 'context'
    case 52444:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52923:                     // 'namespace' 'continue'
    case 52956:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53435:                     // 'namespace' 'copy'
    case 53468:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 53980:                     // 'processing-instruction' 'copy-namespaces'
    case 54355:                     // 'attribute' 'count'
    case 54394:                     // 'element' 'count'
    case 54492:                     // 'processing-instruction' 'count'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55004:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55995:                     // 'namespace' 'declare'
    case 56028:                     // 'processing-instruction' 'declare'
    case 56403:                     // 'attribute' 'default'
    case 56442:                     // 'element' 'default'
    case 56540:                     // 'processing-instruction' 'default'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57019:                     // 'namespace' 'delete'
    case 57052:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57531:                     // 'namespace' 'descendant'
    case 57564:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58076:                     // 'processing-instruction' 'descendant-or-self'
    case 58451:                     // 'attribute' 'descending'
    case 58490:                     // 'element' 'descending'
    case 58588:                     // 'processing-instruction' 'descending'
    case 61011:                     // 'attribute' 'div'
    case 61050:                     // 'element' 'div'
    case 61148:                     // 'processing-instruction' 'div'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61627:                     // 'namespace' 'document'
    case 61660:                     // 'processing-instruction' 'document'
    case 62139:                     // 'namespace' 'document-node'
    case 62172:                     // 'processing-instruction' 'document-node'
    case 62651:                     // 'namespace' 'element'
    case 62684:                     // 'processing-instruction' 'element'
    case 63059:                     // 'attribute' 'else'
    case 63098:                     // 'element' 'else'
    case 63196:                     // 'processing-instruction' 'else'
    case 63571:                     // 'attribute' 'empty'
    case 63610:                     // 'element' 'empty'
    case 63708:                     // 'processing-instruction' 'empty'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64220:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64699:                     // 'namespace' 'encoding'
    case 64732:                     // 'processing-instruction' 'encoding'
    case 65107:                     // 'attribute' 'end'
    case 65146:                     // 'element' 'end'
    case 65244:                     // 'processing-instruction' 'end'
    case 66131:                     // 'attribute' 'eq'
    case 66170:                     // 'element' 'eq'
    case 66268:                     // 'processing-instruction' 'eq'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66747:                     // 'namespace' 'every'
    case 66780:                     // 'processing-instruction' 'every'
    case 67667:                     // 'attribute' 'except'
    case 67706:                     // 'element' 'except'
    case 67804:                     // 'processing-instruction' 'except'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68283:                     // 'namespace' 'exit'
    case 68316:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68795:                     // 'namespace' 'external'
    case 68828:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'false'
    case 69242:                     // 'element' 'false'
    case 69307:                     // 'namespace' 'false'
    case 69340:                     // 'processing-instruction' 'false'
    case 69715:                     // 'attribute' 'first'
    case 69754:                     // 'element' 'first'
    case 69819:                     // 'namespace' 'first'
    case 69852:                     // 'processing-instruction' 'first'
    case 70227:                     // 'attribute' 'following'
    case 70266:                     // 'element' 'following'
    case 70331:                     // 'namespace' 'following'
    case 70364:                     // 'processing-instruction' 'following'
    case 70739:                     // 'attribute' 'following-sibling'
    case 70778:                     // 'element' 'following-sibling'
    case 70843:                     // 'namespace' 'following-sibling'
    case 70876:                     // 'processing-instruction' 'following-sibling'
    case 71251:                     // 'attribute' 'for'
    case 71290:                     // 'element' 'for'
    case 71388:                     // 'processing-instruction' 'for'
    case 72787:                     // 'attribute' 'from'
    case 72826:                     // 'element' 'from'
    case 72924:                     // 'processing-instruction' 'from'
    case 73299:                     // 'attribute' 'ft-option'
    case 73338:                     // 'element' 'ft-option'
    case 73403:                     // 'namespace' 'ft-option'
    case 73436:                     // 'processing-instruction' 'ft-option'
    case 75451:                     // 'namespace' 'function'
    case 75484:                     // 'processing-instruction' 'function'
    case 75859:                     // 'attribute' 'ge'
    case 75898:                     // 'element' 'ge'
    case 75996:                     // 'processing-instruction' 'ge'
    case 76883:                     // 'attribute' 'group'
    case 76922:                     // 'element' 'group'
    case 77020:                     // 'processing-instruction' 'group'
    case 77907:                     // 'attribute' 'gt'
    case 77946:                     // 'element' 'gt'
    case 78044:                     // 'processing-instruction' 'gt'
    case 78419:                     // 'attribute' 'idiv'
    case 78458:                     // 'element' 'idiv'
    case 78556:                     // 'processing-instruction' 'idiv'
    case 79035:                     // 'namespace' 'if'
    case 79068:                     // 'processing-instruction' 'if'
    case 79443:                     // 'attribute' 'import'
    case 79482:                     // 'element' 'import'
    case 79547:                     // 'namespace' 'import'
    case 79580:                     // 'processing-instruction' 'import'
    case 79955:                     // 'attribute' 'in'
    case 79994:                     // 'element' 'in'
    case 80059:                     // 'namespace' 'in'
    case 80092:                     // 'processing-instruction' 'in'
    case 80467:                     // 'attribute' 'index'
    case 80506:                     // 'element' 'index'
    case 80571:                     // 'namespace' 'index'
    case 80604:                     // 'processing-instruction' 'index'
    case 82515:                     // 'attribute' 'insert'
    case 82554:                     // 'element' 'insert'
    case 82619:                     // 'namespace' 'insert'
    case 82652:                     // 'processing-instruction' 'insert'
    case 83027:                     // 'attribute' 'instance'
    case 83066:                     // 'element' 'instance'
    case 83164:                     // 'processing-instruction' 'instance'
    case 83539:                     // 'attribute' 'integrity'
    case 83578:                     // 'element' 'integrity'
    case 83643:                     // 'namespace' 'integrity'
    case 83676:                     // 'processing-instruction' 'integrity'
    case 84051:                     // 'attribute' 'intersect'
    case 84090:                     // 'element' 'intersect'
    case 84188:                     // 'processing-instruction' 'intersect'
    case 84563:                     // 'attribute' 'into'
    case 84602:                     // 'element' 'into'
    case 84700:                     // 'processing-instruction' 'into'
    case 85075:                     // 'attribute' 'is'
    case 85114:                     // 'element' 'is'
    case 85212:                     // 'processing-instruction' 'is'
    case 85691:                     // 'namespace' 'item'
    case 85724:                     // 'processing-instruction' 'item'
    case 86099:                     // 'attribute' 'json'
    case 86138:                     // 'element' 'json'
    case 86203:                     // 'namespace' 'json'
    case 86236:                     // 'processing-instruction' 'json'
    case 87123:                     // 'attribute' 'jsoniq'
    case 87162:                     // 'element' 'jsoniq'
    case 87227:                     // 'namespace' 'jsoniq'
    case 87260:                     // 'processing-instruction' 'jsoniq'
    case 88659:                     // 'attribute' 'last'
    case 88698:                     // 'element' 'last'
    case 88763:                     // 'namespace' 'last'
    case 88796:                     // 'processing-instruction' 'last'
    case 89171:                     // 'attribute' 'lax'
    case 89210:                     // 'element' 'lax'
    case 89275:                     // 'namespace' 'lax'
    case 89308:                     // 'processing-instruction' 'lax'
    case 89683:                     // 'attribute' 'le'
    case 89722:                     // 'element' 'le'
    case 89820:                     // 'processing-instruction' 'le'
    case 90707:                     // 'attribute' 'let'
    case 90746:                     // 'element' 'let'
    case 90844:                     // 'processing-instruction' 'let'
    case 91731:                     // 'attribute' 'loop'
    case 91770:                     // 'element' 'loop'
    case 91835:                     // 'namespace' 'loop'
    case 91868:                     // 'processing-instruction' 'loop'
    case 92755:                     // 'attribute' 'lt'
    case 92794:                     // 'element' 'lt'
    case 92892:                     // 'processing-instruction' 'lt'
    case 93779:                     // 'attribute' 'mod'
    case 93818:                     // 'element' 'mod'
    case 93916:                     // 'processing-instruction' 'mod'
    case 94291:                     // 'attribute' 'modify'
    case 94330:                     // 'element' 'modify'
    case 94428:                     // 'processing-instruction' 'modify'
    case 94803:                     // 'attribute' 'module'
    case 94842:                     // 'element' 'module'
    case 94907:                     // 'namespace' 'module'
    case 94940:                     // 'processing-instruction' 'module'
    case 95827:                     // 'attribute' 'namespace'
    case 95866:                     // 'element' 'namespace'
    case 95931:                     // 'namespace' 'namespace'
    case 95964:                     // 'processing-instruction' 'namespace'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96476:                     // 'processing-instruction' 'namespace-node'
    case 96851:                     // 'attribute' 'ne'
    case 96890:                     // 'element' 'ne'
    case 96988:                     // 'processing-instruction' 'ne'
    case 99515:                     // 'namespace' 'node'
    case 99548:                     // 'processing-instruction' 'node'
    case 99923:                     // 'attribute' 'nodes'
    case 99962:                     // 'element' 'nodes'
    case 100027:                    // 'namespace' 'nodes'
    case 100060:                    // 'processing-instruction' 'nodes'
    case 100947:                    // 'attribute' 'null'
    case 100986:                    // 'element' 'null'
    case 101051:                    // 'namespace' 'null'
    case 101084:                    // 'processing-instruction' 'null'
    case 101459:                    // 'attribute' 'object'
    case 101498:                    // 'element' 'object'
    case 101563:                    // 'namespace' 'object'
    case 101596:                    // 'processing-instruction' 'object'
    case 103507:                    // 'attribute' 'only'
    case 103546:                    // 'element' 'only'
    case 103644:                    // 'processing-instruction' 'only'
    case 104019:                    // 'attribute' 'option'
    case 104058:                    // 'element' 'option'
    case 104123:                    // 'namespace' 'option'
    case 104156:                    // 'processing-instruction' 'option'
    case 104531:                    // 'attribute' 'or'
    case 104570:                    // 'element' 'or'
    case 104668:                    // 'processing-instruction' 'or'
    case 105043:                    // 'attribute' 'order'
    case 105082:                    // 'element' 'order'
    case 105180:                    // 'processing-instruction' 'order'
    case 105555:                    // 'attribute' 'ordered'
    case 105594:                    // 'element' 'ordered'
    case 105659:                    // 'namespace' 'ordered'
    case 105692:                    // 'processing-instruction' 'ordered'
    case 106067:                    // 'attribute' 'ordering'
    case 106106:                    // 'element' 'ordering'
    case 106171:                    // 'namespace' 'ordering'
    case 106204:                    // 'processing-instruction' 'ordering'
    case 107603:                    // 'attribute' 'parent'
    case 107642:                    // 'element' 'parent'
    case 107707:                    // 'namespace' 'parent'
    case 107740:                    // 'processing-instruction' 'parent'
    case 110675:                    // 'attribute' 'preceding'
    case 110714:                    // 'element' 'preceding'
    case 110779:                    // 'namespace' 'preceding'
    case 110812:                    // 'processing-instruction' 'preceding'
    case 111187:                    // 'attribute' 'preceding-sibling'
    case 111226:                    // 'element' 'preceding-sibling'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 111324:                    // 'processing-instruction' 'preceding-sibling'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 112860:                    // 'processing-instruction' 'processing-instruction'
    case 113747:                    // 'attribute' 'rename'
    case 113786:                    // 'element' 'rename'
    case 113851:                    // 'namespace' 'rename'
    case 113884:                    // 'processing-instruction' 'rename'
    case 114259:                    // 'attribute' 'replace'
    case 114298:                    // 'element' 'replace'
    case 114363:                    // 'namespace' 'replace'
    case 114396:                    // 'processing-instruction' 'replace'
    case 114771:                    // 'attribute' 'return'
    case 114810:                    // 'element' 'return'
    case 114908:                    // 'processing-instruction' 'return'
    case 115283:                    // 'attribute' 'returning'
    case 115322:                    // 'element' 'returning'
    case 115387:                    // 'namespace' 'returning'
    case 115420:                    // 'processing-instruction' 'returning'
    case 115795:                    // 'attribute' 'revalidation'
    case 115834:                    // 'element' 'revalidation'
    case 115899:                    // 'namespace' 'revalidation'
    case 115932:                    // 'processing-instruction' 'revalidation'
    case 116819:                    // 'attribute' 'satisfies'
    case 116858:                    // 'element' 'satisfies'
    case 116956:                    // 'processing-instruction' 'satisfies'
    case 117331:                    // 'attribute' 'schema'
    case 117370:                    // 'element' 'schema'
    case 117435:                    // 'namespace' 'schema'
    case 117468:                    // 'processing-instruction' 'schema'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 117980:                    // 'processing-instruction' 'schema-attribute'
    case 118459:                    // 'namespace' 'schema-element'
    case 118492:                    // 'processing-instruction' 'schema-element'
    case 118867:                    // 'attribute' 'score'
    case 118906:                    // 'element' 'score'
    case 118971:                    // 'namespace' 'score'
    case 119004:                    // 'processing-instruction' 'score'
    case 119379:                    // 'attribute' 'select'
    case 119418:                    // 'element' 'select'
    case 119516:                    // 'processing-instruction' 'select'
    case 119891:                    // 'attribute' 'self'
    case 119930:                    // 'element' 'self'
    case 119995:                    // 'namespace' 'self'
    case 120028:                    // 'processing-instruction' 'self'
    case 122451:                    // 'attribute' 'sliding'
    case 122490:                    // 'element' 'sliding'
    case 122555:                    // 'namespace' 'sliding'
    case 122588:                    // 'processing-instruction' 'sliding'
    case 122963:                    // 'attribute' 'some'
    case 123002:                    // 'element' 'some'
    case 123067:                    // 'namespace' 'some'
    case 123100:                    // 'processing-instruction' 'some'
    case 123475:                    // 'attribute' 'stable'
    case 123514:                    // 'element' 'stable'
    case 123612:                    // 'processing-instruction' 'stable'
    case 123987:                    // 'attribute' 'start'
    case 124026:                    // 'element' 'start'
    case 124124:                    // 'processing-instruction' 'start'
    case 125523:                    // 'attribute' 'strict'
    case 125562:                    // 'element' 'strict'
    case 125627:                    // 'namespace' 'strict'
    case 125660:                    // 'processing-instruction' 'strict'
    case 127163:                    // 'namespace' 'switch'
    case 127196:                    // 'processing-instruction' 'switch'
    case 127675:                    // 'namespace' 'text'
    case 127708:                    // 'processing-instruction' 'text'
    case 129619:                    // 'attribute' 'to'
    case 129658:                    // 'element' 'to'
    case 129756:                    // 'processing-instruction' 'to'
    case 130131:                    // 'attribute' 'treat'
    case 130170:                    // 'element' 'treat'
    case 130268:                    // 'processing-instruction' 'treat'
    case 130643:                    // 'attribute' 'true'
    case 130682:                    // 'element' 'true'
    case 130747:                    // 'namespace' 'true'
    case 130780:                    // 'processing-instruction' 'true'
    case 131155:                    // 'attribute' 'try'
    case 131194:                    // 'element' 'try'
    case 131259:                    // 'namespace' 'try'
    case 131292:                    // 'processing-instruction' 'try'
    case 131667:                    // 'attribute' 'tumbling'
    case 131706:                    // 'element' 'tumbling'
    case 131771:                    // 'namespace' 'tumbling'
    case 131804:                    // 'processing-instruction' 'tumbling'
    case 132179:                    // 'attribute' 'type'
    case 132218:                    // 'element' 'type'
    case 132283:                    // 'namespace' 'type'
    case 132316:                    // 'processing-instruction' 'type'
    case 132795:                    // 'namespace' 'typeswitch'
    case 132828:                    // 'processing-instruction' 'typeswitch'
    case 133203:                    // 'attribute' 'union'
    case 133242:                    // 'element' 'union'
    case 133340:                    // 'processing-instruction' 'union'
    case 134227:                    // 'attribute' 'unordered'
    case 134266:                    // 'element' 'unordered'
    case 134331:                    // 'namespace' 'unordered'
    case 134364:                    // 'processing-instruction' 'unordered'
    case 134739:                    // 'attribute' 'updating'
    case 134778:                    // 'element' 'updating'
    case 134843:                    // 'namespace' 'updating'
    case 134876:                    // 'processing-instruction' 'updating'
    case 136275:                    // 'attribute' 'validate'
    case 136314:                    // 'element' 'validate'
    case 136379:                    // 'namespace' 'validate'
    case 136412:                    // 'processing-instruction' 'validate'
    case 136787:                    // 'attribute' 'value'
    case 136826:                    // 'element' 'value'
    case 136891:                    // 'namespace' 'value'
    case 136924:                    // 'processing-instruction' 'value'
    case 137299:                    // 'attribute' 'variable'
    case 137338:                    // 'element' 'variable'
    case 137403:                    // 'namespace' 'variable'
    case 137436:                    // 'processing-instruction' 'variable'
    case 137811:                    // 'attribute' 'version'
    case 137850:                    // 'element' 'version'
    case 137915:                    // 'namespace' 'version'
    case 137948:                    // 'processing-instruction' 'version'
    case 139347:                    // 'attribute' 'where'
    case 139386:                    // 'element' 'where'
    case 139484:                    // 'processing-instruction' 'where'
    case 139859:                    // 'attribute' 'while'
    case 139898:                    // 'element' 'while'
    case 139963:                    // 'namespace' 'while'
    case 139996:                    // 'processing-instruction' 'while'
    case 141395:                    // 'attribute' 'with'
    case 141434:                    // 'element' 'with'
    case 141532:                    // 'processing-instruction' 'with'
    case 143955:                    // 'attribute' '{'
    case 143969:                    // 'comment' '{'
    case 143992:                    // 'document' '{'
    case 143994:                    // 'element' '{'
    case 144059:                    // 'namespace' '{'
    case 144078:                    // 'ordered' '{'
    case 144092:                    // 'processing-instruction' '{'
    case 144121:                    // 'text' '{'
    case 144134:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26698:                     // 'ancestor' '::'
    case 26699:                     // 'ancestor-or-self' '::'
    case 26834:                     // 'parent' '::'
    case 26840:                     // 'preceding' '::'
    case 26841:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(230);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26698:                     // 'ancestor' '::'
    case 26699:                     // 'ancestor-or-self' '::'
    case 26834:                     // 'parent' '::'
    case 26840:                     // 'preceding' '::'
    case 26841:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(230);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(99);              // S^WS | '(' | '(:' | '::'
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 234:                       // 'self'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26707:                     // 'attribute' '::'
    case 26718:                     // 'child' '::'
    case 26736:                     // 'descendant' '::'
    case 26737:                     // 'descendant-or-self' '::'
    case 26761:                     // 'following' '::'
    case 26762:                     // 'following-sibling' '::'
    case 26858:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(248);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(99);              // S^WS | '(' | '(:' | '::'
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 234:                       // 'self'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26707:                     // 'attribute' '::'
    case 26718:                     // 'child' '::'
    case 26736:                     // 'descendant' '::'
    case 26737:                     // 'descendant-or-self' '::'
    case 26761:                     // 'following' '::'
    case 26762:                     // 'following-sibling' '::'
    case 26858:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(248);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 94:                        // 'child'
      shift(94);                    // 'child'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    default:
      shift(137);                   // 'following'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    default:
      shiftT(137);                  // 'following'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      shift(67);                    // '@'
    }
    lookahead1W(248);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      shiftT(67);                   // '@'
    }
    lookahead1W(248);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 46:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(248);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 46:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(248);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    default:
      shift(75);                    // 'ancestor-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    default:
      shiftT(75);                   // 'ancestor-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    shift(46);                      // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    shiftT(46);                     // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      shift(5);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      shiftT(5);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(234);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(276);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 35397)              // '[' '['
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -4;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      switch (lk)
      {
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      case 45:                      // '.'
        whitespace();
        parse_ObjectLookup();
        break;
      case -4:
        whitespace();
        parse_ArrayLookup();
        break;
      case 35909:                   // '[' ']'
        whitespace();
        parse_ArrayUnboxing();
        break;
      default:
        whitespace();
        parse_Predicate();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(234);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(276);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 35397)              // '[' '['
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            memoize(4, e0A, -1);
            lk = -6;
          }
          catch (p1A)
          {
            lk = -4;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -4);
          }
        }
      }
      switch (lk)
      {
      case 35:                      // '('
        try_ArgumentList();
        break;
      case 45:                      // '.'
        try_ObjectLookup();
        break;
      case -4:
        try_ArrayLookup();
        break;
      case 35909:                   // '[' ']'
        try_ArrayUnboxing();
        break;
      case -6:
        break;
      default:
        try_Predicate();
      }
    }
  }

  function parse_ObjectLookup()
  {
    eventHandler.startNonterminal("ObjectLookup", e0);
    shift(45);                      // '.'
    lookahead1W(261);               // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    case 35:                        // '('
      whitespace();
      parse_ParenthesizedExpr();
      break;
    case 31:                        // '$'
      whitespace();
      parse_VarRef();
      break;
    case 32:                        // '$$'
      whitespace();
      parse_ContextItemExpr();
      break;
    default:
      whitespace();
      parse_NCName();
    }
    eventHandler.endNonterminal("ObjectLookup", e0);
  }

  function try_ObjectLookup()
  {
    shiftT(45);                     // '.'
    lookahead1W(261);               // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 32:                        // '$$'
      try_ContextItemExpr();
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrayLookup()
  {
    eventHandler.startNonterminal("ArrayLookup", e0);
    shift(69);                      // '['
    lookahead1W(31);                // S^WS | '(:' | '['
    shift(69);                      // '['
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(70);                      // ']'
    lookahead1W(32);                // S^WS | '(:' | ']'
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayLookup", e0);
  }

  function try_ArrayLookup()
  {
    shiftT(69);                     // '['
    lookahead1W(31);                // S^WS | '(:' | '['
    shiftT(69);                     // '['
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(70);                     // ']'
    lookahead1W(32);                // S^WS | '(:' | ']'
    shiftT(70);                     // ']'
  }

  function parse_ArrayUnboxing()
  {
    eventHandler.startNonterminal("ArrayUnboxing", e0);
    shift(69);                      // '['
    lookahead1W(32);                // S^WS | '(:' | ']'
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayUnboxing", e0);
  }

  function try_ArrayUnboxing()
  {
    shiftT(69);                     // '['
    lookahead1W(32);                // S^WS | '(:' | ']'
    shiftT(70);                     // ']'
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(35);                      // '('
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(275);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(35);                     // '('
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(275);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        try_Argument();
      }
    }
    shiftT(38);                     // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(230);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(230);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(69);                      // '['
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(70);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(69);                     // '['
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(70);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    case 135:                       // 'false'
    case 255:                       // 'true'
      parse_BooleanLiteral();
      break;
    case 197:                       // 'null'
      parse_NullLiteral();
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    case 135:                       // 'false'
    case 255:                       // 'true'
      try_BooleanLiteral();
      break;
    case 197:                       // 'null'
      try_NullLiteral();
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_BooleanLiteral()
  {
    eventHandler.startNonterminal("BooleanLiteral", e0);
    switch (l1)
    {
    case 255:                       // 'true'
      shift(255);                   // 'true'
      break;
    default:
      shift(135);                   // 'false'
    }
    eventHandler.endNonterminal("BooleanLiteral", e0);
  }

  function try_BooleanLiteral()
  {
    switch (l1)
    {
    case 255:                       // 'true'
      shiftT(255);                  // 'true'
      break;
    default:
      shiftT(135);                  // 'false'
    }
  }

  function parse_NullLiteral()
  {
    eventHandler.startNonterminal("NullLiteral", e0);
    shift(197);                     // 'null'
    eventHandler.endNonterminal("NullLiteral", e0);
  }

  function try_NullLiteral()
  {
    shiftT(197);                    // 'null'
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shift(8);                     // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shift(9);                     // DecimalLiteral
      break;
    default:
      shift(10);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shiftT(8);                    // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shiftT(9);                    // DecimalLiteral
      break;
    default:
      shiftT(10);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(35);                      // '('
    lookahead1W(273);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(35);                     // '('
    lookahead1W(273);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    shiftT(38);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(32);                      // '$$'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(32);                     // '$$'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(206);                     // 'ordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(206);                    // 'ordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(262);                     // 'unordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(262);                    // 'unordered'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(65);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(65);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
      parse_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
      try_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(55);                      // '<'
    lookahead1(4);                  // QName
    shift(20);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      shift(49);                    // '/>'
      break;
    default:
      shift(62);                    // '>'
      for (;;)
      {
        lookahead1(197);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(57);                    // '</'
      lookahead1(4);                // QName
      shift(20);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shift(21);                  // S
      }
      lookahead1(8);                // '>'
      shift(62);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(55);                     // '<'
    lookahead1(4);                  // QName
    shiftT(20);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      shiftT(49);                   // '/>'
      break;
    default:
      shiftT(62);                   // '>'
      for (;;)
      {
        lookahead1(197);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(57);                   // '</'
      lookahead1(4);                // QName
      shiftT(20);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shiftT(21);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(62);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shift(21);                    // S
      lookahead1(92);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shift(20);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        lookahead1(7);              // '='
        shift(61);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shiftT(21);                   // S
      lookahead1(92);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shiftT(20);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        lookahead1(7);              // '='
        shiftT(61);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shift(28);                    // '"'
      for (;;)
      {
        lookahead1(186);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shift(13);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(28);                    // '"'
      break;
    default:
      shift(34);                    // "'"
      for (;;)
      {
        lookahead1(187);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shift(14);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(34);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shiftT(28);                   // '"'
      for (;;)
      {
        lookahead1(186);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shiftT(13);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(28);                   // '"'
      break;
    default:
      shiftT(34);                   // "'"
      for (;;)
      {
        lookahead1(187);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shiftT(14);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(34);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shift(16);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shiftT(16);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shift(17);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shiftT(17);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shift(4);                     // CDataSection
      break;
    case 15:                        // ElementContentChar
      shift(15);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shiftT(4);                    // CDataSection
      break;
    case 15:                        // ElementContentChar
      shiftT(15);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(56);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(2);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(44);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(56);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(2);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(44);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(60);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(18);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(2);                // DirPIContents
      shift(3);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(66);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(60);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(18);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(3);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(66);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 120:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 122:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 187:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 249:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 120:                       // 'document'
      try_CompDocConstructor();
      break;
    case 122:                       // 'element'
      try_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 187:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 249:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(122);                     // 'element'
    lookahead1W(242);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(122);                    // 'element'
    lookahead1W(242);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(287);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(187);                     // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(187);                    // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_PrefixExpr();
      shiftT(287);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_URIExpr();
    shiftT(287);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 33:                        // '%'
    case 147:                       // 'function'
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 33:                        // '%'
    case 147:                       // 'function'
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(29);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(8);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(29);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(8);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(114);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    shiftT(38);                     // ')'
    lookahead1W(114);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      shiftT(80);                   // 'as'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      try_SequenceType();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 65)                   // '?'
    {
      shift(65);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'select' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 65)                   // '?'
    {
      shiftT(65);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(80);                      // 'as'
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(80);                     // 'as'
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 35:                        // '('
      lookahead2W(252);             // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 125:                       // 'empty-sequence'
    case 19491:                     // '(' ')'
      if (l1 == 125)                // 'empty-sequence'
      {
        shift(125);                 // 'empty-sequence'
      }
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(229);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 35:                        // '('
      lookahead2W(252);             // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 125:                       // 'empty-sequence'
    case 19491:                     // '(' ')'
      if (l1 == 125)                // 'empty-sequence'
      {
        shiftT(125);                // 'empty-sequence'
      }
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(229);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'select' | 'sentences' | 'stable' | 'start' | 'times' |
                                    // 'to' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      shift(65);                    // '?'
      break;
    case 40:                        // '*'
      shift(40);                    // '*'
      break;
    default:
      shift(41);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      shiftT(65);                   // '?'
      break;
    case 40:                        // '*'
      shiftT(40);                   // '*'
      break;
    default:
      shiftT(41);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 198:                       // 'object'
      lookahead2W(231);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12998                 // 'object' EOF
     || lk == 14022                 // 'object' '!='
     || lk == 19654                 // 'object' ')'
     || lk == 20166                 // 'object' '*'
     || lk == 20678                 // 'object' '*'
     || lk == 21190                 // 'object' '+'
     || lk == 21702                 // 'object' ','
     || lk == 22214                 // 'object' '-'
     || lk == 25798                 // 'object' ':'
     || lk == 27334                 // 'object' ':='
     || lk == 27846                 // 'object' ';'
     || lk == 28358                 // 'object' '<'
     || lk == 29894                 // 'object' '<<'
     || lk == 30406                 // 'object' '<='
     || lk == 31430                 // 'object' '='
     || lk == 31942                 // 'object' '>'
     || lk == 32454                 // 'object' '>='
     || lk == 32966                 // 'object' '>>'
     || lk == 33478                 // 'object' '?'
     || lk == 36038                 // 'object' ']'
     || lk == 36550                 // 'object' 'after'
     || lk == 37574                 // 'object' 'allowing'
     || lk == 39110                 // 'object' 'and'
     || lk == 41158                 // 'object' 'as'
     || lk == 41670                 // 'object' 'ascending'
     || lk == 42182                 // 'object' 'at'
     || lk == 43718                 // 'object' 'before'
     || lk == 45766                 // 'object' 'case'
     || lk == 48838                 // 'object' 'collation'
     || lk == 51398                 // 'object' 'contains'
     || lk == 54470                 // 'object' 'count'
     || lk == 56518                 // 'object' 'default'
     || lk == 58566                 // 'object' 'descending'
     || lk == 61126                 // 'object' 'div'
     || lk == 63174                 // 'object' 'else'
     || lk == 63686                 // 'object' 'empty'
     || lk == 65222                 // 'object' 'end'
     || lk == 66246                 // 'object' 'eq'
     || lk == 67782                 // 'object' 'except'
     || lk == 68806                 // 'object' 'external'
     || lk == 71366                 // 'object' 'for'
     || lk == 72902                 // 'object' 'from'
     || lk == 75974                 // 'object' 'ge'
     || lk == 76998                 // 'object' 'group'
     || lk == 78022                 // 'object' 'gt'
     || lk == 78534                 // 'object' 'idiv'
     || lk == 80070                 // 'object' 'in'
     || lk == 83142                 // 'object' 'instance'
     || lk == 84166                 // 'object' 'intersect'
     || lk == 84678                 // 'object' 'into'
     || lk == 85190                 // 'object' 'is'
     || lk == 89798                 // 'object' 'le'
     || lk == 90822                 // 'object' 'let'
     || lk == 92870                 // 'object' 'lt'
     || lk == 93894                 // 'object' 'mod'
     || lk == 94406                 // 'object' 'modify'
     || lk == 96966                 // 'object' 'ne'
     || lk == 103622                // 'object' 'only'
     || lk == 104646                // 'object' 'or'
     || lk == 105158                // 'object' 'order'
     || lk == 107206                // 'object' 'paragraphs'
     || lk == 114886                // 'object' 'return'
     || lk == 116934                // 'object' 'satisfies'
     || lk == 118982                // 'object' 'score'
     || lk == 119494                // 'object' 'select'
     || lk == 121542                // 'object' 'sentences'
     || lk == 123590                // 'object' 'stable'
     || lk == 124102                // 'object' 'start'
     || lk == 129222                // 'object' 'times'
     || lk == 129734                // 'object' 'to'
     || lk == 133318                // 'object' 'union'
     || lk == 139462                // 'object' 'where'
     || lk == 141510                // 'object' 'with'
     || lk == 143046                // 'object' 'words'
     || lk == 144070                // 'object' '{'
     || lk == 145606                // 'object' '|'
     || lk == 146118                // 'object' '||'
     || lk == 146630                // 'object' '|}'
     || lk == 147142)               // 'object' '}'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_AtomicOrUnionType();
          lk = -4;
        }
        catch (p4A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      parse_KindTest();
      break;
    case 167:                       // 'item'
      shift(167);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    case 33:                        // '%'
    case 147:                       // 'function'
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case -6:
    case 79:                        // 'array'
    case 169:                       // 'json-item'
    case 18118:                     // 'object' '('
      parse_JSONTest();
      break;
    case 247:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 198:                       // 'object'
      lookahead2W(231);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 12998                 // 'object' EOF
     || lk == 14022                 // 'object' '!='
     || lk == 19654                 // 'object' ')'
     || lk == 20166                 // 'object' '*'
     || lk == 20678                 // 'object' '*'
     || lk == 21190                 // 'object' '+'
     || lk == 21702                 // 'object' ','
     || lk == 22214                 // 'object' '-'
     || lk == 25798                 // 'object' ':'
     || lk == 27334                 // 'object' ':='
     || lk == 27846                 // 'object' ';'
     || lk == 28358                 // 'object' '<'
     || lk == 29894                 // 'object' '<<'
     || lk == 30406                 // 'object' '<='
     || lk == 31430                 // 'object' '='
     || lk == 31942                 // 'object' '>'
     || lk == 32454                 // 'object' '>='
     || lk == 32966                 // 'object' '>>'
     || lk == 33478                 // 'object' '?'
     || lk == 36038                 // 'object' ']'
     || lk == 36550                 // 'object' 'after'
     || lk == 37574                 // 'object' 'allowing'
     || lk == 39110                 // 'object' 'and'
     || lk == 41158                 // 'object' 'as'
     || lk == 41670                 // 'object' 'ascending'
     || lk == 42182                 // 'object' 'at'
     || lk == 43718                 // 'object' 'before'
     || lk == 45766                 // 'object' 'case'
     || lk == 48838                 // 'object' 'collation'
     || lk == 51398                 // 'object' 'contains'
     || lk == 54470                 // 'object' 'count'
     || lk == 56518                 // 'object' 'default'
     || lk == 58566                 // 'object' 'descending'
     || lk == 61126                 // 'object' 'div'
     || lk == 63174                 // 'object' 'else'
     || lk == 63686                 // 'object' 'empty'
     || lk == 65222                 // 'object' 'end'
     || lk == 66246                 // 'object' 'eq'
     || lk == 67782                 // 'object' 'except'
     || lk == 68806                 // 'object' 'external'
     || lk == 71366                 // 'object' 'for'
     || lk == 72902                 // 'object' 'from'
     || lk == 75974                 // 'object' 'ge'
     || lk == 76998                 // 'object' 'group'
     || lk == 78022                 // 'object' 'gt'
     || lk == 78534                 // 'object' 'idiv'
     || lk == 80070                 // 'object' 'in'
     || lk == 83142                 // 'object' 'instance'
     || lk == 84166                 // 'object' 'intersect'
     || lk == 84678                 // 'object' 'into'
     || lk == 85190                 // 'object' 'is'
     || lk == 89798                 // 'object' 'le'
     || lk == 90822                 // 'object' 'let'
     || lk == 92870                 // 'object' 'lt'
     || lk == 93894                 // 'object' 'mod'
     || lk == 94406                 // 'object' 'modify'
     || lk == 96966                 // 'object' 'ne'
     || lk == 103622                // 'object' 'only'
     || lk == 104646                // 'object' 'or'
     || lk == 105158                // 'object' 'order'
     || lk == 107206                // 'object' 'paragraphs'
     || lk == 114886                // 'object' 'return'
     || lk == 116934                // 'object' 'satisfies'
     || lk == 118982                // 'object' 'score'
     || lk == 119494                // 'object' 'select'
     || lk == 121542                // 'object' 'sentences'
     || lk == 123590                // 'object' 'stable'
     || lk == 124102                // 'object' 'start'
     || lk == 129222                // 'object' 'times'
     || lk == 129734                // 'object' 'to'
     || lk == 133318                // 'object' 'union'
     || lk == 139462                // 'object' 'where'
     || lk == 141510                // 'object' 'with'
     || lk == 143046                // 'object' 'words'
     || lk == 144070                // 'object' '{'
     || lk == 145606                // 'object' '|'
     || lk == 146118                // 'object' '||'
     || lk == 146630                // 'object' '|}'
     || lk == 147142)               // 'object' '}'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_AtomicOrUnionType();
          memoize(5, e0A, -4);
          lk = -8;
        }
        catch (p4A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      try_KindTest();
      break;
    case 167:                       // 'item'
      shiftT(167);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    case 33:                        // '%'
    case 147:                       // 'function'
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case -6:
    case 79:                        // 'array'
    case 169:                       // 'json-item'
    case 18118:                     // 'object' '('
      try_JSONTest();
      break;
    case 247:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 169:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 198:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 169:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 198:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(247);                     // 'structured-item'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(247);                    // 'structured-item'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(169);                     // 'json-item'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(169);                    // 'json-item'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(198);                     // 'object'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(198);                    // 'object'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(79);                      // 'array'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(79);                     // 'array'
    lookahead1W(231);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'from' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'score' | 'select' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '{' | '|' | '||' | '|}' | '}'
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 121:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 122:                       // 'element'
      parse_ElementTest();
      break;
    case 83:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 231:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 230:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 220:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 249:                       // 'text'
      parse_TextTest();
      break;
    case 188:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 121:                       // 'document-node'
      try_DocumentTest();
      break;
    case 122:                       // 'element'
      try_ElementTest();
      break;
    case 83:                        // 'attribute'
      try_AttributeTest();
      break;
    case 231:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 230:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 220:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 249:                       // 'text'
      try_TextTest();
      break;
    case 188:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(194);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(194);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(121);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(154);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(121);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(154);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(249);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(249);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(97);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(97);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(188);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(188);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(220);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(254);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shift(11);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(220);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(254);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shiftT(11);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(83);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(244);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(83);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(244);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(230);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(230);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(122);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(244);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_TypeName();
        lookahead1W(104);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          shift(65);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(122);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(244);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        try_TypeName();
        lookahead1W(104);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          shiftT(65);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(231);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(231);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(6, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(96);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(6, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(39);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(39);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(258);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(253);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
        whitespace();
        parse_SequenceType();
      }
    }
    shift(38);                      // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    shift(80);                      // 'as'
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(258);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(253);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
        try_SequenceType();
      }
    }
    shiftT(38);                     // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    shiftT(80);                     // 'as'
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(35);                      // '('
    lookahead1W(250);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(35);                     // '('
    lookahead1W(250);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(73);                // S^WS | '(:' | 'revalidation'
    shift(226);                     // 'revalidation'
    lookahead1W(162);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    default:
      shift(238);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        shift(80);                  // 'as'
        lookahead1W(122);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 136:                   // 'first'
          shift(136);               // 'first'
          break;
        default:
          shift(173);               // 'last'
        }
      }
      lookahead1W(57);              // S^WS | '(:' | 'into'
      shift(165);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        shiftT(80);                 // 'as'
        lookahead1W(122);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 136:                   // 'first'
          shiftT(136);              // 'first'
          break;
        default:
          shiftT(173);              // 'last'
        }
      }
      lookahead1W(57);              // S^WS | '(:' | 'into'
      shiftT(165);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(161);                     // 'insert'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    default:
      shift(195);                   // 'nodes'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(161);                    // 'insert'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    default:
      shiftT(195);                  // 'nodes'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(111);                     // 'delete'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    default:
      shift(195);                   // 'nodes'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(111);                    // 'delete'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    default:
      shiftT(195);                  // 'nodes'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(223);                     // 'replace'
    lookahead1W(134);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      shift(267);                   // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shift(200);                   // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(276);                     // 'with'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(223);                    // 'replace'
    lookahead1W(134);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      shiftT(267);                  // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      shiftT(200);                  // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shiftT(194);                    // 'node'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_TargetExpr();
    shiftT(276);                    // 'with'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(222);                     // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(80);                      // 'as'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(222);                    // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shiftT(194);                    // 'node'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_TargetExpr();
    shiftT(80);                     // 'as'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(104);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(28);              // S^WS | '(:' | ':='
      shift(53);                    // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(184);                     // 'modify'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(104);                    // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(28);              // S^WS | '(:' | ':='
      shiftT(53);                   // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(184);                    // 'modify'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(161);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 206                 // 'ordered'
       && lk != 227                 // 'same'
       && lk != 275                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 123986)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'select' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(161);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 206                 // 'ordered'
       && lk != 227                 // 'same'
       && lk != 275                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 123986)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(270);                     // 'weight'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(270);                    // 'weight'
    lookahead1W(88);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 146)                // 'ftor'
      {
        break;
      }
      shift(146);                   // 'ftor'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 146)                // 'ftor'
      {
        break;
      }
      shiftT(146);                  // 'ftor'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 144)                // 'ftand'
      {
        break;
      }
      shift(144);                   // 'ftand'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 144)                // 'ftand'
      {
        break;
      }
      shiftT(144);                  // 'ftand'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shift(196);                   // 'not'
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shift(156);                   // 'in'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shiftT(196);                  // 'not'
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shiftT(156);                  // 'in'
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 145)                  // 'ftnot'
    {
      shift(145);                   // 'ftnot'
    }
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 145)                  // 'ftnot'
    {
      shiftT(145);                  // 'ftnot'
    }
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 265)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 265)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      shift(35);                    // '('
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(38);                    // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 199)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      shiftT(35);                   // '('
      lookahead1W(178);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(38);                   // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 199)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' |
                                    // 'eq' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 214)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' |
                                    // 'eq' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 214)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      shift(281);                   // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      shiftT(281);                  // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(281);                     // '{'
    lookahead1W(185);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(281);                    // '{'
    lookahead1W(185);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 287)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(287);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 77:                        // 'any'
      shift(77);                    // 'any'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' | '|}' |
                                    // '}'
      if (l1 == 278)                // 'word'
      {
        shift(278);                 // 'word'
      }
      break;
    case 72:                        // 'all'
      shift(72);                    // 'all'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|}' |
                                    // '}'
      if (l1 == 279)                // 'words'
      {
        shift(279);                 // 'words'
      }
      break;
    default:
      shift(214);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 77:                        // 'any'
      shiftT(77);                   // 'any'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' | '|}' |
                                    // '}'
      if (l1 == 278)                // 'word'
      {
        shiftT(278);                // 'word'
      }
      break;
    case 72:                        // 'all'
      shiftT(72);                   // 'all'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|}' |
                                    // '}'
      if (l1 == 279)                // 'words'
      {
        shiftT(279);                // 'words'
      }
      break;
    default:
      shiftT(214);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(199);                     // 'occurs'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(252);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(199);                    // 'occurs'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(252);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      shift(131);                   // 'exactly'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shift(176);                 // 'least'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(186);                 // 'most'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(142);                   // 'from'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      shift(253);                   // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      shiftT(131);                  // 'exactly'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_AdditiveExpr();
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shiftT(176);                // 'least'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        shiftT(186);                // 'most'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(142);                  // 'from'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_AdditiveExpr();
      shiftT(253);                  // 'to'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 206:                       // 'ordered'
      parse_FTOrder();
      break;
    case 275:                       // 'window'
      parse_FTWindow();
      break;
    case 118:                       // 'distance'
      parse_FTDistance();
      break;
    case 116:                       // 'different'
    case 227:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 206:                       // 'ordered'
      try_FTOrder();
      break;
    case 275:                       // 'window'
      try_FTWindow();
      break;
    case 118:                       // 'distance'
      try_FTDistance();
      break;
    case 116:                       // 'different'
    case 227:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(206);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(206);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(275);                     // 'window'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(275);                    // 'window'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(118);                     // 'distance'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(118);                    // 'distance'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 279:                       // 'words'
      shift(279);                   // 'words'
      break;
    case 237:                       // 'sentences'
      shift(237);                   // 'sentences'
      break;
    default:
      shift(209);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 279:                       // 'words'
      shiftT(279);                  // 'words'
      break;
    case 237:                       // 'sentences'
      shiftT(237);                  // 'sentences'
      break;
    default:
      shiftT(209);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 227:                       // 'same'
      shift(227);                   // 'same'
      break;
    default:
      shift(116);                   // 'different'
    }
    lookahead1W(136);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 227:                       // 'same'
      shiftT(227);                  // 'same'
      break;
    default:
      shiftT(116);                  // 'different'
    }
    lookahead1W(136);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 236:                       // 'sentence'
      shift(236);                   // 'sentence'
      break;
    default:
      shift(208);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 236:                       // 'sentence'
      shiftT(236);                  // 'sentence'
      break;
    default:
      shiftT(208);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(120);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 242:                     // 'start'
        shift(242);                 // 'start'
        break;
      default:
        shift(127);                 // 'end'
      }
      break;
    default:
      shift(128);                   // 'entire'
      lookahead1W(45);              // S^WS | '(:' | 'content'
      shift(101);                   // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(120);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 242:                     // 'start'
        shiftT(242);                // 'start'
        break;
      default:
        shiftT(127);                // 'end'
      }
      break;
    default:
      shiftT(128);                  // 'entire'
      lookahead1W(45);              // S^WS | '(:' | 'content'
      shiftT(101);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(265);                   // 'using'
      lookahead1W(205);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(265);                  // 'using'
      lookahead1W(205);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 191:                       // 'no'
      lookahead2W(177);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 172:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140479:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 251:                       // 'thesaurus'
    case 128703:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 243:                       // 'stemming'
    case 124607:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 244:                       // 'stop'
    case 125119:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 203:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 191:                       // 'no'
      lookahead2W(177);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 172:                       // 'language'
      try_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140479:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 251:                       // 'thesaurus'
    case 128703:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 243:                       // 'stemming'
    case 124607:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 244:                       // 'stop'
    case 125119:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 203:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 89:                        // 'case'
      shift(89);                    // 'case'
      lookahead1W(127);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 160:                     // 'insensitive'
        shift(160);                 // 'insensitive'
        break;
      default:
        shift(235);                 // 'sensitive'
      }
      break;
    case 180:                       // 'lowercase'
      shift(180);                   // 'lowercase'
      break;
    default:
      shift(264);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      lookahead1W(127);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 160:                     // 'insensitive'
        shiftT(160);                // 'insensitive'
        break;
      default:
        shiftT(235);                // 'sensitive'
      }
      break;
    case 180:                       // 'lowercase'
      shiftT(180);                  // 'lowercase'
      break;
    default:
      shiftT(264);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(115);                     // 'diacritics'
    lookahead1W(127);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 160:                       // 'insensitive'
      shift(160);                   // 'insensitive'
      break;
    default:
      shift(235);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(115);                    // 'diacritics'
    lookahead1W(127);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 160:                       // 'insensitive'
      shiftT(160);                  // 'insensitive'
      break;
    default:
      shiftT(235);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 243:                       // 'stemming'
      shift(243);                   // 'stemming'
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stemming'
      shift(243);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 243:                       // 'stemming'
      shiftT(243);                  // 'stemming'
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stemming'
      shiftT(243);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 251:                       // 'thesaurus'
      shift(251);                   // 'thesaurus'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 110:                     // 'default'
        shift(110);                 // 'default'
        break;
      default:
        shift(35);                  // '('
        lookahead1W(115);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(110);               // 'default'
        }
        for (;;)
        {
          lookahead1W(103);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shift(42);                // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(38);                  // ')'
      }
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(79);              // S^WS | '(:' | 'thesaurus'
      shift(251);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 251:                       // 'thesaurus'
      shiftT(251);                  // 'thesaurus'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        try_FTThesaurusID();
        break;
      case 110:                     // 'default'
        shiftT(110);                // 'default'
        break;
      default:
        shiftT(35);                 // '('
        lookahead1W(115);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(110);              // 'default'
        }
        for (;;)
        {
          lookahead1W(103);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shiftT(42);               // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(38);                 // ')'
      }
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(79);              // S^WS | '(:' | 'thesaurus'
      shiftT(251);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(82);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 221)                  // 'relationship'
    {
      shift(221);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(184);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    case 142:                       // 'from'
      lookahead2W(165);             // IntegerLiteral | S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 4238                  // 'from' IntegerLiteral
     || lk == 90194                 // 'at' 'least'
     || lk == 95314)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      shift(178);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(82);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'select' |
                                    // 'stable' | 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
    if (l1 == 221)                  // 'relationship'
    {
      shiftT(221);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(184);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    case 142:                       // 'from'
      lookahead2W(165);             // IntegerLiteral | S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 4238                  // 'from' IntegerLiteral
     || lk == 90194                 // 'at' 'least'
     || lk == 95314)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      shiftT(178);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      shift(131);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shift(176);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
        break;
      default:
        shift(186);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
      }
      break;
    default:
      shift(142);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      lookahead1W(80);              // S^WS | '(:' | 'to'
      shift(253);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      shiftT(131);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shiftT(176);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
        break;
      default:
        shiftT(186);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(142);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      lookahead1W(80);              // S^WS | '(:' | 'to'
      shiftT(253);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 244:                       // 'stop'
      shift(244);                   // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shift(279);                   // 'words'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        shift(110);                 // 'default'
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stop'
      shift(244);                   // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shift(279);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 244:                       // 'stop'
      shiftT(244);                  // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shiftT(279);                  // 'words'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        shiftT(110);                // 'default'
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(219);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'select' | 'stable' | 'start' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stop'
      shiftT(244);                  // 'stop'
      lookahead1W(87);              // S^WS | '(:' | 'words'
      shiftT(279);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      break;
    default:
      shift(35);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
      break;
    default:
      shiftT(35);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(11);                 // StringLiteral
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    default:
      shift(132);                   // 'except'
    }
    lookahead1W(100);               // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    default:
      shiftT(132);                  // 'except'
    }
    lookahead1W(100);               // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(172);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(172);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 274:                       // 'wildcards'
      shift(274);                   // 'wildcards'
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(85);              // S^WS | '(:' | 'wildcards'
      shift(274);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 274:                       // 'wildcards'
      shiftT(274);                  // 'wildcards'
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(85);              // S^WS | '(:' | 'wildcards'
      shiftT(274);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(203);                     // 'option'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(203);                    // 'option'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(277);                     // 'without'
    lookahead1W(45);                // S^WS | '(:' | 'content'
    shift(101);                     // 'content'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(277);                    // 'without'
    lookahead1W(45);                // S^WS | '(:' | 'content'
    shiftT(101);                    // 'content'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(96);                      // 'collection'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(110);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(80);                      // 'as'
    lookahead1W(199);               // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'namespace-node' | 'node' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(172);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 54)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(156);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 95)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(80);                      // 'as'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_AtomicType();
    lookahead1W(191);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 65)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(95);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(157);                     // 'index'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_IndexName();
    lookahead1W(67);                // S^WS | '(:' | 'on'
    shift(201);                     // 'on'
    lookahead1W(65);                // S^WS | '(:' | 'nodes'
    shift(195);                     // 'nodes'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    shift(88);                      // 'by'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(105);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(265);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(163);                     // 'integrity'
    lookahead1W(43);                // S^WS | '(:' | 'constraint'
    shift(98);                      // 'constraint'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(123);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 201:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(201);                     // 'on'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    shift(96);                      // 'collection'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(149);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 194:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(81);                // S^WS | '(:' | 'unique'
    shift(261);                     // 'unique'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(140);                     // 'foreach'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(141);                     // 'foreign'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(54);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(142);                     // 'from'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(253);                     // 'to'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(96);                      // 'collection'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(64);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(59);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '/' | '//' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(37);                     // '(:'
    for (;;)
    {
      lookahead1(90);               // CommentContents | '(:' | ':)'
      if (l1 == 51)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        shiftT(24);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(51);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      shiftT(22);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    parse_FunctionName();
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    try_FunctionName();
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    lookahead1(238);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'as' | 'ascending' | 'at' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    switch (l1)
    {
    case 6:                         // EQName^Token
      shift(6);                     // EQName^Token
      break;
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shift(75);                    // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      shift(76);                    // 'and'
      break;
    case 80:                        // 'as'
      shift(80);                    // 'as'
      break;
    case 81:                        // 'ascending'
      shift(81);                    // 'ascending'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    case 89:                        // 'case'
      shift(89);                    // 'case'
      break;
    case 90:                        // 'cast'
      shift(90);                    // 'cast'
      break;
    case 91:                        // 'castable'
      shift(91);                    // 'castable'
      break;
    case 94:                        // 'child'
      shift(94);                    // 'child'
      break;
    case 95:                        // 'collation'
      shift(95);                    // 'collation'
      break;
    case 104:                       // 'copy'
      shift(104);                   // 'copy'
      break;
    case 106:                       // 'count'
      shift(106);                   // 'count'
      break;
    case 109:                       // 'declare'
      shift(109);                   // 'declare'
      break;
    case 110:                       // 'default'
      shift(110);                   // 'default'
      break;
    case 111:                       // 'delete'
      shift(111);                   // 'delete'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      shift(114);                   // 'descending'
      break;
    case 119:                       // 'div'
      shift(119);                   // 'div'
      break;
    case 120:                       // 'document'
      shift(120);                   // 'document'
      break;
    case 123:                       // 'else'
      shift(123);                   // 'else'
      break;
    case 124:                       // 'empty'
      shift(124);                   // 'empty'
      break;
    case 127:                       // 'end'
      shift(127);                   // 'end'
      break;
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 130:                       // 'every'
      shift(130);                   // 'every'
      break;
    case 132:                       // 'except'
      shift(132);                   // 'except'
      break;
    case 136:                       // 'first'
      shift(136);                   // 'first'
      break;
    case 137:                       // 'following'
      shift(137);                   // 'following'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      break;
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    case 148:                       // 'ge'
      shift(148);                   // 'ge'
      break;
    case 150:                       // 'group'
      shift(150);                   // 'group'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    case 153:                       // 'idiv'
      shift(153);                   // 'idiv'
      break;
    case 155:                       // 'import'
      shift(155);                   // 'import'
      break;
    case 161:                       // 'insert'
      shift(161);                   // 'insert'
      break;
    case 162:                       // 'instance'
      shift(162);                   // 'instance'
      break;
    case 164:                       // 'intersect'
      shift(164);                   // 'intersect'
      break;
    case 165:                       // 'into'
      shift(165);                   // 'into'
      break;
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 173:                       // 'last'
      shift(173);                   // 'last'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 177:                       // 'let'
      shift(177);                   // 'let'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 183:                       // 'mod'
      shift(183);                   // 'mod'
      break;
    case 184:                       // 'modify'
      shift(184);                   // 'modify'
      break;
    case 185:                       // 'module'
      shift(185);                   // 'module'
      break;
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 202:                       // 'only'
      shift(202);                   // 'only'
      break;
    case 204:                       // 'or'
      shift(204);                   // 'or'
      break;
    case 205:                       // 'order'
      shift(205);                   // 'order'
      break;
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      break;
    case 222:                       // 'rename'
      shift(222);                   // 'rename'
      break;
    case 223:                       // 'replace'
      shift(223);                   // 'replace'
      break;
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    case 228:                       // 'satisfies'
      shift(228);                   // 'satisfies'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      break;
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    case 241:                       // 'stable'
      shift(241);                   // 'stable'
      break;
    case 242:                       // 'start'
      shift(242);                   // 'start'
      break;
    case 253:                       // 'to'
      shift(253);                   // 'to'
      break;
    case 254:                       // 'treat'
      shift(254);                   // 'treat'
      break;
    case 256:                       // 'try'
      shift(256);                   // 'try'
      break;
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    case 262:                       // 'unordered'
      shift(262);                   // 'unordered'
      break;
    case 266:                       // 'validate'
      shift(266);                   // 'validate'
      break;
    case 272:                       // 'where'
      shift(272);                   // 'where'
      break;
    case 276:                       // 'with'
      shift(276);                   // 'with'
      break;
    case 170:                       // 'jsoniq'
      shift(170);                   // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shift(73);                    // 'allowing'
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      break;
    case 84:                        // 'base-uri'
      shift(84);                    // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shift(86);                    // 'boundary-space'
      break;
    case 87:                        // 'break'
      shift(87);                    // 'break'
      break;
    case 92:                        // 'catch'
      shift(92);                    // 'catch'
      break;
    case 99:                        // 'construction'
      shift(99);                    // 'construction'
      break;
    case 102:                       // 'context'
      shift(102);                   // 'context'
      break;
    case 103:                       // 'continue'
      shift(103);                   // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shift(105);                   // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      break;
    case 133:                       // 'exit'
      shift(133);                   // 'exit'
      break;
    case 134:                       // 'external'
      shift(134);                   // 'external'
      break;
    case 143:                       // 'ft-option'
      shift(143);                   // 'ft-option'
      break;
    case 156:                       // 'in'
      shift(156);                   // 'in'
      break;
    case 157:                       // 'index'
      shift(157);                   // 'index'
      break;
    case 163:                       // 'integrity'
      shift(163);                   // 'integrity'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    case 195:                       // 'nodes'
      shift(195);                   // 'nodes'
      break;
    case 203:                       // 'option'
      shift(203);                   // 'option'
      break;
    case 207:                       // 'ordering'
      shift(207);                   // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shift(226);                   // 'revalidation'
      break;
    case 229:                       // 'schema'
      shift(229);                   // 'schema'
      break;
    case 232:                       // 'score'
      shift(232);                   // 'score'
      break;
    case 239:                       // 'sliding'
      shift(239);                   // 'sliding'
      break;
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 257:                       // 'tumbling'
      shift(257);                   // 'tumbling'
      break;
    case 258:                       // 'type'
      shift(258);                   // 'type'
      break;
    case 263:                       // 'updating'
      shift(263);                   // 'updating'
      break;
    case 267:                       // 'value'
      shift(267);                   // 'value'
      break;
    case 268:                       // 'variable'
      shift(268);                   // 'variable'
      break;
    case 269:                       // 'version'
      shift(269);                   // 'version'
      break;
    case 273:                       // 'while'
      shift(273);                   // 'while'
      break;
    case 98:                        // 'constraint'
      shift(98);                    // 'constraint'
      break;
    case 179:                       // 'loop'
      shift(179);                   // 'loop'
      break;
    case 225:                       // 'returning'
      shift(225);                   // 'returning'
      break;
    case 78:                        // 'append'
      shift(78);                    // 'append'
      break;
    case 135:                       // 'false'
      shift(135);                   // 'false'
      break;
    case 142:                       // 'from'
      shift(142);                   // 'from'
      break;
    case 197:                       // 'null'
      shift(197);                   // 'null'
      break;
    case 168:                       // 'json'
      shift(168);                   // 'json'
      break;
    case 198:                       // 'object'
      shift(198);                   // 'object'
      break;
    case 233:                       // 'select'
      shift(233);                   // 'select'
      break;
    default:
      shift(255);                   // 'true'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    lookahead1(238);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'as' | 'ascending' | 'at' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    switch (l1)
    {
    case 6:                         // EQName^Token
      shiftT(6);                    // EQName^Token
      break;
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shiftT(75);                   // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      shiftT(76);                   // 'and'
      break;
    case 80:                        // 'as'
      shiftT(80);                   // 'as'
      break;
    case 81:                        // 'ascending'
      shiftT(81);                   // 'ascending'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      break;
    case 90:                        // 'cast'
      shiftT(90);                   // 'cast'
      break;
    case 91:                        // 'castable'
      shiftT(91);                   // 'castable'
      break;
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      break;
    case 95:                        // 'collation'
      shiftT(95);                   // 'collation'
      break;
    case 104:                       // 'copy'
      shiftT(104);                  // 'copy'
      break;
    case 106:                       // 'count'
      shiftT(106);                  // 'count'
      break;
    case 109:                       // 'declare'
      shiftT(109);                  // 'declare'
      break;
    case 110:                       // 'default'
      shiftT(110);                  // 'default'
      break;
    case 111:                       // 'delete'
      shiftT(111);                  // 'delete'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      shiftT(114);                  // 'descending'
      break;
    case 119:                       // 'div'
      shiftT(119);                  // 'div'
      break;
    case 120:                       // 'document'
      shiftT(120);                  // 'document'
      break;
    case 123:                       // 'else'
      shiftT(123);                  // 'else'
      break;
    case 124:                       // 'empty'
      shiftT(124);                  // 'empty'
      break;
    case 127:                       // 'end'
      shiftT(127);                  // 'end'
      break;
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 130:                       // 'every'
      shiftT(130);                  // 'every'
      break;
    case 132:                       // 'except'
      shiftT(132);                  // 'except'
      break;
    case 136:                       // 'first'
      shiftT(136);                  // 'first'
      break;
    case 137:                       // 'following'
      shiftT(137);                  // 'following'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      break;
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    case 148:                       // 'ge'
      shiftT(148);                  // 'ge'
      break;
    case 150:                       // 'group'
      shiftT(150);                  // 'group'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    case 153:                       // 'idiv'
      shiftT(153);                  // 'idiv'
      break;
    case 155:                       // 'import'
      shiftT(155);                  // 'import'
      break;
    case 161:                       // 'insert'
      shiftT(161);                  // 'insert'
      break;
    case 162:                       // 'instance'
      shiftT(162);                  // 'instance'
      break;
    case 164:                       // 'intersect'
      shiftT(164);                  // 'intersect'
      break;
    case 165:                       // 'into'
      shiftT(165);                  // 'into'
      break;
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 173:                       // 'last'
      shiftT(173);                  // 'last'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 177:                       // 'let'
      shiftT(177);                  // 'let'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 183:                       // 'mod'
      shiftT(183);                  // 'mod'
      break;
    case 184:                       // 'modify'
      shiftT(184);                  // 'modify'
      break;
    case 185:                       // 'module'
      shiftT(185);                  // 'module'
      break;
    case 187:                       // 'namespace'
      shiftT(187);                  // 'namespace'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 202:                       // 'only'
      shiftT(202);                  // 'only'
      break;
    case 204:                       // 'or'
      shiftT(204);                  // 'or'
      break;
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      break;
    case 206:                       // 'ordered'
      shiftT(206);                  // 'ordered'
      break;
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      break;
    case 222:                       // 'rename'
      shiftT(222);                  // 'rename'
      break;
    case 223:                       // 'replace'
      shiftT(223);                  // 'replace'
      break;
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    case 228:                       // 'satisfies'
      shiftT(228);                  // 'satisfies'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      break;
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    case 241:                       // 'stable'
      shiftT(241);                  // 'stable'
      break;
    case 242:                       // 'start'
      shiftT(242);                  // 'start'
      break;
    case 253:                       // 'to'
      shiftT(253);                  // 'to'
      break;
    case 254:                       // 'treat'
      shiftT(254);                  // 'treat'
      break;
    case 256:                       // 'try'
      shiftT(256);                  // 'try'
      break;
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    case 262:                       // 'unordered'
      shiftT(262);                  // 'unordered'
      break;
    case 266:                       // 'validate'
      shiftT(266);                  // 'validate'
      break;
    case 272:                       // 'where'
      shiftT(272);                  // 'where'
      break;
    case 276:                       // 'with'
      shiftT(276);                  // 'with'
      break;
    case 170:                       // 'jsoniq'
      shiftT(170);                  // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shiftT(73);                   // 'allowing'
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      break;
    case 84:                        // 'base-uri'
      shiftT(84);                   // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shiftT(86);                   // 'boundary-space'
      break;
    case 87:                        // 'break'
      shiftT(87);                   // 'break'
      break;
    case 92:                        // 'catch'
      shiftT(92);                   // 'catch'
      break;
    case 99:                        // 'construction'
      shiftT(99);                   // 'construction'
      break;
    case 102:                       // 'context'
      shiftT(102);                  // 'context'
      break;
    case 103:                       // 'continue'
      shiftT(103);                  // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shiftT(105);                  // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shiftT(107);                  // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shiftT(126);                  // 'encoding'
      break;
    case 133:                       // 'exit'
      shiftT(133);                  // 'exit'
      break;
    case 134:                       // 'external'
      shiftT(134);                  // 'external'
      break;
    case 143:                       // 'ft-option'
      shiftT(143);                  // 'ft-option'
      break;
    case 156:                       // 'in'
      shiftT(156);                  // 'in'
      break;
    case 157:                       // 'index'
      shiftT(157);                  // 'index'
      break;
    case 163:                       // 'integrity'
      shiftT(163);                  // 'integrity'
      break;
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    case 195:                       // 'nodes'
      shiftT(195);                  // 'nodes'
      break;
    case 203:                       // 'option'
      shiftT(203);                  // 'option'
      break;
    case 207:                       // 'ordering'
      shiftT(207);                  // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shiftT(226);                  // 'revalidation'
      break;
    case 229:                       // 'schema'
      shiftT(229);                  // 'schema'
      break;
    case 232:                       // 'score'
      shiftT(232);                  // 'score'
      break;
    case 239:                       // 'sliding'
      shiftT(239);                  // 'sliding'
      break;
    case 245:                       // 'strict'
      shiftT(245);                  // 'strict'
      break;
    case 257:                       // 'tumbling'
      shiftT(257);                  // 'tumbling'
      break;
    case 258:                       // 'type'
      shiftT(258);                  // 'type'
      break;
    case 263:                       // 'updating'
      shiftT(263);                  // 'updating'
      break;
    case 267:                       // 'value'
      shiftT(267);                  // 'value'
      break;
    case 268:                       // 'variable'
      shiftT(268);                  // 'variable'
      break;
    case 269:                       // 'version'
      shiftT(269);                  // 'version'
      break;
    case 273:                       // 'while'
      shiftT(273);                  // 'while'
      break;
    case 98:                        // 'constraint'
      shiftT(98);                   // 'constraint'
      break;
    case 179:                       // 'loop'
      shiftT(179);                  // 'loop'
      break;
    case 225:                       // 'returning'
      shiftT(225);                  // 'returning'
      break;
    case 78:                        // 'append'
      shiftT(78);                   // 'append'
      break;
    case 135:                       // 'false'
      shiftT(135);                  // 'false'
      break;
    case 142:                       // 'from'
      shiftT(142);                  // 'from'
      break;
    case 197:                       // 'null'
      shiftT(197);                  // 'null'
      break;
    case 168:                       // 'json'
      shiftT(168);                  // 'json'
      break;
    case 198:                       // 'object'
      shiftT(198);                  // 'object'
      break;
    case 233:                       // 'select'
      shiftT(233);                  // 'select'
      break;
    default:
      shiftT(255);                  // 'true'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      shift(19);                    // NCName^Token
      break;
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 76:                        // 'and'
      shift(76);                    // 'and'
      break;
    case 80:                        // 'as'
      shift(80);                    // 'as'
      break;
    case 81:                        // 'ascending'
      shift(81);                    // 'ascending'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    case 89:                        // 'case'
      shift(89);                    // 'case'
      break;
    case 90:                        // 'cast'
      shift(90);                    // 'cast'
      break;
    case 91:                        // 'castable'
      shift(91);                    // 'castable'
      break;
    case 95:                        // 'collation'
      shift(95);                    // 'collation'
      break;
    case 106:                       // 'count'
      shift(106);                   // 'count'
      break;
    case 110:                       // 'default'
      shift(110);                   // 'default'
      break;
    case 114:                       // 'descending'
      shift(114);                   // 'descending'
      break;
    case 119:                       // 'div'
      shift(119);                   // 'div'
      break;
    case 123:                       // 'else'
      shift(123);                   // 'else'
      break;
    case 124:                       // 'empty'
      shift(124);                   // 'empty'
      break;
    case 127:                       // 'end'
      shift(127);                   // 'end'
      break;
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 132:                       // 'except'
      shift(132);                   // 'except'
      break;
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    case 148:                       // 'ge'
      shift(148);                   // 'ge'
      break;
    case 150:                       // 'group'
      shift(150);                   // 'group'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    case 153:                       // 'idiv'
      shift(153);                   // 'idiv'
      break;
    case 162:                       // 'instance'
      shift(162);                   // 'instance'
      break;
    case 164:                       // 'intersect'
      shift(164);                   // 'intersect'
      break;
    case 165:                       // 'into'
      shift(165);                   // 'into'
      break;
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 177:                       // 'let'
      shift(177);                   // 'let'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 183:                       // 'mod'
      shift(183);                   // 'mod'
      break;
    case 184:                       // 'modify'
      shift(184);                   // 'modify'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 202:                       // 'only'
      shift(202);                   // 'only'
      break;
    case 204:                       // 'or'
      shift(204);                   // 'or'
      break;
    case 205:                       // 'order'
      shift(205);                   // 'order'
      break;
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    case 228:                       // 'satisfies'
      shift(228);                   // 'satisfies'
      break;
    case 241:                       // 'stable'
      shift(241);                   // 'stable'
      break;
    case 242:                       // 'start'
      shift(242);                   // 'start'
      break;
    case 253:                       // 'to'
      shift(253);                   // 'to'
      break;
    case 254:                       // 'treat'
      shift(254);                   // 'treat'
      break;
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    case 272:                       // 'where'
      shift(272);                   // 'where'
      break;
    case 276:                       // 'with'
      shift(276);                   // 'with'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shift(75);                    // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      break;
    case 94:                        // 'child'
      shift(94);                    // 'child'
      break;
    case 97:                        // 'comment'
      shift(97);                    // 'comment'
      break;
    case 104:                       // 'copy'
      shift(104);                   // 'copy'
      break;
    case 109:                       // 'declare'
      shift(109);                   // 'declare'
      break;
    case 111:                       // 'delete'
      shift(111);                   // 'delete'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      shift(120);                   // 'document'
      break;
    case 121:                       // 'document-node'
      shift(121);                   // 'document-node'
      break;
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shift(125);                   // 'empty-sequence'
      break;
    case 130:                       // 'every'
      shift(130);                   // 'every'
      break;
    case 136:                       // 'first'
      shift(136);                   // 'first'
      break;
    case 137:                       // 'following'
      shift(137);                   // 'following'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      break;
    case 147:                       // 'function'
      shift(147);                   // 'function'
      break;
    case 154:                       // 'if'
      shift(154);                   // 'if'
      break;
    case 155:                       // 'import'
      shift(155);                   // 'import'
      break;
    case 161:                       // 'insert'
      shift(161);                   // 'insert'
      break;
    case 167:                       // 'item'
      shift(167);                   // 'item'
      break;
    case 173:                       // 'last'
      shift(173);                   // 'last'
      break;
    case 185:                       // 'module'
      shift(185);                   // 'module'
      break;
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      break;
    case 188:                       // 'namespace-node'
      shift(188);                   // 'namespace-node'
      break;
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      break;
    case 220:                       // 'processing-instruction'
      shift(220);                   // 'processing-instruction'
      break;
    case 222:                       // 'rename'
      shift(222);                   // 'rename'
      break;
    case 223:                       // 'replace'
      shift(223);                   // 'replace'
      break;
    case 230:                       // 'schema-attribute'
      shift(230);                   // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shift(231);                   // 'schema-element'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      break;
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    case 248:                       // 'switch'
      shift(248);                   // 'switch'
      break;
    case 249:                       // 'text'
      shift(249);                   // 'text'
      break;
    case 256:                       // 'try'
      shift(256);                   // 'try'
      break;
    case 259:                       // 'typeswitch'
      shift(259);                   // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      shift(262);                   // 'unordered'
      break;
    case 266:                       // 'validate'
      shift(266);                   // 'validate'
      break;
    case 268:                       // 'variable'
      shift(268);                   // 'variable'
      break;
    case 170:                       // 'jsoniq'
      shift(170);                   // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shift(73);                    // 'allowing'
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      break;
    case 84:                        // 'base-uri'
      shift(84);                    // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shift(86);                    // 'boundary-space'
      break;
    case 87:                        // 'break'
      shift(87);                    // 'break'
      break;
    case 92:                        // 'catch'
      shift(92);                    // 'catch'
      break;
    case 99:                        // 'construction'
      shift(99);                    // 'construction'
      break;
    case 102:                       // 'context'
      shift(102);                   // 'context'
      break;
    case 103:                       // 'continue'
      shift(103);                   // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shift(105);                   // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      break;
    case 133:                       // 'exit'
      shift(133);                   // 'exit'
      break;
    case 134:                       // 'external'
      shift(134);                   // 'external'
      break;
    case 143:                       // 'ft-option'
      shift(143);                   // 'ft-option'
      break;
    case 156:                       // 'in'
      shift(156);                   // 'in'
      break;
    case 157:                       // 'index'
      shift(157);                   // 'index'
      break;
    case 163:                       // 'integrity'
      shift(163);                   // 'integrity'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    case 195:                       // 'nodes'
      shift(195);                   // 'nodes'
      break;
    case 203:                       // 'option'
      shift(203);                   // 'option'
      break;
    case 207:                       // 'ordering'
      shift(207);                   // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shift(226);                   // 'revalidation'
      break;
    case 229:                       // 'schema'
      shift(229);                   // 'schema'
      break;
    case 232:                       // 'score'
      shift(232);                   // 'score'
      break;
    case 239:                       // 'sliding'
      shift(239);                   // 'sliding'
      break;
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 257:                       // 'tumbling'
      shift(257);                   // 'tumbling'
      break;
    case 258:                       // 'type'
      shift(258);                   // 'type'
      break;
    case 263:                       // 'updating'
      shift(263);                   // 'updating'
      break;
    case 267:                       // 'value'
      shift(267);                   // 'value'
      break;
    case 269:                       // 'version'
      shift(269);                   // 'version'
      break;
    case 273:                       // 'while'
      shift(273);                   // 'while'
      break;
    case 98:                        // 'constraint'
      shift(98);                    // 'constraint'
      break;
    case 179:                       // 'loop'
      shift(179);                   // 'loop'
      break;
    case 225:                       // 'returning'
      shift(225);                   // 'returning'
      break;
    case 78:                        // 'append'
      shift(78);                    // 'append'
      break;
    case 135:                       // 'false'
      shift(135);                   // 'false'
      break;
    case 142:                       // 'from'
      shift(142);                   // 'from'
      break;
    case 197:                       // 'null'
      shift(197);                   // 'null'
      break;
    case 168:                       // 'json'
      shift(168);                   // 'json'
      break;
    case 198:                       // 'object'
      shift(198);                   // 'object'
      break;
    case 233:                       // 'select'
      shift(233);                   // 'select'
      break;
    default:
      shift(255);                   // 'true'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      shiftT(19);                   // NCName^Token
      break;
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 76:                        // 'and'
      shiftT(76);                   // 'and'
      break;
    case 80:                        // 'as'
      shiftT(80);                   // 'as'
      break;
    case 81:                        // 'ascending'
      shiftT(81);                   // 'ascending'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      break;
    case 90:                        // 'cast'
      shiftT(90);                   // 'cast'
      break;
    case 91:                        // 'castable'
      shiftT(91);                   // 'castable'
      break;
    case 95:                        // 'collation'
      shiftT(95);                   // 'collation'
      break;
    case 106:                       // 'count'
      shiftT(106);                  // 'count'
      break;
    case 110:                       // 'default'
      shiftT(110);                  // 'default'
      break;
    case 114:                       // 'descending'
      shiftT(114);                  // 'descending'
      break;
    case 119:                       // 'div'
      shiftT(119);                  // 'div'
      break;
    case 123:                       // 'else'
      shiftT(123);                  // 'else'
      break;
    case 124:                       // 'empty'
      shiftT(124);                  // 'empty'
      break;
    case 127:                       // 'end'
      shiftT(127);                  // 'end'
      break;
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 132:                       // 'except'
      shiftT(132);                  // 'except'
      break;
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    case 148:                       // 'ge'
      shiftT(148);                  // 'ge'
      break;
    case 150:                       // 'group'
      shiftT(150);                  // 'group'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    case 153:                       // 'idiv'
      shiftT(153);                  // 'idiv'
      break;
    case 162:                       // 'instance'
      shiftT(162);                  // 'instance'
      break;
    case 164:                       // 'intersect'
      shiftT(164);                  // 'intersect'
      break;
    case 165:                       // 'into'
      shiftT(165);                  // 'into'
      break;
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 177:                       // 'let'
      shiftT(177);                  // 'let'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 183:                       // 'mod'
      shiftT(183);                  // 'mod'
      break;
    case 184:                       // 'modify'
      shiftT(184);                  // 'modify'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 202:                       // 'only'
      shiftT(202);                  // 'only'
      break;
    case 204:                       // 'or'
      shiftT(204);                  // 'or'
      break;
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      break;
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    case 228:                       // 'satisfies'
      shiftT(228);                  // 'satisfies'
      break;
    case 241:                       // 'stable'
      shiftT(241);                  // 'stable'
      break;
    case 242:                       // 'start'
      shiftT(242);                  // 'start'
      break;
    case 253:                       // 'to'
      shiftT(253);                  // 'to'
      break;
    case 254:                       // 'treat'
      shiftT(254);                  // 'treat'
      break;
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    case 272:                       // 'where'
      shiftT(272);                  // 'where'
      break;
    case 276:                       // 'with'
      shiftT(276);                  // 'with'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shiftT(75);                   // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      break;
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      break;
    case 97:                        // 'comment'
      shiftT(97);                   // 'comment'
      break;
    case 104:                       // 'copy'
      shiftT(104);                  // 'copy'
      break;
    case 109:                       // 'declare'
      shiftT(109);                  // 'declare'
      break;
    case 111:                       // 'delete'
      shiftT(111);                  // 'delete'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      shiftT(120);                  // 'document'
      break;
    case 121:                       // 'document-node'
      shiftT(121);                  // 'document-node'
      break;
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shiftT(125);                  // 'empty-sequence'
      break;
    case 130:                       // 'every'
      shiftT(130);                  // 'every'
      break;
    case 136:                       // 'first'
      shiftT(136);                  // 'first'
      break;
    case 137:                       // 'following'
      shiftT(137);                  // 'following'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      break;
    case 147:                       // 'function'
      shiftT(147);                  // 'function'
      break;
    case 154:                       // 'if'
      shiftT(154);                  // 'if'
      break;
    case 155:                       // 'import'
      shiftT(155);                  // 'import'
      break;
    case 161:                       // 'insert'
      shiftT(161);                  // 'insert'
      break;
    case 167:                       // 'item'
      shiftT(167);                  // 'item'
      break;
    case 173:                       // 'last'
      shiftT(173);                  // 'last'
      break;
    case 185:                       // 'module'
      shiftT(185);                  // 'module'
      break;
    case 187:                       // 'namespace'
      shiftT(187);                  // 'namespace'
      break;
    case 188:                       // 'namespace-node'
      shiftT(188);                  // 'namespace-node'
      break;
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    case 206:                       // 'ordered'
      shiftT(206);                  // 'ordered'
      break;
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      break;
    case 220:                       // 'processing-instruction'
      shiftT(220);                  // 'processing-instruction'
      break;
    case 222:                       // 'rename'
      shiftT(222);                  // 'rename'
      break;
    case 223:                       // 'replace'
      shiftT(223);                  // 'replace'
      break;
    case 230:                       // 'schema-attribute'
      shiftT(230);                  // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shiftT(231);                  // 'schema-element'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      break;
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    case 248:                       // 'switch'
      shiftT(248);                  // 'switch'
      break;
    case 249:                       // 'text'
      shiftT(249);                  // 'text'
      break;
    case 256:                       // 'try'
      shiftT(256);                  // 'try'
      break;
    case 259:                       // 'typeswitch'
      shiftT(259);                  // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      shiftT(262);                  // 'unordered'
      break;
    case 266:                       // 'validate'
      shiftT(266);                  // 'validate'
      break;
    case 268:                       // 'variable'
      shiftT(268);                  // 'variable'
      break;
    case 170:                       // 'jsoniq'
      shiftT(170);                  // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shiftT(73);                   // 'allowing'
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      break;
    case 84:                        // 'base-uri'
      shiftT(84);                   // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shiftT(86);                   // 'boundary-space'
      break;
    case 87:                        // 'break'
      shiftT(87);                   // 'break'
      break;
    case 92:                        // 'catch'
      shiftT(92);                   // 'catch'
      break;
    case 99:                        // 'construction'
      shiftT(99);                   // 'construction'
      break;
    case 102:                       // 'context'
      shiftT(102);                  // 'context'
      break;
    case 103:                       // 'continue'
      shiftT(103);                  // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shiftT(105);                  // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shiftT(107);                  // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shiftT(126);                  // 'encoding'
      break;
    case 133:                       // 'exit'
      shiftT(133);                  // 'exit'
      break;
    case 134:                       // 'external'
      shiftT(134);                  // 'external'
      break;
    case 143:                       // 'ft-option'
      shiftT(143);                  // 'ft-option'
      break;
    case 156:                       // 'in'
      shiftT(156);                  // 'in'
      break;
    case 157:                       // 'index'
      shiftT(157);                  // 'index'
      break;
    case 163:                       // 'integrity'
      shiftT(163);                  // 'integrity'
      break;
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    case 195:                       // 'nodes'
      shiftT(195);                  // 'nodes'
      break;
    case 203:                       // 'option'
      shiftT(203);                  // 'option'
      break;
    case 207:                       // 'ordering'
      shiftT(207);                  // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shiftT(226);                  // 'revalidation'
      break;
    case 229:                       // 'schema'
      shiftT(229);                  // 'schema'
      break;
    case 232:                       // 'score'
      shiftT(232);                  // 'score'
      break;
    case 239:                       // 'sliding'
      shiftT(239);                  // 'sliding'
      break;
    case 245:                       // 'strict'
      shiftT(245);                  // 'strict'
      break;
    case 257:                       // 'tumbling'
      shiftT(257);                  // 'tumbling'
      break;
    case 258:                       // 'type'
      shiftT(258);                  // 'type'
      break;
    case 263:                       // 'updating'
      shiftT(263);                  // 'updating'
      break;
    case 267:                       // 'value'
      shiftT(267);                  // 'value'
      break;
    case 269:                       // 'version'
      shiftT(269);                  // 'version'
      break;
    case 273:                       // 'while'
      shiftT(273);                  // 'while'
      break;
    case 98:                        // 'constraint'
      shiftT(98);                   // 'constraint'
      break;
    case 179:                       // 'loop'
      shiftT(179);                  // 'loop'
      break;
    case 225:                       // 'returning'
      shiftT(225);                  // 'returning'
      break;
    case 78:                        // 'append'
      shiftT(78);                   // 'append'
      break;
    case 135:                       // 'false'
      shiftT(135);                  // 'false'
      break;
    case 142:                       // 'from'
      shiftT(142);                  // 'from'
      break;
    case 197:                       // 'null'
      shiftT(197);                  // 'null'
      break;
    case 168:                       // 'json'
      shiftT(168);                  // 'json'
      break;
    case 198:                       // 'object'
      shiftT(198);                  // 'object'
      break;
    case 233:                       // 'select'
      shiftT(233);                  // 'select'
      break;
    default:
      shiftT(255);                  // 'true'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(239);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 47:                      // '/'
        lookahead2W(287);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 48:                      // '//'
        lookahead2W(260);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 69:                      // '['
        lookahead2W(276);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 78:                      // 'append'
        lookahead2W(272);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 133:                     // 'exit'
        lookahead2W(147);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 161:                     // 'insert'
        lookahead2W(285);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 177:                     // 'let'
        lookahead2W(168);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 187:                     // 'namespace'
        lookahead2W(259);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 196:                     // 'not'
        lookahead2W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
        break;
      case 220:                     // 'processing-instruction'
        lookahead2W(251);           // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        lookahead2W(181);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        lookahead2W(190);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 281:                     // '{'
        lookahead2W(289);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
        break;
      case 283:                     // '{|'
        lookahead2W(277);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        lookahead2W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        lookahead2W(242);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(145);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        lookahead2W(88);            // S^WS | '(:' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        lookahead2W(264);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
        break;
      case 139:                     // 'for'
      case 142:                     // 'from'
        lookahead2W(180);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(143);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(148);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 147:                     // 'function'
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        lookahead2W(22);            // S^WS | '(' | '(:'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 32:                      // '$$'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 143:                     // 'ft-option'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        lookahead2W(93);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 54                  // ';'
       && lk != 287                 // '}'
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12832               // '$$' EOF
       && lk != 12847               // '/' EOF
       && lk != 12935               // 'false' EOF
       && lk != 12997               // 'null' EOF
       && lk != 13055               // 'true' EOF
       && lk != 16140               // 'variable' '$'
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21536               // '$$' ','
       && lk != 21551               // '/' ','
       && lk != 21639               // 'false' ','
       && lk != 21701               // 'null' ','
       && lk != 21759               // 'true' ','
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333              // 'exit' 'returning'
       && lk != 146952              // IntegerLiteral '}'
       && lk != 146953              // DecimalLiteral '}'
       && lk != 146954              // DoubleLiteral '}'
       && lk != 146955              // StringLiteral '}'
       && lk != 146976              // '$$' '}'
       && lk != 146991              // '/' '}'
       && lk != 147079              // 'false' '}'
       && lk != 147141              // 'null' '}'
       && lk != 147199)             // 'true' '}'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16140               // 'variable' '$'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(239);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 47:                      // '/'
        lookahead2W(287);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '!' | '!=' | '$' | '$$' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' |
                                    // ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 48:                      // '//'
        lookahead2W(260);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 69:                      // '['
        lookahead2W(276);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 78:                      // 'append'
        lookahead2W(272);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 133:                     // 'exit'
        lookahead2W(147);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 161:                     // 'insert'
        lookahead2W(285);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
        break;
      case 177:                     // 'let'
        lookahead2W(168);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 187:                     // 'namespace'
        lookahead2W(259);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 196:                     // 'not'
        lookahead2W(268);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
        break;
      case 220:                     // 'processing-instruction'
        lookahead2W(251);           // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
        break;
      case 223:                     // 'replace'
        lookahead2W(181);           // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        lookahead2W(190);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 281:                     // '{'
        lookahead2W(289);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
        break;
      case 283:                     // '{|'
        lookahead2W(277);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|}'
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        lookahead2W(240);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        lookahead2W(242);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(145);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        lookahead2W(88);            // S^WS | '(:' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        lookahead2W(264);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
        break;
      case 139:                     // 'for'
      case 142:                     // 'from'
        lookahead2W(180);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(143);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(148);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 147:                     // 'function'
      case 154:                     // 'if'
      case 248:                     // 'switch'
      case 259:                     // 'typeswitch'
        lookahead2W(22);            // S^WS | '(' | '(:'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 32:                      // '$$'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 143:                     // 'ft-option'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        lookahead2W(93);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 54                  // ';'
       && lk != 287                 // '}'
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12832               // '$$' EOF
       && lk != 12847               // '/' EOF
       && lk != 12935               // 'false' EOF
       && lk != 12997               // 'null' EOF
       && lk != 13055               // 'true' EOF
       && lk != 16140               // 'variable' '$'
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21536               // '$$' ','
       && lk != 21551               // '/' ','
       && lk != 21639               // 'false' ','
       && lk != 21701               // 'null' ','
       && lk != 21759               // 'true' ','
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333              // 'exit' 'returning'
       && lk != 146952              // IntegerLiteral '}'
       && lk != 146953              // DecimalLiteral '}'
       && lk != 146954              // DoubleLiteral '}'
       && lk != 146955              // StringLiteral '}'
       && lk != 146976              // '$$' '}'
       && lk != 146991              // '/' '}'
       && lk != 147079              // 'false' '}'
       && lk != 147141              // 'null' '}'
       && lk != 147199)             // 'true' '}'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(7, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16140               // 'variable' '$'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 287)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 287)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(147);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 177:                       // 'let'
      lookahead2W(168);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 268:                       // 'variable'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 273:                       // 'while'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    case 281:                       // '{'
      lookahead2W(289);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 33:                        // '%'
      lookahead2W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(145);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(180);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk != 6                     // EQName^Token
     && lk != 8                     // IntegerLiteral
     && lk != 9                     // DecimalLiteral
     && lk != 10                    // DoubleLiteral
     && lk != 11                    // StringLiteral
     && lk != 32                    // '$$'
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 47                    // '/'
     && lk != 48                    // '//'
     && lk != 54                    // ';'
     && lk != 55                    // '<'
     && lk != 56                    // '<!--'
     && lk != 60                    // '<?'
     && lk != 69                    // '['
     && lk != 71                    // 'after'
     && lk != 73                    // 'allowing'
     && lk != 74                    // 'ancestor'
     && lk != 75                    // 'ancestor-or-self'
     && lk != 76                    // 'and'
     && lk != 78                    // 'append'
     && lk != 80                    // 'as'
     && lk != 81                    // 'ascending'
     && lk != 82                    // 'at'
     && lk != 83                    // 'attribute'
     && lk != 84                    // 'base-uri'
     && lk != 85                    // 'before'
     && lk != 86                    // 'boundary-space'
     && lk != 89                    // 'case'
     && lk != 90                    // 'cast'
     && lk != 91                    // 'castable'
     && lk != 92                    // 'catch'
     && lk != 94                    // 'child'
     && lk != 95                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 98                    // 'constraint'
     && lk != 99                    // 'construction'
     && lk != 102                   // 'context'
     && lk != 104                   // 'copy'
     && lk != 105                   // 'copy-namespaces'
     && lk != 106                   // 'count'
     && lk != 107                   // 'decimal-format'
     && lk != 109                   // 'declare'
     && lk != 110                   // 'default'
     && lk != 111                   // 'delete'
     && lk != 112                   // 'descendant'
     && lk != 113                   // 'descendant-or-self'
     && lk != 114                   // 'descending'
     && lk != 119                   // 'div'
     && lk != 120                   // 'document'
     && lk != 122                   // 'element'
     && lk != 123                   // 'else'
     && lk != 124                   // 'empty'
     && lk != 126                   // 'encoding'
     && lk != 127                   // 'end'
     && lk != 129                   // 'eq'
     && lk != 130                   // 'every'
     && lk != 132                   // 'except'
     && lk != 134                   // 'external'
     && lk != 135                   // 'false'
     && lk != 136                   // 'first'
     && lk != 137                   // 'following'
     && lk != 138                   // 'following-sibling'
     && lk != 143                   // 'ft-option'
     && lk != 147                   // 'function'
     && lk != 148                   // 'ge'
     && lk != 150                   // 'group'
     && lk != 152                   // 'gt'
     && lk != 153                   // 'idiv'
     && lk != 154                   // 'if'
     && lk != 155                   // 'import'
     && lk != 156                   // 'in'
     && lk != 157                   // 'index'
     && lk != 161                   // 'insert'
     && lk != 162                   // 'instance'
     && lk != 163                   // 'integrity'
     && lk != 164                   // 'intersect'
     && lk != 165                   // 'into'
     && lk != 166                   // 'is'
     && lk != 168                   // 'json'
     && lk != 170                   // 'jsoniq'
     && lk != 173                   // 'last'
     && lk != 174                   // 'lax'
     && lk != 175                   // 'le'
     && lk != 179                   // 'loop'
     && lk != 181                   // 'lt'
     && lk != 183                   // 'mod'
     && lk != 184                   // 'modify'
     && lk != 185                   // 'module'
     && lk != 187                   // 'namespace'
     && lk != 189                   // 'ne'
     && lk != 195                   // 'nodes'
     && lk != 196                   // 'not'
     && lk != 197                   // 'null'
     && lk != 198                   // 'object'
     && lk != 202                   // 'only'
     && lk != 203                   // 'option'
     && lk != 204                   // 'or'
     && lk != 205                   // 'order'
     && lk != 206                   // 'ordered'
     && lk != 207                   // 'ordering'
     && lk != 210                   // 'parent'
     && lk != 216                   // 'preceding'
     && lk != 217                   // 'preceding-sibling'
     && lk != 220                   // 'processing-instruction'
     && lk != 222                   // 'rename'
     && lk != 223                   // 'replace'
     && lk != 224                   // 'return'
     && lk != 225                   // 'returning'
     && lk != 226                   // 'revalidation'
     && lk != 228                   // 'satisfies'
     && lk != 229                   // 'schema'
     && lk != 232                   // 'score'
     && lk != 233                   // 'select'
     && lk != 234                   // 'self'
     && lk != 239                   // 'sliding'
     && lk != 240                   // 'some'
     && lk != 241                   // 'stable'
     && lk != 242                   // 'start'
     && lk != 245                   // 'strict'
     && lk != 248                   // 'switch'
     && lk != 249                   // 'text'
     && lk != 253                   // 'to'
     && lk != 254                   // 'treat'
     && lk != 255                   // 'true'
     && lk != 257                   // 'tumbling'
     && lk != 258                   // 'type'
     && lk != 259                   // 'typeswitch'
     && lk != 260                   // 'union'
     && lk != 262                   // 'unordered'
     && lk != 263                   // 'updating'
     && lk != 266                   // 'validate'
     && lk != 267                   // 'value'
     && lk != 269                   // 'version'
     && lk != 272                   // 'where'
     && lk != 276                   // 'with'
     && lk != 283                   // '{|'
     && lk != 10009                 // '{' NCName^Token
     && lk != 14935                 // 'break' '#'
     && lk != 14951                 // 'continue' '#'
     && lk != 14981                 // 'exit' '#'
     && lk != 14987                 // 'for' '#'
     && lk != 14990                 // 'from' '#'
     && lk != 15025                 // 'let' '#'
     && lk != 15104                 // 'try' '#'
     && lk != 15116                 // 'variable' '#'
     && lk != 15121                 // 'while' '#'
     && lk != 16011                 // 'for' '$'
     && lk != 16014                 // 'from' '$'
     && lk != 16049                 // 'let' '$'
     && lk != 16140                 // 'variable' '$'
     && lk != 18007                 // 'break' '('
     && lk != 18023                 // 'continue' '('
     && lk != 18053                 // 'exit' '('
     && lk != 18059                 // 'for' '('
     && lk != 18062                 // 'from' '('
     && lk != 18097                 // 'let' '('
     && lk != 18176                 // 'try' '('
     && lk != 18188                 // 'variable' '('
     && lk != 62233                 // '{' 'document-node'
     && lk != 64281                 // '{' 'empty-sequence'
     && lk != 85785                 // '{' 'item'
     && lk != 91735                 // 'break' 'loop'
     && lk != 91751                 // 'continue' 'loop'
     && lk != 96537                 // '{' 'namespace-node'
     && lk != 99609                 // '{' 'node'
     && lk != 115333                // 'exit' 'returning'
     && lk != 118041                // '{' 'schema-attribute'
     && lk != 118553                // '{' 'schema-element'
     && lk != 118961                // 'let' 'score'
     && lk != 122507                // 'for' 'sliding'
     && lk != 122510                // 'from' 'sliding'
     && lk != 131723                // 'for' 'tumbling'
     && lk != 131726                // 'from' 'tumbling'
     && lk != 144128                // 'try' '{'
     && lk != 147225)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 91735:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 91751:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 115333:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      parse_FLWORStatement();
      break;
    case 154:                       // 'if'
      parse_IfStatement();
      break;
    case 248:                       // 'switch'
      parse_SwitchStatement();
      break;
    case 144128:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 259:                       // 'typeswitch'
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16140:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 54:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(147);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 177:                       // 'let'
      lookahead2W(168);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 268:                       // 'variable'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 273:                       // 'while'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    case 281:                       // '{'
      lookahead2W(289);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 33:                        // '%'
      lookahead2W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(145);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(180);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    if (lk != 6                     // EQName^Token
     && lk != 8                     // IntegerLiteral
     && lk != 9                     // DecimalLiteral
     && lk != 10                    // DoubleLiteral
     && lk != 11                    // StringLiteral
     && lk != 32                    // '$$'
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 47                    // '/'
     && lk != 48                    // '//'
     && lk != 54                    // ';'
     && lk != 55                    // '<'
     && lk != 56                    // '<!--'
     && lk != 60                    // '<?'
     && lk != 69                    // '['
     && lk != 71                    // 'after'
     && lk != 73                    // 'allowing'
     && lk != 74                    // 'ancestor'
     && lk != 75                    // 'ancestor-or-self'
     && lk != 76                    // 'and'
     && lk != 78                    // 'append'
     && lk != 80                    // 'as'
     && lk != 81                    // 'ascending'
     && lk != 82                    // 'at'
     && lk != 83                    // 'attribute'
     && lk != 84                    // 'base-uri'
     && lk != 85                    // 'before'
     && lk != 86                    // 'boundary-space'
     && lk != 89                    // 'case'
     && lk != 90                    // 'cast'
     && lk != 91                    // 'castable'
     && lk != 92                    // 'catch'
     && lk != 94                    // 'child'
     && lk != 95                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 98                    // 'constraint'
     && lk != 99                    // 'construction'
     && lk != 102                   // 'context'
     && lk != 104                   // 'copy'
     && lk != 105                   // 'copy-namespaces'
     && lk != 106                   // 'count'
     && lk != 107                   // 'decimal-format'
     && lk != 109                   // 'declare'
     && lk != 110                   // 'default'
     && lk != 111                   // 'delete'
     && lk != 112                   // 'descendant'
     && lk != 113                   // 'descendant-or-self'
     && lk != 114                   // 'descending'
     && lk != 119                   // 'div'
     && lk != 120                   // 'document'
     && lk != 122                   // 'element'
     && lk != 123                   // 'else'
     && lk != 124                   // 'empty'
     && lk != 126                   // 'encoding'
     && lk != 127                   // 'end'
     && lk != 129                   // 'eq'
     && lk != 130                   // 'every'
     && lk != 132                   // 'except'
     && lk != 134                   // 'external'
     && lk != 135                   // 'false'
     && lk != 136                   // 'first'
     && lk != 137                   // 'following'
     && lk != 138                   // 'following-sibling'
     && lk != 143                   // 'ft-option'
     && lk != 147                   // 'function'
     && lk != 148                   // 'ge'
     && lk != 150                   // 'group'
     && lk != 152                   // 'gt'
     && lk != 153                   // 'idiv'
     && lk != 154                   // 'if'
     && lk != 155                   // 'import'
     && lk != 156                   // 'in'
     && lk != 157                   // 'index'
     && lk != 161                   // 'insert'
     && lk != 162                   // 'instance'
     && lk != 163                   // 'integrity'
     && lk != 164                   // 'intersect'
     && lk != 165                   // 'into'
     && lk != 166                   // 'is'
     && lk != 168                   // 'json'
     && lk != 170                   // 'jsoniq'
     && lk != 173                   // 'last'
     && lk != 174                   // 'lax'
     && lk != 175                   // 'le'
     && lk != 179                   // 'loop'
     && lk != 181                   // 'lt'
     && lk != 183                   // 'mod'
     && lk != 184                   // 'modify'
     && lk != 185                   // 'module'
     && lk != 187                   // 'namespace'
     && lk != 189                   // 'ne'
     && lk != 195                   // 'nodes'
     && lk != 196                   // 'not'
     && lk != 197                   // 'null'
     && lk != 198                   // 'object'
     && lk != 202                   // 'only'
     && lk != 203                   // 'option'
     && lk != 204                   // 'or'
     && lk != 205                   // 'order'
     && lk != 206                   // 'ordered'
     && lk != 207                   // 'ordering'
     && lk != 210                   // 'parent'
     && lk != 216                   // 'preceding'
     && lk != 217                   // 'preceding-sibling'
     && lk != 220                   // 'processing-instruction'
     && lk != 222                   // 'rename'
     && lk != 223                   // 'replace'
     && lk != 224                   // 'return'
     && lk != 225                   // 'returning'
     && lk != 226                   // 'revalidation'
     && lk != 228                   // 'satisfies'
     && lk != 229                   // 'schema'
     && lk != 232                   // 'score'
     && lk != 233                   // 'select'
     && lk != 234                   // 'self'
     && lk != 239                   // 'sliding'
     && lk != 240                   // 'some'
     && lk != 241                   // 'stable'
     && lk != 242                   // 'start'
     && lk != 245                   // 'strict'
     && lk != 248                   // 'switch'
     && lk != 249                   // 'text'
     && lk != 253                   // 'to'
     && lk != 254                   // 'treat'
     && lk != 255                   // 'true'
     && lk != 257                   // 'tumbling'
     && lk != 258                   // 'type'
     && lk != 259                   // 'typeswitch'
     && lk != 260                   // 'union'
     && lk != 262                   // 'unordered'
     && lk != 263                   // 'updating'
     && lk != 266                   // 'validate'
     && lk != 267                   // 'value'
     && lk != 269                   // 'version'
     && lk != 272                   // 'where'
     && lk != 276                   // 'with'
     && lk != 283                   // '{|'
     && lk != 10009                 // '{' NCName^Token
     && lk != 14935                 // 'break' '#'
     && lk != 14951                 // 'continue' '#'
     && lk != 14981                 // 'exit' '#'
     && lk != 14987                 // 'for' '#'
     && lk != 14990                 // 'from' '#'
     && lk != 15025                 // 'let' '#'
     && lk != 15104                 // 'try' '#'
     && lk != 15116                 // 'variable' '#'
     && lk != 15121                 // 'while' '#'
     && lk != 16011                 // 'for' '$'
     && lk != 16014                 // 'from' '$'
     && lk != 16049                 // 'let' '$'
     && lk != 16140                 // 'variable' '$'
     && lk != 18007                 // 'break' '('
     && lk != 18023                 // 'continue' '('
     && lk != 18053                 // 'exit' '('
     && lk != 18059                 // 'for' '('
     && lk != 18062                 // 'from' '('
     && lk != 18097                 // 'let' '('
     && lk != 18176                 // 'try' '('
     && lk != 18188                 // 'variable' '('
     && lk != 62233                 // '{' 'document-node'
     && lk != 64281                 // '{' 'empty-sequence'
     && lk != 85785                 // '{' 'item'
     && lk != 91735                 // 'break' 'loop'
     && lk != 91751                 // 'continue' 'loop'
     && lk != 96537                 // '{' 'namespace-node'
     && lk != 99609                 // '{' 'node'
     && lk != 115333                // 'exit' 'returning'
     && lk != 118041                // '{' 'schema-attribute'
     && lk != 118553                // '{' 'schema-element'
     && lk != 118961                // 'let' 'score'
     && lk != 122507                // 'for' 'sliding'
     && lk != 122510                // 'from' 'sliding'
     && lk != 131723                // 'for' 'tumbling'
     && lk != 131726                // 'from' 'tumbling'
     && lk != 144128                // 'try' '{'
     && lk != 147225)               // '{' '}'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(8, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(8, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(8, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(8, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(8, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 91735:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 91751:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 115333:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      try_FLWORStatement();
      break;
    case 154:                       // 'if'
      try_IfStatement();
      break;
    case 248:                       // 'switch'
      try_SwitchStatement();
      break;
    case 144128:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 259:                       // 'typeswitch'
      try_TypeswitchStatement();
      break;
    case -12:
    case 16140:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 54:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(54);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(54);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(54);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    shiftT(54);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(281);                     // '{'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    shift(287);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(281);                    // '{'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    try_Statements();
    shiftT(287);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(87);                      // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shift(179);                     // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shift(54);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(87);                     // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shiftT(179);                    // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shiftT(54);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(103);                     // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shift(179);                     // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shift(54);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(103);                    // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    shiftT(179);                    // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shiftT(54);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(133);                     // 'exit'
    lookahead1W(72);                // S^WS | '(:' | 'returning'
    shift(225);                     // 'returning'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(54);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(133);                    // 'exit'
    lookahead1W(72);                // S^WS | '(:' | 'returning'
    shiftT(225);                    // 'returning'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    shiftT(54);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(201);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(201);             // S^WS | '(:' | 'count' | 'for' | 'from' | 'group' | 'let' | 'order' | 'return' |
                                    // 'select' | 'stable' | 'where'
      if (l1 == 224                 // 'return'
       || l1 == 233)                // 'select'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(154);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shift(250);                     // 'then'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(51);                // S^WS | '(:' | 'else'
    shift(123);                     // 'else'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(154);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(78);                // S^WS | '(:' | 'then'
    shiftT(250);                    // 'then'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
    lookahead1W(51);                // S^WS | '(:' | 'else'
    shiftT(123);                    // 'else'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(248);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(116);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(248);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(116);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(89);                    // 'case'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(89);                   // 'case'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(256);                     // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      shift(92);                    // 'catch'
      lookahead1W(241);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(246);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'constraint' | 'construction' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'else' | 'empty' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with'
        break;
      default:
        lk = l1;
      }
      if (lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 39004               // 'catch' 'and'
       && lk != 40028               // 'catch' 'append'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 46172               // 'catch' 'cast'
       && lk != 46684               // 'catch' 'castable'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61020               // 'catch' 'div'
       && lk != 61532               // 'catch' 'document'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66140               // 'catch' 'eq'
       && lk != 66652               // 'catch' 'every'
       && lk != 67676               // 'catch' 'except'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'false'
       && lk != 69724               // 'catch' 'first'
       && lk != 70236               // 'catch' 'following'
       && lk != 70748               // 'catch' 'following-sibling'
       && lk != 71260               // 'catch' 'for'
       && lk != 72796               // 'catch' 'from'
       && lk != 73308               // 'catch' 'ft-option'
       && lk != 75868               // 'catch' 'ge'
       && lk != 76892               // 'catch' 'group'
       && lk != 77916               // 'catch' 'gt'
       && lk != 78428               // 'catch' 'idiv'
       && lk != 79452               // 'catch' 'import'
       && lk != 79964               // 'catch' 'in'
       && lk != 80476               // 'catch' 'index'
       && lk != 82524               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'instance'
       && lk != 83548               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'intersect'
       && lk != 84572               // 'catch' 'into'
       && lk != 85084               // 'catch' 'is'
       && lk != 86108               // 'catch' 'json'
       && lk != 87132               // 'catch' 'jsoniq'
       && lk != 88668               // 'catch' 'last'
       && lk != 89180               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'le'
       && lk != 90716               // 'catch' 'let'
       && lk != 91740               // 'catch' 'loop'
       && lk != 92764               // 'catch' 'lt'
       && lk != 93788               // 'catch' 'mod'
       && lk != 94300               // 'catch' 'modify'
       && lk != 94812               // 'catch' 'module'
       && lk != 95836               // 'catch' 'namespace'
       && lk != 96860               // 'catch' 'ne'
       && lk != 99932               // 'catch' 'nodes'
       && lk != 100956              // 'catch' 'null'
       && lk != 101468              // 'catch' 'object'
       && lk != 103516              // 'catch' 'only'
       && lk != 104028              // 'catch' 'option'
       && lk != 104540              // 'catch' 'or'
       && lk != 105052              // 'catch' 'order'
       && lk != 105564              // 'catch' 'ordered'
       && lk != 106076              // 'catch' 'ordering'
       && lk != 107612              // 'catch' 'parent'
       && lk != 110684              // 'catch' 'preceding'
       && lk != 111196              // 'catch' 'preceding-sibling'
       && lk != 113756              // 'catch' 'rename'
       && lk != 114268              // 'catch' 'replace'
       && lk != 114780              // 'catch' 'return'
       && lk != 115292              // 'catch' 'returning'
       && lk != 115804              // 'catch' 'revalidation'
       && lk != 116828              // 'catch' 'satisfies'
       && lk != 117340              // 'catch' 'schema'
       && lk != 118876              // 'catch' 'score'
       && lk != 119388              // 'catch' 'select'
       && lk != 119900              // 'catch' 'self'
       && lk != 122460              // 'catch' 'sliding'
       && lk != 122972              // 'catch' 'some'
       && lk != 123484              // 'catch' 'stable'
       && lk != 123996              // 'catch' 'start'
       && lk != 125532              // 'catch' 'strict'
       && lk != 129628              // 'catch' 'to'
       && lk != 130140              // 'catch' 'treat'
       && lk != 130652              // 'catch' 'true'
       && lk != 131164              // 'catch' 'try'
       && lk != 131676              // 'catch' 'tumbling'
       && lk != 132188              // 'catch' 'type'
       && lk != 133212              // 'catch' 'union'
       && lk != 134236              // 'catch' 'unordered'
       && lk != 134748              // 'catch' 'updating'
       && lk != 136284              // 'catch' 'validate'
       && lk != 136796              // 'catch' 'value'
       && lk != 137308              // 'catch' 'variable'
       && lk != 137820              // 'catch' 'version'
       && lk != 139356              // 'catch' 'where'
       && lk != 139868              // 'catch' 'while'
       && lk != 141404)             // 'catch' 'with'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(256);                    // 'try'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      shiftT(92);                   // 'catch'
      lookahead1W(241);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_CatchErrorList();
      try_BlockStatement();
      lookahead1W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | EOF | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(246);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'constraint' | 'construction' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'else' | 'empty' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with'
        break;
      default:
        lk = l1;
      }
      if (lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 39004               // 'catch' 'and'
       && lk != 40028               // 'catch' 'append'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 46172               // 'catch' 'cast'
       && lk != 46684               // 'catch' 'castable'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61020               // 'catch' 'div'
       && lk != 61532               // 'catch' 'document'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66140               // 'catch' 'eq'
       && lk != 66652               // 'catch' 'every'
       && lk != 67676               // 'catch' 'except'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'false'
       && lk != 69724               // 'catch' 'first'
       && lk != 70236               // 'catch' 'following'
       && lk != 70748               // 'catch' 'following-sibling'
       && lk != 71260               // 'catch' 'for'
       && lk != 72796               // 'catch' 'from'
       && lk != 73308               // 'catch' 'ft-option'
       && lk != 75868               // 'catch' 'ge'
       && lk != 76892               // 'catch' 'group'
       && lk != 77916               // 'catch' 'gt'
       && lk != 78428               // 'catch' 'idiv'
       && lk != 79452               // 'catch' 'import'
       && lk != 79964               // 'catch' 'in'
       && lk != 80476               // 'catch' 'index'
       && lk != 82524               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'instance'
       && lk != 83548               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'intersect'
       && lk != 84572               // 'catch' 'into'
       && lk != 85084               // 'catch' 'is'
       && lk != 86108               // 'catch' 'json'
       && lk != 87132               // 'catch' 'jsoniq'
       && lk != 88668               // 'catch' 'last'
       && lk != 89180               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'le'
       && lk != 90716               // 'catch' 'let'
       && lk != 91740               // 'catch' 'loop'
       && lk != 92764               // 'catch' 'lt'
       && lk != 93788               // 'catch' 'mod'
       && lk != 94300               // 'catch' 'modify'
       && lk != 94812               // 'catch' 'module'
       && lk != 95836               // 'catch' 'namespace'
       && lk != 96860               // 'catch' 'ne'
       && lk != 99932               // 'catch' 'nodes'
       && lk != 100956              // 'catch' 'null'
       && lk != 101468              // 'catch' 'object'
       && lk != 103516              // 'catch' 'only'
       && lk != 104028              // 'catch' 'option'
       && lk != 104540              // 'catch' 'or'
       && lk != 105052              // 'catch' 'order'
       && lk != 105564              // 'catch' 'ordered'
       && lk != 106076              // 'catch' 'ordering'
       && lk != 107612              // 'catch' 'parent'
       && lk != 110684              // 'catch' 'preceding'
       && lk != 111196              // 'catch' 'preceding-sibling'
       && lk != 113756              // 'catch' 'rename'
       && lk != 114268              // 'catch' 'replace'
       && lk != 114780              // 'catch' 'return'
       && lk != 115292              // 'catch' 'returning'
       && lk != 115804              // 'catch' 'revalidation'
       && lk != 116828              // 'catch' 'satisfies'
       && lk != 117340              // 'catch' 'schema'
       && lk != 118876              // 'catch' 'score'
       && lk != 119388              // 'catch' 'select'
       && lk != 119900              // 'catch' 'self'
       && lk != 122460              // 'catch' 'sliding'
       && lk != 122972              // 'catch' 'some'
       && lk != 123484              // 'catch' 'stable'
       && lk != 123996              // 'catch' 'start'
       && lk != 125532              // 'catch' 'strict'
       && lk != 129628              // 'catch' 'to'
       && lk != 130140              // 'catch' 'treat'
       && lk != 130652              // 'catch' 'true'
       && lk != 131164              // 'catch' 'try'
       && lk != 131676              // 'catch' 'tumbling'
       && lk != 132188              // 'catch' 'type'
       && lk != 133212              // 'catch' 'union'
       && lk != 134236              // 'catch' 'unordered'
       && lk != 134748              // 'catch' 'updating'
       && lk != 136284              // 'catch' 'validate'
       && lk != 136796              // 'catch' 'value'
       && lk != 137308              // 'catch' 'variable'
       && lk != 137820              // 'catch' 'version'
       && lk != 139356              // 'catch' 'where'
       && lk != 139868              // 'catch' 'while'
       && lk != 141404)             // 'catch' 'with'
      {
        break;
      }
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(259);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(116);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(150);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
    }
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(259);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(116);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(150);               // S^WS | '$' | '(:' | 'return' | 'select'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
    }
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(89);                      // 'case'
    lookahead1W(257);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
    }
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_SequenceType();
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    default:
      shift(233);                   // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(89);                     // 'case'
    lookahead1W(257);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
    }
    lookahead1W(253);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
    try_SequenceType();
    lookahead1W(138);               // S^WS | '(:' | 'return' | 'select'
    switch (l1)
    {
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    default:
      shiftT(233);                  // 'select'
    }
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(268);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_VarName();
    lookahead1W(173);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      shift(53);                    // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_VarName();
      lookahead1W(173);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(155);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(54);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(268);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    try_VarName();
    lookahead1W(173);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      shiftT(53);                   // ':='
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(240);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
      try_VarName();
      lookahead1W(173);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(155);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shiftT(53);                 // ':='
        lookahead1W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        try_ExprSingle();
      }
    }
    shiftT(54);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(273);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(273);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    shift(54);                      // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    shiftT(54);                     // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 177:                       // 'let'
      lookahead2W(168);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(180);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      parse_FLWORExpr();
      break;
    case 154:                       // 'if'
      parse_IfExpr();
      break;
    case 248:                       // 'switch'
      parse_SwitchExpr();
      break;
    case 144128:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 259:                       // 'typeswitch'
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 177:                       // 'let'
      lookahead2W(168);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(180);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16014:                     // 'from' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 122510:                    // 'from' 'sliding'
    case 131723:                    // 'for' 'tumbling'
    case 131726:                    // 'from' 'tumbling'
      try_FLWORExpr();
      break;
    case 154:                       // 'if'
      try_IfExpr();
      break;
    case 248:                       // 'switch'
      try_SwitchExpr();
      break;
    case 144128:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 259:                       // 'typeswitch'
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(272);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(285);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 223:                       // 'replace'
      lookahead2W(181);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(264);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17998                 // 'append' '('
     || lk == 18031                 // 'delete' '('
     || lk == 18081                 // 'insert' '('
     || lk == 18142                 // 'rename' '('
     || lk == 99489                 // 'insert' 'node'
     || lk == 99951                 // 'delete' 'nodes'
     || lk == 100001                // 'insert' 'nodes'
     || lk == 136927)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_OrExpr();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_InsertExpr();
            lk = -3;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_DeleteExpr();
              lk = -4;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_ReplaceExpr();
                lk = -6;
              }
              catch (p6A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_JSONDeleteExpr();
                  lk = -8;
                }
                catch (p8A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_JSONInsertExpr();
                    lk = -9;
                  }
                  catch (p9A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_JSONRenameExpr();
                      lk = -10;
                    }
                    catch (p10A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_JSONReplaceExpr();
                        lk = -11;
                      }
                      catch (p11A)
                      {
                        lk = -12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16112:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case -2:
    case 6:                         // EQName^Token
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 36:                        // '(#'
    case 41:                        // '+'
    case 43:                        // '-'
    case 47:                        // '/'
    case 48:                        // '//'
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 83:                        // 'attribute'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 97:                        // 'comment'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 120:                       // 'document'
    case 122:                       // 'element'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 135:                       // 'false'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 187:                       // 'namespace'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 196:                       // 'not'
    case 197:                       // 'null'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 206:                       // 'ordered'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 220:                       // 'processing-instruction'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 249:                       // 'text'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 255:                       // 'true'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 262:                       // 'unordered'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 281:                       // '{'
    case 283:                       // '{|'
    case 14926:                     // 'append' '#'
    case 14952:                     // 'copy' '#'
    case 14959:                     // 'delete' '#'
    case 14978:                     // 'every' '#'
    case 15009:                     // 'insert' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15088:                     // 'some' '#'
    case 18024:                     // 'copy' '('
    case 18050:                     // 'every' '('
    case 18143:                     // 'replace' '('
    case 18160:                     // 'some' '('
      parse_OrExpr();
      break;
    case -3:
      parse_InsertExpr();
      break;
    case -4:
    case 99439:                     // 'delete' 'node'
      parse_DeleteExpr();
      break;
    case 99550:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case -6:
    case 99551:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case -8:
    case 3183:                      // 'delete' EQName^Token
    case 4207:                      // 'delete' IntegerLiteral
    case 4719:                      // 'delete' DecimalLiteral
    case 5231:                      // 'delete' DoubleLiteral
    case 5743:                      // 'delete' StringLiteral
    case 15983:                     // 'delete' '$'
    case 16495:                     // 'delete' '$$'
    case 17007:                     // 'delete' '%'
    case 28271:                     // 'delete' '<'
    case 28783:                     // 'delete' '<!--'
    case 30831:                     // 'delete' '<?'
    case 35439:                     // 'delete' '['
    case 36463:                     // 'delete' 'after'
    case 37487:                     // 'delete' 'allowing'
    case 37999:                     // 'delete' 'ancestor'
    case 38511:                     // 'delete' 'ancestor-or-self'
    case 39023:                     // 'delete' 'and'
    case 40047:                     // 'delete' 'append'
    case 41071:                     // 'delete' 'as'
    case 41583:                     // 'delete' 'ascending'
    case 42095:                     // 'delete' 'at'
    case 42607:                     // 'delete' 'attribute'
    case 43119:                     // 'delete' 'base-uri'
    case 43631:                     // 'delete' 'before'
    case 44143:                     // 'delete' 'boundary-space'
    case 44655:                     // 'delete' 'break'
    case 45679:                     // 'delete' 'case'
    case 46191:                     // 'delete' 'cast'
    case 46703:                     // 'delete' 'castable'
    case 47215:                     // 'delete' 'catch'
    case 48239:                     // 'delete' 'child'
    case 48751:                     // 'delete' 'collation'
    case 49775:                     // 'delete' 'comment'
    case 50287:                     // 'delete' 'constraint'
    case 50799:                     // 'delete' 'construction'
    case 52335:                     // 'delete' 'context'
    case 52847:                     // 'delete' 'continue'
    case 53359:                     // 'delete' 'copy'
    case 53871:                     // 'delete' 'copy-namespaces'
    case 54383:                     // 'delete' 'count'
    case 54895:                     // 'delete' 'decimal-format'
    case 55919:                     // 'delete' 'declare'
    case 56431:                     // 'delete' 'default'
    case 56943:                     // 'delete' 'delete'
    case 57455:                     // 'delete' 'descendant'
    case 57967:                     // 'delete' 'descendant-or-self'
    case 58479:                     // 'delete' 'descending'
    case 61039:                     // 'delete' 'div'
    case 61551:                     // 'delete' 'document'
    case 62575:                     // 'delete' 'element'
    case 63087:                     // 'delete' 'else'
    case 63599:                     // 'delete' 'empty'
    case 64623:                     // 'delete' 'encoding'
    case 65135:                     // 'delete' 'end'
    case 66159:                     // 'delete' 'eq'
    case 66671:                     // 'delete' 'every'
    case 67695:                     // 'delete' 'except'
    case 68207:                     // 'delete' 'exit'
    case 68719:                     // 'delete' 'external'
    case 69231:                     // 'delete' 'false'
    case 69743:                     // 'delete' 'first'
    case 70255:                     // 'delete' 'following'
    case 70767:                     // 'delete' 'following-sibling'
    case 71279:                     // 'delete' 'for'
    case 72815:                     // 'delete' 'from'
    case 73327:                     // 'delete' 'ft-option'
    case 75375:                     // 'delete' 'function'
    case 75887:                     // 'delete' 'ge'
    case 76911:                     // 'delete' 'group'
    case 77935:                     // 'delete' 'gt'
    case 78447:                     // 'delete' 'idiv'
    case 79471:                     // 'delete' 'import'
    case 79983:                     // 'delete' 'in'
    case 80495:                     // 'delete' 'index'
    case 82543:                     // 'delete' 'insert'
    case 83055:                     // 'delete' 'instance'
    case 83567:                     // 'delete' 'integrity'
    case 84079:                     // 'delete' 'intersect'
    case 84591:                     // 'delete' 'into'
    case 85103:                     // 'delete' 'is'
    case 86127:                     // 'delete' 'json'
    case 87151:                     // 'delete' 'jsoniq'
    case 88687:                     // 'delete' 'last'
    case 89199:                     // 'delete' 'lax'
    case 89711:                     // 'delete' 'le'
    case 90735:                     // 'delete' 'let'
    case 91759:                     // 'delete' 'loop'
    case 92783:                     // 'delete' 'lt'
    case 93807:                     // 'delete' 'mod'
    case 94319:                     // 'delete' 'modify'
    case 94831:                     // 'delete' 'module'
    case 95855:                     // 'delete' 'namespace'
    case 96879:                     // 'delete' 'ne'
    case 100975:                    // 'delete' 'null'
    case 101487:                    // 'delete' 'object'
    case 103535:                    // 'delete' 'only'
    case 104047:                    // 'delete' 'option'
    case 104559:                    // 'delete' 'or'
    case 105071:                    // 'delete' 'order'
    case 105583:                    // 'delete' 'ordered'
    case 106095:                    // 'delete' 'ordering'
    case 107631:                    // 'delete' 'parent'
    case 110703:                    // 'delete' 'preceding'
    case 111215:                    // 'delete' 'preceding-sibling'
    case 112751:                    // 'delete' 'processing-instruction'
    case 113775:                    // 'delete' 'rename'
    case 114287:                    // 'delete' 'replace'
    case 114799:                    // 'delete' 'return'
    case 115311:                    // 'delete' 'returning'
    case 115823:                    // 'delete' 'revalidation'
    case 116847:                    // 'delete' 'satisfies'
    case 117359:                    // 'delete' 'schema'
    case 118895:                    // 'delete' 'score'
    case 119407:                    // 'delete' 'select'
    case 119919:                    // 'delete' 'self'
    case 122479:                    // 'delete' 'sliding'
    case 122991:                    // 'delete' 'some'
    case 123503:                    // 'delete' 'stable'
    case 124015:                    // 'delete' 'start'
    case 125551:                    // 'delete' 'strict'
    case 127599:                    // 'delete' 'text'
    case 129647:                    // 'delete' 'to'
    case 130159:                    // 'delete' 'treat'
    case 130671:                    // 'delete' 'true'
    case 131183:                    // 'delete' 'try'
    case 131695:                    // 'delete' 'tumbling'
    case 132207:                    // 'delete' 'type'
    case 133231:                    // 'delete' 'union'
    case 134255:                    // 'delete' 'unordered'
    case 134767:                    // 'delete' 'updating'
    case 136303:                    // 'delete' 'validate'
    case 136815:                    // 'delete' 'value'
    case 137327:                    // 'delete' 'variable'
    case 137839:                    // 'delete' 'version'
    case 139375:                    // 'delete' 'where'
    case 139887:                    // 'delete' 'while'
    case 141423:                    // 'delete' 'with'
    case 143983:                    // 'delete' '{'
    case 145007:                    // 'delete' '{|'
      parse_JSONDeleteExpr();
      break;
    case -10:
    case 3294:                      // 'rename' EQName^Token
    case 4318:                      // 'rename' IntegerLiteral
    case 4830:                      // 'rename' DecimalLiteral
    case 5342:                      // 'rename' DoubleLiteral
    case 5854:                      // 'rename' StringLiteral
    case 16094:                     // 'rename' '$'
    case 16606:                     // 'rename' '$$'
    case 17118:                     // 'rename' '%'
    case 28382:                     // 'rename' '<'
    case 28894:                     // 'rename' '<!--'
    case 30942:                     // 'rename' '<?'
    case 35550:                     // 'rename' '['
    case 36574:                     // 'rename' 'after'
    case 37598:                     // 'rename' 'allowing'
    case 38110:                     // 'rename' 'ancestor'
    case 38622:                     // 'rename' 'ancestor-or-self'
    case 39134:                     // 'rename' 'and'
    case 40158:                     // 'rename' 'append'
    case 41182:                     // 'rename' 'as'
    case 41694:                     // 'rename' 'ascending'
    case 42206:                     // 'rename' 'at'
    case 42718:                     // 'rename' 'attribute'
    case 43230:                     // 'rename' 'base-uri'
    case 43742:                     // 'rename' 'before'
    case 44254:                     // 'rename' 'boundary-space'
    case 44766:                     // 'rename' 'break'
    case 45790:                     // 'rename' 'case'
    case 46302:                     // 'rename' 'cast'
    case 46814:                     // 'rename' 'castable'
    case 47326:                     // 'rename' 'catch'
    case 48350:                     // 'rename' 'child'
    case 48862:                     // 'rename' 'collation'
    case 49886:                     // 'rename' 'comment'
    case 50398:                     // 'rename' 'constraint'
    case 50910:                     // 'rename' 'construction'
    case 52446:                     // 'rename' 'context'
    case 52958:                     // 'rename' 'continue'
    case 53470:                     // 'rename' 'copy'
    case 53982:                     // 'rename' 'copy-namespaces'
    case 54494:                     // 'rename' 'count'
    case 55006:                     // 'rename' 'decimal-format'
    case 56030:                     // 'rename' 'declare'
    case 56542:                     // 'rename' 'default'
    case 57054:                     // 'rename' 'delete'
    case 57566:                     // 'rename' 'descendant'
    case 58078:                     // 'rename' 'descendant-or-self'
    case 58590:                     // 'rename' 'descending'
    case 61150:                     // 'rename' 'div'
    case 61662:                     // 'rename' 'document'
    case 62686:                     // 'rename' 'element'
    case 63198:                     // 'rename' 'else'
    case 63710:                     // 'rename' 'empty'
    case 64734:                     // 'rename' 'encoding'
    case 65246:                     // 'rename' 'end'
    case 66270:                     // 'rename' 'eq'
    case 66782:                     // 'rename' 'every'
    case 67806:                     // 'rename' 'except'
    case 68318:                     // 'rename' 'exit'
    case 68830:                     // 'rename' 'external'
    case 69342:                     // 'rename' 'false'
    case 69854:                     // 'rename' 'first'
    case 70366:                     // 'rename' 'following'
    case 70878:                     // 'rename' 'following-sibling'
    case 71390:                     // 'rename' 'for'
    case 72926:                     // 'rename' 'from'
    case 73438:                     // 'rename' 'ft-option'
    case 75486:                     // 'rename' 'function'
    case 75998:                     // 'rename' 'ge'
    case 77022:                     // 'rename' 'group'
    case 78046:                     // 'rename' 'gt'
    case 78558:                     // 'rename' 'idiv'
    case 79582:                     // 'rename' 'import'
    case 80094:                     // 'rename' 'in'
    case 80606:                     // 'rename' 'index'
    case 82654:                     // 'rename' 'insert'
    case 83166:                     // 'rename' 'instance'
    case 83678:                     // 'rename' 'integrity'
    case 84190:                     // 'rename' 'intersect'
    case 84702:                     // 'rename' 'into'
    case 85214:                     // 'rename' 'is'
    case 86238:                     // 'rename' 'json'
    case 87262:                     // 'rename' 'jsoniq'
    case 88798:                     // 'rename' 'last'
    case 89310:                     // 'rename' 'lax'
    case 89822:                     // 'rename' 'le'
    case 90846:                     // 'rename' 'let'
    case 91870:                     // 'rename' 'loop'
    case 92894:                     // 'rename' 'lt'
    case 93918:                     // 'rename' 'mod'
    case 94430:                     // 'rename' 'modify'
    case 94942:                     // 'rename' 'module'
    case 95966:                     // 'rename' 'namespace'
    case 96990:                     // 'rename' 'ne'
    case 100062:                    // 'rename' 'nodes'
    case 101086:                    // 'rename' 'null'
    case 101598:                    // 'rename' 'object'
    case 103646:                    // 'rename' 'only'
    case 104158:                    // 'rename' 'option'
    case 104670:                    // 'rename' 'or'
    case 105182:                    // 'rename' 'order'
    case 105694:                    // 'rename' 'ordered'
    case 106206:                    // 'rename' 'ordering'
    case 107742:                    // 'rename' 'parent'
    case 110814:                    // 'rename' 'preceding'
    case 111326:                    // 'rename' 'preceding-sibling'
    case 112862:                    // 'rename' 'processing-instruction'
    case 113886:                    // 'rename' 'rename'
    case 114398:                    // 'rename' 'replace'
    case 114910:                    // 'rename' 'return'
    case 115422:                    // 'rename' 'returning'
    case 115934:                    // 'rename' 'revalidation'
    case 116958:                    // 'rename' 'satisfies'
    case 117470:                    // 'rename' 'schema'
    case 119006:                    // 'rename' 'score'
    case 119518:                    // 'rename' 'select'
    case 120030:                    // 'rename' 'self'
    case 122590:                    // 'rename' 'sliding'
    case 123102:                    // 'rename' 'some'
    case 123614:                    // 'rename' 'stable'
    case 124126:                    // 'rename' 'start'
    case 125662:                    // 'rename' 'strict'
    case 127710:                    // 'rename' 'text'
    case 129758:                    // 'rename' 'to'
    case 130270:                    // 'rename' 'treat'
    case 130782:                    // 'rename' 'true'
    case 131294:                    // 'rename' 'try'
    case 131806:                    // 'rename' 'tumbling'
    case 132318:                    // 'rename' 'type'
    case 133342:                    // 'rename' 'union'
    case 134366:                    // 'rename' 'unordered'
    case 134878:                    // 'rename' 'updating'
    case 136414:                    // 'rename' 'validate'
    case 136926:                    // 'rename' 'value'
    case 137438:                    // 'rename' 'variable'
    case 137950:                    // 'rename' 'version'
    case 139486:                    // 'rename' 'where'
    case 139998:                    // 'rename' 'while'
    case 141534:                    // 'rename' 'with'
    case 144094:                    // 'rename' '{'
    case 145118:                    // 'rename' '{|'
      parse_JSONRenameExpr();
      break;
    case -11:
    case 86239:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case -12:
    case 3150:                      // 'append' EQName^Token
    case 4174:                      // 'append' IntegerLiteral
    case 4686:                      // 'append' DecimalLiteral
    case 5198:                      // 'append' DoubleLiteral
    case 5710:                      // 'append' StringLiteral
    case 15950:                     // 'append' '$'
    case 16462:                     // 'append' '$$'
    case 16974:                     // 'append' '%'
    case 18510:                     // 'append' '(#'
    case 21070:                     // 'append' '+'
    case 22094:                     // 'append' '-'
    case 24142:                     // 'append' '/'
    case 24654:                     // 'append' '//'
    case 28238:                     // 'append' '<'
    case 28750:                     // 'append' '<!--'
    case 30798:                     // 'append' '<?'
    case 35406:                     // 'append' '['
    case 36430:                     // 'append' 'after'
    case 37454:                     // 'append' 'allowing'
    case 37966:                     // 'append' 'ancestor'
    case 38478:                     // 'append' 'ancestor-or-self'
    case 38990:                     // 'append' 'and'
    case 40014:                     // 'append' 'append'
    case 41038:                     // 'append' 'as'
    case 41550:                     // 'append' 'ascending'
    case 42062:                     // 'append' 'at'
    case 42574:                     // 'append' 'attribute'
    case 43086:                     // 'append' 'base-uri'
    case 43598:                     // 'append' 'before'
    case 44110:                     // 'append' 'boundary-space'
    case 44622:                     // 'append' 'break'
    case 45646:                     // 'append' 'case'
    case 46158:                     // 'append' 'cast'
    case 46670:                     // 'append' 'castable'
    case 47182:                     // 'append' 'catch'
    case 48206:                     // 'append' 'child'
    case 48718:                     // 'append' 'collation'
    case 49742:                     // 'append' 'comment'
    case 50254:                     // 'append' 'constraint'
    case 50766:                     // 'append' 'construction'
    case 52302:                     // 'append' 'context'
    case 52814:                     // 'append' 'continue'
    case 53326:                     // 'append' 'copy'
    case 53838:                     // 'append' 'copy-namespaces'
    case 54350:                     // 'append' 'count'
    case 54862:                     // 'append' 'decimal-format'
    case 55886:                     // 'append' 'declare'
    case 56398:                     // 'append' 'default'
    case 56910:                     // 'append' 'delete'
    case 57422:                     // 'append' 'descendant'
    case 57934:                     // 'append' 'descendant-or-self'
    case 58446:                     // 'append' 'descending'
    case 61006:                     // 'append' 'div'
    case 61518:                     // 'append' 'document'
    case 62542:                     // 'append' 'element'
    case 63054:                     // 'append' 'else'
    case 63566:                     // 'append' 'empty'
    case 64590:                     // 'append' 'encoding'
    case 65102:                     // 'append' 'end'
    case 66126:                     // 'append' 'eq'
    case 66638:                     // 'append' 'every'
    case 67662:                     // 'append' 'except'
    case 68174:                     // 'append' 'exit'
    case 68686:                     // 'append' 'external'
    case 69198:                     // 'append' 'false'
    case 69710:                     // 'append' 'first'
    case 70222:                     // 'append' 'following'
    case 70734:                     // 'append' 'following-sibling'
    case 71246:                     // 'append' 'for'
    case 72782:                     // 'append' 'from'
    case 73294:                     // 'append' 'ft-option'
    case 75342:                     // 'append' 'function'
    case 75854:                     // 'append' 'ge'
    case 76878:                     // 'append' 'group'
    case 77902:                     // 'append' 'gt'
    case 78414:                     // 'append' 'idiv'
    case 78926:                     // 'append' 'if'
    case 79438:                     // 'append' 'import'
    case 79950:                     // 'append' 'in'
    case 80462:                     // 'append' 'index'
    case 82510:                     // 'append' 'insert'
    case 83022:                     // 'append' 'instance'
    case 83534:                     // 'append' 'integrity'
    case 84046:                     // 'append' 'intersect'
    case 84558:                     // 'append' 'into'
    case 85070:                     // 'append' 'is'
    case 86094:                     // 'append' 'json'
    case 87118:                     // 'append' 'jsoniq'
    case 88654:                     // 'append' 'last'
    case 89166:                     // 'append' 'lax'
    case 89678:                     // 'append' 'le'
    case 90702:                     // 'append' 'let'
    case 91726:                     // 'append' 'loop'
    case 92750:                     // 'append' 'lt'
    case 93774:                     // 'append' 'mod'
    case 94286:                     // 'append' 'modify'
    case 94798:                     // 'append' 'module'
    case 95822:                     // 'append' 'namespace'
    case 96846:                     // 'append' 'ne'
    case 99918:                     // 'append' 'nodes'
    case 100430:                    // 'append' 'not'
    case 100942:                    // 'append' 'null'
    case 101454:                    // 'append' 'object'
    case 103502:                    // 'append' 'only'
    case 104014:                    // 'append' 'option'
    case 104526:                    // 'append' 'or'
    case 105038:                    // 'append' 'order'
    case 105550:                    // 'append' 'ordered'
    case 106062:                    // 'append' 'ordering'
    case 107598:                    // 'append' 'parent'
    case 110670:                    // 'append' 'preceding'
    case 111182:                    // 'append' 'preceding-sibling'
    case 112718:                    // 'append' 'processing-instruction'
    case 113742:                    // 'append' 'rename'
    case 114254:                    // 'append' 'replace'
    case 114766:                    // 'append' 'return'
    case 115278:                    // 'append' 'returning'
    case 115790:                    // 'append' 'revalidation'
    case 116814:                    // 'append' 'satisfies'
    case 117326:                    // 'append' 'schema'
    case 118862:                    // 'append' 'score'
    case 119374:                    // 'append' 'select'
    case 119886:                    // 'append' 'self'
    case 122446:                    // 'append' 'sliding'
    case 122958:                    // 'append' 'some'
    case 123470:                    // 'append' 'stable'
    case 123982:                    // 'append' 'start'
    case 125518:                    // 'append' 'strict'
    case 127054:                    // 'append' 'switch'
    case 127566:                    // 'append' 'text'
    case 129614:                    // 'append' 'to'
    case 130126:                    // 'append' 'treat'
    case 130638:                    // 'append' 'true'
    case 131150:                    // 'append' 'try'
    case 131662:                    // 'append' 'tumbling'
    case 132174:                    // 'append' 'type'
    case 132686:                    // 'append' 'typeswitch'
    case 133198:                    // 'append' 'union'
    case 134222:                    // 'append' 'unordered'
    case 134734:                    // 'append' 'updating'
    case 136270:                    // 'append' 'validate'
    case 136782:                    // 'append' 'value'
    case 137294:                    // 'append' 'variable'
    case 137806:                    // 'append' 'version'
    case 139342:                    // 'append' 'where'
    case 139854:                    // 'append' 'while'
    case 141390:                    // 'append' 'with'
    case 143950:                    // 'append' '{'
    case 144974:                    // 'append' '{|'
      parse_JSONAppendExpr();
      break;
    default:
      parse_JSONInsertExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(272);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(285);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 223:                       // 'replace'
      lookahead2W(181);             // S^WS | '#' | '(' | '(:' | 'json' | 'node' | 'value'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(264);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17998                 // 'append' '('
     || lk == 18031                 // 'delete' '('
     || lk == 18081                 // 'insert' '('
     || lk == 18142                 // 'rename' '('
     || lk == 99489                 // 'insert' 'node'
     || lk == 99951                 // 'delete' 'nodes'
     || lk == 100001                // 'insert' 'nodes'
     || lk == 136927)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_OrExpr();
          memoize(9, e0A, -2);
          lk = -13;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_InsertExpr();
            memoize(9, e0A, -3);
            lk = -13;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_DeleteExpr();
              memoize(9, e0A, -4);
              lk = -13;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_ReplaceExpr();
                memoize(9, e0A, -6);
                lk = -13;
              }
              catch (p6A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_JSONDeleteExpr();
                  memoize(9, e0A, -8);
                  lk = -13;
                }
                catch (p8A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_JSONInsertExpr();
                    memoize(9, e0A, -9);
                    lk = -13;
                  }
                  catch (p9A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_JSONRenameExpr();
                      memoize(9, e0A, -10);
                      lk = -13;
                    }
                    catch (p10A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_JSONReplaceExpr();
                        memoize(9, e0A, -11);
                        lk = -13;
                      }
                      catch (p11A)
                      {
                        lk = -12;
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        memoize(9, e0A, -12);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16112:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case -2:
    case 6:                         // EQName^Token
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 36:                        // '(#'
    case 41:                        // '+'
    case 43:                        // '-'
    case 47:                        // '/'
    case 48:                        // '//'
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 83:                        // 'attribute'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 97:                        // 'comment'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 120:                       // 'document'
    case 122:                       // 'element'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 135:                       // 'false'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 187:                       // 'namespace'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 196:                       // 'not'
    case 197:                       // 'null'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 206:                       // 'ordered'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 220:                       // 'processing-instruction'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 249:                       // 'text'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 255:                       // 'true'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 262:                       // 'unordered'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 281:                       // '{'
    case 283:                       // '{|'
    case 14926:                     // 'append' '#'
    case 14952:                     // 'copy' '#'
    case 14959:                     // 'delete' '#'
    case 14978:                     // 'every' '#'
    case 15009:                     // 'insert' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15088:                     // 'some' '#'
    case 18024:                     // 'copy' '('
    case 18050:                     // 'every' '('
    case 18143:                     // 'replace' '('
    case 18160:                     // 'some' '('
      try_OrExpr();
      break;
    case -3:
      try_InsertExpr();
      break;
    case -4:
    case 99439:                     // 'delete' 'node'
      try_DeleteExpr();
      break;
    case 99550:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case -6:
    case 99551:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case -8:
    case 3183:                      // 'delete' EQName^Token
    case 4207:                      // 'delete' IntegerLiteral
    case 4719:                      // 'delete' DecimalLiteral
    case 5231:                      // 'delete' DoubleLiteral
    case 5743:                      // 'delete' StringLiteral
    case 15983:                     // 'delete' '$'
    case 16495:                     // 'delete' '$$'
    case 17007:                     // 'delete' '%'
    case 28271:                     // 'delete' '<'
    case 28783:                     // 'delete' '<!--'
    case 30831:                     // 'delete' '<?'
    case 35439:                     // 'delete' '['
    case 36463:                     // 'delete' 'after'
    case 37487:                     // 'delete' 'allowing'
    case 37999:                     // 'delete' 'ancestor'
    case 38511:                     // 'delete' 'ancestor-or-self'
    case 39023:                     // 'delete' 'and'
    case 40047:                     // 'delete' 'append'
    case 41071:                     // 'delete' 'as'
    case 41583:                     // 'delete' 'ascending'
    case 42095:                     // 'delete' 'at'
    case 42607:                     // 'delete' 'attribute'
    case 43119:                     // 'delete' 'base-uri'
    case 43631:                     // 'delete' 'before'
    case 44143:                     // 'delete' 'boundary-space'
    case 44655:                     // 'delete' 'break'
    case 45679:                     // 'delete' 'case'
    case 46191:                     // 'delete' 'cast'
    case 46703:                     // 'delete' 'castable'
    case 47215:                     // 'delete' 'catch'
    case 48239:                     // 'delete' 'child'
    case 48751:                     // 'delete' 'collation'
    case 49775:                     // 'delete' 'comment'
    case 50287:                     // 'delete' 'constraint'
    case 50799:                     // 'delete' 'construction'
    case 52335:                     // 'delete' 'context'
    case 52847:                     // 'delete' 'continue'
    case 53359:                     // 'delete' 'copy'
    case 53871:                     // 'delete' 'copy-namespaces'
    case 54383:                     // 'delete' 'count'
    case 54895:                     // 'delete' 'decimal-format'
    case 55919:                     // 'delete' 'declare'
    case 56431:                     // 'delete' 'default'
    case 56943:                     // 'delete' 'delete'
    case 57455:                     // 'delete' 'descendant'
    case 57967:                     // 'delete' 'descendant-or-self'
    case 58479:                     // 'delete' 'descending'
    case 61039:                     // 'delete' 'div'
    case 61551:                     // 'delete' 'document'
    case 62575:                     // 'delete' 'element'
    case 63087:                     // 'delete' 'else'
    case 63599:                     // 'delete' 'empty'
    case 64623:                     // 'delete' 'encoding'
    case 65135:                     // 'delete' 'end'
    case 66159:                     // 'delete' 'eq'
    case 66671:                     // 'delete' 'every'
    case 67695:                     // 'delete' 'except'
    case 68207:                     // 'delete' 'exit'
    case 68719:                     // 'delete' 'external'
    case 69231:                     // 'delete' 'false'
    case 69743:                     // 'delete' 'first'
    case 70255:                     // 'delete' 'following'
    case 70767:                     // 'delete' 'following-sibling'
    case 71279:                     // 'delete' 'for'
    case 72815:                     // 'delete' 'from'
    case 73327:                     // 'delete' 'ft-option'
    case 75375:                     // 'delete' 'function'
    case 75887:                     // 'delete' 'ge'
    case 76911:                     // 'delete' 'group'
    case 77935:                     // 'delete' 'gt'
    case 78447:                     // 'delete' 'idiv'
    case 79471:                     // 'delete' 'import'
    case 79983:                     // 'delete' 'in'
    case 80495:                     // 'delete' 'index'
    case 82543:                     // 'delete' 'insert'
    case 83055:                     // 'delete' 'instance'
    case 83567:                     // 'delete' 'integrity'
    case 84079:                     // 'delete' 'intersect'
    case 84591:                     // 'delete' 'into'
    case 85103:                     // 'delete' 'is'
    case 86127:                     // 'delete' 'json'
    case 87151:                     // 'delete' 'jsoniq'
    case 88687:                     // 'delete' 'last'
    case 89199:                     // 'delete' 'lax'
    case 89711:                     // 'delete' 'le'
    case 90735:                     // 'delete' 'let'
    case 91759:                     // 'delete' 'loop'
    case 92783:                     // 'delete' 'lt'
    case 93807:                     // 'delete' 'mod'
    case 94319:                     // 'delete' 'modify'
    case 94831:                     // 'delete' 'module'
    case 95855:                     // 'delete' 'namespace'
    case 96879:                     // 'delete' 'ne'
    case 100975:                    // 'delete' 'null'
    case 101487:                    // 'delete' 'object'
    case 103535:                    // 'delete' 'only'
    case 104047:                    // 'delete' 'option'
    case 104559:                    // 'delete' 'or'
    case 105071:                    // 'delete' 'order'
    case 105583:                    // 'delete' 'ordered'
    case 106095:                    // 'delete' 'ordering'
    case 107631:                    // 'delete' 'parent'
    case 110703:                    // 'delete' 'preceding'
    case 111215:                    // 'delete' 'preceding-sibling'
    case 112751:                    // 'delete' 'processing-instruction'
    case 113775:                    // 'delete' 'rename'
    case 114287:                    // 'delete' 'replace'
    case 114799:                    // 'delete' 'return'
    case 115311:                    // 'delete' 'returning'
    case 115823:                    // 'delete' 'revalidation'
    case 116847:                    // 'delete' 'satisfies'
    case 117359:                    // 'delete' 'schema'
    case 118895:                    // 'delete' 'score'
    case 119407:                    // 'delete' 'select'
    case 119919:                    // 'delete' 'self'
    case 122479:                    // 'delete' 'sliding'
    case 122991:                    // 'delete' 'some'
    case 123503:                    // 'delete' 'stable'
    case 124015:                    // 'delete' 'start'
    case 125551:                    // 'delete' 'strict'
    case 127599:                    // 'delete' 'text'
    case 129647:                    // 'delete' 'to'
    case 130159:                    // 'delete' 'treat'
    case 130671:                    // 'delete' 'true'
    case 131183:                    // 'delete' 'try'
    case 131695:                    // 'delete' 'tumbling'
    case 132207:                    // 'delete' 'type'
    case 133231:                    // 'delete' 'union'
    case 134255:                    // 'delete' 'unordered'
    case 134767:                    // 'delete' 'updating'
    case 136303:                    // 'delete' 'validate'
    case 136815:                    // 'delete' 'value'
    case 137327:                    // 'delete' 'variable'
    case 137839:                    // 'delete' 'version'
    case 139375:                    // 'delete' 'where'
    case 139887:                    // 'delete' 'while'
    case 141423:                    // 'delete' 'with'
    case 143983:                    // 'delete' '{'
    case 145007:                    // 'delete' '{|'
      try_JSONDeleteExpr();
      break;
    case -10:
    case 3294:                      // 'rename' EQName^Token
    case 4318:                      // 'rename' IntegerLiteral
    case 4830:                      // 'rename' DecimalLiteral
    case 5342:                      // 'rename' DoubleLiteral
    case 5854:                      // 'rename' StringLiteral
    case 16094:                     // 'rename' '$'
    case 16606:                     // 'rename' '$$'
    case 17118:                     // 'rename' '%'
    case 28382:                     // 'rename' '<'
    case 28894:                     // 'rename' '<!--'
    case 30942:                     // 'rename' '<?'
    case 35550:                     // 'rename' '['
    case 36574:                     // 'rename' 'after'
    case 37598:                     // 'rename' 'allowing'
    case 38110:                     // 'rename' 'ancestor'
    case 38622:                     // 'rename' 'ancestor-or-self'
    case 39134:                     // 'rename' 'and'
    case 40158:                     // 'rename' 'append'
    case 41182:                     // 'rename' 'as'
    case 41694:                     // 'rename' 'ascending'
    case 42206:                     // 'rename' 'at'
    case 42718:                     // 'rename' 'attribute'
    case 43230:                     // 'rename' 'base-uri'
    case 43742:                     // 'rename' 'before'
    case 44254:                     // 'rename' 'boundary-space'
    case 44766:                     // 'rename' 'break'
    case 45790:                     // 'rename' 'case'
    case 46302:                     // 'rename' 'cast'
    case 46814:                     // 'rename' 'castable'
    case 47326:                     // 'rename' 'catch'
    case 48350:                     // 'rename' 'child'
    case 48862:                     // 'rename' 'collation'
    case 49886:                     // 'rename' 'comment'
    case 50398:                     // 'rename' 'constraint'
    case 50910:                     // 'rename' 'construction'
    case 52446:                     // 'rename' 'context'
    case 52958:                     // 'rename' 'continue'
    case 53470:                     // 'rename' 'copy'
    case 53982:                     // 'rename' 'copy-namespaces'
    case 54494:                     // 'rename' 'count'
    case 55006:                     // 'rename' 'decimal-format'
    case 56030:                     // 'rename' 'declare'
    case 56542:                     // 'rename' 'default'
    case 57054:                     // 'rename' 'delete'
    case 57566:                     // 'rename' 'descendant'
    case 58078:                     // 'rename' 'descendant-or-self'
    case 58590:                     // 'rename' 'descending'
    case 61150:                     // 'rename' 'div'
    case 61662:                     // 'rename' 'document'
    case 62686:                     // 'rename' 'element'
    case 63198:                     // 'rename' 'else'
    case 63710:                     // 'rename' 'empty'
    case 64734:                     // 'rename' 'encoding'
    case 65246:                     // 'rename' 'end'
    case 66270:                     // 'rename' 'eq'
    case 66782:                     // 'rename' 'every'
    case 67806:                     // 'rename' 'except'
    case 68318:                     // 'rename' 'exit'
    case 68830:                     // 'rename' 'external'
    case 69342:                     // 'rename' 'false'
    case 69854:                     // 'rename' 'first'
    case 70366:                     // 'rename' 'following'
    case 70878:                     // 'rename' 'following-sibling'
    case 71390:                     // 'rename' 'for'
    case 72926:                     // 'rename' 'from'
    case 73438:                     // 'rename' 'ft-option'
    case 75486:                     // 'rename' 'function'
    case 75998:                     // 'rename' 'ge'
    case 77022:                     // 'rename' 'group'
    case 78046:                     // 'rename' 'gt'
    case 78558:                     // 'rename' 'idiv'
    case 79582:                     // 'rename' 'import'
    case 80094:                     // 'rename' 'in'
    case 80606:                     // 'rename' 'index'
    case 82654:                     // 'rename' 'insert'
    case 83166:                     // 'rename' 'instance'
    case 83678:                     // 'rename' 'integrity'
    case 84190:                     // 'rename' 'intersect'
    case 84702:                     // 'rename' 'into'
    case 85214:                     // 'rename' 'is'
    case 86238:                     // 'rename' 'json'
    case 87262:                     // 'rename' 'jsoniq'
    case 88798:                     // 'rename' 'last'
    case 89310:                     // 'rename' 'lax'
    case 89822:                     // 'rename' 'le'
    case 90846:                     // 'rename' 'let'
    case 91870:                     // 'rename' 'loop'
    case 92894:                     // 'rename' 'lt'
    case 93918:                     // 'rename' 'mod'
    case 94430:                     // 'rename' 'modify'
    case 94942:                     // 'rename' 'module'
    case 95966:                     // 'rename' 'namespace'
    case 96990:                     // 'rename' 'ne'
    case 100062:                    // 'rename' 'nodes'
    case 101086:                    // 'rename' 'null'
    case 101598:                    // 'rename' 'object'
    case 103646:                    // 'rename' 'only'
    case 104158:                    // 'rename' 'option'
    case 104670:                    // 'rename' 'or'
    case 105182:                    // 'rename' 'order'
    case 105694:                    // 'rename' 'ordered'
    case 106206:                    // 'rename' 'ordering'
    case 107742:                    // 'rename' 'parent'
    case 110814:                    // 'rename' 'preceding'
    case 111326:                    // 'rename' 'preceding-sibling'
    case 112862:                    // 'rename' 'processing-instruction'
    case 113886:                    // 'rename' 'rename'
    case 114398:                    // 'rename' 'replace'
    case 114910:                    // 'rename' 'return'
    case 115422:                    // 'rename' 'returning'
    case 115934:                    // 'rename' 'revalidation'
    case 116958:                    // 'rename' 'satisfies'
    case 117470:                    // 'rename' 'schema'
    case 119006:                    // 'rename' 'score'
    case 119518:                    // 'rename' 'select'
    case 120030:                    // 'rename' 'self'
    case 122590:                    // 'rename' 'sliding'
    case 123102:                    // 'rename' 'some'
    case 123614:                    // 'rename' 'stable'
    case 124126:                    // 'rename' 'start'
    case 125662:                    // 'rename' 'strict'
    case 127710:                    // 'rename' 'text'
    case 129758:                    // 'rename' 'to'
    case 130270:                    // 'rename' 'treat'
    case 130782:                    // 'rename' 'true'
    case 131294:                    // 'rename' 'try'
    case 131806:                    // 'rename' 'tumbling'
    case 132318:                    // 'rename' 'type'
    case 133342:                    // 'rename' 'union'
    case 134366:                    // 'rename' 'unordered'
    case 134878:                    // 'rename' 'updating'
    case 136414:                    // 'rename' 'validate'
    case 136926:                    // 'rename' 'value'
    case 137438:                    // 'rename' 'variable'
    case 137950:                    // 'rename' 'version'
    case 139486:                    // 'rename' 'where'
    case 139998:                    // 'rename' 'while'
    case 141534:                    // 'rename' 'with'
    case 144094:                    // 'rename' '{'
    case 145118:                    // 'rename' '{|'
      try_JSONRenameExpr();
      break;
    case -11:
    case 86239:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case -12:
    case 3150:                      // 'append' EQName^Token
    case 4174:                      // 'append' IntegerLiteral
    case 4686:                      // 'append' DecimalLiteral
    case 5198:                      // 'append' DoubleLiteral
    case 5710:                      // 'append' StringLiteral
    case 15950:                     // 'append' '$'
    case 16462:                     // 'append' '$$'
    case 16974:                     // 'append' '%'
    case 18510:                     // 'append' '(#'
    case 21070:                     // 'append' '+'
    case 22094:                     // 'append' '-'
    case 24142:                     // 'append' '/'
    case 24654:                     // 'append' '//'
    case 28238:                     // 'append' '<'
    case 28750:                     // 'append' '<!--'
    case 30798:                     // 'append' '<?'
    case 35406:                     // 'append' '['
    case 36430:                     // 'append' 'after'
    case 37454:                     // 'append' 'allowing'
    case 37966:                     // 'append' 'ancestor'
    case 38478:                     // 'append' 'ancestor-or-self'
    case 38990:                     // 'append' 'and'
    case 40014:                     // 'append' 'append'
    case 41038:                     // 'append' 'as'
    case 41550:                     // 'append' 'ascending'
    case 42062:                     // 'append' 'at'
    case 42574:                     // 'append' 'attribute'
    case 43086:                     // 'append' 'base-uri'
    case 43598:                     // 'append' 'before'
    case 44110:                     // 'append' 'boundary-space'
    case 44622:                     // 'append' 'break'
    case 45646:                     // 'append' 'case'
    case 46158:                     // 'append' 'cast'
    case 46670:                     // 'append' 'castable'
    case 47182:                     // 'append' 'catch'
    case 48206:                     // 'append' 'child'
    case 48718:                     // 'append' 'collation'
    case 49742:                     // 'append' 'comment'
    case 50254:                     // 'append' 'constraint'
    case 50766:                     // 'append' 'construction'
    case 52302:                     // 'append' 'context'
    case 52814:                     // 'append' 'continue'
    case 53326:                     // 'append' 'copy'
    case 53838:                     // 'append' 'copy-namespaces'
    case 54350:                     // 'append' 'count'
    case 54862:                     // 'append' 'decimal-format'
    case 55886:                     // 'append' 'declare'
    case 56398:                     // 'append' 'default'
    case 56910:                     // 'append' 'delete'
    case 57422:                     // 'append' 'descendant'
    case 57934:                     // 'append' 'descendant-or-self'
    case 58446:                     // 'append' 'descending'
    case 61006:                     // 'append' 'div'
    case 61518:                     // 'append' 'document'
    case 62542:                     // 'append' 'element'
    case 63054:                     // 'append' 'else'
    case 63566:                     // 'append' 'empty'
    case 64590:                     // 'append' 'encoding'
    case 65102:                     // 'append' 'end'
    case 66126:                     // 'append' 'eq'
    case 66638:                     // 'append' 'every'
    case 67662:                     // 'append' 'except'
    case 68174:                     // 'append' 'exit'
    case 68686:                     // 'append' 'external'
    case 69198:                     // 'append' 'false'
    case 69710:                     // 'append' 'first'
    case 70222:                     // 'append' 'following'
    case 70734:                     // 'append' 'following-sibling'
    case 71246:                     // 'append' 'for'
    case 72782:                     // 'append' 'from'
    case 73294:                     // 'append' 'ft-option'
    case 75342:                     // 'append' 'function'
    case 75854:                     // 'append' 'ge'
    case 76878:                     // 'append' 'group'
    case 77902:                     // 'append' 'gt'
    case 78414:                     // 'append' 'idiv'
    case 78926:                     // 'append' 'if'
    case 79438:                     // 'append' 'import'
    case 79950:                     // 'append' 'in'
    case 80462:                     // 'append' 'index'
    case 82510:                     // 'append' 'insert'
    case 83022:                     // 'append' 'instance'
    case 83534:                     // 'append' 'integrity'
    case 84046:                     // 'append' 'intersect'
    case 84558:                     // 'append' 'into'
    case 85070:                     // 'append' 'is'
    case 86094:                     // 'append' 'json'
    case 87118:                     // 'append' 'jsoniq'
    case 88654:                     // 'append' 'last'
    case 89166:                     // 'append' 'lax'
    case 89678:                     // 'append' 'le'
    case 90702:                     // 'append' 'let'
    case 91726:                     // 'append' 'loop'
    case 92750:                     // 'append' 'lt'
    case 93774:                     // 'append' 'mod'
    case 94286:                     // 'append' 'modify'
    case 94798:                     // 'append' 'module'
    case 95822:                     // 'append' 'namespace'
    case 96846:                     // 'append' 'ne'
    case 99918:                     // 'append' 'nodes'
    case 100430:                    // 'append' 'not'
    case 100942:                    // 'append' 'null'
    case 101454:                    // 'append' 'object'
    case 103502:                    // 'append' 'only'
    case 104014:                    // 'append' 'option'
    case 104526:                    // 'append' 'or'
    case 105038:                    // 'append' 'order'
    case 105550:                    // 'append' 'ordered'
    case 106062:                    // 'append' 'ordering'
    case 107598:                    // 'append' 'parent'
    case 110670:                    // 'append' 'preceding'
    case 111182:                    // 'append' 'preceding-sibling'
    case 112718:                    // 'append' 'processing-instruction'
    case 113742:                    // 'append' 'rename'
    case 114254:                    // 'append' 'replace'
    case 114766:                    // 'append' 'return'
    case 115278:                    // 'append' 'returning'
    case 115790:                    // 'append' 'revalidation'
    case 116814:                    // 'append' 'satisfies'
    case 117326:                    // 'append' 'schema'
    case 118862:                    // 'append' 'score'
    case 119374:                    // 'append' 'select'
    case 119886:                    // 'append' 'self'
    case 122446:                    // 'append' 'sliding'
    case 122958:                    // 'append' 'some'
    case 123470:                    // 'append' 'stable'
    case 123982:                    // 'append' 'start'
    case 125518:                    // 'append' 'strict'
    case 127054:                    // 'append' 'switch'
    case 127566:                    // 'append' 'text'
    case 129614:                    // 'append' 'to'
    case 130126:                    // 'append' 'treat'
    case 130638:                    // 'append' 'true'
    case 131150:                    // 'append' 'try'
    case 131662:                    // 'append' 'tumbling'
    case 132174:                    // 'append' 'type'
    case 132686:                    // 'append' 'typeswitch'
    case 133198:                    // 'append' 'union'
    case 134222:                    // 'append' 'unordered'
    case 134734:                    // 'append' 'updating'
    case 136270:                    // 'append' 'validate'
    case 136782:                    // 'append' 'value'
    case 137294:                    // 'append' 'variable'
    case 137806:                    // 'append' 'version'
    case 139342:                    // 'append' 'where'
    case 139854:                    // 'append' 'while'
    case 141390:                    // 'append' 'with'
    case 143950:                    // 'append' '{'
    case 144974:                    // 'append' '{|'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_JSONInsertExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(111);                     // 'delete'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 86184                 // 'json' 'json'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96936                 // 'json' 'ne'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(111);                    // 'delete'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(10, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 86184                 // 'json' 'json'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96936                 // 'json' 'ne'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 161:                       // 'insert'
      lookahead2W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk != 9889                  // 'insert' NCName^Token
     && lk != 62113                 // 'insert' 'document-node'
     && lk != 64161                 // 'insert' 'empty-sequence'
     && lk != 85665                 // 'insert' 'item'
     && lk != 96417                 // 'insert' 'namespace-node'
     && lk != 99489                 // 'insert' 'node'
     && lk != 117921                // 'insert' 'schema-attribute'
     && lk != 118433)               // 'insert' 'schema-element'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(161);              // 'insert'
          lookahead1W(270);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          switch (l1)
          {
          case 168:                 // 'json'
            lookahead2W(272);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            break;
          default:
            lk = l1;
          }
          if (lk == 18088)          // 'json' '('
          {
            lk = memoized(12, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(168);        // 'json'
                memoize(12, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(12, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1
           || lk == 3240            // 'json' EQName^Token
           || lk == 4264            // 'json' IntegerLiteral
           || lk == 4776            // 'json' DecimalLiteral
           || lk == 5288            // 'json' DoubleLiteral
           || lk == 5800            // 'json' StringLiteral
           || lk == 16040           // 'json' '$'
           || lk == 16552           // 'json' '$$'
           || lk == 17064           // 'json' '%'
           || lk == 18600           // 'json' '(#'
           || lk == 21160           // 'json' '+'
           || lk == 22184           // 'json' '-'
           || lk == 24232           // 'json' '/'
           || lk == 24744           // 'json' '//'
           || lk == 28328           // 'json' '<'
           || lk == 28840           // 'json' '<!--'
           || lk == 30888           // 'json' '<?'
           || lk == 35496           // 'json' '['
           || lk == 36520           // 'json' 'after'
           || lk == 37544           // 'json' 'allowing'
           || lk == 38056           // 'json' 'ancestor'
           || lk == 38568           // 'json' 'ancestor-or-self'
           || lk == 39080           // 'json' 'and'
           || lk == 40104           // 'json' 'append'
           || lk == 41128           // 'json' 'as'
           || lk == 41640           // 'json' 'ascending'
           || lk == 42152           // 'json' 'at'
           || lk == 42664           // 'json' 'attribute'
           || lk == 43176           // 'json' 'base-uri'
           || lk == 43688           // 'json' 'before'
           || lk == 44200           // 'json' 'boundary-space'
           || lk == 44712           // 'json' 'break'
           || lk == 45736           // 'json' 'case'
           || lk == 46248           // 'json' 'cast'
           || lk == 46760           // 'json' 'castable'
           || lk == 47272           // 'json' 'catch'
           || lk == 48296           // 'json' 'child'
           || lk == 48808           // 'json' 'collation'
           || lk == 49832           // 'json' 'comment'
           || lk == 50344           // 'json' 'constraint'
           || lk == 50856           // 'json' 'construction'
           || lk == 52392           // 'json' 'context'
           || lk == 52904           // 'json' 'continue'
           || lk == 53416           // 'json' 'copy'
           || lk == 53928           // 'json' 'copy-namespaces'
           || lk == 54440           // 'json' 'count'
           || lk == 54952           // 'json' 'decimal-format'
           || lk == 55976           // 'json' 'declare'
           || lk == 56488           // 'json' 'default'
           || lk == 57000           // 'json' 'delete'
           || lk == 57512           // 'json' 'descendant'
           || lk == 58024           // 'json' 'descendant-or-self'
           || lk == 58536           // 'json' 'descending'
           || lk == 61096           // 'json' 'div'
           || lk == 61608           // 'json' 'document'
           || lk == 62632           // 'json' 'element'
           || lk == 63144           // 'json' 'else'
           || lk == 63656           // 'json' 'empty'
           || lk == 64680           // 'json' 'encoding'
           || lk == 65192           // 'json' 'end'
           || lk == 66216           // 'json' 'eq'
           || lk == 66728           // 'json' 'every'
           || lk == 67752           // 'json' 'except'
           || lk == 68264           // 'json' 'exit'
           || lk == 68776           // 'json' 'external'
           || lk == 69288           // 'json' 'false'
           || lk == 69800           // 'json' 'first'
           || lk == 70312           // 'json' 'following'
           || lk == 70824           // 'json' 'following-sibling'
           || lk == 71336           // 'json' 'for'
           || lk == 72872           // 'json' 'from'
           || lk == 73384           // 'json' 'ft-option'
           || lk == 75432           // 'json' 'function'
           || lk == 75944           // 'json' 'ge'
           || lk == 76968           // 'json' 'group'
           || lk == 77992           // 'json' 'gt'
           || lk == 78504           // 'json' 'idiv'
           || lk == 79016           // 'json' 'if'
           || lk == 79528           // 'json' 'import'
           || lk == 80040           // 'json' 'in'
           || lk == 80552           // 'json' 'index'
           || lk == 82600           // 'json' 'insert'
           || lk == 83112           // 'json' 'instance'
           || lk == 83624           // 'json' 'integrity'
           || lk == 84136           // 'json' 'intersect'
           || lk == 84648           // 'json' 'into'
           || lk == 85160           // 'json' 'is'
           || lk == 86184           // 'json' 'json'
           || lk == 87208           // 'json' 'jsoniq'
           || lk == 88744           // 'json' 'last'
           || lk == 89256           // 'json' 'lax'
           || lk == 89768           // 'json' 'le'
           || lk == 90792           // 'json' 'let'
           || lk == 91816           // 'json' 'loop'
           || lk == 92840           // 'json' 'lt'
           || lk == 93864           // 'json' 'mod'
           || lk == 94376           // 'json' 'modify'
           || lk == 94888           // 'json' 'module'
           || lk == 95912           // 'json' 'namespace'
           || lk == 96936           // 'json' 'ne'
           || lk == 100008          // 'json' 'nodes'
           || lk == 100520          // 'json' 'not'
           || lk == 101032          // 'json' 'null'
           || lk == 101544          // 'json' 'object'
           || lk == 103592          // 'json' 'only'
           || lk == 104104          // 'json' 'option'
           || lk == 104616          // 'json' 'or'
           || lk == 105128          // 'json' 'order'
           || lk == 105640          // 'json' 'ordered'
           || lk == 106152          // 'json' 'ordering'
           || lk == 107688          // 'json' 'parent'
           || lk == 110760          // 'json' 'preceding'
           || lk == 111272          // 'json' 'preceding-sibling'
           || lk == 112808          // 'json' 'processing-instruction'
           || lk == 113832          // 'json' 'rename'
           || lk == 114344          // 'json' 'replace'
           || lk == 114856          // 'json' 'return'
           || lk == 115368          // 'json' 'returning'
           || lk == 115880          // 'json' 'revalidation'
           || lk == 116904          // 'json' 'satisfies'
           || lk == 117416          // 'json' 'schema'
           || lk == 118952          // 'json' 'score'
           || lk == 119464          // 'json' 'select'
           || lk == 119976          // 'json' 'self'
           || lk == 122536          // 'json' 'sliding'
           || lk == 123048          // 'json' 'some'
           || lk == 123560          // 'json' 'stable'
           || lk == 124072          // 'json' 'start'
           || lk == 125608          // 'json' 'strict'
           || lk == 127144          // 'json' 'switch'
           || lk == 127656          // 'json' 'text'
           || lk == 129704          // 'json' 'to'
           || lk == 130216          // 'json' 'treat'
           || lk == 130728          // 'json' 'true'
           || lk == 131240          // 'json' 'try'
           || lk == 131752          // 'json' 'tumbling'
           || lk == 132264          // 'json' 'type'
           || lk == 132776          // 'json' 'typeswitch'
           || lk == 133288          // 'json' 'union'
           || lk == 134312          // 'json' 'unordered'
           || lk == 134824          // 'json' 'updating'
           || lk == 136360          // 'json' 'validate'
           || lk == 136872          // 'json' 'value'
           || lk == 137384          // 'json' 'variable'
           || lk == 137896          // 'json' 'version'
           || lk == 139432          // 'json' 'where'
           || lk == 139944          // 'json' 'while'
           || lk == 141480          // 'json' 'with'
           || lk == 144040          // 'json' '{'
           || lk == 145064)         // 'json' '{|'
          {
            shiftT(168);            // 'json'
          }
          lookahead1W(270);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          try_ExprSingle();
          shiftT(165);              // 'into'
          lookahead1W(270);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          try_ExprSingle();
          switch (l1)
          {
          case 82:                  // 'at'
            lookahead2W(71);        // S^WS | '(:' | 'position'
            break;
          default:
            lk = l1;
          }
          if (lk == 110162)         // 'at' 'position'
          {
            lk = memoized(13, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(82);         // 'at'
                lookahead1W(71);    // S^WS | '(:' | 'position'
                shiftT(215);        // 'position'
                lookahead1W(270);   // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
                try_ExprSingle();
                memoize(13, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(13, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1)
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(270);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
            try_ExprSingle();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(161);                   // 'insert'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(272);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(12, e0, lk);
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 86184               // 'json' 'json'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96936               // 'json' 'ne'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shift(168);                 // 'json'
      }
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      shift(165);                   // 'into'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(71);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 110162)             // 'at' 'position'
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(270);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(13, e0, lk);
        }
      }
      if (lk == -1)
      {
        shift(82);                  // 'at'
        lookahead1W(71);            // S^WS | '(:' | 'position'
        shift(215);                 // 'position'
        lookahead1W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      shift(161);                   // 'insert'
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(288);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(14, e0, lk);
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 9896                // 'json' NCName^Token
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shift(168);                 // 'json'
      }
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_PairConstructorList();
      shift(165);                   // 'into'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 161:                       // 'insert'
      lookahead2W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk != 9889                  // 'insert' NCName^Token
     && lk != 62113                 // 'insert' 'document-node'
     && lk != 64161                 // 'insert' 'empty-sequence'
     && lk != 85665                 // 'insert' 'item'
     && lk != 96417                 // 'insert' 'namespace-node'
     && lk != 99489                 // 'insert' 'node'
     && lk != 117921                // 'insert' 'schema-attribute'
     && lk != 118433)               // 'insert' 'schema-element'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(161);              // 'insert'
          lookahead1W(270);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          switch (l1)
          {
          case 168:                 // 'json'
            lookahead2W(272);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
            break;
          default:
            lk = l1;
          }
          if (lk == 18088)          // 'json' '('
          {
            lk = memoized(12, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(168);        // 'json'
                memoize(12, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(12, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1
           || lk == 3240            // 'json' EQName^Token
           || lk == 4264            // 'json' IntegerLiteral
           || lk == 4776            // 'json' DecimalLiteral
           || lk == 5288            // 'json' DoubleLiteral
           || lk == 5800            // 'json' StringLiteral
           || lk == 16040           // 'json' '$'
           || lk == 16552           // 'json' '$$'
           || lk == 17064           // 'json' '%'
           || lk == 18600           // 'json' '(#'
           || lk == 21160           // 'json' '+'
           || lk == 22184           // 'json' '-'
           || lk == 24232           // 'json' '/'
           || lk == 24744           // 'json' '//'
           || lk == 28328           // 'json' '<'
           || lk == 28840           // 'json' '<!--'
           || lk == 30888           // 'json' '<?'
           || lk == 35496           // 'json' '['
           || lk == 36520           // 'json' 'after'
           || lk == 37544           // 'json' 'allowing'
           || lk == 38056           // 'json' 'ancestor'
           || lk == 38568           // 'json' 'ancestor-or-self'
           || lk == 39080           // 'json' 'and'
           || lk == 40104           // 'json' 'append'
           || lk == 41128           // 'json' 'as'
           || lk == 41640           // 'json' 'ascending'
           || lk == 42152           // 'json' 'at'
           || lk == 42664           // 'json' 'attribute'
           || lk == 43176           // 'json' 'base-uri'
           || lk == 43688           // 'json' 'before'
           || lk == 44200           // 'json' 'boundary-space'
           || lk == 44712           // 'json' 'break'
           || lk == 45736           // 'json' 'case'
           || lk == 46248           // 'json' 'cast'
           || lk == 46760           // 'json' 'castable'
           || lk == 47272           // 'json' 'catch'
           || lk == 48296           // 'json' 'child'
           || lk == 48808           // 'json' 'collation'
           || lk == 49832           // 'json' 'comment'
           || lk == 50344           // 'json' 'constraint'
           || lk == 50856           // 'json' 'construction'
           || lk == 52392           // 'json' 'context'
           || lk == 52904           // 'json' 'continue'
           || lk == 53416           // 'json' 'copy'
           || lk == 53928           // 'json' 'copy-namespaces'
           || lk == 54440           // 'json' 'count'
           || lk == 54952           // 'json' 'decimal-format'
           || lk == 55976           // 'json' 'declare'
           || lk == 56488           // 'json' 'default'
           || lk == 57000           // 'json' 'delete'
           || lk == 57512           // 'json' 'descendant'
           || lk == 58024           // 'json' 'descendant-or-self'
           || lk == 58536           // 'json' 'descending'
           || lk == 61096           // 'json' 'div'
           || lk == 61608           // 'json' 'document'
           || lk == 62632           // 'json' 'element'
           || lk == 63144           // 'json' 'else'
           || lk == 63656           // 'json' 'empty'
           || lk == 64680           // 'json' 'encoding'
           || lk == 65192           // 'json' 'end'
           || lk == 66216           // 'json' 'eq'
           || lk == 66728           // 'json' 'every'
           || lk == 67752           // 'json' 'except'
           || lk == 68264           // 'json' 'exit'
           || lk == 68776           // 'json' 'external'
           || lk == 69288           // 'json' 'false'
           || lk == 69800           // 'json' 'first'
           || lk == 70312           // 'json' 'following'
           || lk == 70824           // 'json' 'following-sibling'
           || lk == 71336           // 'json' 'for'
           || lk == 72872           // 'json' 'from'
           || lk == 73384           // 'json' 'ft-option'
           || lk == 75432           // 'json' 'function'
           || lk == 75944           // 'json' 'ge'
           || lk == 76968           // 'json' 'group'
           || lk == 77992           // 'json' 'gt'
           || lk == 78504           // 'json' 'idiv'
           || lk == 79016           // 'json' 'if'
           || lk == 79528           // 'json' 'import'
           || lk == 80040           // 'json' 'in'
           || lk == 80552           // 'json' 'index'
           || lk == 82600           // 'json' 'insert'
           || lk == 83112           // 'json' 'instance'
           || lk == 83624           // 'json' 'integrity'
           || lk == 84136           // 'json' 'intersect'
           || lk == 84648           // 'json' 'into'
           || lk == 85160           // 'json' 'is'
           || lk == 86184           // 'json' 'json'
           || lk == 87208           // 'json' 'jsoniq'
           || lk == 88744           // 'json' 'last'
           || lk == 89256           // 'json' 'lax'
           || lk == 89768           // 'json' 'le'
           || lk == 90792           // 'json' 'let'
           || lk == 91816           // 'json' 'loop'
           || lk == 92840           // 'json' 'lt'
           || lk == 93864           // 'json' 'mod'
           || lk == 94376           // 'json' 'modify'
           || lk == 94888           // 'json' 'module'
           || lk == 95912           // 'json' 'namespace'
           || lk == 96936           // 'json' 'ne'
           || lk == 100008          // 'json' 'nodes'
           || lk == 100520          // 'json' 'not'
           || lk == 101032          // 'json' 'null'
           || lk == 101544          // 'json' 'object'
           || lk == 103592          // 'json' 'only'
           || lk == 104104          // 'json' 'option'
           || lk == 104616          // 'json' 'or'
           || lk == 105128          // 'json' 'order'
           || lk == 105640          // 'json' 'ordered'
           || lk == 106152          // 'json' 'ordering'
           || lk == 107688          // 'json' 'parent'
           || lk == 110760          // 'json' 'preceding'
           || lk == 111272          // 'json' 'preceding-sibling'
           || lk == 112808          // 'json' 'processing-instruction'
           || lk == 113832          // 'json' 'rename'
           || lk == 114344          // 'json' 'replace'
           || lk == 114856          // 'json' 'return'
           || lk == 115368          // 'json' 'returning'
           || lk == 115880          // 'json' 'revalidation'
           || lk == 116904          // 'json' 'satisfies'
           || lk == 117416          // 'json' 'schema'
           || lk == 118952          // 'json' 'score'
           || lk == 119464          // 'json' 'select'
           || lk == 119976          // 'json' 'self'
           || lk == 122536          // 'json' 'sliding'
           || lk == 123048          // 'json' 'some'
           || lk == 123560          // 'json' 'stable'
           || lk == 124072          // 'json' 'start'
           || lk == 125608          // 'json' 'strict'
           || lk == 127144          // 'json' 'switch'
           || lk == 127656          // 'json' 'text'
           || lk == 129704          // 'json' 'to'
           || lk == 130216          // 'json' 'treat'
           || lk == 130728          // 'json' 'true'
           || lk == 131240          // 'json' 'try'
           || lk == 131752          // 'json' 'tumbling'
           || lk == 132264          // 'json' 'type'
           || lk == 132776          // 'json' 'typeswitch'
           || lk == 133288          // 'json' 'union'
           || lk == 134312          // 'json' 'unordered'
           || lk == 134824          // 'json' 'updating'
           || lk == 136360          // 'json' 'validate'
           || lk == 136872          // 'json' 'value'
           || lk == 137384          // 'json' 'variable'
           || lk == 137896          // 'json' 'version'
           || lk == 139432          // 'json' 'where'
           || lk == 139944          // 'json' 'while'
           || lk == 141480          // 'json' 'with'
           || lk == 144040          // 'json' '{'
           || lk == 145064)         // 'json' '{|'
          {
            shiftT(168);            // 'json'
          }
          lookahead1W(270);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          try_ExprSingle();
          shiftT(165);              // 'into'
          lookahead1W(270);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
          try_ExprSingle();
          switch (l1)
          {
          case 82:                  // 'at'
            lookahead2W(71);        // S^WS | '(:' | 'position'
            break;
          default:
            lk = l1;
          }
          if (lk == 110162)         // 'at' 'position'
          {
            lk = memoized(13, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(82);         // 'at'
                lookahead1W(71);    // S^WS | '(:' | 'position'
                shiftT(215);        // 'position'
                lookahead1W(270);   // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
                try_ExprSingle();
                memoize(13, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(13, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1)
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(270);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
            try_ExprSingle();
          }
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(161);                  // 'insert'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(272);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            memoize(12, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(12, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 86184               // 'json' 'json'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96936               // 'json' 'ne'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shiftT(168);                // 'json'
      }
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
      shiftT(165);                  // 'into'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(71);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 110162)             // 'at' 'position'
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(82);             // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(270);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
            try_ExprSingle();
            memoize(13, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(13, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        shiftT(82);                 // 'at'
        lookahead1W(71);            // S^WS | '(:' | 'position'
        shiftT(215);                // 'position'
        lookahead1W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      shiftT(161);                  // 'insert'
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(288);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            memoize(14, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(14, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 9896                // 'json' NCName^Token
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shiftT(168);                // 'json'
      }
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      try_PairConstructorList();
      shiftT(165);                  // 'into'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(222);                     // 'rename'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 86184                 // 'json' 'json'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96936                 // 'json' 'ne'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(80);                      // 'as'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(222);                    // 'rename'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' |
                                    // 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(15, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 86184                 // 'json' 'json'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96936                 // 'json' 'ne'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_PostfixExpr();
    shiftT(80);                     // 'as'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(223);                     // 'replace'
    lookahead1W(128);               // S^WS | '(:' | 'json' | 'value'
    if (l1 == 168)                  // 'json'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(83);                // S^WS | '(:' | 'value'
    shift(267);                     // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    shift(200);                     // 'of'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    shift(276);                     // 'with'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(223);                    // 'replace'
    lookahead1W(128);               // S^WS | '(:' | 'json' | 'value'
    if (l1 == 168)                  // 'json'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(83);                // S^WS | '(:' | 'value'
    shiftT(267);                    // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    shiftT(200);                    // 'of'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(:' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'element' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' |
                                    // 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'ne' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' | 'to' | 'treat' |
                                    // 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    try_PostfixExpr();
    shiftT(276);                    // 'with'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(78);                      // 'append'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(272);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 18600                 // 'json' '(#'
     || lk == 21160                 // 'json' '+'
     || lk == 22184                 // 'json' '-'
     || lk == 24232                 // 'json' '/'
     || lk == 24744                 // 'json' '//'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 86184                 // 'json' 'json'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96936                 // 'json' 'ne'
     || lk == 100008                // 'json' 'nodes'
     || lk == 100520                // 'json' 'not'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(165);                     // 'into'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(78);                     // 'append'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(272);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(16, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 18600                 // 'json' '(#'
     || lk == 21160                 // 'json' '+'
     || lk == 22184                 // 'json' '-'
     || lk == 24232                 // 'json' '/'
     || lk == 24744                 // 'json' '//'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 86184                 // 'json' 'json'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96936                 // 'json' 'ne'
     || lk == 100008                // 'json' 'nodes'
     || lk == 100520                // 'json' 'not'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
    shiftT(165);                    // 'into'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shift(12);                    // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shift(23);                    // CharRef
      break;
    case 282:                       // '{{'
      shift(282);                   // '{{'
      break;
    case 288:                       // '}}'
      shift(288);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shiftT(12);                   // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shiftT(23);                   // CharRef
      break;
    case 282:                       // '{{'
      shiftT(282);                  // '{{'
      break;
    case 288:                       // '}}'
      shiftT(288);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(120);                     // 'document'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(120);                    // 'document'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(83);                      // 'attribute'
    lookahead1W(242);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(281);                   // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(83);                     // 'attribute'
    lookahead1W(242);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          memoize(17, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(281);                  // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shiftT(287);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(220);                     // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(18, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(18, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(281);                   // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(220);                    // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(270);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(88);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(18, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(89);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          memoize(18, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(281);                  // '{'
      lookahead1W(89);              // S^WS | '(:' | '}'
      shiftT(287);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(97);                      // 'comment'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(97);                     // 'comment'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(249);                     // 'text'
    lookahead1W(88);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(249);                    // 'text'
    lookahead1W(88);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 187:                       // 'namespace'
      lookahead2W(259);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 281:                       // '{'
      lookahead2W(289);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3353                  // '{' EQName^Token
     || lk == 4377                  // '{' IntegerLiteral
     || lk == 4889                  // '{' DecimalLiteral
     || lk == 5401                  // '{' DoubleLiteral
     || lk == 5913                  // '{' StringLiteral
     || lk == 16153                 // '{' '$'
     || lk == 16665                 // '{' '$$'
     || lk == 17177                 // '{' '%'
     || lk == 18055                 // 'false' '('
     || lk == 18117                 // 'null' '('
     || lk == 18175                 // 'true' '('
     || lk == 18201                 // '{' '('
     || lk == 18713                 // '{' '(#'
     || lk == 21273                 // '{' '+'
     || lk == 22297                 // '{' '-'
     || lk == 24345                 // '{' '/'
     || lk == 24857                 // '{' '//'
     || lk == 28441                 // '{' '<'
     || lk == 28953                 // '{' '<!--'
     || lk == 31001                 // '{' '<?'
     || lk == 35609                 // '{' '['
     || lk == 36633                 // '{' 'after'
     || lk == 37657                 // '{' 'allowing'
     || lk == 38169                 // '{' 'ancestor'
     || lk == 38681                 // '{' 'ancestor-or-self'
     || lk == 39193                 // '{' 'and'
     || lk == 40217                 // '{' 'append'
     || lk == 41241                 // '{' 'as'
     || lk == 41753                 // '{' 'ascending'
     || lk == 42265                 // '{' 'at'
     || lk == 42777                 // '{' 'attribute'
     || lk == 43289                 // '{' 'base-uri'
     || lk == 43801                 // '{' 'before'
     || lk == 44313                 // '{' 'boundary-space'
     || lk == 44825                 // '{' 'break'
     || lk == 45849                 // '{' 'case'
     || lk == 46361                 // '{' 'cast'
     || lk == 46873                 // '{' 'castable'
     || lk == 47385                 // '{' 'catch'
     || lk == 48409                 // '{' 'child'
     || lk == 48921                 // '{' 'collation'
     || lk == 49945                 // '{' 'comment'
     || lk == 50457                 // '{' 'constraint'
     || lk == 50969                 // '{' 'construction'
     || lk == 52505                 // '{' 'context'
     || lk == 53017                 // '{' 'continue'
     || lk == 53529                 // '{' 'copy'
     || lk == 54041                 // '{' 'copy-namespaces'
     || lk == 54553                 // '{' 'count'
     || lk == 55065                 // '{' 'decimal-format'
     || lk == 56089                 // '{' 'declare'
     || lk == 56601                 // '{' 'default'
     || lk == 57113                 // '{' 'delete'
     || lk == 57625                 // '{' 'descendant'
     || lk == 58137                 // '{' 'descendant-or-self'
     || lk == 58649                 // '{' 'descending'
     || lk == 61209                 // '{' 'div'
     || lk == 61721                 // '{' 'document'
     || lk == 62745                 // '{' 'element'
     || lk == 63257                 // '{' 'else'
     || lk == 63769                 // '{' 'empty'
     || lk == 64793                 // '{' 'encoding'
     || lk == 65305                 // '{' 'end'
     || lk == 66329                 // '{' 'eq'
     || lk == 66841                 // '{' 'every'
     || lk == 67865                 // '{' 'except'
     || lk == 68377                 // '{' 'exit'
     || lk == 68889                 // '{' 'external'
     || lk == 69401                 // '{' 'false'
     || lk == 69913                 // '{' 'first'
     || lk == 70425                 // '{' 'following'
     || lk == 70937                 // '{' 'following-sibling'
     || lk == 71449                 // '{' 'for'
     || lk == 72985                 // '{' 'from'
     || lk == 73497                 // '{' 'ft-option'
     || lk == 75545                 // '{' 'function'
     || lk == 76057                 // '{' 'ge'
     || lk == 77081                 // '{' 'group'
     || lk == 78105                 // '{' 'gt'
     || lk == 78617                 // '{' 'idiv'
     || lk == 79129                 // '{' 'if'
     || lk == 79641                 // '{' 'import'
     || lk == 80153                 // '{' 'in'
     || lk == 80665                 // '{' 'index'
     || lk == 82713                 // '{' 'insert'
     || lk == 83225                 // '{' 'instance'
     || lk == 83737                 // '{' 'integrity'
     || lk == 84249                 // '{' 'intersect'
     || lk == 84761                 // '{' 'into'
     || lk == 85273                 // '{' 'is'
     || lk == 86297                 // '{' 'json'
     || lk == 87321                 // '{' 'jsoniq'
     || lk == 88857                 // '{' 'last'
     || lk == 89369                 // '{' 'lax'
     || lk == 89881                 // '{' 'le'
     || lk == 90905                 // '{' 'let'
     || lk == 91929                 // '{' 'loop'
     || lk == 92953                 // '{' 'lt'
     || lk == 93977                 // '{' 'mod'
     || lk == 94489                 // '{' 'modify'
     || lk == 95001                 // '{' 'module'
     || lk == 96025                 // '{' 'namespace'
     || lk == 97049                 // '{' 'ne'
     || lk == 100121                // '{' 'nodes'
     || lk == 100633                // '{' 'not'
     || lk == 101145                // '{' 'null'
     || lk == 101657                // '{' 'object'
     || lk == 103705                // '{' 'only'
     || lk == 104217                // '{' 'option'
     || lk == 104729                // '{' 'or'
     || lk == 105241                // '{' 'order'
     || lk == 105753                // '{' 'ordered'
     || lk == 106265                // '{' 'ordering'
     || lk == 107801                // '{' 'parent'
     || lk == 110873                // '{' 'preceding'
     || lk == 111385                // '{' 'preceding-sibling'
     || lk == 112921                // '{' 'processing-instruction'
     || lk == 113945                // '{' 'rename'
     || lk == 114457                // '{' 'replace'
     || lk == 114969                // '{' 'return'
     || lk == 115481                // '{' 'returning'
     || lk == 115993                // '{' 'revalidation'
     || lk == 117017                // '{' 'satisfies'
     || lk == 117529                // '{' 'schema'
     || lk == 119065                // '{' 'score'
     || lk == 119577                // '{' 'select'
     || lk == 120089                // '{' 'self'
     || lk == 122649                // '{' 'sliding'
     || lk == 123161                // '{' 'some'
     || lk == 123673                // '{' 'stable'
     || lk == 124185                // '{' 'start'
     || lk == 125721                // '{' 'strict'
     || lk == 127257                // '{' 'switch'
     || lk == 127769                // '{' 'text'
     || lk == 129817                // '{' 'to'
     || lk == 130329                // '{' 'treat'
     || lk == 130841                // '{' 'true'
     || lk == 131353                // '{' 'try'
     || lk == 131865                // '{' 'tumbling'
     || lk == 132377                // '{' 'type'
     || lk == 132889                // '{' 'typeswitch'
     || lk == 133401                // '{' 'union'
     || lk == 134425                // '{' 'unordered'
     || lk == 134937                // '{' 'updating'
     || lk == 136473                // '{' 'validate'
     || lk == 136985                // '{' 'value'
     || lk == 137497                // '{' 'variable'
     || lk == 138009                // '{' 'version'
     || lk == 139545                // '{' 'where'
     || lk == 140057                // '{' 'while'
     || lk == 141593                // '{' 'with'
     || lk == 144153                // '{' '{'
     || lk == 145177                // '{' '{|'
     || lk == 147225)               // '{' '}'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_Literal();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_FunctionCall();
            lk = -5;
          }
          catch (p5A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockExpr();
              lk = -10;
            }
            catch (p10A)
            {
              lk = -11;
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 32:                        // '$$'
      parse_ContextItemExpr();
      break;
    case -5:
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
      parse_FunctionCall();
      break;
    case 144078:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 144134:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 122:                       // 'element'
    case 220:                       // 'processing-instruction'
    case 249:                       // 'text'
    case 9915:                      // 'namespace' NCName^Token
    case 36539:                     // 'namespace' 'after'
    case 37563:                     // 'namespace' 'allowing'
    case 38075:                     // 'namespace' 'ancestor'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 39099:                     // 'namespace' 'and'
    case 40123:                     // 'namespace' 'append'
    case 41147:                     // 'namespace' 'as'
    case 41659:                     // 'namespace' 'ascending'
    case 42171:                     // 'namespace' 'at'
    case 42683:                     // 'namespace' 'attribute'
    case 43195:                     // 'namespace' 'base-uri'
    case 43707:                     // 'namespace' 'before'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44731:                     // 'namespace' 'break'
    case 45755:                     // 'namespace' 'case'
    case 46267:                     // 'namespace' 'cast'
    case 46779:                     // 'namespace' 'castable'
    case 47291:                     // 'namespace' 'catch'
    case 48315:                     // 'namespace' 'child'
    case 48827:                     // 'namespace' 'collation'
    case 49851:                     // 'namespace' 'comment'
    case 50363:                     // 'namespace' 'constraint'
    case 50875:                     // 'namespace' 'construction'
    case 52411:                     // 'namespace' 'context'
    case 52923:                     // 'namespace' 'continue'
    case 53435:                     // 'namespace' 'copy'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 54459:                     // 'namespace' 'count'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55995:                     // 'namespace' 'declare'
    case 56507:                     // 'namespace' 'default'
    case 57019:                     // 'namespace' 'delete'
    case 57531:                     // 'namespace' 'descendant'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58555:                     // 'namespace' 'descending'
    case 61115:                     // 'namespace' 'div'
    case 61627:                     // 'namespace' 'document'
    case 62139:                     // 'namespace' 'document-node'
    case 62651:                     // 'namespace' 'element'
    case 63163:                     // 'namespace' 'else'
    case 63675:                     // 'namespace' 'empty'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64699:                     // 'namespace' 'encoding'
    case 65211:                     // 'namespace' 'end'
    case 66235:                     // 'namespace' 'eq'
    case 66747:                     // 'namespace' 'every'
    case 67771:                     // 'namespace' 'except'
    case 68283:                     // 'namespace' 'exit'
    case 68795:                     // 'namespace' 'external'
    case 69307:                     // 'namespace' 'false'
    case 69819:                     // 'namespace' 'first'
    case 70331:                     // 'namespace' 'following'
    case 70843:                     // 'namespace' 'following-sibling'
    case 71355:                     // 'namespace' 'for'
    case 72891:                     // 'namespace' 'from'
    case 73403:                     // 'namespace' 'ft-option'
    case 75451:                     // 'namespace' 'function'
    case 75963:                     // 'namespace' 'ge'
    case 76987:                     // 'namespace' 'group'
    case 78011:                     // 'namespace' 'gt'
    case 78523:                     // 'namespace' 'idiv'
    case 79035:                     // 'namespace' 'if'
    case 79547:                     // 'namespace' 'import'
    case 80059:                     // 'namespace' 'in'
    case 80571:                     // 'namespace' 'index'
    case 82619:                     // 'namespace' 'insert'
    case 83131:                     // 'namespace' 'instance'
    case 83643:                     // 'namespace' 'integrity'
    case 84155:                     // 'namespace' 'intersect'
    case 84667:                     // 'namespace' 'into'
    case 85179:                     // 'namespace' 'is'
    case 85691:                     // 'namespace' 'item'
    case 86203:                     // 'namespace' 'json'
    case 87227:                     // 'namespace' 'jsoniq'
    case 88763:                     // 'namespace' 'last'
    case 89275:                     // 'namespace' 'lax'
    case 89787:                     // 'namespace' 'le'
    case 90811:                     // 'namespace' 'let'
    case 91835:                     // 'namespace' 'loop'
    case 92859:                     // 'namespace' 'lt'
    case 93883:                     // 'namespace' 'mod'
    case 94395:                     // 'namespace' 'modify'
    case 94907:                     // 'namespace' 'module'
    case 95931:                     // 'namespace' 'namespace'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96955:                     // 'namespace' 'ne'
    case 99515:                     // 'namespace' 'node'
    case 100027:                    // 'namespace' 'nodes'
    case 101051:                    // 'namespace' 'null'
    case 101563:                    // 'namespace' 'object'
    case 103611:                    // 'namespace' 'only'
    case 104123:                    // 'namespace' 'option'
    case 104635:                    // 'namespace' 'or'
    case 105147:                    // 'namespace' 'order'
    case 105659:                    // 'namespace' 'ordered'
    case 106171:                    // 'namespace' 'ordering'
    case 107707:                    // 'namespace' 'parent'
    case 110779:                    // 'namespace' 'preceding'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 113851:                    // 'namespace' 'rename'
    case 114363:                    // 'namespace' 'replace'
    case 114875:                    // 'namespace' 'return'
    case 115387:                    // 'namespace' 'returning'
    case 115899:                    // 'namespace' 'revalidation'
    case 116923:                    // 'namespace' 'satisfies'
    case 117435:                    // 'namespace' 'schema'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 118459:                    // 'namespace' 'schema-element'
    case 118971:                    // 'namespace' 'score'
    case 119483:                    // 'namespace' 'select'
    case 119995:                    // 'namespace' 'self'
    case 122555:                    // 'namespace' 'sliding'
    case 123067:                    // 'namespace' 'some'
    case 123579:                    // 'namespace' 'stable'
    case 124091:                    // 'namespace' 'start'
    case 125627:                    // 'namespace' 'strict'
    case 127163:                    // 'namespace' 'switch'
    case 127675:                    // 'namespace' 'text'
    case 129723:                    // 'namespace' 'to'
    case 130235:                    // 'namespace' 'treat'
    case 130747:                    // 'namespace' 'true'
    case 131259:                    // 'namespace' 'try'
    case 131771:                    // 'namespace' 'tumbling'
    case 132283:                    // 'namespace' 'type'
    case 132795:                    // 'namespace' 'typeswitch'
    case 133307:                    // 'namespace' 'union'
    case 134331:                    // 'namespace' 'unordered'
    case 134843:                    // 'namespace' 'updating'
    case 136379:                    // 'namespace' 'validate'
    case 136891:                    // 'namespace' 'value'
    case 137403:                    // 'namespace' 'variable'
    case 137915:                    // 'namespace' 'version'
    case 139451:                    // 'namespace' 'where'
    case 139963:                    // 'namespace' 'while'
    case 141499:                    // 'namespace' 'with'
    case 143992:                    // 'document' '{'
    case 144059:                    // 'namespace' '{'
      parse_Constructor();
      break;
    case 33:                        // '%'
    case 147:                       // 'function'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
    case 27929:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -11:
    case 10009:                     // '{' NCName^Token
    case 62233:                     // '{' 'document-node'
    case 64281:                     // '{' 'empty-sequence'
    case 85785:                     // '{' 'item'
    case 96537:                     // '{' 'namespace-node'
    case 99609:                     // '{' 'node'
    case 118041:                    // '{' 'schema-attribute'
    case 118553:                    // '{' 'schema-element'
      parse_ObjectConstructor();
      break;
    case 69:                        // '['
      parse_ArrayConstructor();
      break;
    case 283:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Literal();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 187:                       // 'namespace'
      lookahead2W(259);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 281:                       // '{'
      lookahead2W(289);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | ';' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'from' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'select' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(93);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3353                  // '{' EQName^Token
     || lk == 4377                  // '{' IntegerLiteral
     || lk == 4889                  // '{' DecimalLiteral
     || lk == 5401                  // '{' DoubleLiteral
     || lk == 5913                  // '{' StringLiteral
     || lk == 16153                 // '{' '$'
     || lk == 16665                 // '{' '$$'
     || lk == 17177                 // '{' '%'
     || lk == 18055                 // 'false' '('
     || lk == 18117                 // 'null' '('
     || lk == 18175                 // 'true' '('
     || lk == 18201                 // '{' '('
     || lk == 18713                 // '{' '(#'
     || lk == 21273                 // '{' '+'
     || lk == 22297                 // '{' '-'
     || lk == 24345                 // '{' '/'
     || lk == 24857                 // '{' '//'
     || lk == 28441                 // '{' '<'
     || lk == 28953                 // '{' '<!--'
     || lk == 31001                 // '{' '<?'
     || lk == 35609                 // '{' '['
     || lk == 36633                 // '{' 'after'
     || lk == 37657                 // '{' 'allowing'
     || lk == 38169                 // '{' 'ancestor'
     || lk == 38681                 // '{' 'ancestor-or-self'
     || lk == 39193                 // '{' 'and'
     || lk == 40217                 // '{' 'append'
     || lk == 41241                 // '{' 'as'
     || lk == 41753                 // '{' 'ascending'
     || lk == 42265                 // '{' 'at'
     || lk == 42777                 // '{' 'attribute'
     || lk == 43289                 // '{' 'base-uri'
     || lk == 43801                 // '{' 'before'
     || lk == 44313                 // '{' 'boundary-space'
     || lk == 44825                 // '{' 'break'
     || lk == 45849                 // '{' 'case'
     || lk == 46361                 // '{' 'cast'
     || lk == 46873                 // '{' 'castable'
     || lk == 47385                 // '{' 'catch'
     || lk == 48409                 // '{' 'child'
     || lk == 48921                 // '{' 'collation'
     || lk == 49945                 // '{' 'comment'
     || lk == 50457                 // '{' 'constraint'
     || lk == 50969                 // '{' 'construction'
     || lk == 52505                 // '{' 'context'
     || lk == 53017                 // '{' 'continue'
     || lk == 53529                 // '{' 'copy'
     || lk == 54041                 // '{' 'copy-namespaces'
     || lk == 54553                 // '{' 'count'
     || lk == 55065                 // '{' 'decimal-format'
     || lk == 56089                 // '{' 'declare'
     || lk == 56601                 // '{' 'default'
     || lk == 57113                 // '{' 'delete'
     || lk == 57625                 // '{' 'descendant'
     || lk == 58137                 // '{' 'descendant-or-self'
     || lk == 58649                 // '{' 'descending'
     || lk == 61209                 // '{' 'div'
     || lk == 61721                 // '{' 'document'
     || lk == 62745                 // '{' 'element'
     || lk == 63257                 // '{' 'else'
     || lk == 63769                 // '{' 'empty'
     || lk == 64793                 // '{' 'encoding'
     || lk == 65305                 // '{' 'end'
     || lk == 66329                 // '{' 'eq'
     || lk == 66841                 // '{' 'every'
     || lk == 67865                 // '{' 'except'
     || lk == 68377                 // '{' 'exit'
     || lk == 68889                 // '{' 'external'
     || lk == 69401                 // '{' 'false'
     || lk == 69913                 // '{' 'first'
     || lk == 70425                 // '{' 'following'
     || lk == 70937                 // '{' 'following-sibling'
     || lk == 71449                 // '{' 'for'
     || lk == 72985                 // '{' 'from'
     || lk == 73497                 // '{' 'ft-option'
     || lk == 75545                 // '{' 'function'
     || lk == 76057                 // '{' 'ge'
     || lk == 77081                 // '{' 'group'
     || lk == 78105                 // '{' 'gt'
     || lk == 78617                 // '{' 'idiv'
     || lk == 79129                 // '{' 'if'
     || lk == 79641                 // '{' 'import'
     || lk == 80153                 // '{' 'in'
     || lk == 80665                 // '{' 'index'
     || lk == 82713                 // '{' 'insert'
     || lk == 83225                 // '{' 'instance'
     || lk == 83737                 // '{' 'integrity'
     || lk == 84249                 // '{' 'intersect'
     || lk == 84761                 // '{' 'into'
     || lk == 85273                 // '{' 'is'
     || lk == 86297                 // '{' 'json'
     || lk == 87321                 // '{' 'jsoniq'
     || lk == 88857                 // '{' 'last'
     || lk == 89369                 // '{' 'lax'
     || lk == 89881                 // '{' 'le'
     || lk == 90905                 // '{' 'let'
     || lk == 91929                 // '{' 'loop'
     || lk == 92953                 // '{' 'lt'
     || lk == 93977                 // '{' 'mod'
     || lk == 94489                 // '{' 'modify'
     || lk == 95001                 // '{' 'module'
     || lk == 96025                 // '{' 'namespace'
     || lk == 97049                 // '{' 'ne'
     || lk == 100121                // '{' 'nodes'
     || lk == 100633                // '{' 'not'
     || lk == 101145                // '{' 'null'
     || lk == 101657                // '{' 'object'
     || lk == 103705                // '{' 'only'
     || lk == 104217                // '{' 'option'
     || lk == 104729                // '{' 'or'
     || lk == 105241                // '{' 'order'
     || lk == 105753                // '{' 'ordered'
     || lk == 106265                // '{' 'ordering'
     || lk == 107801                // '{' 'parent'
     || lk == 110873                // '{' 'preceding'
     || lk == 111385                // '{' 'preceding-sibling'
     || lk == 112921                // '{' 'processing-instruction'
     || lk == 113945                // '{' 'rename'
     || lk == 114457                // '{' 'replace'
     || lk == 114969                // '{' 'return'
     || lk == 115481                // '{' 'returning'
     || lk == 115993                // '{' 'revalidation'
     || lk == 117017                // '{' 'satisfies'
     || lk == 117529                // '{' 'schema'
     || lk == 119065                // '{' 'score'
     || lk == 119577                // '{' 'select'
     || lk == 120089                // '{' 'self'
     || lk == 122649                // '{' 'sliding'
     || lk == 123161                // '{' 'some'
     || lk == 123673                // '{' 'stable'
     || lk == 124185                // '{' 'start'
     || lk == 125721                // '{' 'strict'
     || lk == 127257                // '{' 'switch'
     || lk == 127769                // '{' 'text'
     || lk == 129817                // '{' 'to'
     || lk == 130329                // '{' 'treat'
     || lk == 130841                // '{' 'true'
     || lk == 131353                // '{' 'try'
     || lk == 131865                // '{' 'tumbling'
     || lk == 132377                // '{' 'type'
     || lk == 132889                // '{' 'typeswitch'
     || lk == 133401                // '{' 'union'
     || lk == 134425                // '{' 'unordered'
     || lk == 134937                // '{' 'updating'
     || lk == 136473                // '{' 'validate'
     || lk == 136985                // '{' 'value'
     || lk == 137497                // '{' 'variable'
     || lk == 138009                // '{' 'version'
     || lk == 139545                // '{' 'where'
     || lk == 140057                // '{' 'while'
     || lk == 141593                // '{' 'with'
     || lk == 144153                // '{' '{'
     || lk == 145177                // '{' '{|'
     || lk == 147225)               // '{' '}'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_Literal();
          memoize(19, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_FunctionCall();
            memoize(19, e0A, -5);
            lk = -14;
          }
          catch (p5A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockExpr();
              memoize(19, e0A, -10);
              lk = -14;
            }
            catch (p10A)
            {
              lk = -11;
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(19, e0A, -11);
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 32:                        // '$$'
      try_ContextItemExpr();
      break;
    case -5:
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
      try_FunctionCall();
      break;
    case 144078:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 144134:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 122:                       // 'element'
    case 220:                       // 'processing-instruction'
    case 249:                       // 'text'
    case 9915:                      // 'namespace' NCName^Token
    case 36539:                     // 'namespace' 'after'
    case 37563:                     // 'namespace' 'allowing'
    case 38075:                     // 'namespace' 'ancestor'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 39099:                     // 'namespace' 'and'
    case 40123:                     // 'namespace' 'append'
    case 41147:                     // 'namespace' 'as'
    case 41659:                     // 'namespace' 'ascending'
    case 42171:                     // 'namespace' 'at'
    case 42683:                     // 'namespace' 'attribute'
    case 43195:                     // 'namespace' 'base-uri'
    case 43707:                     // 'namespace' 'before'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44731:                     // 'namespace' 'break'
    case 45755:                     // 'namespace' 'case'
    case 46267:                     // 'namespace' 'cast'
    case 46779:                     // 'namespace' 'castable'
    case 47291:                     // 'namespace' 'catch'
    case 48315:                     // 'namespace' 'child'
    case 48827:                     // 'namespace' 'collation'
    case 49851:                     // 'namespace' 'comment'
    case 50363:                     // 'namespace' 'constraint'
    case 50875:                     // 'namespace' 'construction'
    case 52411:                     // 'namespace' 'context'
    case 52923:                     // 'namespace' 'continue'
    case 53435:                     // 'namespace' 'copy'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 54459:                     // 'namespace' 'count'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55995:                     // 'namespace' 'declare'
    case 56507:                     // 'namespace' 'default'
    case 57019:                     // 'namespace' 'delete'
    case 57531:                     // 'namespace' 'descendant'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58555:                     // 'namespace' 'descending'
    case 61115:                     // 'namespace' 'div'
    case 61627:                     // 'namespace' 'document'
    case 62139:                     // 'namespace' 'document-node'
    case 62651:                     // 'namespace' 'element'
    case 63163:                     // 'namespace' 'else'
    case 63675:                     // 'namespace' 'empty'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64699:                     // 'namespace' 'encoding'
    case 65211:                     // 'namespace' 'end'
    case 66235:                     // 'namespace' 'eq'
    case 66747:                     // 'namespace' 'every'
    case 67771:                     // 'namespace' 'except'
    case 68283:                     // 'namespace' 'exit'
    case 68795:                     // 'namespace' 'external'
    case 69307:                     // 'namespace' 'false'
    case 69819:                     // 'namespace' 'first'
    case 70331:                     // 'namespace' 'following'
    case 70843:                     // 'namespace' 'following-sibling'
    case 71355:                     // 'namespace' 'for'
    case 72891:                     // 'namespace' 'from'
    case 73403:                     // 'namespace' 'ft-option'
    case 75451:                     // 'namespace' 'function'
    case 75963:                     // 'namespace' 'ge'
    case 76987:                     // 'namespace' 'group'
    case 78011:                     // 'namespace' 'gt'
    case 78523:                     // 'namespace' 'idiv'
    case 79035:                     // 'namespace' 'if'
    case 79547:                     // 'namespace' 'import'
    case 80059:                     // 'namespace' 'in'
    case 80571:                     // 'namespace' 'index'
    case 82619:                     // 'namespace' 'insert'
    case 83131:                     // 'namespace' 'instance'
    case 83643:                     // 'namespace' 'integrity'
    case 84155:                     // 'namespace' 'intersect'
    case 84667:                     // 'namespace' 'into'
    case 85179:                     // 'namespace' 'is'
    case 85691:                     // 'namespace' 'item'
    case 86203:                     // 'namespace' 'json'
    case 87227:                     // 'namespace' 'jsoniq'
    case 88763:                     // 'namespace' 'last'
    case 89275:                     // 'namespace' 'lax'
    case 89787:                     // 'namespace' 'le'
    case 90811:                     // 'namespace' 'let'
    case 91835:                     // 'namespace' 'loop'
    case 92859:                     // 'namespace' 'lt'
    case 93883:                     // 'namespace' 'mod'
    case 94395:                     // 'namespace' 'modify'
    case 94907:                     // 'namespace' 'module'
    case 95931:                     // 'namespace' 'namespace'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96955:                     // 'namespace' 'ne'
    case 99515:                     // 'namespace' 'node'
    case 100027:                    // 'namespace' 'nodes'
    case 101051:                    // 'namespace' 'null'
    case 101563:                    // 'namespace' 'object'
    case 103611:                    // 'namespace' 'only'
    case 104123:                    // 'namespace' 'option'
    case 104635:                    // 'namespace' 'or'
    case 105147:                    // 'namespace' 'order'
    case 105659:                    // 'namespace' 'ordered'
    case 106171:                    // 'namespace' 'ordering'
    case 107707:                    // 'namespace' 'parent'
    case 110779:                    // 'namespace' 'preceding'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 113851:                    // 'namespace' 'rename'
    case 114363:                    // 'namespace' 'replace'
    case 114875:                    // 'namespace' 'return'
    case 115387:                    // 'namespace' 'returning'
    case 115899:                    // 'namespace' 'revalidation'
    case 116923:                    // 'namespace' 'satisfies'
    case 117435:                    // 'namespace' 'schema'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 118459:                    // 'namespace' 'schema-element'
    case 118971:                    // 'namespace' 'score'
    case 119483:                    // 'namespace' 'select'
    case 119995:                    // 'namespace' 'self'
    case 122555:                    // 'namespace' 'sliding'
    case 123067:                    // 'namespace' 'some'
    case 123579:                    // 'namespace' 'stable'
    case 124091:                    // 'namespace' 'start'
    case 125627:                    // 'namespace' 'strict'
    case 127163:                    // 'namespace' 'switch'
    case 127675:                    // 'namespace' 'text'
    case 129723:                    // 'namespace' 'to'
    case 130235:                    // 'namespace' 'treat'
    case 130747:                    // 'namespace' 'true'
    case 131259:                    // 'namespace' 'try'
    case 131771:                    // 'namespace' 'tumbling'
    case 132283:                    // 'namespace' 'type'
    case 132795:                    // 'namespace' 'typeswitch'
    case 133307:                    // 'namespace' 'union'
    case 134331:                    // 'namespace' 'unordered'
    case 134843:                    // 'namespace' 'updating'
    case 136379:                    // 'namespace' 'validate'
    case 136891:                    // 'namespace' 'value'
    case 137403:                    // 'namespace' 'variable'
    case 137915:                    // 'namespace' 'version'
    case 139451:                    // 'namespace' 'where'
    case 139963:                    // 'namespace' 'while'
    case 141499:                    // 'namespace' 'with'
    case 143992:                    // 'document' '{'
    case 144059:                    // 'namespace' '{'
      try_Constructor();
      break;
    case 33:                        // '%'
    case 147:                       // 'function'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
      try_FunctionItemExpr();
      break;
    case -10:
    case 27929:                     // '{' ';'
      try_BlockExpr();
      break;
    case -11:
    case 10009:                     // '{' NCName^Token
    case 62233:                     // '{' 'document-node'
    case 64281:                     // '{' 'empty-sequence'
    case 85785:                     // '{' 'item'
    case 96537:                     // '{' 'namespace-node'
    case 99609:                     // '{' 'node'
    case 118041:                    // '{' 'schema-attribute'
    case 118553:                    // '{' 'schema-element'
      try_ObjectConstructor();
      break;
    case 69:                        // '['
      try_ArrayConstructor();
      break;
    case 283:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Literal();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(283);                     // '{|'
    lookahead1W(277);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|}'
    if (l1 != 286)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(286);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(283);                    // '{|'
    lookahead1W(277);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|' | '|}'
    if (l1 != 286)                  // '|}'
    {
      try_Expr();
    }
    shiftT(286);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(281);                     // '{'
    lookahead1W(286);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(281);                    // '{'
    lookahead1W(286);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|' | '}'
    if (l1 != 287)                  // '}'
    {
      try_PairConstructorList();
    }
    shiftT(287);                    // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' |
                                    // '//' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'not' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{' | '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(280);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(288);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 177:                       // 'let'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
      break;
    case 187:                       // 'namespace'
      lookahead2W(262);             // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(256);             // NCName^Token | S^WS | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 223:                       // 'replace'
      lookahead2W(189);             // S^WS | '#' | '(' | '(:' | ':' | 'json' | 'node' | 'value'
      break;
    case 266:                       // 'validate'
      lookahead2W(193);             // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(245);             // EQName^Token | S^WS | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(106);             // S^WS | '(:' | ':' | '{'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(188);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(167);             // S^WS | '#' | '$' | '(' | '(:' | ':'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(210);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 256:                       // 'try'
    case 262:                       // 'unordered'
      lookahead2W(169);             // S^WS | '#' | '(' | '(:' | ':' | '{'
      break;
    case 147:                       // 'function'
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(98);              // S^WS | '(' | '(:' | ':'
      break;
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(144);             // S^WS | '#' | '(' | '(:' | ':'
      break;
    default:
      lk = l1;
    }
    if (lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855)                // 'true' ':'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
    case 19:                        // NCName^Token
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 167:                       // 'item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 25671:                     // 'after' ':'
    case 25673:                     // 'allowing' ':'
    case 25674:                     // 'ancestor' ':'
    case 25675:                     // 'ancestor-or-self' ':'
    case 25676:                     // 'and' ':'
    case 25678:                     // 'append' ':'
    case 25680:                     // 'as' ':'
    case 25681:                     // 'ascending' ':'
    case 25682:                     // 'at' ':'
    case 25683:                     // 'attribute' ':'
    case 25684:                     // 'base-uri' ':'
    case 25685:                     // 'before' ':'
    case 25686:                     // 'boundary-space' ':'
    case 25687:                     // 'break' ':'
    case 25689:                     // 'case' ':'
    case 25690:                     // 'cast' ':'
    case 25691:                     // 'castable' ':'
    case 25692:                     // 'catch' ':'
    case 25694:                     // 'child' ':'
    case 25695:                     // 'collation' ':'
    case 25697:                     // 'comment' ':'
    case 25698:                     // 'constraint' ':'
    case 25699:                     // 'construction' ':'
    case 25702:                     // 'context' ':'
    case 25703:                     // 'continue' ':'
    case 25704:                     // 'copy' ':'
    case 25705:                     // 'copy-namespaces' ':'
    case 25706:                     // 'count' ':'
    case 25707:                     // 'decimal-format' ':'
    case 25709:                     // 'declare' ':'
    case 25710:                     // 'default' ':'
    case 25711:                     // 'delete' ':'
    case 25712:                     // 'descendant' ':'
    case 25713:                     // 'descendant-or-self' ':'
    case 25714:                     // 'descending' ':'
    case 25719:                     // 'div' ':'
    case 25720:                     // 'document' ':'
    case 25722:                     // 'element' ':'
    case 25723:                     // 'else' ':'
    case 25724:                     // 'empty' ':'
    case 25726:                     // 'encoding' ':'
    case 25727:                     // 'end' ':'
    case 25729:                     // 'eq' ':'
    case 25730:                     // 'every' ':'
    case 25732:                     // 'except' ':'
    case 25733:                     // 'exit' ':'
    case 25734:                     // 'external' ':'
    case 25736:                     // 'first' ':'
    case 25737:                     // 'following' ':'
    case 25738:                     // 'following-sibling' ':'
    case 25739:                     // 'for' ':'
    case 25742:                     // 'from' ':'
    case 25743:                     // 'ft-option' ':'
    case 25747:                     // 'function' ':'
    case 25748:                     // 'ge' ':'
    case 25750:                     // 'group' ':'
    case 25752:                     // 'gt' ':'
    case 25753:                     // 'idiv' ':'
    case 25754:                     // 'if' ':'
    case 25755:                     // 'import' ':'
    case 25756:                     // 'in' ':'
    case 25757:                     // 'index' ':'
    case 25761:                     // 'insert' ':'
    case 25762:                     // 'instance' ':'
    case 25763:                     // 'integrity' ':'
    case 25764:                     // 'intersect' ':'
    case 25765:                     // 'into' ':'
    case 25766:                     // 'is' ':'
    case 25768:                     // 'json' ':'
    case 25770:                     // 'jsoniq' ':'
    case 25773:                     // 'last' ':'
    case 25774:                     // 'lax' ':'
    case 25775:                     // 'le' ':'
    case 25777:                     // 'let' ':'
    case 25779:                     // 'loop' ':'
    case 25781:                     // 'lt' ':'
    case 25783:                     // 'mod' ':'
    case 25784:                     // 'modify' ':'
    case 25785:                     // 'module' ':'
    case 25787:                     // 'namespace' ':'
    case 25789:                     // 'ne' ':'
    case 25795:                     // 'nodes' ':'
    case 25798:                     // 'object' ':'
    case 25802:                     // 'only' ':'
    case 25803:                     // 'option' ':'
    case 25804:                     // 'or' ':'
    case 25805:                     // 'order' ':'
    case 25806:                     // 'ordered' ':'
    case 25807:                     // 'ordering' ':'
    case 25810:                     // 'parent' ':'
    case 25816:                     // 'preceding' ':'
    case 25817:                     // 'preceding-sibling' ':'
    case 25820:                     // 'processing-instruction' ':'
    case 25822:                     // 'rename' ':'
    case 25823:                     // 'replace' ':'
    case 25824:                     // 'return' ':'
    case 25825:                     // 'returning' ':'
    case 25826:                     // 'revalidation' ':'
    case 25828:                     // 'satisfies' ':'
    case 25829:                     // 'schema' ':'
    case 25832:                     // 'score' ':'
    case 25833:                     // 'select' ':'
    case 25834:                     // 'self' ':'
    case 25839:                     // 'sliding' ':'
    case 25840:                     // 'some' ':'
    case 25841:                     // 'stable' ':'
    case 25842:                     // 'start' ':'
    case 25845:                     // 'strict' ':'
    case 25848:                     // 'switch' ':'
    case 25849:                     // 'text' ':'
    case 25853:                     // 'to' ':'
    case 25854:                     // 'treat' ':'
    case 25856:                     // 'try' ':'
    case 25857:                     // 'tumbling' ':'
    case 25858:                     // 'type' ':'
    case 25859:                     // 'typeswitch' ':'
    case 25860:                     // 'union' ':'
    case 25862:                     // 'unordered' ':'
    case 25863:                     // 'updating' ':'
    case 25866:                     // 'validate' ':'
    case 25867:                     // 'value' ':'
    case 25868:                     // 'variable' ':'
    case 25869:                     // 'version' ':'
    case 25872:                     // 'where' ':'
    case 25873:                     // 'while' ':'
    case 25876:                     // 'with' ':'
      parse_NCName();
      break;
    default:
      parse_ExprSingle();
    }
    lookahead1W(26);                // S^WS | '(:' | ':'
    shift(50);                      // ':'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(280);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' |
                                    // ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
      break;
    case 161:                       // 'insert'
      lookahead2W(288);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // NCName^Token | S^WS | '#' | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' |
                                    // '/' | '//' | ':' | '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'not' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
      break;
    case 177:                       // 'let'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
      break;
    case 187:                       // 'namespace'
      lookahead2W(262);             // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(256);             // NCName^Token | S^WS | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | '{'
      break;
    case 223:                       // 'replace'
      lookahead2W(189);             // S^WS | '#' | '(' | '(:' | ':' | 'json' | 'node' | 'value'
      break;
    case 266:                       // 'validate'
      lookahead2W(193);             // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(245);             // EQName^Token | S^WS | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | '{'
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(106);             // S^WS | '(:' | ':' | '{'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '#' | '$' | '$$' | '%' | '(' | '(:' | ':' | '<' | '<!--' | '<?' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'node' | 'nodes' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'text' |
                                    // 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | '{' | '{|'
      break;
    case 139:                       // 'for'
    case 142:                       // 'from'
      lookahead2W(188);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(167);             // S^WS | '#' | '$' | '(' | '(:' | ':'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(210);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 256:                       // 'try'
    case 262:                       // 'unordered'
      lookahead2W(169);             // S^WS | '#' | '(' | '(:' | ':' | '{'
      break;
    case 147:                       // 'function'
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(98);              // S^WS | '(' | '(:' | ':'
      break;
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(144);             // S^WS | '#' | '(' | '(:' | ':'
      break;
    default:
      lk = l1;
    }
    if (lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855)                // 'true' ':'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          memoize(20, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(20, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -2:
    case 19:                        // NCName^Token
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 167:                       // 'item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 25671:                     // 'after' ':'
    case 25673:                     // 'allowing' ':'
    case 25674:                     // 'ancestor' ':'
    case 25675:                     // 'ancestor-or-self' ':'
    case 25676:                     // 'and' ':'
    case 25678:                     // 'append' ':'
    case 25680:                     // 'as' ':'
    case 25681:                     // 'ascending' ':'
    case 25682:                     // 'at' ':'
    case 25683:                     // 'attribute' ':'
    case 25684:                     // 'base-uri' ':'
    case 25685:                     // 'before' ':'
    case 25686:                     // 'boundary-space' ':'
    case 25687:                     // 'break' ':'
    case 25689:                     // 'case' ':'
    case 25690:                     // 'cast' ':'
    case 25691:                     // 'castable' ':'
    case 25692:                     // 'catch' ':'
    case 25694:                     // 'child' ':'
    case 25695:                     // 'collation' ':'
    case 25697:                     // 'comment' ':'
    case 25698:                     // 'constraint' ':'
    case 25699:                     // 'construction' ':'
    case 25702:                     // 'context' ':'
    case 25703:                     // 'continue' ':'
    case 25704:                     // 'copy' ':'
    case 25705:                     // 'copy-namespaces' ':'
    case 25706:                     // 'count' ':'
    case 25707:                     // 'decimal-format' ':'
    case 25709:                     // 'declare' ':'
    case 25710:                     // 'default' ':'
    case 25711:                     // 'delete' ':'
    case 25712:                     // 'descendant' ':'
    case 25713:                     // 'descendant-or-self' ':'
    case 25714:                     // 'descending' ':'
    case 25719:                     // 'div' ':'
    case 25720:                     // 'document' ':'
    case 25722:                     // 'element' ':'
    case 25723:                     // 'else' ':'
    case 25724:                     // 'empty' ':'
    case 25726:                     // 'encoding' ':'
    case 25727:                     // 'end' ':'
    case 25729:                     // 'eq' ':'
    case 25730:                     // 'every' ':'
    case 25732:                     // 'except' ':'
    case 25733:                     // 'exit' ':'
    case 25734:                     // 'external' ':'
    case 25736:                     // 'first' ':'
    case 25737:                     // 'following' ':'
    case 25738:                     // 'following-sibling' ':'
    case 25739:                     // 'for' ':'
    case 25742:                     // 'from' ':'
    case 25743:                     // 'ft-option' ':'
    case 25747:                     // 'function' ':'
    case 25748:                     // 'ge' ':'
    case 25750:                     // 'group' ':'
    case 25752:                     // 'gt' ':'
    case 25753:                     // 'idiv' ':'
    case 25754:                     // 'if' ':'
    case 25755:                     // 'import' ':'
    case 25756:                     // 'in' ':'
    case 25757:                     // 'index' ':'
    case 25761:                     // 'insert' ':'
    case 25762:                     // 'instance' ':'
    case 25763:                     // 'integrity' ':'
    case 25764:                     // 'intersect' ':'
    case 25765:                     // 'into' ':'
    case 25766:                     // 'is' ':'
    case 25768:                     // 'json' ':'
    case 25770:                     // 'jsoniq' ':'
    case 25773:                     // 'last' ':'
    case 25774:                     // 'lax' ':'
    case 25775:                     // 'le' ':'
    case 25777:                     // 'let' ':'
    case 25779:                     // 'loop' ':'
    case 25781:                     // 'lt' ':'
    case 25783:                     // 'mod' ':'
    case 25784:                     // 'modify' ':'
    case 25785:                     // 'module' ':'
    case 25787:                     // 'namespace' ':'
    case 25789:                     // 'ne' ':'
    case 25795:                     // 'nodes' ':'
    case 25798:                     // 'object' ':'
    case 25802:                     // 'only' ':'
    case 25803:                     // 'option' ':'
    case 25804:                     // 'or' ':'
    case 25805:                     // 'order' ':'
    case 25806:                     // 'ordered' ':'
    case 25807:                     // 'ordering' ':'
    case 25810:                     // 'parent' ':'
    case 25816:                     // 'preceding' ':'
    case 25817:                     // 'preceding-sibling' ':'
    case 25820:                     // 'processing-instruction' ':'
    case 25822:                     // 'rename' ':'
    case 25823:                     // 'replace' ':'
    case 25824:                     // 'return' ':'
    case 25825:                     // 'returning' ':'
    case 25826:                     // 'revalidation' ':'
    case 25828:                     // 'satisfies' ':'
    case 25829:                     // 'schema' ':'
    case 25832:                     // 'score' ':'
    case 25833:                     // 'select' ':'
    case 25834:                     // 'self' ':'
    case 25839:                     // 'sliding' ':'
    case 25840:                     // 'some' ':'
    case 25841:                     // 'stable' ':'
    case 25842:                     // 'start' ':'
    case 25845:                     // 'strict' ':'
    case 25848:                     // 'switch' ':'
    case 25849:                     // 'text' ':'
    case 25853:                     // 'to' ':'
    case 25854:                     // 'treat' ':'
    case 25856:                     // 'try' ':'
    case 25857:                     // 'tumbling' ':'
    case 25858:                     // 'type' ':'
    case 25859:                     // 'typeswitch' ':'
    case 25860:                     // 'union' ':'
    case 25862:                     // 'unordered' ':'
    case 25863:                     // 'updating' ':'
    case 25866:                     // 'validate' ':'
    case 25867:                     // 'value' ':'
    case 25868:                     // 'variable' ':'
    case 25869:                     // 'version' ':'
    case 25872:                     // 'where' ':'
    case 25873:                     // 'while' ':'
    case 25876:                     // 'with' ':'
      try_NCName();
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
    lookahead1W(26);                // S^WS | '(:' | ':'
    shiftT(50);                     // ':'
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'element' | 'else' | 'empty' | 'encoding' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' | 'function' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'json' | 'jsoniq' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'ne' | 'nodes' | 'not' | 'null' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' | 'score' |
                                    // 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(69);                      // '['
    lookahead1W(276);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(69);                     // '['
    lookahead1W(276);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|'
    if (l1 != 70)                   // ']'
    {
      try_Expr();
    }
    shiftT(70);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(281);                     // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(281);                    // '{'
    lookahead1W(282);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    shiftT(287);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(147);                     // 'function'
    lookahead1W(240);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'constraint' | 'construction' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'else' | 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'false' | 'first' | 'following' | 'following-sibling' |
                                    // 'for' | 'from' | 'ft-option' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' |
                                    // 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' |
                                    // 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'null' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'select' | 'self' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'true' |
                                    // 'try' | 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(158);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(253);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'false' |
                                    // 'first' | 'following' | 'following-sibling' | 'for' | 'from' | 'ft-option' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'import' | 'in' | 'index' |
                                    // 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' |
                                    // 'json' | 'json-item' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'nodes' | 'null' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(121);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '$$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<!--' | '<?' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'element' | 'else' |
                                    // 'empty' | 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' |
                                    // 'false' | 'first' | 'following' | 'following-sibling' | 'for' | 'from' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'json' | 'jsoniq' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'not' | 'null' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'score' | 'select' | 'self' | 'sliding' | 'some' | 'stable' |
                                    // 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'true' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(287);                   // '}'
      break;
    default:
      shift(134);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(JSONiqParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = JSONiqParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 8191; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = JSONiqParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = JSONiqParser.MAP1[(c0 & 15) + JSONiqParser.MAP1[(c1 & 31) + JSONiqParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (JSONiqParser.MAP2[m] > c0) hi = m - 1;
          else if (JSONiqParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = JSONiqParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 13) + code - 1;
      code = JSONiqParser.TRANSITION[(i0 & 31) + JSONiqParser.TRANSITION[i0 >> 5]];

      if (code > 8191)
      {
        result = code;
        code &= 8191;
        end = current;
      }
    }

    result >>= 13;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

JSONiqParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 8191;
  for (var i = 0; i < 289; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 4351 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = JSONiqParser.EXPECTED[(i0 & 3) + JSONiqParser.EXPECTED[(i1 & 3) + JSONiqParser.EXPECTED[(i2 & 15) + JSONiqParser.EXPECTED[i2 >> 4]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(JSONiqParser.TOKEN[j]);
      }
    }
  }
  return set;
};

JSONiqParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 40, 40
];

JSONiqParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 40, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 40, 40, 40, 40, 40, 40, 40, 70, 40, 40,
  /* 425 */ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

JSONiqParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 40, 30, 40, 30, 30,
  /* 17 */ 40
];

JSONiqParser.INITIAL =
[
  /*   0 */ 1, 24578, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292
];

JSONiqParser.TRANSITION =
[
  /*     0 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*    15 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*    30 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*    45 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*    60 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*    75 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*    90 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   105 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   120 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   135 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   150 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   165 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   180 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   195 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   210 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   225 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   240 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   255 */ 31307, 18432, 18468, 18474, 18468, 18468, 18512, 18506, 18452, 18468, 18544, 31307, 50511, 31307, 74637,
  /*   270 */ 31307, 31307, 31307, 31307, 22321, 22309, 20833, 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837,
  /*   285 */ 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090,
  /*   300 */ 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291,
  /*   315 */ 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652,
  /*   330 */ 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187,
  /*   345 */ 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750,
  /*   360 */ 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821,
  /*   375 */ 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920,
  /*   390 */ 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   405 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   420 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   435 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   450 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   465 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   480 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   495 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   510 */ 31307, 31307, 21984, 31307, 38225, 31307, 31307, 74362, 22019, 22045, 73323, 22091, 31307, 50511, 31307,
  /*   525 */ 43496, 31307, 31307, 31307, 31307, 22321, 20808, 22160, 18612, 18675, 31307, 64081, 37761, 18743, 18805,
  /*   540 */ 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000,
  /*   555 */ 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323,
  /*   570 */ 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604,
  /*   585 */ 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091,
  /*   600 */ 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635,
  /*   615 */ 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353,
  /*   630 */ 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854,
  /*   645 */ 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   660 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   675 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   690 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   705 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   720 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   735 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   750 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   765 */ 31307, 31307, 31307, 22192, 31307, 74645, 31307, 24869, 53713, 35181, 52710, 22243, 22272, 31307, 50511,
  /*   780 */ 31307, 22353, 31307, 31307, 31307, 31307, 22321, 22309, 61022, 18612, 18675, 31307, 64081, 37761, 18743,
  /*   795 */ 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871,
  /*   810 */ 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269,
  /*   825 */ 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572,
  /*   840 */ 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155,
  /*   855 */ 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782,
  /*   870 */ 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321,
  /*   885 */ 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761,
  /*   900 */ 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   915 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   930 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   945 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   960 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   975 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*   990 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1005 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1020 */ 31307, 31307, 31307, 31307, 22393, 31307, 40361, 31307, 72586, 29256, 22474, 49475, 22446, 22527, 31307,
  /*  1035 */ 58592, 31307, 22580, 31307, 31307, 31307, 31307, 22321, 22309, 27734, 18612, 18675, 31307, 64081, 37761,
  /*  1050 */ 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835,
  /*  1065 */ 53871, 19000, 22620, 19132, 38276, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940,
  /*  1080 */ 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540,
  /*  1095 */ 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123,
  /*  1110 */ 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725,
  /*  1125 */ 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289,
  /*  1140 */ 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888,
  /*  1155 */ 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1170 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1185 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1200 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1215 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1230 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1245 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1260 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1275 */ 31307, 31307, 31307, 31307, 31307, 22701, 31307, 60060, 31307, 52429, 22768, 22872, 31307, 22910, 22939,
  /*  1290 */ 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 46398, 20833, 18612, 18675, 31307, 64081,
  /*  1305 */ 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307,
  /*  1320 */ 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221,
  /*  1335 */ 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620,
  /*  1350 */ 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090,
  /*  1365 */ 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641,
  /*  1380 */ 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257,
  /*  1395 */ 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427,
  /*  1410 */ 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1425 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1440 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1455 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1470 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1485 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1500 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1515 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1530 */ 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 22992, 31307, 74362, 23026, 30290, 23075,
  /*  1545 */ 23104, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833, 18612, 18675, 31307,
  /*  1560 */ 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004,
  /*  1575 */ 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174,
  /*  1590 */ 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588,
  /*  1605 */ 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154,
  /*  1620 */ 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677,
  /*  1635 */ 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277,
  /*  1650 */ 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729,
  /*  1665 */ 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1680 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1695 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1710 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1725 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1740 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1755 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1770 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1785 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 31307, 48031, 55178, 31307,
  /*  1800 */ 31307, 23157, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833, 18612, 18675,
  /*  1815 */ 31307, 64081, 37761, 18743, 23246, 18837, 23342, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956,
  /*  1830 */ 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313,
  /*  1845 */ 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556,
  /*  1860 */ 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058,
  /*  1875 */ 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515,
  /*  1890 */ 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225,
  /*  1905 */ 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719,
  /*  1920 */ 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1935 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1950 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1965 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1980 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  1995 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2010 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2025 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2040 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 23410, 31307, 22361, 31307, 25741, 56721, 20603,
  /*  2055 */ 60094, 23461, 23490, 31307, 50511, 31307, 23543, 31307, 31307, 31307, 31307, 22321, 22309, 23583, 18612,
  /*  2070 */ 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924,
  /*  2085 */ 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237,
  /*  2100 */ 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508,
  /*  2115 */ 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011,
  /*  2130 */ 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690,
  /*  2145 */ 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141,
  /*  2160 */ 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840,
  /*  2175 */ 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2190 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2205 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2220 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2235 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2250 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2265 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2280 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2295 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 23615, 23710, 23716, 23703, 23769, 23672,
  /*  2310 */ 23748, 23640, 23801, 23830, 31307, 19784, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833,
  /*  2325 */ 18612, 23883, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420,
  /*  2340 */ 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189,
  /*  2355 */ 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412,
  /*  2370 */ 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964,
  /*  2385 */ 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658,
  /*  2400 */ 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072,
  /*  2415 */ 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822,
  /*  2430 */ 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307,
  /*  2445 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2460 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2475 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2490 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2505 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2520 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2535 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2550 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 23939, 31307, 72736, 30281, 44118,
  /*  2565 */ 74362, 23992, 24013, 23960, 24045, 31307, 24140, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309,
  /*  2580 */ 20833, 18612, 24098, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545,
  /*  2595 */ 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327,
  /*  2610 */ 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476,
  /*  2625 */ 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026,
  /*  2640 */ 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483,
  /*  2655 */ 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009,
  /*  2670 */ 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681,
  /*  2685 */ 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307,
  /*  2700 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2715 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2730 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2745 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2760 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2775 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2790 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2805 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 24208, 31307, 38225, 31307,
  /*  2820 */ 31307, 21193, 24265, 24347, 46126, 24294, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321,
  /*  2835 */ 22309, 20833, 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837, 24425, 18831, 53171, 46417, 18921,
  /*  2850 */ 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934,
  /*  2865 */ 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444,
  /*  2880 */ 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979,
  /*  2895 */ 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451,
  /*  2910 */ 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920,
  /*  2925 */ 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607,
  /*  2940 */ 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307,
  /*  2955 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2970 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  2985 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3000 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3015 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3030 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3045 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3060 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225,
  /*  3075 */ 31307, 31307, 57123, 24493, 56791, 56773, 24524, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307,
  /*  3090 */ 22321, 22309, 20833, 18612, 18675, 31307, 38176, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417,
  /*  3105 */ 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142,
  /*  3120 */ 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406,
  /*  3135 */ 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947,
  /*  3150 */ 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476,
  /*  3165 */ 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888,
  /*  3180 */ 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575,
  /*  3195 */ 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307,
  /*  3210 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3225 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3240 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3255 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3270 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3285 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3300 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3315 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 24592, 31307,
  /*  3330 */ 38225, 33012, 59229, 24604, 24636, 24655, 22994, 24704, 31307, 50511, 31307, 74637, 31307, 31307, 31307,
  /*  3345 */ 31307, 22321, 22309, 20833, 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171,
  /*  3360 */ 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100,
  /*  3375 */ 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470,
  /*  3390 */ 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893,
  /*  3405 */ 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359,
  /*  3420 */ 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865,
  /*  3435 */ 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554,
  /*  3450 */ 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307,
  /*  3465 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3480 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3495 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3510 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3525 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3540 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3555 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3570 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 24778,
  /*  3585 */ 31307, 38225, 31307, 31307, 74362, 24817, 36055, 36037, 24848, 31307, 50511, 31307, 74637, 31307, 31307,
  /*  3600 */ 24672, 56442, 68198, 54340, 47261, 73953, 26710, 63217, 63660, 31307, 31307, 66805, 24915, 54764, 47853,
  /*  3615 */ 58251, 46019, 42314, 51333, 36693, 58213, 33250, 31307, 31307, 33191, 40263, 31307, 44826, 51425, 61780,
  /*  3630 */ 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 45250, 34374, 31307, 31307, 28366, 74828,
  /*  3645 */ 24950, 51425, 30943, 36496, 44906, 45393, 57923, 42314, 68207, 29139, 58212, 58212, 41430, 31307, 31307,
  /*  3660 */ 74535, 24669, 51425, 54258, 48505, 44906, 72142, 38709, 42314, 43904, 35966, 58212, 41430, 31307, 24995,
  /*  3675 */ 24671, 51425, 68594, 44906, 63982, 44943, 43581, 58212, 59774, 25043, 45570, 59187, 65423, 44906, 43279,
  /*  3690 */ 49416, 50328, 54378, 57538, 59000, 24963, 71503, 25081, 25124, 68003, 41981, 56258, 41168, 25308, 67878,
  /*  3705 */ 32431, 25362, 25442, 25503, 34681, 58529, 71796, 59143, 25559, 56238, 43563, 33122, 37165, 25616, 37413,
  /*  3720 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3735 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3750 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3765 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3780 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3795 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3810 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3825 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3840 */ 21984, 31307, 38225, 31307, 31307, 74362, 25720, 33179, 25787, 25816, 31307, 50511, 31307, 48023, 31307,
  /*  3855 */ 31307, 31307, 31307, 22321, 24725, 20833, 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869,
  /*  3870 */ 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132,
  /*  3885 */ 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486,
  /*  3900 */ 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707,
  /*  3915 */ 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219,
  /*  3930 */ 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660,
  /*  3945 */ 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439,
  /*  3960 */ 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952,
  /*  3975 */ 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  3990 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4005 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4020 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4035 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4050 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4065 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4080 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4095 */ 31307, 25869, 31307, 41914, 31307, 31307, 74362, 25937, 39782, 51035, 25990, 31307, 50511, 31307, 45554,
  /*  4110 */ 65224, 31307, 31307, 31307, 22321, 22309, 61022, 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837,
  /*  4125 */ 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090,
  /*  4140 */ 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291,
  /*  4155 */ 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652,
  /*  4170 */ 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187,
  /*  4185 */ 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750,
  /*  4200 */ 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821,
  /*  4215 */ 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920,
  /*  4230 */ 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4245 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4260 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4275 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4290 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4305 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4320 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4335 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4350 */ 31307, 31307, 26043, 31307, 38225, 31307, 31307, 26054, 26086, 31307, 26124, 26153, 31307, 50511, 31307,
  /*  4365 */ 60438, 31307, 31307, 24672, 56442, 68198, 39166, 47261, 31307, 26710, 31307, 26206, 31307, 31307, 66805,
  /*  4380 */ 51425, 54764, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 42627, 31307, 31307, 71717, 31307, 31307,
  /*  4395 */ 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 43379, 31307, 31307,
  /*  4410 */ 61739, 31307, 64251, 51425, 51425, 52169, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212,
  /*  4425 */ 49059, 31307, 31307, 31307, 35065, 51425, 24918, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212,
  /*  4440 */ 45802, 31307, 31307, 19802, 51425, 20407, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106,
  /*  4455 */ 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109,
  /*  4470 */ 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122,
  /*  4485 */ 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4500 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4515 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4530 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4545 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4560 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4575 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4590 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4605 */ 31307, 31307, 31307, 26414, 31307, 22588, 26475, 35820, 40883, 26521, 26545, 40912, 26619, 31307, 65372,
  /*  4620 */ 31307, 74637, 31307, 31307, 70024, 27119, 26827, 28575, 27529, 18612, 26674, 31307, 64081, 37761, 18743,
  /*  4635 */ 26742, 28551, 26802, 28061, 27412, 46417, 18921, 26859, 26915, 26947, 27020, 53004, 31307, 51835, 53871,
  /*  4650 */ 19000, 27064, 27094, 70042, 27387, 27174, 27200, 45327, 19189, 24746, 27945, 27232, 29020, 26971, 19269,
  /*  4665 */ 19323, 19291, 31486, 27264, 26770, 29351, 27324, 27356, 28154, 28429, 19556, 19588, 27444, 27505, 27561,
  /*  4680 */ 28594, 27593, 19707, 19834, 19893, 27648, 27829, 29476, 27680, 28030, 27766, 20154, 20090, 27798, 26888,
  /*  4695 */ 28657, 27887, 20219, 20288, 27919, 27473, 27999, 28123, 27142, 65690, 28186, 29048, 28302, 20725, 20782,
  /*  4710 */ 56956, 27292, 28398, 29413, 28461, 28490, 28216, 21009, 28522, 29382, 28091, 21277, 28626, 28791, 21321,
  /*  4725 */ 28880, 28912, 28989, 29080, 29195, 27711, 29227, 29288, 29564, 27967, 29320, 56983, 27855, 29585, 29445,
  /*  4740 */ 29538, 29617, 29649, 28688, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4755 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4770 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4785 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4800 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4815 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4830 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4845 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  4860 */ 31307, 31307, 31307, 31307, 29681, 31307, 38225, 52488, 32160, 60889, 29724, 29743, 29692, 29789, 31307,
  /*  4875 */ 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833, 18612, 18675, 31307, 64081, 37761,
  /*  4890 */ 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307, 61336,
  /*  4905 */ 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221, 20574,
  /*  4920 */ 19269, 19323, 29842, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620, 19540,
  /*  4935 */ 19572, 19604, 29902, 19707, 19834, 19893, 29969, 19979, 30001, 30086, 20011, 20058, 20154, 20090, 20123,
  /*  4950 */ 20155, 20091, 20187, 20219, 20288, 30195, 20476, 30252, 20483, 65658, 65690, 20515, 65677, 20641, 20725,
  /*  4965 */ 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257, 21289,
  /*  4980 */ 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427, 20888,
  /*  4995 */ 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5010 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5025 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5040 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5055 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5070 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5085 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5100 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5115 */ 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 31307, 31307, 30322, 30340, 30386, 30415,
  /*  5130 */ 31307, 50511, 31307, 74637, 18968, 31307, 31307, 31307, 22321, 22309, 30468, 18612, 18675, 31307, 64081,
  /*  5145 */ 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004, 31307,
  /*  5160 */ 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174, 19221,
  /*  5175 */ 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588, 19620,
  /*  5190 */ 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154, 20090,
  /*  5205 */ 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677, 20641,
  /*  5220 */ 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277, 21257,
  /*  5235 */ 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729, 48427,
  /*  5250 */ 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5265 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5280 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5295 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5310 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5325 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5340 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5355 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5370 */ 31307, 31307, 31307, 31307, 31307, 31307, 30500, 31307, 38225, 31307, 31307, 74362, 30590, 30608, 44764,
  /*  5385 */ 30668, 31307, 50511, 31307, 74637, 40750, 31307, 69815, 31307, 22321, 22309, 30743, 18612, 18675, 31307,
  /*  5400 */ 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956, 53004,
  /*  5415 */ 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313, 19174,
  /*  5430 */ 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556, 19588,
  /*  5445 */ 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058, 20154,
  /*  5460 */ 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515, 65677,
  /*  5475 */ 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225, 21277,
  /*  5490 */ 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719, 21729,
  /*  5505 */ 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5520 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5535 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5550 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5565 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5580 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5595 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5610 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5625 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 30775, 31307, 71915, 31307, 31307, 74362, 30843, 30861,
  /*  5640 */ 46338, 30907, 31307, 50511, 31307, 74637, 64789, 31307, 31307, 31307, 22321, 22309, 30975, 18612, 18675,
  /*  5655 */ 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956,
  /*  5670 */ 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313,
  /*  5685 */ 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556,
  /*  5700 */ 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058,
  /*  5715 */ 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515,
  /*  5730 */ 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225,
  /*  5745 */ 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 31007, 20822, 55840, 21719,
  /*  5760 */ 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5775 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5790 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5805 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5820 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5835 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5850 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5865 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  5880 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31045, 31307, 38225, 48365, 31307, 68466, 22872,
  /*  5895 */ 31091, 22128, 31131, 31307, 50511, 31307, 46642, 31307, 31307, 31307, 31307, 22321, 55818, 31184, 18612,
  /*  5910 */ 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924,
  /*  5925 */ 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237,
  /*  5940 */ 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508,
  /*  5955 */ 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011,
  /*  5970 */ 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690,
  /*  5985 */ 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141,
  /*  6000 */ 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840,
  /*  6015 */ 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6030 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6045 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6060 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6075 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6090 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6105 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6120 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6135 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 31307, 74362,
  /*  6150 */ 22872, 31307, 46565, 31216, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833,
  /*  6165 */ 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420,
  /*  6180 */ 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189,
  /*  6195 */ 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412,
  /*  6210 */ 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964,
  /*  6225 */ 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658,
  /*  6240 */ 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072,
  /*  6255 */ 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822,
  /*  6270 */ 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307,
  /*  6285 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6300 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6315 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6330 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6345 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6360 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6375 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6390 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307,
  /*  6405 */ 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340,
  /*  6420 */ 32848, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493,
  /*  6435 */ 58212, 58213, 70006, 31307, 31307, 61744, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314,
  /*  6450 */ 42314, 50756, 67254, 58212, 58212, 59841, 31307, 31307, 61739, 31307, 74828, 51425, 51425, 60138, 44906,
  /*  6465 */ 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 49059, 31307, 57641, 31307, 73135, 51425, 59976,
  /*  6480 */ 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 45802, 31307, 31307, 19802, 51425, 20407, 44906,
  /*  6495 */ 51284, 42314, 55423, 58212, 68004, 31307, 22723, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307,
  /*  6510 */ 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365,
  /*  6525 */ 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307,
  /*  6540 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6555 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6570 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6585 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6600 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6615 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6630 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6645 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307,
  /*  6660 */ 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198,
  /*  6675 */ 54340, 32848, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314,
  /*  6690 */ 45493, 58212, 58213, 70006, 31307, 31307, 61744, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250,
  /*  6705 */ 42314, 42314, 50756, 67254, 58212, 58212, 59841, 31307, 31307, 61739, 31307, 74828, 51425, 51425, 60138,
  /*  6720 */ 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 49059, 31307, 31307, 31307, 73135, 51425,
  /*  6735 */ 59976, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 45802, 31307, 31307, 19802, 51425, 20407,
  /*  6750 */ 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784,
  /*  6765 */ 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249,
  /*  6780 */ 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307,
  /*  6795 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6810 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6825 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6840 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6855 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6870 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6885 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  6900 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785,
  /*  6915 */ 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442,
  /*  6930 */ 68198, 54340, 32848, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314,
  /*  6945 */ 42314, 45493, 58212, 58213, 70006, 31307, 31307, 61744, 31306, 31307, 44826, 51425, 61780, 44906, 44906,
  /*  6960 */ 58250, 42314, 42314, 50756, 67254, 58212, 58212, 59841, 31307, 31307, 61739, 31307, 74828, 51425, 51425,
  /*  6975 */ 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 49059, 31307, 31307, 31307, 73135,
  /*  6990 */ 51425, 59976, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 45802, 31307, 31307, 19802, 51425,
  /*  7005 */ 20407, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212,
  /*  7020 */ 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279,
  /*  7035 */ 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307,
  /*  7050 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7065 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7080 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7095 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7110 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7125 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7140 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7155 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307,
  /*  7170 */ 24785, 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 31307, 31307, 31307, 24672,
  /*  7185 */ 56442, 68198, 54340, 32848, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251,
  /*  7200 */ 42314, 42314, 45493, 58212, 58213, 70006, 31307, 31307, 61744, 31307, 31307, 44826, 51425, 61780, 44906,
  /*  7215 */ 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 59841, 31307, 31307, 18711, 31307, 74828, 51425,
  /*  7230 */ 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 49059, 31307, 31307, 31307,
  /*  7245 */ 73135, 51425, 59976, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 45802, 31307, 31307, 19802,
  /*  7260 */ 51425, 20407, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416,
  /*  7275 */ 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675,
  /*  7290 */ 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307,
  /*  7305 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7320 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7335 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7350 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7365 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7380 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7395 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7410 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269,
  /*  7425 */ 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 20977, 31307, 31307,
  /*  7440 */ 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 20975, 31307, 31307, 20319, 51425, 36959, 44906,
  /*  7455 */ 58251, 42314, 42314, 45493, 58212, 58213, 70006, 31307, 31307, 61744, 31307, 31307, 44826, 51425, 61780,
  /*  7470 */ 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 59841, 31307, 31307, 61739, 31307, 74828,
  /*  7485 */ 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 49059, 31307, 31307,
  /*  7500 */ 31307, 73135, 51425, 59976, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 45802, 31307, 31307,
  /*  7515 */ 19802, 51425, 20407, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313,
  /*  7530 */ 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545,
  /*  7545 */ 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413,
  /*  7560 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7575 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7590 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7605 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7620 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7635 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7650 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7665 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7680 */ 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 31307, 31307,
  /*  7695 */ 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959,
  /*  7710 */ 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307, 31307, 31307, 44826, 51425,
  /*  7725 */ 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307, 31307, 31307, 31307,
  /*  7740 */ 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 41430, 31307,
  /*  7755 */ 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 41430, 31307,
  /*  7770 */ 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906,
  /*  7785 */ 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351,
  /*  7800 */ 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616,
  /*  7815 */ 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7830 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7845 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7860 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7875 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7890 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7905 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7920 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  7935 */ 31307, 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 31307,
  /*  7950 */ 31307, 31307, 24672, 56442, 68198, 54340, 36627, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425,
  /*  7965 */ 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307, 31307, 31307, 44826,
  /*  7980 */ 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307, 31307, 31307,
  /*  7995 */ 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 41430,
  /*  8010 */ 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 41430,
  /*  8025 */ 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822,
  /*  8040 */ 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139,
  /*  8055 */ 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165,
  /*  8070 */ 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8085 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8100 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8115 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8130 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8145 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8160 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8175 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8190 */ 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 44506, 31307, 50511, 31307,
  /*  8205 */ 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 31307, 31307, 31307, 20319,
  /*  8220 */ 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307, 31307, 31307,
  /*  8235 */ 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307, 31307,
  /*  8250 */ 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212,
  /*  8265 */ 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212,
  /*  8280 */ 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106,
  /*  8295 */ 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109,
  /*  8310 */ 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122,
  /*  8325 */ 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8340 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8355 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8370 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8385 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8400 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8415 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8430 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8445 */ 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 31340, 23511, 35520, 35438, 31307, 50511,
  /*  8460 */ 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 38384, 31307, 31307,
  /*  8475 */ 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307, 31307,
  /*  8490 */ 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307,
  /*  8505 */ 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212,
  /*  8520 */ 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245, 58212,
  /*  8535 */ 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307,
  /*  8550 */ 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663,
  /*  8565 */ 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563,
  /*  8580 */ 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8595 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8610 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8625 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8640 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8655 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8670 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8685 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8700 */ 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23851, 31385, 31414, 31307,
  /*  8715 */ 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 31307, 31307,
  /*  8730 */ 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307,
  /*  8745 */ 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426,
  /*  8760 */ 31307, 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259,
  /*  8775 */ 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245,
  /*  8790 */ 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307,
  /*  8805 */ 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003,
  /*  8820 */ 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090,
  /*  8835 */ 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8850 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8865 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8880 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8895 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8910 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8925 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8940 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  8955 */ 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 35438,
  /*  8970 */ 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 31307,
  /*  8985 */ 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307,
  /*  9000 */ 31307, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212,
  /*  9015 */ 41426, 31307, 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760,
  /*  9030 */ 67259, 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314,
  /*  9045 */ 67245, 58212, 58212, 41430, 31307, 45046, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004,
  /*  9060 */ 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754,
  /*  9075 */ 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640,
  /*  9090 */ 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9105 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9120 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9135 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9150 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9165 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9180 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9195 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9210 */ 31307, 31307, 31307, 31307, 31307, 31307, 31481, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520,
  /*  9225 */ 35438, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307,
  /*  9240 */ 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307,
  /*  9255 */ 31307, 31307, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212,
  /*  9270 */ 58212, 41426, 31307, 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314,
  /*  9285 */ 50760, 67259, 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314,
  /*  9300 */ 42314, 67245, 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212,
  /*  9315 */ 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314,
  /*  9330 */ 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143,
  /*  9345 */ 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9360 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9375 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9390 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9405 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9420 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9435 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9450 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9465 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31518, 31307, 38225, 31307, 31307, 74362, 31589, 31543,
  /*  9480 */ 31656, 31684, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833, 18612, 18675,
  /*  9495 */ 31307, 69797, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956,
  /*  9510 */ 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313,
  /*  9525 */ 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556,
  /*  9540 */ 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058,
  /*  9555 */ 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515,
  /*  9570 */ 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 31737, 21072, 21141, 21225,
  /*  9585 */ 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719,
  /*  9600 */ 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9615 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9630 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9645 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9660 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9675 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9690 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9705 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9720 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 31307, 74362, 22872,
  /*  9735 */ 31307, 31307, 31859, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 61022, 18612,
  /*  9750 */ 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924,
  /*  9765 */ 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237,
  /*  9780 */ 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508,
  /*  9795 */ 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011,
  /*  9810 */ 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690,
  /*  9825 */ 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141,
  /*  9840 */ 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840,
  /*  9855 */ 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9870 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9885 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9900 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9915 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9930 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9945 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9960 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /*  9975 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31946, 38225, 31307, 31307, 74362,
  /*  9990 */ 31912, 31933, 56354, 31979, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309, 20833,
  /* 10005 */ 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420,
  /* 10020 */ 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189,
  /* 10035 */ 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412,
  /* 10050 */ 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964,
  /* 10065 */ 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658,
  /* 10080 */ 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072,
  /* 10095 */ 21141, 21225, 21277, 21257, 21289, 32048, 21353, 28821, 21439, 28848, 32080, 21575, 21607, 32154, 20822,
  /* 10110 */ 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307,
  /* 10125 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10140 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10155 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10170 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10185 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10200 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10215 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10230 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 31307,
  /* 10245 */ 74362, 22872, 31307, 31307, 31216, 31307, 50511, 31307, 74637, 31307, 31307, 31307, 31307, 22321, 22309,
  /* 10260 */ 20833, 18612, 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545,
  /* 10275 */ 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327,
  /* 10290 */ 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476,
  /* 10305 */ 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026,
  /* 10320 */ 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483,
  /* 10335 */ 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009,
  /* 10350 */ 21072, 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681,
  /* 10365 */ 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307,
  /* 10380 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10395 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10410 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10425 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10440 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10455 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10470 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10485 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 32192, 24785, 32227,
  /* 10500 */ 34385, 32246, 32278, 32309, 32340, 32369, 63230, 20693, 52039, 32401, 32526, 38658, 32595, 32627, 32704,
  /* 10515 */ 32794, 32880, 31307, 64295, 32983, 51895, 56749, 50529, 20319, 51425, 33054, 44906, 69343, 42314, 25092,
  /* 10530 */ 33100, 58212, 54055, 70006, 33154, 26587, 38421, 31307, 31705, 33223, 51425, 33294, 53077, 73065, 33356,
  /* 10545 */ 71340, 65914, 54316, 28270, 58212, 61250, 33405, 33474, 33511, 74253, 48892, 33559, 33641, 33689, 48487,
  /* 10560 */ 33769, 57761, 61082, 33801, 33844, 45476, 46863, 49769, 49158, 33899, 35045, 74692, 33970, 19374, 34038,
  /* 10575 */ 31827, 34078, 60175, 69136, 50747, 34289, 34144, 71867, 43617, 63038, 19915, 37647, 46915, 39986, 21407,
  /* 10590 */ 34228, 70473, 34273, 46845, 34321, 62523, 44262, 34006, 49698, 71778, 34417, 34485, 65549, 32479, 34536,
  /* 10605 */ 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 34622,
  /* 10620 */ 34654, 56660, 33737, 34713, 34766, 73640, 25330, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307,
  /* 10635 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10650 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10665 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10680 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10695 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10710 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10725 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10740 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 34896, 24785,
  /* 10755 */ 31307, 31307, 74362, 34934, 34960, 34992, 35024, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 35097,
  /* 10770 */ 53936, 54340, 35153, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314,
  /* 10785 */ 42314, 45493, 58212, 58213, 70006, 31307, 31307, 35219, 54166, 54175, 44826, 51425, 32762, 44906, 44906,
  /* 10800 */ 35270, 42314, 42314, 55409, 67254, 58212, 56152, 59841, 31307, 31307, 61739, 31307, 74828, 51425, 51425,
  /* 10815 */ 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 49059, 71546, 54178, 25049, 74123,
  /* 10830 */ 51425, 39719, 35362, 44906, 70158, 42314, 42314, 35408, 58212, 60292, 45802, 31307, 31307, 19802, 51425,
  /* 10845 */ 20407, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212,
  /* 10860 */ 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279,
  /* 10875 */ 26249, 26365, 71806, 69041, 35491, 35580, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307,
  /* 10890 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10905 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10920 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10935 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10950 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10965 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10980 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 10995 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 58984,
  /* 11010 */ 24785, 39796, 49920, 36091, 35643, 35674, 35705, 35734, 31307, 35801, 74548, 22736, 31307, 61672, 52151,
  /* 11025 */ 35852, 48155, 35947, 36013, 18565, 53017, 62240, 53885, 36123, 44695, 36149, 51425, 62576, 36181, 25276,
  /* 11040 */ 58806, 42314, 36217, 36312, 58213, 60948, 31307, 74422, 67905, 36357, 31307, 57185, 51425, 36466, 40417,
  /* 11055 */ 47862, 56451, 43017, 36535, 69480, 36604, 36659, 56141, 59841, 31307, 72339, 60975, 31307, 74828, 51425,
  /* 11070 */ 47504, 36725, 44906, 45163, 72141, 42314, 60377, 36775, 36807, 70939, 66021, 51810, 31307, 28957, 43512,
  /* 11085 */ 73135, 51425, 39280, 48505, 58078, 72142, 42314, 65139, 67245, 58212, 55563, 45802, 65759, 31307, 36845,
  /* 11100 */ 48952, 20407, 38981, 51284, 36562, 55423, 73407, 42467, 36896, 33989, 36938, 37005, 25527, 42957, 43051,
  /* 11115 */ 56114, 59784, 31307, 37099, 40821, 58250, 64475, 51628, 51643, 42663, 37109, 72139, 38351, 64545, 42675,
  /* 11130 */ 51279, 26249, 26365, 71806, 43107, 37141, 37197, 73640, 39090, 43563, 33122, 37165, 37287, 37383, 31307,
  /* 11145 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11160 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11175 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11190 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11205 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11220 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11235 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11250 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269,
  /* 11265 */ 34554, 24785, 74594, 25837, 74362, 37535, 37566, 37597, 37626, 31307, 50511, 31307, 31307, 31947, 31307,
  /* 11280 */ 37679, 39364, 46826, 37705, 32848, 23214, 37737, 22112, 22293, 44276, 66678, 30531, 66457, 37793, 37842,
  /* 11295 */ 36434, 33867, 37952, 38047, 63375, 38121, 70006, 31307, 38219, 38257, 31307, 21687, 44826, 51425, 47595,
  /* 11310 */ 44906, 44906, 38308, 42314, 42314, 38346, 67254, 58212, 62481, 69411, 38383, 50583, 38416, 31307, 32000,
  /* 11325 */ 38453, 51425, 43229, 38523, 44906, 38572, 38690, 42314, 48685, 32460, 38757, 71640, 49059, 31307, 31307,
  /* 11340 */ 64141, 22211, 51425, 38792, 38824, 26333, 20419, 42314, 35905, 50839, 58212, 67994, 45802, 38865, 49802,
  /* 11355 */ 19802, 38921, 53310, 61528, 61093, 54224, 55423, 56602, 47716, 42646, 31307, 37106, 40822, 44906, 42313,
  /* 11370 */ 49416, 58212, 59784, 44681, 24671, 36414, 50460, 60597, 49754, 55115, 42663, 37109, 72139, 67601, 64545,
  /* 11385 */ 42675, 51279, 26249, 39020, 39069, 39142, 39217, 39249, 73640, 39090, 43563, 33122, 37165, 25616, 37413,
  /* 11400 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11415 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11430 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11445 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11460 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11475 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11490 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11505 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11520 */ 31269, 23378, 24785, 26011, 34902, 39312, 39415, 39446, 39477, 39506, 60689, 39580, 39612, 66395, 39680,
  /* 11535 */ 39751, 39828, 39860, 39955, 40038, 40158, 61311, 41596, 40249, 40295, 31307, 23300, 25186, 64673, 40393,
  /* 11550 */ 40487, 43788, 40519, 71178, 40588, 40642, 48305, 62204, 40711, 19861, 40782, 40854, 29870, 40985, 41017,
  /* 11565 */ 41049, 41139, 33324, 41237, 41269, 48635, 41337, 41369, 41401, 41462, 69537, 41524, 32108, 41570, 41652,
  /* 11580 */ 22797, 25215, 65268, 62636, 71136, 38540, 43259, 41779, 58923, 42398, 65084, 68368, 41848, 41946, 42013,
  /* 11595 */ 42045, 42086, 42142, 70248, 42244, 42276, 69282, 58778, 62422, 42347, 42430, 54478, 42499, 45802, 26988,
  /* 11610 */ 31307, 22650, 42572, 67766, 37033, 68250, 71602, 55423, 45225, 42707, 52505, 42776, 42838, 42905, 70133,
  /* 11625 */ 42989, 38602, 43083, 43139, 30220, 43199, 56513, 35121, 45455, 43327, 68976, 35238, 37109, 44987, 25410,
  /* 11640 */ 51142, 43411, 69354, 43467, 43544, 43649, 70635, 43731, 43845, 43877, 43970, 43563, 52309, 44022, 25616,
  /* 11655 */ 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11670 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11685 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11700 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11715 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11730 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11745 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11760 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11775 */ 31307, 31269, 61627, 24785, 44080, 59457, 54713, 44150, 44181, 44212, 44241, 48374, 50511, 31307, 31307,
  /* 11790 */ 60830, 60835, 70392, 62297, 43699, 70659, 29163, 71058, 73713, 31307, 31307, 44308, 29925, 30032, 51425,
  /* 11805 */ 21522, 44906, 58251, 44360, 42314, 48702, 44401, 58213, 70006, 31307, 31307, 61744, 31307, 23362, 44826,
  /* 11820 */ 51425, 38951, 44906, 44907, 58250, 42314, 42314, 44439, 67254, 58212, 35981, 59841, 31307, 31307, 61739,
  /* 11835 */ 22878, 74828, 51425, 61154, 60138, 44906, 54841, 72141, 42314, 58464, 50760, 67259, 66617, 58212, 49059,
  /* 11850 */ 31307, 31307, 21109, 73135, 51425, 62145, 48505, 51521, 72142, 42314, 49400, 67245, 58212, 36678, 45802,
  /* 11865 */ 31307, 31307, 19802, 51425, 20407, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822,
  /* 11880 */ 44906, 42313, 49416, 58212, 47726, 31307, 46658, 68076, 58250, 69471, 70576, 68003, 42663, 37109, 72139,
  /* 11895 */ 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 46073, 54909,
  /* 11910 */ 44476, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11925 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11940 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11955 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11970 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 11985 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12000 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12015 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12030 */ 31307, 31307, 31269, 31307, 24785, 65006, 31307, 74362, 44578, 44599, 44631, 44660, 31307, 50511, 31307,
  /* 12045 */ 44727, 31307, 31307, 24672, 56442, 68198, 54340, 47917, 31307, 26710, 31307, 31307, 44762, 31307, 20319,
  /* 12060 */ 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307, 62879, 58380,
  /* 12075 */ 33930, 51425, 72841, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307, 20248,
  /* 12090 */ 44796, 31307, 35769, 51425, 44866, 60138, 44906, 44905, 72141, 42314, 44939, 50760, 67259, 42540, 58212,
  /* 12105 */ 63588, 32195, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212,
  /* 12120 */ 41430, 68412, 59297, 24671, 51425, 44975, 72219, 51284, 46269, 55423, 58212, 63401, 24372, 45019, 53225,
  /* 12135 */ 45088, 45140, 67564, 45195, 32494, 45282, 63859, 26278, 45359, 45425, 70519, 67099, 45525, 49206, 45602,
  /* 12150 */ 42935, 45659, 45714, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122,
  /* 12165 */ 63286, 45773, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12180 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12195 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12210 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12225 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12240 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12255 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12270 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12285 */ 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 41492, 31307, 57046,
  /* 12300 */ 31307, 70756, 30622, 47446, 30636, 65878, 45849, 33713, 34172, 31307, 20669, 45921, 73827, 31307, 31307,
  /* 12315 */ 20319, 44834, 36959, 44906, 45981, 42314, 57834, 46051, 58212, 54359, 33250, 31307, 31307, 31307, 31307,
  /* 12330 */ 46105, 44826, 51425, 34046, 44906, 44906, 73256, 42314, 42314, 63992, 67254, 58212, 58212, 49189, 46158,
  /* 12345 */ 31307, 31307, 31307, 30795, 46193, 51425, 60138, 46233, 44906, 72141, 46267, 42314, 50760, 43599, 58212,
  /* 12360 */ 58212, 41430, 31307, 46301, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 57932, 48179, 58212,
  /* 12375 */ 73365, 41430, 31307, 46336, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307,
  /* 12390 */ 37106, 40822, 44906, 42313, 49416, 58212, 59784, 23199, 49095, 40821, 58250, 42314, 49754, 68377, 42663,
  /* 12405 */ 40812, 72139, 58822, 57439, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563,
  /* 12420 */ 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12435 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12450 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12465 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12480 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12495 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12510 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12525 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12540 */ 31307, 31307, 31307, 31307, 31269, 26217, 24785, 62038, 37336, 46370, 46452, 46484, 46515, 46544, 31307,
  /* 12555 */ 50171, 31307, 73290, 46613, 66870, 46690, 67533, 46747, 46715, 36245, 31307, 30711, 31353, 31307, 31307,
  /* 12570 */ 46895, 21792, 46947, 47030, 47088, 47133, 58884, 41816, 47184, 47238, 52887, 33250, 47328, 28330, 47383,
  /* 12585 */ 22548, 47428, 47478, 45889, 47536, 53094, 34453, 47627, 63512, 38725, 67226, 47686, 73523, 32825, 47758,
  /* 12600 */ 31307, 39648, 72566, 47794, 74828, 57702, 35611, 68524, 49579, 47827, 71237, 62746, 68862, 34504, 47894,
  /* 12615 */ 72628, 39185, 47949, 41679, 47994, 51860, 20384, 22825, 48063, 48125, 36973, 48230, 71356, 59089, 48284,
  /* 12630 */ 32951, 63009, 48337, 48406, 25471, 48459, 21822, 26300, 48541, 71158, 48607, 48734, 48803, 48859, 48891,
  /* 12645 */ 63678, 48924, 41747, 48998, 49381, 49030, 49127, 59784, 44108, 49238, 40821, 58250, 42314, 49754, 68003,
  /* 12660 */ 49277, 39110, 49321, 68779, 49448, 28246, 51279, 26249, 49548, 49617, 49686, 71796, 59143, 73640, 39090,
  /* 12675 */ 49730, 43675, 37165, 25616, 37503, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12690 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12705 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12720 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12735 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12750 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12765 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12780 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12795 */ 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307, 49801, 58337, 22872, 24066, 49834, 49863,
  /* 12810 */ 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307, 31307,
  /* 12825 */ 31307, 31307, 20319, 22669, 36959, 54847, 58251, 42314, 34853, 45493, 58212, 64537, 33250, 31307, 31307,
  /* 12840 */ 31307, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212,
  /* 12855 */ 41426, 31307, 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760,
  /* 12870 */ 67259, 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314,
  /* 12885 */ 67245, 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004,
  /* 12900 */ 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754,
  /* 12915 */ 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640,
  /* 12930 */ 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12945 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12960 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12975 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 12990 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13005 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13020 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13035 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13050 */ 31307, 31307, 31307, 31307, 31307, 31307, 31269, 33479, 24785, 31307, 31307, 74362, 22872, 23511, 35520,
  /* 13065 */ 35438, 31307, 50511, 42054, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307,
  /* 13080 */ 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307,
  /* 13095 */ 31307, 31307, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212,
  /* 13110 */ 58212, 41426, 49916, 31307, 31307, 31307, 74828, 49952, 51425, 48966, 44906, 44906, 38314, 42314, 42314,
  /* 13125 */ 50760, 38000, 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314,
  /* 13140 */ 42314, 67245, 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212,
  /* 13155 */ 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314,
  /* 13170 */ 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143,
  /* 13185 */ 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13200 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13215 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13230 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13245 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13260 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13275 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13290 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13305 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 64970, 24785, 23551, 49989, 50039, 50068, 50089,
  /* 13320 */ 50121, 50150, 62229, 50511, 64722, 50203, 41964, 41620, 53454, 50238, 50270, 50302, 50372, 66930, 67711,
  /* 13335 */ 73758, 50492, 35459, 22059, 31768, 50633, 70105, 50692, 50792, 25391, 59715, 50871, 50928, 50976, 50660,
  /* 13350 */ 31307, 31307, 51008, 31307, 31307, 36388, 32734, 51067, 68130, 32672, 53110, 41107, 55727, 58475, 43435,
  /* 13365 */ 43923, 51129, 51174, 41538, 31307, 61727, 32554, 74828, 51425, 59901, 51223, 44906, 37872, 51273, 42314,
  /* 13380 */ 48660, 51316, 67259, 44407, 61226, 47762, 31307, 31624, 31307, 24669, 45879, 54258, 36743, 44906, 72142,
  /* 13395 */ 46007, 42314, 67245, 48761, 58212, 25645, 18699, 24176, 51365, 51424, 43762, 44906, 51457, 42314, 64441,
  /* 13410 */ 66610, 36325, 25011, 64208, 49245, 40822, 51515, 40455, 49416, 66515, 59784, 49077, 24671, 40821, 72666,
  /* 13425 */ 60211, 51553, 67133, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796,
  /* 13440 */ 59143, 51600, 68801, 51675, 51725, 65815, 51781, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13455 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13470 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13485 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13500 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13515 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13530 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13545 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13560 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 70973, 24785, 31307, 51892, 19675, 51927,
  /* 13575 */ 51958, 51989, 52018, 57069, 50511, 29757, 31307, 57064, 42110, 29810, 50426, 52071, 52103, 32848, 50206,
  /* 13590 */ 26710, 29937, 65329, 31307, 54697, 52201, 68307, 52241, 48575, 34827, 41298, 59688, 52287, 52341, 52377,
  /* 13605 */ 52409, 52461, 31307, 31307, 52537, 31307, 44826, 57214, 61780, 44906, 52572, 54778, 70498, 52606, 70871,
  /* 13620 */ 55436, 52650, 58212, 41426, 62867, 52708, 25889, 52742, 45056, 30143, 61373, 42212, 70815, 62946, 62366,
  /* 13635 */ 57819, 34864, 55983, 60257, 58212, 52791, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906,
  /* 13650 */ 72142, 42314, 42314, 67245, 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314,
  /* 13665 */ 55423, 58212, 68004, 52834, 31307, 32016, 40006, 44906, 41190, 49416, 57428, 59784, 31307, 24671, 40821,
  /* 13680 */ 58250, 42314, 52871, 68003, 42663, 37109, 72139, 38351, 64545, 52919, 39383, 52975, 53049, 44048, 58529,
  /* 13695 */ 71796, 59143, 73640, 39090, 60497, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13710 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13725 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13740 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13755 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13770 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13785 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13800 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13815 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31308, 53142, 71007, 53203, 53257,
  /* 13830 */ 53342, 53373, 53404, 53433, 49884, 69892, 53486, 47284, 53530, 65486, 53562, 53620, 53652, 53588, 53684,
  /* 13845 */ 40737, 31059, 53741, 53792, 53843, 50007, 21501, 46201, 70413, 44906, 53917, 42376, 67313, 53968, 54022,
  /* 13860 */ 66041, 54087, 52540, 54143, 31307, 74784, 25755, 64851, 41727, 61780, 32657, 48565, 58250, 54210, 41803,
  /* 13875 */ 44369, 52943, 36813, 58212, 41426, 31307, 57606, 31307, 31880, 18773, 54256, 58037, 37228, 44906, 73241,
  /* 13890 */ 54290, 42314, 62436, 61897, 54410, 58212, 54452, 35548, 54523, 73191, 44328, 54598, 54651, 54745, 62654,
  /* 13905 */ 54810, 40436, 54879, 63492, 54967, 55008, 55082, 55037, 55147, 21171, 55216, 55268, 55346, 64892, 55378,
  /* 13920 */ 55468, 55539, 38073, 55607, 26569, 60325, 29506, 55692, 39890, 41080, 55759, 54491, 55791, 73993, 45949,
  /* 13935 */ 55872, 55943, 56015, 56084, 56184, 51191, 37109, 52255, 56216, 64054, 32910, 57339, 56290, 56386, 54935,
  /* 13950 */ 56418, 56483, 56545, 73640, 39090, 43563, 40610, 56634, 25616, 37443, 31307, 31307, 31307, 31307, 31307,
  /* 13965 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13980 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 13995 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14010 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14025 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14040 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14055 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14070 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 56692, 52839, 57598,
  /* 14085 */ 74362, 56837, 56868, 56899, 56928, 57015, 19058, 57101, 26174, 58687, 57155, 57258, 57290, 57371, 57471,
  /* 14100 */ 57503, 30875, 59545, 54549, 57570, 57638, 50547, 20319, 57673, 57746, 37900, 57793, 65152, 57866, 57964,
  /* 14115 */ 50944, 48827, 33250, 73816, 66734, 62844, 24883, 22960, 69599, 58018, 67819, 68700, 58069, 68724, 58110,
  /* 14130 */ 58166, 55488, 46978, 64607, 52345, 50896, 74792, 40205, 31307, 31307, 74306, 44873, 28740, 60138, 38833,
  /* 14145 */ 25263, 72141, 69683, 43295, 50760, 67259, 42457, 58211, 41430, 20609, 47396, 31307, 23043, 51425, 33938,
  /* 14160 */ 58245, 44906, 68185, 42314, 42314, 58283, 58212, 58212, 58324, 58369, 31307, 39527, 51425, 38476, 44906,
  /* 14175 */ 55714, 69676, 34734, 69213, 48771, 42735, 31307, 30811, 58412, 73057, 43813, 49416, 58507, 68987, 31307,
  /* 14190 */ 24671, 40821, 58250, 42314, 49754, 68003, 58573, 45741, 58624, 72961, 58656, 58747, 58854, 58955, 59032,
  /* 14205 */ 59121, 59175, 71796, 59143, 73640, 39090, 43563, 47206, 25584, 25616, 37473, 31307, 31307, 31307, 31307,
  /* 14220 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14235 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14250 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14265 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14280 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14295 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14310 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14325 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 58715, 31307,
  /* 14340 */ 59219, 59261, 59329, 59360, 59391, 59423, 63896, 50511, 31307, 59444, 65212, 31307, 59594, 59489, 51749,
  /* 14355 */ 55292, 59521, 44527, 26710, 32563, 59577, 72057, 31307, 30117, 69979, 59626, 50445, 59658, 57895, 35330,
  /* 14370 */ 59747, 59816, 46998, 19764, 22414, 42744, 65352, 31307, 31307, 44826, 57226, 61780, 44906, 62930, 58250,
  /* 14385 */ 42314, 43035, 50756, 67254, 73594, 58212, 64632, 50565, 31307, 21101, 21636, 59873, 57714, 59974, 34590,
  /* 14400 */ 33068, 44906, 72141, 52618, 42314, 50760, 67259, 60008, 58212, 41430, 60054, 31307, 60092, 50601, 51425,
  /* 14415 */ 60126, 60170, 39907, 38491, 42314, 60207, 60243, 58212, 60289, 41430, 31307, 31307, 24671, 51425, 68594,
  /* 14430 */ 44906, 51284, 42314, 55423, 58212, 68004, 31307, 60324, 61361, 40822, 44906, 42313, 49416, 58212, 40108,
  /* 14445 */ 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 71876, 29110, 60357, 60409,
  /* 14460 */ 60478, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307,
  /* 14475 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14490 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14505 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14520 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14535 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14550 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14565 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14580 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785,
  /* 14595 */ 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307, 50511, 31307, 60529, 46161, 54111, 31152, 64876,
  /* 14610 */ 60564, 56576, 61583, 31307, 26710, 31307, 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314,
  /* 14625 */ 42314, 45493, 58212, 58213, 33250, 47795, 31307, 31307, 31307, 31307, 39711, 51425, 72915, 44906, 44906,
  /* 14640 */ 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307, 31307, 31307, 31307, 74828, 51425, 51425,
  /* 14655 */ 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 41430, 31307, 31307, 31307, 24669,
  /* 14670 */ 66813, 54258, 48505, 37054, 72142, 42314, 60596, 67245, 38760, 58212, 41430, 31307, 31307, 24671, 51425,
  /* 14685 */ 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212,
  /* 14700 */ 59784, 31307, 24671, 40821, 58250, 72792, 60629, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279,
  /* 14715 */ 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307,
  /* 14730 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14745 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14760 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14775 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14790 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14805 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14820 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 14835 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307,
  /* 14850 */ 66307, 31307, 40182, 60661, 60721, 60748, 60780, 60809, 30436, 53760, 69770, 69916, 24121, 60867, 60921,
  /* 14865 */ 61054, 61125, 61198, 61282, 31307, 72510, 61405, 74430, 65751, 63601, 21040, 61437, 61511, 51097, 46807,
  /* 14880 */ 63527, 48252, 61560, 67117, 52676, 61615, 31307, 67662, 31307, 61659, 61704, 44826, 61776, 34797, 38988,
  /* 14895 */ 46235, 61812, 61871, 42314, 61946, 32934, 40670, 38015, 62021, 35187, 40126, 62070, 72072, 62116, 62177,
  /* 14910 */ 62272, 33657, 47101, 62329, 34112, 36572, 62398, 50760, 62468, 40069, 62513, 38149, 31307, 19030, 35755,
  /* 14925 */ 62555, 62608, 54258, 51241, 45382, 72142, 62686, 42314, 67245, 62785, 58212, 67390, 20950, 31307, 33527,
  /* 14940 */ 51425, 62911, 52574, 33373, 42314, 62978, 58212, 51568, 23310, 31307, 30929, 55236, 44906, 65909, 67329,
  /* 14955 */ 58212, 59784, 26698, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 63070,
  /* 14970 */ 63102, 63188, 26365, 71806, 68916, 63262, 63318, 73640, 39090, 43563, 53990, 63433, 63559, 37413, 31307,
  /* 14985 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15000 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15015 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15030 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15045 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15060 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15075 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15090 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31269,
  /* 15105 */ 31307, 38889, 72350, 63633, 63710, 63739, 63771, 63802, 63834, 31307, 25670, 63891, 63858, 65599, 66367,
  /* 15120 */ 63928, 64352, 66097, 64024, 32848, 64123, 64173, 64240, 31307, 40953, 64283, 64327, 67001, 54619, 34435,
  /* 15135 */ 42873, 64384, 64473, 64507, 64577, 58213, 30558, 21987, 47351, 64091, 20256, 31307, 53287, 64664, 61166,
  /* 15150 */ 45108, 44906, 61989, 63156, 42314, 72805, 58292, 66501, 58212, 64705, 53498, 73940, 64754, 64821, 24560,
  /* 15165 */ 51425, 42600, 22840, 44906, 57318, 39923, 42314, 58134, 61839, 64924, 67264, 43354, 52132, 64966, 65002,
  /* 15180 */ 65038, 41706, 20327, 54258, 48505, 26321, 35376, 42315, 58910, 65070, 72997, 49644, 41430, 23429, 23178,
  /* 15195 */ 24461, 51425, 42861, 44906, 42304, 65116, 51693, 55101, 65184, 31307, 43167, 65256, 40822, 44906, 42313,
  /* 15210 */ 49416, 58212, 73117, 65300, 65404, 25243, 61479, 72879, 49754, 48198, 65455, 26443, 65518, 44444, 65631,
  /* 15225 */ 49289, 59061, 65722, 26365, 71806, 55314, 65791, 65847, 39037, 65946, 65978, 66073, 37165, 25616, 37413,
  /* 15240 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15255 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15270 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15285 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15300 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15315 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15330 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15345 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15360 */ 31269, 31307, 25958, 31307, 49498, 49516, 66129, 66160, 66191, 66223, 74105, 66280, 74482, 66248, 34196,
  /* 15375 */ 66339, 66427, 66547, 47566, 66579, 66649, 66710, 66777, 31557, 74053, 66845, 66902, 66971, 31799, 63957,
  /* 15390 */ 67045, 67165, 67197, 67296, 67361, 67439, 67502, 51392, 67633, 22495, 31307, 37351, 67694, 67743, 67798,
  /* 15405 */ 61780, 37255, 55900, 49585, 64413, 55970, 50820, 67851, 67966, 40679, 71700, 70720, 23125, 25688, 73701,
  /* 15420 */ 68036, 70219, 51425, 68108, 68162, 36185, 68239, 62717, 42314, 68282, 68339, 42527, 43938, 34350, 68409,
  /* 15435 */ 68444, 60532, 39340, 68498, 68574, 68638, 68670, 68756, 68833, 63133, 68894, 68948, 69019, 38631, 24158,
  /* 15450 */ 23907, 24233, 69073, 69108, 44906, 69168, 42314, 37982, 69200, 60022, 47296, 40937, 58541, 69245, 69314,
  /* 15465 */ 63463, 51483, 69386, 67470, 31013, 24393, 46778, 47056, 69443, 69512, 62815, 69569, 43990, 69647, 69715,
  /* 15480 */ 69865, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 69948, 70074, 70190, 45627, 57986, 37165, 25616,
  /* 15495 */ 25155, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15510 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15525 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15540 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15555 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15570 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15585 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15600 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15615 */ 31307, 31269, 31307, 67407, 31307, 59289, 74362, 70280, 70311, 70342, 70371, 31307, 44546, 25905, 64779,
  /* 15630 */ 36269, 31307, 52759, 70445, 70551, 70608, 70691, 70752, 26710, 31307, 23274, 31435, 31099, 28719, 51425,
  /* 15645 */ 70788, 44906, 58438, 70862, 62753, 70903, 70935, 64934, 33587, 18889, 70971, 71005, 71039, 33022, 48093,
  /* 15660 */ 42170, 71106, 34241, 71210, 37920, 58179, 71310, 41205, 71388, 71425, 54041, 71457, 72497, 41907, 31307,
  /* 15675 */ 62084, 55184, 42195, 51425, 69615, 34101, 44906, 72141, 56039, 42314, 50760, 71393, 58212, 58212, 37316,
  /* 15690 */ 39632, 31307, 31307, 19737, 51425, 54258, 71493, 44906, 68606, 42314, 42314, 55507, 58212, 58212, 65578,
  /* 15705 */ 31307, 71535, 46581, 51425, 30054, 44906, 71578, 42314, 47654, 71634, 68004, 28350, 31307, 37106, 40822,
  /* 15720 */ 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139,
  /* 15735 */ 71672, 69743, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 45682, 26382, 71749, 43563, 33122, 49351,
  /* 15750 */ 71838, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15765 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15780 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15795 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15810 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15825 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15840 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15855 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 15870 */ 31307, 31307, 31269, 31307, 45817, 71962, 71908, 71975, 71947, 24315, 72007, 72036, 31307, 50511, 31307,
  /* 15885 */ 31307, 31307, 31307, 54566, 61462, 72104, 57402, 32848, 60446, 72315, 31307, 31307, 72255, 31307, 21384,
  /* 15900 */ 52209, 39548, 44906, 72136, 71264, 35313, 45493, 72174, 40089, 33250, 31307, 31307, 31610, 31307, 33432,
  /* 15915 */ 44826, 59927, 61780, 44906, 72213, 58250, 42314, 40550, 50756, 67254, 55575, 58212, 41426, 31307, 31307,
  /* 15930 */ 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212,
  /* 15945 */ 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212,
  /* 15960 */ 41430, 47962, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 26092, 31307, 37106,
  /* 15975 */ 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 30692, 37109,
  /* 15990 */ 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122,
  /* 16005 */ 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16020 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16035 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16050 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16065 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16080 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16095 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16110 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16125 */ 31307, 31307, 31307, 31269, 31307, 26489, 31307, 72251, 72287, 72382, 72413, 72444, 72476, 31307, 50511,
  /* 16140 */ 31307, 31307, 31307, 31307, 24672, 56442, 47152, 66481, 72542, 31307, 26710, 31307, 31307, 64197, 31307,
  /* 16155 */ 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307, 31307, 31307, 31307,
  /* 16170 */ 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426, 31307,
  /* 16185 */ 31307, 32122, 31307, 31274, 51425, 51425, 59942, 44906, 44906, 55911, 42314, 42314, 50760, 72618, 58212,
  /* 16200 */ 58212, 41430, 31449, 31307, 31307, 24669, 28759, 54258, 48505, 72660, 72142, 35915, 40556, 66001, 52802,
  /* 16215 */ 72181, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307, 31307,
  /* 16230 */ 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003, 42663,
  /* 16245 */ 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090, 43563,
  /* 16260 */ 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16275 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16290 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16305 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16320 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16335 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16350 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16365 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16380 */ 31307, 31307, 31307, 31307, 31481, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 35438, 31307,
  /* 16395 */ 53811, 27032, 31307, 46304, 30354, 31237, 61971, 72698, 63349, 32848, 31307, 26642, 27616, 72730, 31307,
  /* 16410 */ 31307, 20319, 68064, 36959, 70830, 36503, 42314, 72768, 61914, 73443, 50340, 54678, 31307, 31307, 31307,
  /* 16425 */ 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212, 58212, 41426,
  /* 16440 */ 31307, 31307, 73559, 31307, 36280, 51425, 72837, 36864, 48509, 44906, 72141, 42314, 72873, 50760, 67259,
  /* 16455 */ 38089, 58212, 71461, 31307, 31307, 31307, 24669, 72911, 54258, 68542, 44906, 72142, 72947, 42314, 67245,
  /* 16470 */ 72993, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 68004, 31307,
  /* 16485 */ 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314, 49754, 68003,
  /* 16500 */ 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640, 39090,
  /* 16515 */ 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16530 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16545 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16560 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16575 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16590 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16605 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16620 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16635 */ 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 22872, 23511, 35520, 41878,
  /* 16650 */ 31307, 50511, 44730, 31307, 31307, 31307, 34572, 73029, 67074, 73097, 73167, 66939, 26710, 31307, 31307,
  /* 16665 */ 31307, 66745, 20319, 51425, 73223, 44906, 35879, 42314, 41305, 45493, 58212, 49654, 33250, 73288, 31307,
  /* 16680 */ 31307, 31307, 73322, 50402, 49957, 61780, 62348, 37067, 58250, 67587, 33812, 50756, 54976, 58212, 73355,
  /* 16695 */ 41426, 24445, 31307, 31307, 31307, 74828, 67013, 51425, 60138, 37810, 44906, 72141, 73490, 42314, 56052,
  /* 16710 */ 73397, 73439, 58212, 41430, 31307, 31307, 36906, 24669, 69076, 54258, 48505, 69264, 72142, 42314, 73475,
  /* 16725 */ 67245, 58212, 73522, 41430, 31307, 73555, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212, 54420,
  /* 16740 */ 31307, 56805, 74322, 30163, 44906, 35296, 49416, 73591, 59784, 74200, 24671, 73626, 50720, 71278, 49754,
  /* 16755 */ 73672, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143, 73640,
  /* 16770 */ 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16785 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16800 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16815 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16830 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16845 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16860 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16875 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 16890 */ 31307, 31307, 31307, 31307, 31307, 31307, 31269, 31307, 24785, 31307, 31307, 74362, 73745, 23511, 35520,
  /* 16905 */ 35438, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340, 32848, 31307, 26710, 31307,
  /* 16920 */ 31307, 31307, 31307, 20319, 51425, 36959, 44906, 58251, 42314, 42314, 45493, 58212, 58213, 33250, 31307,
  /* 16935 */ 31307, 31307, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314, 42314, 50756, 67254, 58212,
  /* 16950 */ 58212, 41426, 31307, 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906, 44906, 72141, 42314, 42314,
  /* 16965 */ 50760, 67259, 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258, 48505, 44906, 72142, 42314,
  /* 16980 */ 42314, 67245, 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906, 51284, 42314, 55423, 58212,
  /* 16995 */ 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307, 24671, 40821, 58250, 42314,
  /* 17010 */ 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365, 71806, 58529, 71796, 59143,
  /* 17025 */ 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17040 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17055 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17070 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17085 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17100 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17115 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17130 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17145 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 33262, 73790, 33609, 40326, 40355, 73859,
  /* 17160 */ 73890, 73919, 31307, 50511, 31307, 73985, 31307, 31307, 18580, 57527, 22321, 71074, 20833, 18612, 18675,
  /* 17175 */ 31307, 64081, 37761, 18743, 74025, 18837, 74085, 18831, 53171, 46417, 18921, 20545, 46420, 18924, 18956,
  /* 17190 */ 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237, 45313,
  /* 17205 */ 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508, 19556,
  /* 17220 */ 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011, 20058,
  /* 17235 */ 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690, 20515,
  /* 17250 */ 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141, 21225,
  /* 17265 */ 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840, 21719,
  /* 17280 */ 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17295 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17310 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17325 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17340 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17355 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17370 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17385 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17400 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 18635, 18643, 74155,
  /* 17415 */ 74186, 21649, 74232, 31307, 50511, 31307, 74637, 31307, 42806, 42805, 31307, 22321, 60999, 20833, 18612,
  /* 17430 */ 18675, 31307, 64081, 37761, 18743, 18805, 18837, 18869, 18831, 53171, 46417, 18921, 20545, 46420, 18924,
  /* 17445 */ 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189, 19237,
  /* 17460 */ 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412, 19508,
  /* 17475 */ 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964, 20011,
  /* 17490 */ 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658, 65690,
  /* 17505 */ 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072, 21141,
  /* 17520 */ 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822, 55840,
  /* 17535 */ 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17550 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17565 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17580 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17595 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17610 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17625 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17640 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17655 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 33442, 31307, 31307, 38187,
  /* 17670 */ 56321, 56340, 55050, 74285, 31307, 50511, 31307, 74354, 36069, 31307, 36083, 31307, 22321, 22309, 20833,
  /* 17685 */ 18612, 18675, 31307, 64081, 37761, 18743, 74394, 18837, 74462, 18831, 53171, 46417, 18921, 20545, 46420,
  /* 17700 */ 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934, 45327, 19189,
  /* 17715 */ 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444, 19476, 19412,
  /* 17730 */ 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979, 20026, 19964,
  /* 17745 */ 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451, 20483, 65658,
  /* 17760 */ 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920, 21009, 21072,
  /* 17775 */ 21141, 21225, 21277, 21257, 21289, 21321, 21353, 28821, 21439, 28848, 21554, 21575, 21607, 21681, 20822,
  /* 17790 */ 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307, 31307, 31307,
  /* 17805 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17820 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17835 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17850 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17865 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17880 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17895 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 17910 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 21984, 31307, 38225, 31307, 31307,
  /* 17925 */ 74362, 22872, 31307, 31307, 74514, 31307, 50511, 31307, 31307, 31307, 31307, 24672, 56442, 68198, 54340,
  /* 17940 */ 47261, 31307, 26710, 31307, 31307, 31307, 31307, 66805, 51425, 54764, 44906, 58251, 42314, 42314, 45493,
  /* 17955 */ 58212, 58213, 33250, 31307, 31307, 31307, 31307, 31307, 44826, 51425, 61780, 44906, 44906, 58250, 42314,
  /* 17970 */ 42314, 50756, 67254, 58212, 58212, 41426, 31307, 31307, 31307, 31307, 74828, 51425, 51425, 60138, 44906,
  /* 17985 */ 44906, 72141, 42314, 42314, 50760, 67259, 58212, 58212, 41430, 31307, 31307, 31307, 24669, 51425, 54258,
  /* 18000 */ 48505, 44906, 72142, 42314, 42314, 67245, 58212, 58212, 41430, 31307, 31307, 24671, 51425, 68594, 44906,
  /* 18015 */ 51284, 42314, 55423, 58212, 68004, 31307, 31307, 37106, 40822, 44906, 42313, 49416, 58212, 59784, 31307,
  /* 18030 */ 24671, 40821, 58250, 42314, 49754, 68003, 42663, 37109, 72139, 38351, 64545, 42675, 51279, 26249, 26365,
  /* 18045 */ 71806, 58529, 71796, 59143, 73640, 39090, 43563, 33122, 37165, 25616, 37413, 31307, 31307, 31307, 31307,
  /* 18060 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18075 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18090 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18105 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18120 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18135 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18150 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18165 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18180 */ 24545, 31307, 69833, 74580, 40217, 74626, 31307, 31307, 31307, 74637, 31307, 31307, 31307, 31307, 22321,
  /* 18195 */ 22309, 20833, 18612, 74677, 31307, 64081, 37761, 18743, 74025, 18837, 74085, 18831, 53171, 46417, 18921,
  /* 18210 */ 20545, 46420, 18924, 18956, 53004, 31307, 51835, 53871, 19000, 19090, 19132, 67924, 19100, 19142, 67934,
  /* 18225 */ 45327, 19189, 19237, 45313, 19174, 19221, 28940, 19269, 19323, 19291, 31486, 19355, 19470, 19406, 19444,
  /* 18240 */ 19476, 19412, 19508, 19556, 19588, 19620, 19540, 19572, 19604, 19652, 19707, 19834, 19893, 19947, 19979,
  /* 18255 */ 20026, 19964, 20011, 20058, 20154, 20090, 20123, 20155, 20091, 20187, 20219, 20288, 20359, 20476, 20451,
  /* 18270 */ 20483, 65658, 65690, 20515, 65677, 20641, 20725, 20782, 55635, 20750, 55660, 21884, 20865, 21888, 20920,
  /* 18285 */ 21009, 21072, 21141, 21225, 21277, 21257, 21289, 74724, 21353, 28821, 21439, 28848, 74756, 21575, 21607,
  /* 18300 */ 74824, 20822, 55840, 21719, 21729, 48427, 20888, 21761, 21854, 21920, 21952, 21470, 31307, 31307, 31307,
  /* 18315 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18330 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18345 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18360 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18375 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18390 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18405 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307,
  /* 18420 */ 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 31307, 1, 24578, 3, 0, 0, 0,
  /* 18438 */ 0, 0, 0, 0, 180526, 180526, 180526, 180526, 0, 188719, 188719, 188719, 180526, 180526, 188719, 188719,
  /* 18454 */ 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 0, 180526,
  /* 18468 */ 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719,
  /* 18481 */ 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719,
  /* 18494 */ 188719, 188719, 188719, 188719, 188719, 188719, 368, 188719, 180526, 188719, 188719, 188719, 188719,
  /* 18507 */ 188719, 188719, 188719, 188719, 131072, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719,
  /* 18520 */ 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719, 188719,
  /* 18533 */ 188719, 188719, 188719, 188719, 188719, 139264, 147456, 188719, 188719, 188719, 188719, 188719, 188719,
  /* 18546 */ 188719, 188719, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 180526, 188719, 304, 305, 0, 4268032, 308, 309, 0, 0,
  /* 18567 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
  /* 18601 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4874240, 0, 0, 4923392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18632 */ 0, 0, 5480448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2334720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18663 */ 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18689 */ 6275072, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18720 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 2430, 5447680, 0, 0, 5562368,
  /* 18747 */ 5636096, 5685248, 0, 5750784, 5873664, 0, 0, 0, 0, 5636096, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18770 */ 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 2466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18801 */ 57875, 57875, 57875, 59833, 0, 0, 0, 0, 0, 5480448, 0, 872, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0,
  /* 18824 */ 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 5414912, 0, 5447680, 0, 0, 5480448, 5562368, 0, 0,
  /* 18849 */ 5636096, 0, 5685248, 0, 0, 5750784, 0, 0, 0, 0, 0, 5873664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0,
  /* 18874 */ 0, 0, 0, 0, 0, 0, 0, 0, 942, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18904 */ 1815, 0, 0, 0, 0, 0, 0, 0, 1823, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 5636096, 4358144, 5685248, 4358144,
  /* 18926 */ 4358144, 5750784, 4358144, 4358144, 4358144, 4358144, 4358144, 5873664, 4358144, 4358144, 4358144,
  /* 18937 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6275072, 4358144, 4358144,
  /* 18948 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 4923392, 0, 0, 0, 0, 4923392, 4358144,
  /* 18963 */ 4358144, 4358144, 4358144, 4358144, 4366336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18988 */ 0, 0, 0, 0, 483328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4825088, 0, 0, 5177344, 0, 0, 0, 0, 5701632, 0, 0, 0,
  /* 19016 */ 0, 0, 0, 0, 0, 0, 0, 5808128, 0, 0, 0, 0, 4792320, 4833280, 0, 0, 0, 0, 0, 0, 2871, 0, 0, 2874, 0, 0, 0,
  /* 19043 */ 0, 0, 0, 2880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2888, 0, 0, 0, 0, 0, 0, 0, 719, 0, 0, 0, 0, 0, 0, 726, 368,
  /* 19074 */ 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 5701632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4825088, 0,
  /* 19103 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5177344, 0, 0, 0, 0, 5242880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19134 */ 5242880, 0, 0, 0, 0, 0, 0, 0, 5341184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5627904, 5652480, 0, 5701632, 0, 0,
  /* 19159 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 5177344, 4358144, 4358144, 4358144, 4358144,
  /* 19180 */ 4358144, 5242880, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5341184, 4358144,
  /* 19191 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19202 */ 5627904, 5652480, 4358144, 5701632, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19213 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5808128,
  /* 19224 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19235 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19246 */ 4358144, 4358144, 6299648, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19257 */ 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4931584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19283 */ 5210112, 0, 5365760, 0, 5554176, 5570560, 0, 5668864, 0, 0, 5791744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19306 */ 0, 0, 6152192, 0, 0, 0, 6316032, 0, 0, 0, 0, 5816320, 6291456, 0, 0, 0, 0, 0, 0, 6201344, 6242304,
  /* 19327 */ 6250496, 0, 0, 0, 0, 6422528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5619712, 0, 0, 0, 0, 0, 0, 0, 5578752,
  /* 19353 */ 5726208, 5758976, 0, 0, 5455872, 0, 0, 0, 0, 0, 0, 0, 0, 6062080, 6463488, 0, 5398528, 0, 0, 0, 6479872,
  /* 19374 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2930, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875,
  /* 19400 */ 57875, 57875, 60282, 57875, 57875, 57875, 0, 5455872, 0, 0, 0, 0, 0, 5554176, 5578752, 5619712, 5668864,
  /* 19417 */ 0, 0, 0, 0, 5816320, 0, 5857280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6119424, 0, 6168576, 0, 0, 0, 0,
  /* 19443 */ 6291456, 6168576, 0, 0, 0, 0, 6291456, 0, 6316032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6463488, 0, 0, 0, 0, 0, 0,
  /* 19468 */ 0, 0, 0, 0, 0, 0, 0, 4931584, 4939776, 0, 0, 0, 0, 0, 5054464, 0, 0, 0, 0, 0, 0, 0, 5210112, 0, 0, 0, 0,
  /* 19495 */ 5292032, 0, 0, 0, 0, 5365760, 0, 0, 5455872, 0, 0, 0, 0, 0, 6316032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6463488,
  /* 19520 */ 0, 0, 0, 0, 0, 5791744, 0, 0, 6242304, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19536 */ 4358144, 4358144, 4358144, 4931584, 6242304, 0, 0, 0, 6316032, 4358144, 4358144, 4358144, 4358144,
  /* 19549 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4931584, 4939776, 4358144, 4358144, 4358144,
  /* 19560 */ 4358144, 4358144, 4358144, 5054464, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19571 */ 4358144, 5210112, 4358144, 4358144, 4358144, 4358144, 5292032, 4358144, 4358144, 4358144, 4358144,
  /* 19582 */ 5365760, 4358144, 4358144, 4358144, 5455872, 4358144, 4358144, 4358144, 4358144, 4358144, 5554176,
  /* 19593 */ 5570560, 5578752, 5619712, 5668864, 4358144, 4358144, 4358144, 5791744, 5816320, 4358144, 5857280,
  /* 19604 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19615 */ 4358144, 4358144, 6119424, 4358144, 6168576, 4358144, 4358144, 4358144, 4358144, 6242304, 4358144,
  /* 19626 */ 6291456, 4358144, 6316032, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 19637 */ 4358144, 6463488, 0, 0, 0, 0, 0, 0, 5570560, 5578752, 0, 5791744, 0, 0, 0, 4358144, 4358144, 6463488, 0,
  /* 19656 */ 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 4956160, 4964352, 0, 0,
  /* 19677 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0, 139264, 147456, 0, 0, 0, 0, 0,
  /* 19708 */ 5218304, 0, 0, 0, 0, 5799936, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 6373376, 6389760, 0, 0, 6488064,
  /* 19729 */ 6103040, 0, 0, 0, 0, 0, 6184960, 5316608, 0, 0, 0, 0, 0, 0, 2923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19757 */ 0, 57875, 57875, 57875, 57875, 57875, 60280, 57875, 57875, 57875, 57875, 57875, 584, 1581, 584, 584, 584,
  /* 19774 */ 584, 1196, 0, 0, 1782, 0, 0, 0, 0, 1789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399831, 4399831,
  /* 19801 */ 4399831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2930, 0, 57875, 57875, 57875, 57875, 57875,
  /* 19826 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 5644288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6217728, 0,
  /* 19847 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5390336, 5308416, 5488640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
  /* 19875 */ 0, 1847, 0, 0, 1850, 0, 1852, 0, 0, 0, 0, 0, 0, 1859, 1860, 0, 0, 0, 0, 0, 0, 0, 5070848, 5431296, 0,
  /* 19900 */ 6430720, 0, 5160960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3220,
  /* 19928 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3233, 0, 0, 0, 0, 0, 0, 6283264, 6332416, 0, 0, 0, 5881856, 0,
  /* 19954 */ 5382144, 0, 0, 0, 0, 0, 0, 6266880, 0, 0, 0, 0, 0, 0, 4784128, 0, 0, 0, 0, 0, 0, 0, 4915200, 0, 4956160,
  /* 19979 */ 4972544, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 5218304, 0, 5267456, 0, 0, 5308416, 5316608, 0, 0,
  /* 20001 */ 5431296, 0, 5488640, 0, 0, 0, 0, 0, 0, 0, 0, 5308416, 5316608, 0, 0, 5431296, 0, 5488640, 0, 0, 0, 0, 0,
  /* 20024 */ 0, 0, 0, 5799936, 0, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 6103040, 0, 0, 0, 6184960, 0, 6283264, 0,
  /* 20047 */ 6332416, 0, 0, 0, 6389760, 0, 0, 6430720, 6438912, 0, 0, 6184960, 0, 6283264, 0, 6332416, 0, 0, 0,
  /* 20066 */ 6389760, 0, 0, 6430720, 6438912, 0, 0, 0, 0, 0, 0, 0, 4784128, 4358144, 4358144, 4358144, 4358144,
  /* 20083 */ 4358144, 4358144, 4358144, 4358144, 4915200, 4358144, 4956160, 4358144, 4358144, 4358144, 4358144,
  /* 20094 */ 5799936, 4358144, 4358144, 5881856, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20105 */ 4358144, 4358144, 6103040, 4358144, 4358144, 4358144, 6184960, 4358144, 4358144, 6283264, 4358144,
  /* 20116 */ 4358144, 6332416, 4358144, 4358144, 4358144, 6389760, 4358144, 4358144, 4358144, 6430720, 6438912,
  /* 20127 */ 4849664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5218304, 0, 0, 0, 4784128, 4358144, 4358144, 4358144, 4358144,
  /* 20147 */ 4358144, 4358144, 4358144, 4358144, 4915200, 4358144, 4956160, 4972544, 4358144, 4358144, 4358144,
  /* 20158 */ 4358144, 4358144, 4358144, 5070848, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20169 */ 5218304, 4358144, 5267456, 4358144, 4358144, 5308416, 5316608, 4358144, 4358144, 4358144, 5431296,
  /* 20180 */ 4358144, 5488640, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6430720, 6438912, 0, 0, 0,
  /* 20193 */ 6266880, 6488064, 4358144, 4358144, 4358144, 6266880, 6488064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20214 */ 0, 5660672, 5718016, 0, 5865472, 0, 0, 0, 0, 6078464, 0, 0, 6340608, 0, 6455296, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20237 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 6037504, 6111232, 0, 0, 0, 0, 0, 0, 0, 2386, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20267 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1800, 0, 0, 0, 0, 0, 5472256, 0, 0, 0, 6209536, 0, 0, 0, 0,
  /* 20297 */ 0, 0, 0, 0, 0, 0, 0, 6176768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 58727,
  /* 20326 */ 872, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 20341 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60304,
  /* 20356 */ 57875, 57875, 57875, 5709824, 0, 0, 0, 5283840, 0, 0, 0, 0, 5251072, 0, 6414336, 5832704, 0, 5955584, 0,
  /* 20375 */ 0, 0, 0, 0, 0, 4841472, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20405 */ 57875, 60276, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 2987, 0, 57898, 57898,
  /* 20421 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 20436 */ 57898, 57898, 57898, 584, 584, 584, 3053, 3054, 584, 584, 584, 584, 584, 584, 584, 6111232, 0, 6176768,
  /* 20454 */ 6209536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4841472, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5111808, 0,
  /* 20481 */ 0, 0, 5283840, 0, 0, 0, 5472256, 5521408, 0, 0, 0, 5595136, 5709824, 5718016, 0, 5824512, 5865472, 0, 0,
  /* 20500 */ 5922816, 0, 6021120, 0, 6037504, 0, 0, 6078464, 6111232, 0, 6176768, 6209536, 0, 0, 0, 6209536, 6234112,
  /* 20517 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 6078464, 0, 0, 0,
  /* 20536 */ 6234112, 0, 4358144, 4358144, 4841472, 4358144, 4358144, 4358144, 4898816, 4358144, 4358144, 0, 4874240,
  /* 20549 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5464064, 0, 0, 4358144, 4358144, 4358144, 4358144,
  /* 20572 */ 4857856, 4874240, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 4358144,
  /* 20587 */ 4358144, 4358144, 4358144, 4358144, 0, 305, 0, 0, 0, 305, 0, 0, 309, 0, 0, 0, 309, 0, 0, 0, 0, 131072, 0,
  /* 20610 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2863, 0, 0, 0, 0, 4358144,
  /* 20642 */ 5922816, 4358144, 4358144, 6021120, 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144,
  /* 20653 */ 6176768, 6209536, 6234112, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0,
  /* 20666 */ 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368,
  /* 20693 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0, 0, 368, 368, 368, 0, 0, 731, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0,
  /* 20724 */ 0, 0, 0, 5029888, 5038080, 0, 0, 5103616, 5201920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6406144,
  /* 20747 */ 5357568, 0, 5505024, 0, 0, 0, 0, 0, 5890048, 0, 0, 6029312, 0, 0, 0, 6160384, 0, 0, 0, 0, 0, 6406144, 0,
  /* 20770 */ 0, 0, 0, 0, 0, 0, 0, 0, 5038080, 0, 0, 0, 0, 0, 6160384, 0, 5095424, 5349376, 0, 5275648, 0, 0, 0, 0, 0,
  /* 20795 */ 0, 4997120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5947392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
  /* 20825 */ 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20838 */ 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 20854 */ 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 4358144, 4358144, 4358144, 6029312, 4358144, 4358144,
  /* 20871 */ 4358144, 4358144, 6160384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6406144, 0, 4997120, 0,
  /* 20884 */ 5201920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 5193728, 4358144,
  /* 20901 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4907008, 0, 5079040, 6094848, 5742592, 0, 0, 0, 0,
  /* 20916 */ 0, 0, 4907008, 0, 4358144, 4358144, 4358144, 4358144, 6160384, 4358144, 4358144, 4358144, 4358144,
  /* 20929 */ 4358144, 4358144, 6406144, 0, 0, 0, 4358144, 4358144, 4358144, 4890624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20948 */ 5898240, 5963776, 0, 0, 0, 0, 0, 0, 3216, 0, 3217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3232, 0,
  /* 20976 */ 0, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21009 */ 6193152, 0, 0, 5406720, 6397952, 5300224, 5234688, 5423104, 0, 0, 0, 0, 5988352, 0, 0, 6135808, 6307840,
  /* 21026 */ 0, 5996544, 4800512, 0, 6356992, 0, 0, 0, 0, 0, 0, 0, 0, 5496832, 0, 0, 0, 0, 0, 0, 58727, 872, 57875,
  /* 21049 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 21064 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58761, 0, 0, 0, 0, 5611520, 0, 0, 0, 0, 0, 4947968,
  /* 21083 */ 5021696, 5529600, 0, 0, 5169152, 0, 0, 0, 4800512, 4808704, 0, 4890624, 0, 4947968, 0, 0, 0, 5046272, 0,
  /* 21102 */ 0, 0, 0, 0, 0, 0, 2412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21135 */ 2914, 0, 0, 0, 0, 0, 0, 5185536, 5234688, 5300224, 0, 0, 5529600, 0, 0, 0, 5898240, 0, 0, 0, 0, 6307840,
  /* 21157 */ 0, 6356992, 6381568, 6397952, 4800512, 4808704, 0, 4890624, 0, 4947968, 0, 0, 0, 5046272, 0, 0, 0, 0, 0,
  /* 21176 */ 0, 3242, 0, 3244, 0, 0, 0, 3248, 0, 0, 0, 0, 0, 3253, 0, 0, 3256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21205 */ 335872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 335872, 0, 0, 5185536, 5234688,
  /* 21229 */ 5300224, 0, 0, 5529600, 0, 0, 0, 5898240, 0, 0, 0, 0, 6307840, 0, 6356992, 6381568, 6397952, 0, 5185536,
  /* 21248 */ 0, 0, 0, 0, 4800512, 4808704, 4358144, 4358144, 4890624, 6356992, 6381568, 6397952, 0, 5185536, 5406720,
  /* 21263 */ 0, 0, 0, 0, 0, 0, 0, 5406720, 0, 4800512, 4808704, 4358144, 4358144, 4890624, 4358144, 4947968, 4358144,
  /* 21280 */ 4358144, 4358144, 5046272, 4358144, 4358144, 4358144, 4358144, 5185536, 4358144, 5234688, 5300224,
  /* 21291 */ 4358144, 4358144, 5406720, 5529600, 4358144, 4358144, 4358144, 5898240, 4358144, 4358144, 4358144,
  /* 21302 */ 4358144, 4358144, 4358144, 4358144, 6307840, 4358144, 4358144, 6356992, 6381568, 6397952, 5021696, 0, 0,
  /* 21315 */ 5021696, 4358144, 4358144, 0, 4980736, 0, 0, 0, 0, 0, 5373952, 5734400, 6045696, 0, 6258688, 6447104, 0,
  /* 21332 */ 0, 6127616, 0, 6348800, 5906432, 0, 5537792, 3731, 4882432, 0, 0, 0, 0, 0, 0, 0, 0, 5939200, 0, 0,
  /* 21352 */ 5677056, 6365184, 4866048, 0, 6070272, 5545984, 5152768, 0, 0, 6144000, 0, 4866048, 0, 4980736, 0, 0, 0,
  /* 21369 */ 0, 0, 0, 5324800, 5373952, 5537792, 5545984, 5734400, 5971968, 6045696, 0, 6070272, 6348800, 0, 4866048,
  /* 21384 */ 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 21403 */ 57875, 57875, 57875, 58750, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 2987, 0,
  /* 21419 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60667, 57898, 57898, 60671, 57898, 57898,
  /* 21434 */ 57898, 57898, 57898, 57898, 57898, 4358144, 4358144, 4358144, 4358144, 5324800, 5373952, 5537792, 5545984,
  /* 21447 */ 5734400, 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 6348800, 4882432, 0,
  /* 21459 */ 5586944, 5734400, 0, 0, 0, 0, 0, 0, 4358144, 4866048, 4882432, 4358144, 0, 5439488, 5128192, 5128192, 0,
  /* 21476 */ 5128192, 4358144, 0, 5128192, 4358144, 0, 0, 4358144, 0, 4358144, 0, 0, 4358144, 0, 4358144, 0, 0,
  /* 21493 */ 4358144, 0, 4358144, 6004736, 6004736, 6004736, 6004736, 6004736, 0, 0, 0, 0, 0, 0, 58727, 872, 57875,
  /* 21510 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58743, 57875, 57875, 57875,
  /* 21525 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898,
  /* 21540 */ 57898, 57898, 57898, 58822, 57898, 57898, 57898, 57898, 57898, 58833, 57898, 57898, 57898, 57898, 0, 0,
  /* 21556 */ 5775360, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 5693440, 0, 6496256, 5144576, 5136384, 0, 5914624, 0, 0,
  /* 21576 */ 5005312, 0, 0, 0, 5120000, 5136384, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 5005312, 4358144, 4358144,
  /* 21595 */ 4358144, 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21606 */ 4358144, 6324224, 0, 0, 0, 0, 0, 0, 0, 6324224, 4358144, 4358144, 5005312, 4358144, 4358144, 4358144,
  /* 21622 */ 5120000, 5136384, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 21633 */ 6324224, 5914624, 5914624, 0, 0, 0, 0, 0, 0, 0, 2438, 0, 0, 0, 0, 2443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21660 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2335207, 0, 0, 5513216, 5783552, 0, 3731, 0,
  /* 21688 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1939, 0, 0, 0, 0, 6053888,
  /* 21720 */ 0, 0, 5013504, 0, 0, 0, 0, 0, 6053888, 0, 0, 0, 0, 0, 4358144, 4358144, 5013504, 4358144, 4358144,
  /* 21739 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 0, 0, 0, 0,
  /* 21753 */ 5193728, 0, 0, 0, 0, 0, 0, 0, 5079040, 0, 0, 0, 0, 4907008, 0, 5079040, 0, 0, 0, 5742592, 0, 0, 6094848,
  /* 21776 */ 4358144, 4907008, 4358144, 5079040, 4358144, 5226496, 4358144, 5742592, 4358144, 4358144, 4358144,
  /* 21787 */ 6094848, 5742592, 0, 0, 6094848, 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 21806 */ 57875, 57875, 57875, 57875, 57875, 58741, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 21821 */ 58758, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60640, 60641, 57875, 57875, 57875,
  /* 21836 */ 60643, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60648, 57875, 57875, 60650,
  /* 21851 */ 57875, 60652, 57875, 5226496, 4358144, 4907008, 4358144, 5079040, 4358144, 5226496, 4358144, 5742592,
  /* 21863 */ 4358144, 4358144, 4358144, 6094848, 5062656, 0, 0, 0, 0, 0, 0, 5062656, 0, 0, 0, 0, 5062656, 0, 0, 0, 0,
  /* 21884 */ 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4997120, 4358144, 4358144,
  /* 21896 */ 5038080, 4358144, 4358144, 4358144, 5095424, 5103616, 4358144, 4358144, 5201920, 4358144, 4358144,
  /* 21907 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5890048, 4358144, 4358144,
  /* 21918 */ 4358144, 6029312, 5062656, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 6225920, 4358144, 5062656,
  /* 21931 */ 4358144, 4358144, 4358144, 4358144, 4358144, 0, 6086656, 0, 0, 0, 4816896, 0, 0, 0, 4816896, 0, 0, 0, 0,
  /* 21950 */ 6086656, 4816896, 4358144, 4358144, 4358144, 4358144, 6086656, 0, 6086656, 4816896, 4358144, 4358144,
  /* 21962 */ 4358144, 4358144, 6086656, 0, 5087232, 0, 5931008, 0, 5332992, 5980160, 0, 5332992, 5980160, 0, 4358144,
  /* 21977 */ 5332992, 5980160, 4358144, 0, 4358144, 5332992, 5980160, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21999 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1830, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0,
  /* 22032 */ 0, 0, 0, 0, 0, 221655, 221655, 221655, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 221655, 471,
  /* 22053 */ 221655, 221655, 221655, 221655, 221655, 221655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22078 */ 0, 0, 1371, 0, 1373, 0, 0, 1212, 0, 0, 0, 0, 1283, 0, 0, 221655, 221655, 1, 24578, 3, 0, 0, 4366336, 0, 0,
  /* 22103 */ 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1276, 1277, 0, 0, 0, 0,
  /* 22132 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 4358144,
  /* 22161 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 1106, 0, 0, 0, 0, 0, 0, 4358144,
  /* 22177 */ 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 1, 24578, 3, 0, 0, 0, 0,
  /* 22199 */ 0, 0, 0, 0, 0, 0, 0, 237568, 304, 0, 308, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2930, 0,
  /* 22229 */ 0, 0, 0, 57875, 57875, 57875, 60278, 60279, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 308,
  /* 22248 */ 308, 0, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
  /* 22269 */ 308, 308, 308, 308, 308, 308, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 65536, 305, 0, 4268032, 98304,
  /* 22292 */ 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1309, 1311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22325 */ 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 22338 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0,
  /* 22351 */ 0, 0, 0, 114688, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22383 */ 0, 0, 0, 0, 368, 305, 0, 0, 0, 0, 4210981, 24578, 3, 0, 0, 299, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22412 */ 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1827, 0, 0,
  /* 22444 */ 0, 0, 0, 0, 0, 245760, 0, 0, 245760, 245760, 245760, 0, 245760, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0,
  /* 22469 */ 0, 245760, 0, 0, 0, 0, 245760, 0, 0, 0, 131072, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 245760, 0, 245760, 0,
  /* 22494 */ 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1846, 0, 0, 0, 0, 0, 0, 0, 0, 1855, 1856, 0, 0, 0, 0, 0,
  /* 22525 */ 0, 1863, 245760, 0, 0, 245760, 4210981, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308,
  /* 22547 */ 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1899, 1900, 0, 1902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22579 */ 1916, 0, 0, 774, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22611 */ 0, 0, 0, 370, 0, 0, 0, 0, 0, 5701632, 0, 0, 0, 0, 0, 0, 1945, 0, 0, 0, 4825088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22641 */ 0, 0, 0, 0, 0, 0, 0, 0, 5177344, 0, 0, 0, 0, 0, 0, 3270, 3271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2930, 0, 57875,
  /* 22670 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 22685 */ 57875, 57875, 57875, 57875, 58781, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 22700 */ 57875, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22731 */ 0, 0, 0, 0, 3511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
  /* 22765 */ 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 262144, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 262144, 0,
  /* 22790 */ 262144, 0, 0, 0, 139264, 147456, 262144, 0, 0, 0, 0, 0, 0, 0, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22818 */ 2478, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 22836 */ 57875, 57875, 57875, 60295, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 22851 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 59911, 57898, 57898, 57898,
  /* 22868 */ 57898, 57898, 57898, 57898, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22896 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 262144, 0, 0, 262761, 262761, 0, 262761, 262761, 262761,
  /* 22920 */ 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761,
  /* 22933 */ 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 262761, 0, 1, 24578, 3, 0, 0, 4366336, 0,
  /* 22950 */ 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1927, 0, 0, 0, 0, 0,
  /* 22980 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811, 278528, 278528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23011 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 0, 278528, 278528, 0, 131072, 278528, 0, 0, 0,
  /* 23036 */ 278528, 0, 0, 0, 0, 0, 278528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2931, 0, 1947, 57875,
  /* 23065 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 278528, 278528, 0, 278528, 0, 0,
  /* 23082 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
  /* 23095 */ 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 0, 1,
  /* 23109 */ 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23136 */ 0, 0, 0, 2392, 0, 0, 0, 0, 2397, 2398, 0, 0, 2400, 2401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0,
  /* 23165 */ 0, 4366336, 0, 0, 0, 0, 0, 304, 667, 0, 4268032, 308, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3250,
  /* 23193 */ 0, 0, 0, 0, 0, 3255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23226 */ 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 0, 1232, 0, 1234, 1235, 0, 0, 0, 0, 0, 5480448, 0, 1384,
  /* 23254 */ 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23282 */ 1303, 0, 0, 0, 0, 1308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1358, 0, 0, 0,
  /* 23313 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3497, 0, 0, 0, 0, 0, 0, 0, 6275072, 0,
  /* 23345 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1470, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23375 */ 0, 0, 1928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
  /* 23407 */ 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 305, 0, 309, 286720, 0, 0, 0, 0, 0, 0, 0,
  /* 23436 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3224, 0, 0, 0, 0, 3229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 0,
  /* 23468 */ 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
  /* 23489 */ 309, 309, 309, 309, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 66204, 0, 4268032, 308, 98975, 0,
  /* 23512 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57898, 57875, 57875, 57875, 57875, 57898,
  /* 23534 */ 57875, 57898, 584, 57875, 584, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 122880, 0, 4268032, 0, 0, 0, 0, 0,
  /* 23556 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381, 0, 384, 0, 0, 0, 4358144, 4358144,
  /* 23585 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
  /* 23601 */ 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 304, 0, 305, 308, 0, 309, 4857856, 1, 24578, 3, 0, 0, 0, 0,
  /* 23622 */ 0, 0, 0, 0, 0, 0, 0, 0, 306, 306, 306, 0, 0, 306, 306, 295218, 306, 306, 306, 306, 306, 306, 306, 306,
  /* 23646 */ 306, 295218, 306, 295218, 295218, 295218, 295218, 295218, 0, 0, 306, 306, 306, 295218, 306, 306, 295218,
  /* 23663 */ 295218, 306, 306, 295218, 306, 295218, 295218, 306, 295218, 306, 306, 306, 306, 306, 306, 295286, 295218,
  /* 23680 */ 295218, 295218, 295218, 295218, 306, 306, 306, 306, 306, 306, 295286, 295218, 295218, 295218, 306, 306,
  /* 23696 */ 306, 295286, 139264, 147456, 295218, 295218, 295218, 306, 306, 295218, 295218, 295218, 295218, 374, 306,
  /* 23711 */ 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
  /* 23732 */ 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 369, 306, 0, 295218, 306, 306, 306, 295218, 306, 295218,
  /* 23752 */ 306, 131072, 306, 306, 306, 306, 295218, 306, 306, 306, 306, 306, 295218, 306, 295218, 295218, 295218,
  /* 23769 */ 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 295218, 295218, 295218, 295218,
  /* 23788 */ 295218, 295218, 306, 306, 306, 295218, 306, 306, 306, 306, 306, 306, 306, 306, 295218, 295218, 295218,
  /* 23805 */ 295218, 295218, 295218, 295218, 295218, 295218, 295218, 295286, 295286, 295218, 295286, 295218, 295286,
  /* 23818 */ 295286, 295286, 295286, 295286, 295286, 295286, 295286, 295286, 295286, 295286, 295286, 295286, 295286,
  /* 23831 */ 295286, 295218, 295218, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0,
  /* 23853 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57876, 57876, 57876, 57899, 57876, 57876, 57876, 57876, 57899, 57876,
  /* 23875 */ 57899, 584, 57876, 584, 57876, 57876, 584, 584, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23897 */ 6275072, 0, 0, 0, 0, 0, 0, 0, 4399831, 4399831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3247, 0, 0, 0, 0, 0, 0,
  /* 23925 */ 0, 3254, 0, 0, 0, 3258, 0, 3260, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23956 */ 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 319488,
  /* 23986 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 0, 0, 319488, 319488,
  /* 24015 */ 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 319488, 0, 0, 0,
  /* 24030 */ 0, 0, 0, 319488, 0, 0, 0, 0, 0, 0, 0, 319488, 0, 319488, 0, 0, 0, 319488, 319488, 0, 24578, 3, 0, 0,
  /* 24054 */ 4366336, 253952, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24080 */ 57885, 57885, 57885, 57908, 57885, 57885, 57885, 57885, 57908, 57885, 57908, 593, 57955, 593, 57955,
  /* 24095 */ 57955, 593, 593, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 368,
  /* 24121 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24155 */ 368, 368, 425984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24186 */ 0, 0, 0, 0, 0, 0, 0, 3252, 0, 0, 0, 0, 3257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0,
  /* 24218 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3273, 0, 0, 0, 0, 0, 0, 0,
  /* 24251 */ 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60630, 57875, 57875, 0, 0, 0, 0,
  /* 24269 */ 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 327680, 327680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24296 */ 327680, 327680, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0,
  /* 24320 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 57895, 57895, 57895, 57918, 57895, 57895, 57895, 57895, 57918, 57895, 57918,
  /* 24340 */ 603, 57895, 603, 57895, 57895, 603, 603, 327680, 327680, 327680, 327680, 327680, 335872, 327680, 335872,
  /* 24355 */ 327680, 327680, 327680, 327680, 327680, 327680, 0, 0, 0, 49705, 0, 0, 327680, 0, 49705, 0, 49705, 0, 0, 0,
  /* 24375 */ 0, 0, 0, 0, 0, 0, 0, 3485, 0, 0, 0, 3489, 0, 0, 0, 0, 0, 3495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24406 */ 3749, 3750, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61103, 57875, 57875,
  /* 24423 */ 57875, 57875, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49152, 942, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0,
  /* 24448 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2484,
  /* 24480 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 0,
  /* 24498 */ 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 344064, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064,
  /* 24525 */ 344064, 344064, 344064, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0,
  /* 24547 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2476,
  /* 24580 */ 0, 0, 2479, 0, 0, 0, 0, 0, 57875, 57875, 59832, 57875, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24608 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 352256, 0,
  /* 24637 */ 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 352256, 0, 0, 352256, 352256, 0, 352256, 0, 352256, 352256, 352256,
  /* 24658 */ 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 352256, 0, 0, 0, 0, 0, 0,
  /* 24675 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 24698 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 352256, 352256, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0,
  /* 24719 */ 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385024, 0, 0, 0, 0, 4358144,
  /* 24745 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 24756 */ 4358144, 6299648, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 24767 */ 4358144, 4358144, 871, 871, 871, 871, 871, 871, 871, 871, 871, 1, 294, 3, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0,
  /* 24791 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 131072,
  /* 24823 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448, 360448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448,
  /* 24850 */ 360448, 360448, 1, 0, 3, 155944, 155944, 298, 0, 665, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0,
  /* 24873 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 0, 0,
  /* 24907 */ 0, 0, 0, 0, 0, 1914, 0, 0, 57875, 57875, 58765, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 24926 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 24941 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 2559, 2987, 57875, 59835, 57875, 57875, 57875, 57875,
  /* 24956 */ 57875, 57875, 57875, 57875, 57875, 57875, 59846, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 24971 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 61118, 57898,
  /* 24986 */ 57898, 61120, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 0, 0, 3239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25008 */ 0, 0, 3251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25041 */ 0, 0, 0, 0, 0, 0, 0, 3482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25075 */ 0, 2915, 0, 0, 0, 0, 3803, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3811, 584, 584, 584, 584, 584,
  /* 25097 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1638, 584, 584, 584, 584,
  /* 25118 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 61172, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 25135 */ 57875, 57875, 57898, 57875, 57972, 61181, 57972, 57972, 57972, 61184, 57972, 57972, 57972, 57972, 57972,
  /* 25150 */ 57972, 57972, 57972, 57972, 61192, 57972, 4332, 0, 57875, 57898, 61677, 584, 4334, 61679, 57972, 61680, 0,
  /* 25167 */ 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875,
  /* 25185 */ 57972, 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58738,
  /* 25204 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58756, 57875, 57875, 57875, 57875,
  /* 25219 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59844, 57875, 57875, 57875, 57875, 57875, 57875, 59852,
  /* 25234 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59859, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 25249 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61116, 57875, 57875, 57875, 57875, 57875, 57898,
  /* 25264 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59955, 57898, 57898, 57898,
  /* 25279 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 25294 */ 57898, 58901, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 1566, 584, 1569, 584, 584, 584, 584,
  /* 25311 */ 584, 3930, 584, 584, 584, 3931, 3932, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 61283,
  /* 25330 */ 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 25345 */ 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 4242, 0, 57875, 57875, 57875, 57898, 57898, 57898,
  /* 25365 */ 57898, 57898, 61341, 57898, 57898, 57898, 57898, 57898, 57898, 61347, 57898, 57898, 584, 584, 584, 584,
  /* 25381 */ 584, 584, 4011, 584, 584, 584, 584, 584, 584, 4017, 584, 584, 584, 584, 584, 584, 1578, 1585, 584, 584,
  /* 25401 */ 584, 584, 584, 584, 584, 584, 1598, 584, 1600, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 25422 */ 584, 584, 584, 3936, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 61286, 57875, 57875, 57875,
  /* 25438 */ 57972, 57972, 57972, 57972, 584, 57875, 57875, 61367, 57875, 57875, 61370, 57875, 57875, 57972, 57972,
  /* 25453 */ 57972, 57972, 57972, 57972, 61377, 57972, 57972, 57972, 57972, 57972, 57972, 61383, 57972, 57972, 57972,
  /* 25468 */ 57972, 57875, 584, 0, 0, 0, 0, 0, 0, 0, 3243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3259, 0, 0,
  /* 25498 */ 0, 0, 3264, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 61401, 57875, 57875, 57875, 57875, 57875,
  /* 25523 */ 57875, 57875, 57875, 61410, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60938,
  /* 25538 */ 60939, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 25553 */ 57898, 57898, 57898, 57898, 60952, 57898, 57875, 57875, 57875, 61538, 57875, 57875, 57898, 57898, 57898,
  /* 25568 */ 57898, 61545, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 4212, 584, 584, 584,
  /* 25585 */ 584, 584, 584, 584, 584, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0,
  /* 25603 */ 4304, 0, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584,
  /* 25620 */ 584, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 57875, 57875, 57875, 57898,
  /* 25637 */ 57898, 57898, 57898, 584, 584, 584, 584, 57875, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875,
  /* 25653 */ 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
  /* 25683 */ 0, 0, 368, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2421, 0, 0, 0, 0, 0, 2425, 0, 0, 0,
  /* 25714 */ 0, 0, 0, 0, 2429, 0, 423, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 376832, 376832,
  /* 25741 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25776 */ 1934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 423, 0, 0, 423, 423, 423, 423, 423, 423, 623, 423, 623,
  /* 25803 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 0, 1, 24578, 3, 0, 0,
  /* 25825 */ 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 404,
  /* 25852 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25885 */ 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25919 */ 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25952 */ 0, 0, 0, 393688, 393688, 393688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 357, 358, 359, 360, 0, 0, 0, 0, 0,
  /* 25980 */ 0, 0, 0, 0, 368, 0, 298, 0, 0, 0, 393688, 393688, 0, 393688, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0,
  /* 26005 */ 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 0, 376, 0, 0, 0, 0, 0, 330,
  /* 26034 */ 376, 333, 375, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
  /* 26065 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 424, 0, 0, 0, 0, 131072, 0, 0, 0,
  /* 26095 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3499, 0, 0, 0, 0, 0, 0, 0, 0, 424,
  /* 26129 */ 0, 0, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
  /* 26151 */ 424, 424, 424, 424, 424, 0, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 307, 308, 309,
  /* 26174 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 675, 785, 0, 787, 0, 789, 790, 703, 0, 0, 794, 795, 0, 0, 0, 0, 0,
  /* 26204 */ 0, 0, 0, 0, 0, 0, 0, 1298, 0, 0, 0, 778, 1305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26237 */ 0, 0, 0, 0, 336, 337, 338, 0, 0, 0, 0, 0, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 26258 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 26273 */ 57972, 57972, 57972, 57875, 584, 0, 0, 0, 0, 0, 0, 0, 3746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 26299 */ 61099, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57898, 57898, 57898,
  /* 26315 */ 60662, 57898, 57898, 57898, 57898, 60666, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 26330 */ 57898, 57898, 60361, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 26345 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60371, 57898, 57898, 57898, 57898, 57898,
  /* 26360 */ 57898, 57898, 57898, 57898, 57898, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 26382 */ 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 26397 */ 57898, 61550, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 4218, 584, 57875, 1, 24578, 3,
  /* 26417 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 311, 312, 0, 0, 0, 0, 0, 0,
  /* 26449 */ 0, 3892, 0, 57875, 57875, 61238, 57875, 57875, 57875, 61241, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 26465 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 61249, 0, 0, 417792, 311, 0, 0, 0, 0, 0, 0,
  /* 26485 */ 417792, 312, 312, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 365, 366, 367, 0,
  /* 26514 */ 0, 368, 0, 298, 0, 0, 0, 0, 417792, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 418104, 417792, 0,
  /* 26541 */ 0, 418104, 418104, 418104, 418104, 418104, 418104, 418104, 418104, 418104, 418104, 418104, 418322, 418104,
  /* 26555 */ 418104, 418104, 418322, 418104, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26580 */ 3486, 3487, 0, 0, 0, 0, 3492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1848, 0, 0, 0, 0, 0, 0, 0,
  /* 26611 */ 0, 0, 0, 0, 0, 0, 1862, 0, 417792, 0, 418104, 418104, 1, 24578, 3, 0, 0, 4367000, 0, 0, 0, 0, 0, 304, 305,
  /* 26636 */ 311296, 4268032, 308, 309, 0, 434176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26664 */ 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0,
  /* 26692 */ 0, 0, 0, 0, 0, 4399832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26724 */ 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 872, 871, 871, 871,
  /* 26753 */ 871, 4858727, 4875111, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 5260135, 871, 871,
  /* 26772 */ 871, 871, 871, 4932455, 4940647, 871, 871, 871, 871, 871, 5055335, 871, 871, 871, 871, 871, 871, 871,
  /* 26790 */ 5210983, 871, 871, 871, 871, 5292903, 871, 871, 871, 871, 5366631, 871, 871, 6275943, 871, 871, 871, 871,
  /* 26808 */ 871, 871, 871, 871, 871, 0, 0, 942, 941, 941, 941, 941, 4858797, 4875181, 941, 941, 941, 941, 941, 941,
  /* 26828 */ 941, 941, 941, 941, 941, 941, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 26842 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 26853 */ 4358144, 4358144, 871, 871, 871, 871, 4358144, 4358144, 871, 4875111, 871, 871, 871, 871, 871, 871, 871,
  /* 26870 */ 871, 871, 871, 871, 871, 871, 0, 871, 941, 5464935, 871, 871, 4359015, 4359015, 4359015, 4359015, 4858727,
  /* 26887 */ 4875111, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 5071719, 4359015, 4359015, 4359015,
  /* 26898 */ 4359015, 4359015, 4359015, 4359015, 5219175, 4359015, 5268327, 4359015, 4359015, 5309287, 5317479,
  /* 26909 */ 4359015, 4359015, 4359015, 5432167, 4359015, 5489511, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 26920 */ 4359015, 4359015, 4359015, 4359015, 4359015, 5260135, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 26931 */ 4359015, 4359015, 4359015, 5415783, 4359015, 5448551, 4359015, 5464935, 4359015, 5481319, 5563239,
  /* 26942 */ 4359015, 4359015, 4359015, 5636967, 4359015, 5686119, 4359015, 4359015, 5751655, 4359015, 4359015,
  /* 26953 */ 4359015, 4359015, 4359015, 5874535, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 26964 */ 4359015, 4359015, 4359015, 4359015, 6275943, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 26975 */ 4359015, 4359015, 4359015, 871, 871, 871, 871, 871, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0,
  /* 26991 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3237, 4924263, 871,
  /* 27022 */ 871, 871, 871, 4923392, 4358144, 4358144, 4358144, 4358144, 4358144, 4366336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27041 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 5701632, 0, 0, 0, 0, 0, 0, 0, 871,
  /* 27073 */ 871, 871, 4825959, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871,
  /* 27093 */ 5178215, 871, 871, 5243751, 871, 871, 871, 871, 871, 871, 871, 5342055, 871, 871, 871, 871, 871, 871, 871,
  /* 27112 */ 871, 871, 871, 5628775, 5653351, 871, 5702503, 871, 871, 871, 871, 871, 871, 871, 871, 940, 941, 941, 941,
  /* 27131 */ 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941,
  /* 27151 */ 6079405, 4358144, 4358144, 4841472, 4358144, 4358144, 4358144, 4898816, 4358144, 4358144, 4358144,
  /* 27162 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5111808, 4358144, 4358144,
  /* 27173 */ 4358144, 5342125, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 5628845, 5653421, 941, 5702573, 941,
  /* 27190 */ 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 6300589, 941, 941, 941,
  /* 27210 */ 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 4358144, 4358144,
  /* 27229 */ 4358144, 4825088, 4358144, 4359015, 5178215, 4359015, 4359015, 4359015, 4359015, 4359015, 5243751,
  /* 27240 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 5342055, 4359015, 4359015, 4359015,
  /* 27251 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 5628775, 5653351,
  /* 27262 */ 4359015, 5702503, 0, 0, 5455872, 0, 0, 0, 0, 0, 0, 0, 0, 6062080, 6463488, 0, 5398528, 0, 0, 0, 6479872,
  /* 27283 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 871, 871, 871, 871, 5890919, 871, 871, 6030183, 871, 871, 871, 6161255,
  /* 27305 */ 871, 871, 871, 871, 871, 6407015, 941, 941, 941, 941, 941, 941, 941, 941, 941, 5039021, 941, 941, 941,
  /* 27324 */ 6169447, 871, 871, 871, 871, 6292327, 871, 6316903, 871, 871, 871, 871, 871, 871, 871, 871, 871, 6464359,
  /* 27342 */ 0, 0, 0, 0, 941, 941, 941, 941, 941, 941, 941, 941, 941, 4932525, 4940717, 941, 941, 941, 941, 941,
  /* 27362 */ 5055405, 941, 941, 941, 941, 941, 941, 941, 5211053, 941, 941, 941, 941, 5292973, 941, 941, 941, 941,
  /* 27380 */ 5366701, 941, 941, 5456813, 941, 941, 941, 941, 4826029, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941,
  /* 27399 */ 941, 941, 941, 941, 941, 941, 941, 5178285, 941, 941, 941, 941, 5243821, 941, 941, 941, 941, 941, 941,
  /* 27418 */ 941, 6276013, 941, 941, 941, 941, 941, 941, 941, 941, 941, 4875181, 941, 941, 941, 941, 941, 941, 941,
  /* 27437 */ 941, 4358144, 4358144, 4358144, 4358144, 4857856, 4874240, 4358144, 4358144, 4358144, 4358144, 6242304,
  /* 27449 */ 4358144, 6291456, 4358144, 6316032, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 27460 */ 4358144, 4358144, 6463488, 871, 871, 871, 871, 871, 871, 5571431, 5579623, 871, 5792615, 871, 871, 871,
  /* 27476 */ 5112679, 871, 871, 871, 5284711, 871, 871, 871, 5473127, 5522279, 871, 871, 871, 5596007, 5710695,
  /* 27491 */ 5718887, 871, 5825383, 5866343, 871, 871, 5923687, 871, 6021991, 871, 6038375, 871, 871, 6079335, 6243175,
  /* 27506 */ 871, 941, 871, 6316903, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 27519 */ 4359015, 4932455, 4940647, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 5055335, 4359015,
  /* 27530 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 0, 871, 871, 871, 871, 871, 871,
  /* 27545 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 5210983,
  /* 27562 */ 4359015, 4359015, 4359015, 4359015, 5292903, 4359015, 4359015, 4359015, 4359015, 5366631, 4359015,
  /* 27573 */ 4359015, 4359015, 5456743, 4359015, 4359015, 4359015, 4359015, 4359015, 5555047, 5571431, 5579623,
  /* 27584 */ 5620583, 5669735, 4359015, 4359015, 4359015, 5792615, 5817191, 4359015, 5858151, 4359015, 4359015,
  /* 27595 */ 6464359, 871, 871, 871, 871, 871, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27614 */ 4956160, 4964352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27644 */ 0, 1291, 0, 0, 6283264, 6332416, 0, 0, 0, 5881856, 0, 5382144, 0, 0, 0, 0, 0, 0, 6266880, 0, 0, 0, 0, 0,
  /* 27668 */ 0, 4784999, 871, 871, 871, 871, 871, 871, 871, 4916071, 871, 4957031, 0, 0, 0, 0, 4785069, 941, 941, 941,
  /* 27688 */ 941, 941, 941, 941, 4916141, 941, 4957101, 4973485, 941, 941, 941, 941, 941, 5071789, 941, 941, 941, 941,
  /* 27706 */ 941, 941, 5219245, 941, 5268397, 941, 5006253, 941, 941, 941, 5120941, 5137325, 941, 941, 941, 941, 941,
  /* 27723 */ 941, 941, 941, 4358144, 4358144, 5005312, 4358144, 4358144, 4358144, 5120000, 5136384, 4358144, 4358144,
  /* 27736 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
  /* 27752 */ 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 1198, 0, 0, 1203, 0, 4857856, 6185901, 941, 6284205, 941,
  /* 27770 */ 6333357, 941, 941, 941, 6390701, 941, 941, 6431661, 6439853, 941, 941, 941, 941, 941, 941, 941, 4784128,
  /* 27787 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4915200, 4358144, 4956160,
  /* 27798 */ 4358144, 4358144, 6430720, 6438912, 4850535, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 5219175,
  /* 27814 */ 941, 871, 871, 4784999, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4916071,
  /* 27827 */ 4359015, 4957031, 4973415, 871, 871, 871, 871, 871, 5071719, 871, 871, 871, 871, 871, 871, 5219175, 871,
  /* 27844 */ 5268327, 871, 871, 5309287, 5317479, 871, 871, 5432167, 871, 5489511, 871, 871, 871, 871, 871, 871, 871,
  /* 27861 */ 941, 941, 941, 941, 941, 941, 941, 5194669, 941, 941, 941, 941, 4358144, 4358144, 4358144, 4358144,
  /* 27877 */ 4358144, 5193728, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5194599, 4359015,
  /* 27888 */ 6431591, 6439783, 871, 871, 871, 6267751, 6488935, 4358144, 4358144, 4358144, 6266880, 6488064, 0, 0, 0,
  /* 27903 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5660672, 5718016, 0, 5865472, 5709824, 0, 0, 0, 5283840, 0, 0, 0, 0,
  /* 27928 */ 5251072, 0, 6414336, 5832704, 0, 5955584, 0, 0, 0, 0, 871, 871, 4842343, 871, 871, 4899687, 871, 871, 871,
  /* 27947 */ 871, 871, 871, 871, 5808999, 941, 871, 871, 4359015, 4359015, 4359015, 4825959, 4359015, 4359015, 4359015,
  /* 27962 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 27973 */ 4359015, 4359015, 4359015, 4359015, 0, 5013504, 0, 0, 6053888, 0, 0, 0, 0, 0, 0, 0, 0, 6012928, 871, 871,
  /* 27993 */ 5014375, 871, 871, 871, 871, 871, 6112103, 871, 6177639, 6210407, 871, 871, 871, 871, 871, 871, 0, 0, 941,
  /* 28012 */ 941, 4842413, 941, 941, 4899757, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 5112749, 941, 941, 941,
  /* 28031 */ 5309357, 5317549, 941, 941, 5432237, 941, 5489581, 941, 941, 941, 941, 941, 941, 941, 941, 5800877, 941,
  /* 28048 */ 941, 5882797, 941, 941, 941, 941, 941, 941, 941, 941, 6103981, 941, 941, 941, 5260205, 941, 941, 941, 941,
  /* 28067 */ 941, 941, 941, 5415853, 941, 5448621, 941, 941, 5481389, 5563309, 941, 941, 5637037, 941, 5686189, 941,
  /* 28083 */ 941, 5751725, 941, 941, 941, 941, 941, 5874605, 941, 941, 5186477, 5235629, 5301165, 941, 941, 5530541,
  /* 28099 */ 941, 941, 941, 5899181, 941, 941, 941, 941, 6308781, 941, 6357933, 6382509, 6398893, 941, 5186477, 941,
  /* 28115 */ 941, 941, 941, 4800512, 4808704, 4358144, 4358144, 4890624, 5284781, 941, 941, 941, 5473197, 5522349, 941,
  /* 28130 */ 941, 941, 5596077, 5710765, 5718957, 941, 5825453, 5866413, 941, 941, 5923757, 941, 6022061, 941, 6038445,
  /* 28145 */ 941, 941, 6079405, 6112173, 941, 6177709, 6210477, 941, 941, 941, 5555117, 5579693, 5620653, 5669805, 941,
  /* 28160 */ 941, 941, 941, 5817261, 941, 5858221, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 6120365,
  /* 28179 */ 941, 6169517, 941, 941, 941, 941, 6292397, 6209536, 6234112, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 28193 */ 4358144, 4358144, 871, 871, 871, 871, 871, 871, 871, 871, 6079335, 871, 871, 941, 6234983, 871, 4359015,
  /* 28210 */ 4359015, 4842343, 4359015, 4359015, 4359015, 4899687, 4359015, 4359015, 4359015, 4359015, 6161255,
  /* 28221 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 6407015, 871, 871, 871, 4358144, 4358144, 4358144,
  /* 28234 */ 4890624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5898240, 5963776, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28262 */ 0, 0, 3982, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875,
  /* 28279 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59599, 57972, 57972, 57972,
  /* 28294 */ 57972, 57972, 57972, 57972, 57972, 57972, 59612, 57972, 4359015, 5923687, 4359015, 4359015, 6021991,
  /* 28307 */ 4359015, 6038375, 4359015, 4359015, 6079335, 6112103, 4359015, 6177639, 6210407, 6234983, 4359015,
  /* 28318 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 871, 871, 871, 4358144, 4358144, 4358144, 0, 0, 0,
  /* 28333 */ 0, 0, 0, 0, 0, 1840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28365 */ 3490, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28398 */ 5096365, 5104557, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 5890989, 941, 941, 6030253, 941, 941,
  /* 28416 */ 941, 6161325, 941, 941, 941, 941, 941, 6407085, 941, 4998061, 941, 5202861, 941, 941, 6316973, 941, 941,
  /* 28433 */ 941, 941, 941, 941, 941, 941, 941, 6464429, 941, 941, 941, 941, 941, 5792685, 941, 941, 6243245, 4358144,
  /* 28451 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4931584, 4358144,
  /* 28462 */ 4358144, 4358144, 6029312, 4358144, 4358144, 4358144, 4358144, 6160384, 4358144, 4358144, 4358144,
  /* 28473 */ 4358144, 4358144, 4358144, 6406144, 871, 4997991, 871, 5202791, 871, 871, 871, 871, 871, 871, 871, 941,
  /* 28489 */ 871, 4359015, 4359015, 4359015, 4359015, 4359015, 4997991, 4359015, 4359015, 5038951, 4359015, 4359015,
  /* 28501 */ 4359015, 5096295, 5104487, 4359015, 4359015, 5202791, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 28512 */ 4359015, 4359015, 4359015, 4359015, 4359015, 5890919, 4359015, 4359015, 4359015, 6030183, 0, 0, 0, 0,
  /* 28526 */ 5611520, 0, 0, 0, 0, 0, 4947968, 5021696, 5529600, 0, 0, 5169152, 0, 0, 0, 4801383, 4809575, 871, 4891495,
  /* 28545 */ 871, 4948839, 871, 871, 871, 5047143, 871, 871, 871, 5415783, 871, 5448551, 871, 871, 5481319, 5563239,
  /* 28561 */ 871, 871, 5636967, 871, 5686119, 871, 871, 5751655, 871, 871, 871, 871, 871, 5874535, 871, 871, 871, 871,
  /* 28579 */ 871, 871, 871, 871, 0, 0, 871, 0, 871, 871, 0, 941, 871, 871, 871, 4359015, 4359015, 4359015, 4359015,
  /* 28598 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 6120295, 4359015,
  /* 28609 */ 6169447, 4359015, 4359015, 4359015, 4359015, 6243175, 4359015, 6292327, 4359015, 6316903, 4359015,
  /* 28620 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 6356992, 6381568, 6397952, 871, 5186407, 5407591,
  /* 28632 */ 871, 871, 871, 871, 871, 871, 871, 5407661, 871, 4801383, 4809575, 4359015, 4359015, 4891495, 4359015,
  /* 28647 */ 4948839, 4359015, 4359015, 4359015, 5047143, 4359015, 4359015, 4359015, 4359015, 5186407, 4359015,
  /* 28658 */ 4359015, 4359015, 5800807, 4359015, 4359015, 5882727, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 28669 */ 4359015, 4359015, 4359015, 4359015, 6103911, 4359015, 4359015, 4359015, 6185831, 4359015, 4359015,
  /* 28680 */ 6284135, 4359015, 4359015, 6333287, 4359015, 4359015, 4359015, 6390631, 4359015, 0, 5439488, 5129063,
  /* 28692 */ 5129133, 941, 5128192, 4358144, 871, 5129063, 4359015, 0, 941, 4358144, 871, 4359015, 0, 941, 4358144,
  /* 28707 */ 871, 4359015, 0, 941, 4358144, 871, 4359015, 6004736, 6005677, 6004736, 6005607, 6005607, 0, 0, 0, 0, 0,
  /* 28724 */ 0, 58727, 872, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58737, 57875, 57875, 57875, 58745,
  /* 28740 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 28755 */ 57875, 57875, 57875, 59876, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 28770 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60298, 57875, 57875, 57875, 57875, 57875,
  /* 28785 */ 57875, 57875, 57875, 57875, 57875, 57875, 5235559, 5301095, 4359015, 4359015, 5407591, 5530471, 4359015,
  /* 28798 */ 4359015, 4359015, 5899111, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 6308711,
  /* 28809 */ 4359015, 4359015, 6357863, 6382439, 6398823, 5022567, 871, 871, 5021696, 4358144, 4358144, 0, 4980736, 0,
  /* 28823 */ 0, 0, 0, 0, 0, 5324800, 5373952, 5537792, 5545984, 5734400, 5971968, 6045696, 0, 6070272, 6348800,
  /* 28838 */ 4882432, 0, 5734400, 0, 0, 0, 4358144, 4866048, 4882432, 4358144, 4980736, 4358144, 4358144, 4358144,
  /* 28852 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5324800, 5373952, 5537792, 5545984, 5734400, 5971968,
  /* 28863 */ 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144, 6348800, 0, 6144000, 4358144, 6144000, 0,
  /* 28876 */ 4988928, 5005312, 0, 0, 6365184, 4866048, 0, 6070272, 5545984, 5152768, 0, 0, 6144000, 871, 4866919, 871,
  /* 28892 */ 4981607, 871, 871, 871, 871, 871, 871, 5325671, 5374823, 5538663, 5546855, 5735271, 5972839, 6046567, 871,
  /* 28907 */ 6071143, 6349671, 941, 4866989, 941, 4981677, 941, 941, 941, 941, 941, 941, 5325741, 5374893, 5538733,
  /* 28922 */ 5546925, 5735341, 5972909, 6046637, 941, 6071213, 6349741, 4883373, 941, 5735341, 941, 941, 941, 4358144,
  /* 28936 */ 4866048, 4882432, 4358144, 4980736, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0,
  /* 28949 */ 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28974 */ 0, 2882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 5324800, 5373952,
  /* 28995 */ 5537792, 5545984, 5734400, 5971968, 4358144, 6045696, 4358144, 6070272, 4358144, 4358144, 4358144,
  /* 29006 */ 6348800, 4883303, 871, 5587815, 5735271, 871, 871, 871, 871, 871, 871, 4359015, 4866919, 4883303, 4359015,
  /* 29021 */ 4359015, 5808999, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 29032 */ 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 29043 */ 4359015, 4359015, 4359015, 4359015, 6300519, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 29054 */ 4359015, 4359015, 4359015, 5112679, 4359015, 4359015, 4359015, 4359015, 4359015, 5284711, 4359015,
  /* 29065 */ 4359015, 4359015, 4359015, 5473127, 5522279, 4359015, 4359015, 4359015, 5596007, 5710695, 5718887,
  /* 29076 */ 4359015, 5825383, 5866343, 4359015, 4981607, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 29087 */ 4359015, 4359015, 5325671, 5374823, 5538663, 5546855, 5735271, 5972839, 4359015, 6046567, 4359015,
  /* 29098 */ 6071143, 4359015, 4359015, 4359015, 6349671, 871, 6144871, 4358144, 6144000, 0, 4988928, 5005312, 0, 0, 0,
  /* 29113 */ 0, 0, 0, 3731, 0, 0, 0, 0, 3979, 0, 0, 3981, 0, 0, 0, 0, 0, 57875, 61328, 57875, 57875, 61330, 57875,
  /* 29136 */ 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 60090,
  /* 29151 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60102, 57972, 57972, 57972,
  /* 29166 */ 57972, 57972, 57972, 57972, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584,
  /* 29183 */ 584, 584, 155944, 1196, 0, 304, 0, 0, 308, 0, 0, 0, 0, 0, 5775360, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0,
  /* 29208 */ 5693440, 0, 6496256, 5144576, 5136384, 0, 5914624, 871, 871, 5006183, 871, 871, 871, 5120871, 5137255,
  /* 29223 */ 871, 871, 871, 941, 6324224, 871, 871, 871, 871, 871, 871, 871, 6325095, 4359015, 4359015, 5006183,
  /* 29239 */ 4359015, 4359015, 4359015, 5120871, 5137255, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015,
  /* 29250 */ 4359015, 4359015, 4359015, 6325095, 5915495, 5914624, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760,
  /* 29267 */ 245760, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 0, 0, 0, 0, 139264, 147456, 245760, 245760, 245760,
  /* 29287 */ 0, 0, 0, 5513216, 5783552, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 871, 871, 871, 871, 871, 871, 871, 871, 871,
  /* 29311 */ 941, 941, 941, 941, 941, 941, 941, 941, 941, 6054759, 941, 941, 5014445, 941, 941, 941, 941, 941, 6054829,
  /* 29330 */ 941, 941, 941, 941, 941, 4358144, 4358144, 5013504, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 29344 */ 4358144, 4358144, 4358144, 6053888, 4358144, 4358144, 871, 871, 5456743, 871, 871, 871, 871, 871, 5555047,
  /* 29359 */ 5579623, 5620583, 5669735, 871, 871, 871, 871, 5817191, 871, 5858151, 871, 871, 871, 871, 871, 871, 871,
  /* 29376 */ 871, 871, 871, 871, 871, 6120295, 871, 5186407, 5235559, 5301095, 871, 871, 5530471, 871, 871, 871,
  /* 29392 */ 5899111, 871, 871, 871, 871, 6308711, 871, 6357863, 6382439, 6398823, 4801453, 4809645, 941, 4891565, 941,
  /* 29407 */ 4948909, 941, 941, 941, 5047213, 941, 941, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 29421 */ 4358144, 4997120, 4358144, 4358144, 5038080, 4358144, 4358144, 4358144, 5095424, 5103616, 4358144,
  /* 29432 */ 4358144, 5201920, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 29443 */ 4358144, 5890048, 5079911, 871, 871, 871, 941, 4907949, 941, 5079981, 941, 941, 941, 5743533, 941, 941,
  /* 29459 */ 6095789, 4358144, 4907008, 4358144, 5079040, 4358144, 5226496, 4358144, 5742592, 4358144, 4358144,
  /* 29470 */ 4358144, 6094848, 5743463, 871, 871, 6095719, 871, 5800807, 871, 871, 5882727, 871, 871, 871, 871, 871,
  /* 29486 */ 871, 871, 871, 6103911, 871, 871, 871, 6185831, 871, 6284135, 871, 6333287, 871, 871, 871, 6390631, 871,
  /* 29503 */ 871, 6431591, 6439783, 0, 0, 0, 0, 0, 0, 3535, 0, 0, 3537, 0, 0, 57875, 57875, 60886, 57875, 57875, 57875,
  /* 29524 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60901, 5227367,
  /* 29539 */ 4359015, 4907879, 4359015, 5079911, 4359015, 5227367, 4359015, 5743463, 4359015, 4359015, 4359015,
  /* 29550 */ 6095719, 5062656, 0, 0, 0, 0, 0, 871, 5063527, 871, 871, 871, 941, 5063597, 941, 941, 941, 941, 941,
  /* 29569 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 29580 */ 4358144, 4358144, 4358144, 4358144, 871, 871, 871, 871, 871, 871, 871, 4359015, 4359015, 4359015, 4359015,
  /* 29595 */ 4359015, 5194599, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4907008, 0, 5079040,
  /* 29607 */ 6094848, 5742592, 0, 0, 0, 0, 0, 871, 4907879, 871, 5062656, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 29623 */ 871, 871, 6226791, 4359015, 5063527, 4359015, 4359015, 4359015, 4359015, 4359015, 0, 6086656, 0, 0, 0,
  /* 29638 */ 4817767, 871, 871, 871, 4817837, 941, 941, 941, 941, 6087597, 4816896, 4358144, 4358144, 4358144, 4358144,
  /* 29653 */ 6086656, 871, 6087527, 4817767, 4359015, 4359015, 4359015, 4359015, 6087527, 0, 5087232, 0, 5931008, 871,
  /* 29667 */ 5333863, 5981031, 941, 5333933, 5981101, 941, 4358144, 5332992, 5980160, 4358144, 871, 4359015, 5333863,
  /* 29680 */ 5981031, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29710 */ 450560, 0, 0, 0, 0, 450560, 0, 0, 450560, 450560, 0, 0, 0, 450560, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0,
  /* 29735 */ 0, 450560, 0, 0, 0, 0, 450560, 0, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560, 450560,
  /* 29752 */ 450560, 450560, 450560, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
  /* 29778 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 450560, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0,
  /* 29804 */ 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 57875, 57875,
  /* 29830 */ 57875, 57875, 57875, 57875, 58234, 57875, 57875, 58248, 57875, 57875, 57875, 57875, 0, 0, 5791744, 0, 0,
  /* 29847 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6152192, 0, 0, 0, 6316032, 0, 196608, 0, 0, 5816320, 6291456, 0, 0, 0,
  /* 29873 */ 0, 0, 0, 0, 0, 1922, 0, 0, 1925, 0, 0, 0, 0, 0, 0, 1931, 1932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1925,
  /* 29902 */ 4358144, 4358144, 6463488, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 305, 0, 0, 309,
  /* 29920 */ 0, 0, 0, 4956160, 4964352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29950 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1285, 0, 0, 0, 0, 0, 0, 0, 0, 6283264, 6332416, 0, 0, 0, 5881856, 0,
  /* 29976 */ 5382144, 0, 0, 0, 0, 0, 0, 6266880, 872, 0, 0, 0, 872, 0, 4784128, 0, 0, 0, 0, 0, 0, 0, 4915200, 0,
  /* 30000 */ 4956160, 0, 5799936, 0, 0, 5881856, 0, 0, 0, 0, 0, 0, 0, 0, 6103040, 0, 0, 0, 6184960, 0, 6283264, 0,
  /* 30022 */ 6332416, 0, 0, 0, 6389760, 0, 0, 6430720, 6438912, 942, 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 57875,
  /* 30043 */ 57875, 57875, 57875, 57875, 58736, 57875, 57875, 57875, 57875, 57875, 58747, 57875, 57875, 57875, 57875,
  /* 30058 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 30074 */ 57898, 60668, 57898, 60670, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 0, 0, 942, 0, 4784128,
  /* 30091 */ 0, 0, 0, 0, 0, 0, 0, 4915200, 0, 4956160, 4972544, 0, 0, 0, 0, 0, 5070848, 0, 0, 0, 0, 0, 0, 5218304, 0,
  /* 30116 */ 5267456, 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 57875, 58733, 57875, 57875, 57875, 57875, 57875,
  /* 30134 */ 57875, 57875, 57875, 58744, 57875, 57875, 57875, 57875, 58753, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 30149 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59848, 57875, 57875, 57875, 57875, 59853, 57875,
  /* 30164 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 30179 */ 57875, 57875, 57875, 57898, 57898, 57898, 57898, 60921, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 30194 */ 57898, 5709824, 0, 0, 0, 5283840, 0, 0, 0, 0, 5251072, 0, 6414336, 5832704, 0, 5955584, 0, 0, 872, 0, 0,
  /* 30215 */ 0, 4841472, 0, 0, 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3732,
  /* 30244 */ 0, 3734, 0, 0, 0, 0, 0, 0, 6111232, 0, 6176768, 6209536, 0, 0, 0, 0, 0, 0, 942, 0, 0, 0, 4841472, 0, 0,
  /* 30269 */ 4898816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5111808, 0, 0, 0, 0, 0, 0, 0, 319488, 319488, 0, 0, 0, 0, 0, 0, 0,
  /* 30297 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528, 0, 278528, 278528, 0, 0, 0, 0, 0, 0, 0,
  /* 30327 */ 459184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459225, 459225, 459225, 459225, 459225, 459225, 459225,
  /* 30347 */ 459225, 459225, 459225, 459225, 459225, 459225, 459225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30371 */ 0, 0, 0, 765, 0, 0, 831, 0, 0, 0, 0, 0, 0, 0, 831, 0, 0, 0, 0, 459370, 0, 0, 459370, 459370, 459370,
  /* 30396 */ 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370,
  /* 30409 */ 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459370, 459402, 459225, 1, 24578, 3, 0, 0,
  /* 30424 */ 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 693, 0, 0,
  /* 30452 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 708, 709, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30474 */ 4358144, 4358144, 4358144, 483328, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30490 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 1, 24578, 3, 0, 0, 0, 0, 507904, 0, 0, 0, 507904, 0, 0, 0, 0, 0, 0, 0,
  /* 30519 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 58732, 57875, 57875,
  /* 30544 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58755, 57875,
  /* 30559 */ 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30584 */ 0, 0, 0, 1799, 1800, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904, 507904, 507904,
  /* 30611 */ 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 507904, 0, 0, 0, 0, 0, 0,
  /* 30628 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 30657 */ 57875, 58228, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 507904, 507904, 1,
  /* 30673 */ 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 442368, 0, 0, 0, 0, 0, 0, 0,
  /* 30699 */ 0, 0, 0, 0, 3876, 0, 3877, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1248, 1249, 0,
  /* 30729 */ 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30749 */ 4358144, 4358144, 4358144, 491520, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30765 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 1, 24578, 3, 0, 0, 0, 0, 0, 516096, 0, 0, 0, 516096, 0, 0, 0, 0, 0, 0,
  /* 30794 */ 516096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875,
  /* 30824 */ 57875, 57875, 57875, 57875, 57875, 60890, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 30839 */ 57875, 57875, 57875, 57875, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516570, 516570,
  /* 30863 */ 516570, 516570, 516570, 516570, 516570, 516570, 516570, 516570, 516570, 516570, 516570, 516570, 0, 0, 0,
  /* 30878 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 0, 0, 0, 1231, 0, 0, 0, 0, 0, 0, 516570,
  /* 30910 */ 516570, 1, 24578, 0, 0, 0, 4366336, 0, 0, 548864, 0, 0, 304, 305, 0, 4268032, 308, 309, 409600, 0, 0, 0,
  /* 30932 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 60885, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 30952 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898,
  /* 30969 */ 57898, 59914, 57898, 57898, 57898, 57898, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 30982 */ 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 368640,
  /* 31000 */ 0, 0, 0, 0, 0, 0, 4857856, 0, 0, 5513216, 5783552, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31028 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3736, 0, 0, 0, 0, 1, 24578, 4227367, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
  /* 31058 */ 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1253, 0, 368, 368, 0, 1256, 0, 0, 0, 0,
  /* 31089 */ 0, 0, 0, 0, 0, 540672, 0, 540672, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31119 */ 0, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 4227367, 0, 0, 4366336, 0, 0, 0, 0, 0, 304,
  /* 31147 */ 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 31173 */ 57875, 57875, 57875, 58236, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 4358144, 4358144, 4358144,
  /* 31187 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 499712, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144,
  /* 31203 */ 4358144, 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4857856, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0,
  /* 31227 */ 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 869, 0, 0, 0, 0, 57875,
  /* 31256 */ 57875, 57875, 57875, 57875, 57875, 58238, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 1, 24578, 3,
  /* 31272 */ 155944, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875,
  /* 31303 */ 59831, 57875, 57875, 1888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31333 */ 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31365 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1284, 0, 0, 0, 0, 0, 0, 0, 1292, 0, 584, 57876, 57876, 584, 57876, 584, 584,
  /* 31392 */ 57876, 57876, 57876, 57876, 57876, 57876, 57899, 57876, 57899, 57876, 57876, 57876, 57876, 57876, 57876,
  /* 31407 */ 57876, 57876, 57876, 57876, 57876, 57876, 57973, 57973, 57973, 57876, 584, 1, 24578, 3, 155944, 155944,
  /* 31423 */ 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0,
  /* 31454 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24578, 3, 155945,
  /* 31485 */ 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5857280, 0,
  /* 31516 */ 6463488, 4939776, 1, 24578, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31546 */ 0, 0, 0, 573440, 0, 573440, 573440, 573440, 573440, 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31570 */ 0, 0, 0, 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31603 */ 0, 0, 0, 0, 573440, 573440, 573440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1876, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31632 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2884, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 0, 0,
  /* 31663 */ 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440,
  /* 31676 */ 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 573440, 1, 24578,
  /* 31690 */ 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31718 */ 1926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1938, 0, 0, 0, 1940, 0, 6193152, 0, 0, 5406720, 6397952,
  /* 31742 */ 5300224, 5234688, 5423104, 0, 0, 0, 0, 5988352, 0, 0, 6135808, 6307840, 0, 5996544, 4800512, 0, 6356992,
  /* 31759 */ 3731, 0, 0, 0, 0, 0, 0, 0, 5496832, 0, 0, 0, 0, 0, 0, 58727, 872, 57875, 58730, 57875, 57875, 57875,
  /* 31781 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58742, 58748, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 31796 */ 57875, 57875, 58760, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58771, 57875, 57875, 57875,
  /* 31811 */ 58775, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58783, 57875, 57875, 57875, 58789,
  /* 31826 */ 58791, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60320, 57875,
  /* 31841 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60328, 57875, 57875, 57875, 57875,
  /* 31856 */ 57875, 0, 2987, 0, 0, 0, 0, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 666, 305, 0, 4268032, 669, 309, 0,
  /* 31881 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31914 */ 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 0, 581632, 581632, 581632, 581632, 581632,
  /* 31938 */ 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 581632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31958 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 834, 0, 0, 581632, 581632, 1, 24578, 3, 0, 0,
  /* 31988 */ 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2472, 0, 0,
  /* 32016 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 32038 */ 57875, 60894, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 5373952, 5734400,
  /* 32054 */ 6045696, 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800, 5906432, 0, 5537792, 3879, 4882432, 0, 0, 0, 0,
  /* 32072 */ 0, 0, 0, 0, 5939200, 0, 0, 5677056, 0, 0, 5775360, 0, 0, 0, 3974, 0, 0, 0, 0, 0, 0, 5693440, 0, 6496256,
  /* 32096 */ 5144576, 5136384, 0, 5914624, 0, 0, 5005312, 0, 0, 0, 5120000, 5136384, 0, 0, 0, 0, 0, 0, 0, 0, 2387, 0,
  /* 32118 */ 0, 0, 0, 2391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2424, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32151 */ 0, 0, 0, 0, 0, 5513216, 5783552, 0, 3974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32181 */ 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 0, 0, 313, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32212 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2864, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 313, 0, 313, 314, 0,
  /* 32244 */ 313, 313, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 412, 314, 0, 0, 0, 0, 0, 0, 314, 417, 0, 0,
  /* 32272 */ 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 475, 475, 475,
  /* 32299 */ 488, 488, 488, 488, 488, 488, 488, 488, 488, 508, 488, 488, 488, 488, 488, 525, 488, 525, 488, 488, 488,
  /* 32320 */ 488, 488, 488, 57877, 57877, 57877, 57900, 57877, 57877, 57877, 57877, 57900, 57877, 57920, 585, 57949,
  /* 32336 */ 585, 57949, 57949, 585, 585, 57949, 57949, 585, 57963, 585, 585, 57963, 57963, 57963, 57963, 57963, 57963,
  /* 32353 */ 57920, 57963, 57920, 57963, 57963, 57963, 57963, 57963, 57963, 57963, 57963, 57963, 57963, 57963, 57963,
  /* 32368 */ 57974, 57974, 57974, 57963, 585, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308,
  /* 32389 */ 309, 0, 0, 0, 0, 0, 674, 0, 0, 677, 678, 0, 0, 0, 775, 0, 0, 0, 0, 0, 780, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0,
  /* 32420 */ 0, 791, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 3977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32451 */ 57875, 57875, 57875, 57875, 57875, 57875, 61332, 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972,
  /* 32466 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60092, 57972, 57972, 57972, 57972, 60096, 57972, 57972,
  /* 32481 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61021, 57972, 57972,
  /* 32496 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 32511 */ 57972, 61025, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61034, 57972, 57972, 57972,
  /* 32526 */ 0, 0, 806, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 0, 819, 0, 0, 0, 0, 823, 0, 0, 0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
  /* 32558 */ 0, 0, 0, 0, 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
  /* 32591 */ 0, 0, 0, 0, 0, 0, 0, 863, 823, 0, 0, 0, 0, 0, 867, 868, 0, 0, 0, 823, 0, 0, 57875, 57875, 57875, 58223,
  /* 32617 */ 58227, 57875, 57875, 58239, 57875, 57875, 57875, 58252, 57875, 58257, 57875, 58265, 57875, 58268, 57875,
  /* 32632 */ 57875, 58280, 57875, 0, 57898, 57898, 57898, 58293, 58297, 57898, 57898, 58309, 57898, 57898, 57898,
  /* 32647 */ 58322, 57898, 58327, 57898, 58335, 57898, 58338, 57898, 57898, 58350, 57898, 57898, 57898, 57898, 57898,
  /* 32662 */ 57898, 59390, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59400, 57898, 57898, 57898, 57898, 57898,
  /* 32677 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59434, 57898, 57898,
  /* 32692 */ 57898, 57898, 57898, 57898, 57898, 59442, 57898, 57898, 57898, 57898, 57898, 57898, 58297, 57898, 57898,
  /* 32707 */ 58358, 58335, 58338, 57898, 584, 584, 1025, 1029, 584, 584, 1041, 584, 584, 584, 1057, 584, 1062, 584,
  /* 32725 */ 1070, 584, 1073, 584, 584, 1087, 584, 57875, 58227, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 32741 */ 57875, 57875, 59326, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 32756 */ 57875, 57875, 57875, 57875, 57875, 59344, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 32771 */ 57875, 57875, 57875, 59362, 57875, 57875, 57875, 57875, 59367, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 32786 */ 57875, 57875, 57875, 57875, 50621, 0, 57898, 57898, 58239, 57875, 57875, 58443, 58265, 58268, 57875,
  /* 32801 */ 57875, 0, 0, 57875, 0, 58257, 58257, 0, 58309, 57875, 58268, 57875, 57972, 57972, 57972, 58462, 58466,
  /* 32818 */ 57972, 57972, 58478, 57972, 57972, 57972, 58494, 57972, 57972, 57972, 57972, 57972, 57972, 59649, 57972,
  /* 32833 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59658, 57972, 57972, 57972, 57972, 57972, 57972, 59667,
  /* 32848 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875,
  /* 32863 */ 57875, 584, 584, 584, 584, 584, 584, 155944, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 58499, 57972, 58507, 57972,
  /* 32884 */ 58510, 57972, 57972, 58524, 57972, 0, 58227, 58223, 58530, 58268, 57875, 57875, 1025, 1029, 1192, 1073,
  /* 32900 */ 584, 584, 155944, 1196, 0, 0, 1199, 0, 0, 1204, 0, 0, 0, 0, 0, 0, 3731, 0, 3976, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32927 */ 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875,
  /* 32944 */ 57972, 57972, 57972, 57972, 57972, 57972, 59595, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 32959 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60495, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 32974 */ 60500, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32996 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 352256, 0, 0, 0, 0, 0,
  /* 33027 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1937, 0, 0, 0, 0, 0, 0, 58797, 57875, 57875,
  /* 33057 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898,
  /* 33072 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59936,
  /* 33087 */ 57898, 57898, 57898, 57898, 57898, 57898, 59941, 59942, 57898, 57898, 57898, 57898, 57898, 584, 584,
  /* 33102 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58797, 57875, 57875,
  /* 33117 */ 0, 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 33132 */ 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898,
  /* 33150 */ 57898, 57898, 57898, 584, 0, 0, 0, 1805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1824,
  /* 33179 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376832, 376832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33211 */ 0, 0, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 466944, 0, 1941, 0, 0, 0, 0, 58727, 1946, 57875, 57875, 57875,
  /* 33234 */ 57875, 57875, 57875, 57875, 57875, 57875, 59301, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 33249 */ 59313, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33271 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 368, 0, 0, 0, 0, 0, 57875, 57875, 59351, 57875,
  /* 33298 */ 57875, 59354, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59365, 57875, 57875, 57875, 57875,
  /* 33313 */ 57875, 57875, 59371, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 2036, 57898, 57898, 57898, 57898,
  /* 33328 */ 57898, 57898, 59422, 59423, 59425, 57898, 57898, 57898, 57898, 57898, 57898, 59432, 59433, 57898, 59435,
  /* 33343 */ 57898, 57898, 59438, 59439, 57898, 57898, 57898, 57898, 57898, 57898, 59446, 57898, 59448, 57898, 57898,
  /* 33358 */ 57898, 57898, 59455, 57898, 57898, 57898, 57898, 57898, 57898, 59461, 57898, 57898, 57898, 57898, 57898,
  /* 33373 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 3366, 584,
  /* 33390 */ 3367, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 59676, 57972, 57972, 57972,
  /* 33409 */ 57972, 57972, 57972, 57875, 59685, 57875, 57875, 57875, 584, 2346, 584, 584, 584, 2350, 0, 2351, 0, 0, 0,
  /* 33428 */ 0, 2353, 0, 2354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33460 */ 0, 0, 0, 0, 0, 0, 0, 2359296, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33492 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33526 */ 2393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 60624, 57875,
  /* 33552 */ 60625, 57875, 57875, 57875, 57875, 57875, 57875, 2461, 0, 0, 2463, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 0, 0, 0,
  /* 33575 */ 0, 0, 0, 0, 0, 0, 0, 2460, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 584, 1582, 584, 584, 584, 584,
  /* 33598 */ 1196, 0, 0, 0, 0, 1784, 0, 0, 0, 0, 1791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0,
  /* 33628 */ 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 57875, 57875, 57875, 57875, 57875, 57875, 59839, 57875,
  /* 33649 */ 57875, 59842, 57875, 57875, 57875, 57875, 57875, 59849, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 33664 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 59909, 57898,
  /* 33681 */ 57898, 57898, 57898, 57898, 59915, 57898, 57898, 57898, 57875, 57875, 57875, 57875, 57875, 59867, 57875,
  /* 33696 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 33711 */ 57875, 59881, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57875, 0, 57875, 57875, 0,
  /* 33728 */ 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 58467, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 33743 */ 57972, 57972, 57972, 57972, 0, 0, 0, 4119, 0, 0, 0, 0, 0, 0, 0, 4126, 0, 0, 57875, 57875, 57875, 57875,
  /* 33765 */ 61475, 57875, 57875, 57875, 59918, 57898, 57898, 59921, 57898, 57898, 57898, 57898, 57898, 59928, 57898,
  /* 33780 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 33795 */ 57898, 57898, 57898, 57898, 57898, 59946, 2655, 584, 584, 2658, 584, 584, 584, 584, 584, 584, 2666, 584,
  /* 33813 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2192,
  /* 33834 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2686, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 33855 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2701, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 33876 */ 584, 584, 584, 1593, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1608, 584,
  /* 33897 */ 584, 584, 57972, 57972, 57972, 60164, 57875, 57875, 57875, 57875, 2825, 584, 584, 584, 584, 2830, 2351, 0,
  /* 33915 */ 2831, 2354, 0, 0, 2833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2841, 0, 0, 0, 0, 0, 0, 58727, 1947, 57875, 57875,
  /* 33940 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 33955 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60330, 57875, 57875, 0, 0, 0, 0, 0,
  /* 33973 */ 2896, 0, 0, 0, 0, 2898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34005 */ 3514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34038 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60289, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 34053 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 34068 */ 57875, 57875, 57875, 57875, 57875, 59378, 50621, 0, 57898, 57898, 0, 0, 0, 0, 57898, 57898, 57898, 57898,
  /* 34086 */ 57898, 57898, 57898, 60339, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60346,
  /* 34101 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59929, 57898, 57898, 57898, 57898,
  /* 34116 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 34131 */ 57898, 57898, 2645, 584, 584, 584, 584, 584, 584, 2652, 584, 584, 584, 584, 584, 584, 584, 57875, 57875,
  /* 34150 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60466, 57875, 57875, 57898, 57875, 57875, 57972, 57972,
  /* 34165 */ 57972, 57972, 57972, 57972, 57972, 57972, 60479, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 34180 */ 58526, 0, 58228, 57875, 57875, 57875, 57875, 58282, 584, 1030, 584, 584, 584, 1089, 155944, 1196, 0, 0, 0,
  /* 34199 */ 0, 0, 0, 0, 0, 0, 0, 694, 0, 673, 0, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 833, 0, 57898,
  /* 34229 */ 60678, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60684, 57898, 57898, 57898,
  /* 34244 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 34259 */ 57898, 57898, 59406, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584,
  /* 34274 */ 584, 584, 3384, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3391, 584, 584, 584, 584, 584, 584,
  /* 34295 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3101, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 34316 */ 584, 584, 584, 3111, 584, 57972, 57972, 60775, 57972, 57972, 60779, 57972, 57972, 57972, 57972, 57972,
  /* 34332 */ 57972, 57972, 57972, 57972, 57972, 60788, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 34347 */ 57972, 57972, 60795, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0,
  /* 34364 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34397 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 314, 313, 0, 0, 0, 313, 313, 314, 57898, 57898, 60929, 57898, 57898,
  /* 34422 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60943, 57898, 57898,
  /* 34437 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58856, 57898, 57898,
  /* 34452 */ 58859, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 34467 */ 59430, 57898, 57898, 57898, 57898, 57898, 59437, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59445,
  /* 34482 */ 57898, 57898, 57898, 60954, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 34501 */ 584, 584, 3625, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2722, 584, 584,
  /* 34522 */ 584, 57875, 60070, 57875, 57875, 57875, 57875, 57875, 59870, 57875, 57875, 57875, 57875, 57875, 57972,
  /* 34537 */ 61038, 57972, 61040, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584,
  /* 34552 */ 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34585 */ 0, 0, 0, 676, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 34602 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 2562, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 34619 */ 57898, 57898, 57898, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972,
  /* 34634 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 34649 */ 57875, 584, 4043, 0, 4045, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 4053, 0, 4055, 0, 57875, 61402, 57875, 61404,
  /* 34672 */ 57875, 57875, 57875, 57875, 57875, 57898, 61411, 57898, 61413, 57898, 57898, 57898, 57898, 57898, 4080,
  /* 34687 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 34706 */ 57875, 57875, 61446, 57972, 57972, 57972, 57972, 57875, 57898, 57898, 57898, 57898, 61482, 57898, 57898,
  /* 34721 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 4150, 584, 584, 584, 584, 584, 584,
  /* 34739 */ 584, 584, 584, 584, 57875, 57875, 57875, 57875, 60757, 57875, 57875, 57875, 57875, 57875, 57875, 60764,
  /* 34755 */ 57875, 57875, 57972, 60767, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 57875,
  /* 34770 */ 57875, 57972, 57972, 57972, 57972, 61514, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 34785 */ 57972, 0, 0, 0, 0, 0, 0, 0, 0, 4187, 0, 4189, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 34805 */ 59357, 57875, 57875, 57875, 59363, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59370, 57875, 57875,
  /* 34820 */ 57875, 57875, 59376, 57875, 57875, 50621, 0, 57898, 57898, 57898, 57898, 57898, 58882, 57898, 57898,
  /* 34835 */ 57898, 58888, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58900, 57898, 57898, 58903, 57898,
  /* 34850 */ 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1621, 584, 584, 584, 584, 584, 584, 584,
  /* 34870 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2700, 584, 584, 584, 584, 2705,
  /* 34891 */ 584, 584, 584, 584, 584, 0, 0, 0, 315, 316, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34921 */ 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 375, 375, 408, 0, 0, 0, 0, 430, 131072, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0,
  /* 34950 */ 430, 462, 0, 0, 0, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 529, 462, 529, 529, 529, 529,
  /* 34972 */ 529, 529, 57878, 57878, 57878, 57901, 57878, 57878, 57878, 57878, 57901, 57878, 57901, 586, 57878, 586,
  /* 34988 */ 57878, 57878, 586, 586, 586, 57878, 57878, 586, 57878, 586, 586, 57878, 57878, 57878, 57878, 57878, 57878,
  /* 35005 */ 57901, 57878, 57901, 57878, 57878, 57878, 57878, 57878, 57878, 57878, 57878, 57878, 57878, 57878, 57878,
  /* 35020 */ 57975, 57975, 57975, 57878, 57975, 57975, 57996, 657, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0,
  /* 35039 */ 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2853, 0, 0, 0, 0, 0, 2857, 0, 0, 0, 0, 0,
  /* 35070 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2480, 2930, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 35093 */ 57875, 57875, 57875, 57875, 58261, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57898, 57898,
  /* 35108 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58331, 57898, 57898,
  /* 35123 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61132, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35138 */ 57898, 57898, 57898, 57898, 61138, 57898, 61140, 57898, 57898, 57898, 584, 584, 584, 3802, 584, 57972,
  /* 35154 */ 58503, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584,
  /* 35170 */ 584, 584, 584, 584, 584, 155944, 1196, 0, 304, 0, 0, 308, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35196 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2377, 2378, 0, 2380, 0, 0, 0, 0, 0, 1868, 0, 0, 0,
  /* 35227 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3878, 0, 3731, 0, 0,
  /* 35259 */ 0, 0, 0, 3884, 0, 0, 3887, 0, 0, 0, 0, 57898, 57898, 59452, 57898, 57898, 57898, 57898, 59457, 57898,
  /* 35279 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35294 */ 57898, 57898, 57898, 584, 584, 584, 584, 584, 3617, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 35314 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1631, 584, 584, 584, 584, 584, 584,
  /* 35335 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1629, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 35356 */ 584, 1646, 584, 584, 584, 584, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35375 */ 60340, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35390 */ 57898, 57898, 57898, 57898, 60393, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 35408 */ 3112, 584, 584, 584, 57875, 60458, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 35424 */ 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 60476, 57972, 57972, 57972, 57972, 60480, 57972,
  /* 35439 */ 57972, 57875, 584, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0,
  /* 35463 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 1213, 0, 0, 0, 0, 0, 0, 1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57898,
  /* 35493 */ 57898, 57898, 57898, 57898, 57898, 61484, 61485, 57898, 57898, 57898, 57898, 61489, 57898, 584, 584, 584,
  /* 35509 */ 584, 584, 584, 584, 584, 4154, 584, 4156, 584, 584, 4158, 584, 57875, 57875, 584, 57875, 584, 584, 57875,
  /* 35528 */ 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57898, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 35543 */ 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584,
  /* 35559 */ 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2838, 0, 2840, 0, 0, 57875, 61507, 57875, 57875,
  /* 35584 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61518, 57972, 61520, 57972, 57972, 61522,
  /* 35599 */ 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59870,
  /* 35620 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 35635 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59888, 0, 0, 322, 322, 431, 131072, 433, 435, 431, 440,
  /* 35653 */ 433, 440, 0, 318, 457, 457, 458, 463, 476, 476, 476, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
  /* 35674 */ 510, 510, 523, 523, 524, 510, 524, 510, 524, 524, 524, 524, 524, 524, 57879, 57879, 57879, 57902, 57879,
  /* 35693 */ 57879, 57879, 57879, 57902, 57879, 57921, 587, 57950, 587, 57950, 57950, 587, 587, 57950, 57950, 587,
  /* 35709 */ 57950, 587, 587, 57950, 57950, 57950, 57950, 57950, 57950, 57921, 57950, 57921, 57950, 57950, 57950,
  /* 35724 */ 57950, 57950, 57950, 57950, 57950, 57950, 57950, 57950, 57950, 57976, 57976, 57976, 57995, 658, 1, 24578,
  /* 35740 */ 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35768 */ 2902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 35799 */ 57875, 57875, 0, 713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 368, 729, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35828 */ 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 312, 0, 0, 57875, 57875, 57875,
  /* 35855 */ 58269, 57875, 57875, 57875, 57875, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35870 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58339, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35885 */ 57898, 57898, 58887, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 35900 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3094, 584, 584, 584, 584,
  /* 35919 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3077, 584, 584,
  /* 35940 */ 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 58446, 57875, 57875, 0, 0, 57875, 0,
  /* 35959 */ 57875, 57875, 0, 57898, 57875, 58269, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 35974 */ 57972, 57972, 57972, 57972, 57972, 57972, 60494, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 35989 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59662, 57972, 57972, 57972, 57972,
  /* 36004 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 58511, 57972,
  /* 36019 */ 57972, 57972, 57972, 0, 57875, 57875, 57875, 58269, 57875, 57875, 584, 584, 584, 1074, 584, 584, 155944,
  /* 36036 */ 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360448, 360448, 0, 360448, 0, 360448, 360448, 360448, 360448,
  /* 36057 */ 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 360448, 0, 0, 0,
  /* 36072 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2351104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36105 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 321, 1327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36135 */ 0, 0, 0, 0, 1341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1353, 0, 58727, 872, 57875, 57875, 58731, 57875,
  /* 36161 */ 58734, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58746, 57875, 58751, 57875, 57875, 58754,
  /* 36176 */ 57875, 57875, 58757, 57875, 57875, 58840, 57898, 57898, 58843, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 36191 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 36206 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59969, 57898, 59971, 57898, 584, 584, 57875, 57875,
  /* 36221 */ 57875, 59003, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57875,
  /* 36236 */ 57898, 57875, 57875, 57875, 57972, 57972, 59021, 57972, 59024, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36251 */ 57972, 57972, 58527, 0, 57875, 57875, 57875, 57875, 58532, 58283, 584, 584, 584, 584, 1194, 1090, 155944,
  /* 36268 */ 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36302 */ 0, 0, 2481, 0, 0, 0, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 59038, 57972, 59043, 57972,
  /* 36320 */ 57972, 59047, 57972, 57972, 59050, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36335 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60811, 57972, 57875, 57875, 57875,
  /* 36350 */ 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1906, 0, 1908,
  /* 36380 */ 0, 0, 0, 0, 0, 0, 0, 1915, 0, 0, 0, 0, 0, 0, 58727, 1947, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 36403 */ 57875, 57875, 57875, 57875, 57875, 59305, 59306, 57875, 57875, 57875, 59312, 57875, 57875, 57875, 57875,
  /* 36418 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61117, 57875, 57875,
  /* 36433 */ 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58892, 57898,
  /* 36448 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58904, 57898, 57898, 57898, 584, 584, 1567, 584,
  /* 36464 */ 584, 584, 57875, 59350, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 36479 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 36494 */ 50621, 0, 57898, 57898, 57898, 57898, 57898, 57898, 59925, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 36509 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 36524 */ 57898, 57898, 57898, 57898, 58907, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2173, 584, 584, 584, 584,
  /* 36543 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2196, 2197, 584, 584,
  /* 36564 */ 584, 584, 584, 584, 584, 584, 584, 3388, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 36585 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2676, 584, 584, 584, 584, 584, 584, 584, 584, 2683, 57875,
  /* 36605 */ 59582, 57875, 57875, 57875, 57875, 57875, 59587, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36620 */ 57972, 57972, 57972, 57972, 57972, 57972, 59602, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36635 */ 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 296, 1196, 0, 0, 0, 0,
  /* 36655 */ 0, 0, 0, 0, 59614, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36672 */ 57972, 57972, 57972, 57972, 57972, 59629, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36687 */ 57972, 57972, 57972, 57972, 57972, 60521, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36702 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59058, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36717 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 59891, 57875, 57875, 57875,
  /* 36732 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898,
  /* 36749 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 36764 */ 57898, 57898, 57898, 60348, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 2711, 2712, 584,
  /* 36780 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 36799 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60079, 57875, 57875, 57898, 60082, 57875, 57972, 57972,
  /* 36814 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 36829 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59639, 57972, 57972, 57972, 57972,
  /* 36844 */ 57972, 0, 0, 0, 0, 0, 3269, 0, 0, 3272, 0, 0, 0, 0, 0, 0, 0, 3276, 2930, 0, 57875, 57875, 57875, 57875,
  /* 36868 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 2560, 0,
  /* 36884 */ 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 0, 3480, 0, 0, 0, 0, 0, 0, 0,
  /* 36905 */ 3484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2913, 0, 0, 0, 0, 0, 0,
  /* 36938 */ 0, 0, 0, 0, 0, 3534, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60892,
  /* 36959 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898,
  /* 36974 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 36989 */ 57898, 57898, 57898, 60369, 57898, 57898, 57898, 57898, 57898, 60375, 57898, 57898, 57898, 57898, 57898,
  /* 37004 */ 57898, 57875, 57875, 57875, 60905, 60906, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 37019 */ 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60925, 57898,
  /* 37034 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60683, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37049 */ 57898, 57898, 57898, 57898, 60688, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37064 */ 57898, 57898, 60362, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37079 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59436, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37094 */ 57898, 57898, 57898, 57898, 57898, 0, 0, 0, 3743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875,
  /* 37119 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 37134 */ 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57875, 57898, 61480, 57898, 61481, 57898, 57898, 57898,
  /* 37149 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 4148, 584, 4149, 584, 584, 584, 4153, 584, 584, 584,
  /* 37167 */ 584, 584, 584, 584, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0,
  /* 37186 */ 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 584, 57875, 57875, 57875, 57875,
  /* 37201 */ 61510, 57972, 61512, 57972, 61513, 57972, 57972, 57972, 61517, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 37216 */ 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59894,
  /* 37237 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 59912,
  /* 37254 */ 59913, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59393, 57898, 57898, 57898, 59398, 57898,
  /* 37269 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59408, 57898, 57898, 57898, 57898, 59412, 57898,
  /* 37284 */ 57898, 57898, 57898, 584, 584, 584, 584, 584, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 37300 */ 4322, 0, 0, 0, 57875, 57875, 57875, 57898, 57898, 57898, 61670, 584, 584, 584, 4328, 61673, 57972, 57972,
  /* 37318 */ 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 2832, 0, 0, 0, 0, 0,
  /* 37341 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1904, 0, 0, 0, 0,
  /* 37375 */ 0, 0, 1802, 0, 0, 0, 0, 0, 61675, 0, 0, 57875, 57898, 57898, 584, 584, 57875, 57972, 57972, 0, 57898, 584,
  /* 37397 */ 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 0,
  /* 37416 */ 57875, 57898, 57898, 584, 584, 57875, 57972, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875,
  /* 37433 */ 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 0, 57875, 57898, 57898, 584, 584,
  /* 37451 */ 57875, 57972, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 4347, 61692, 4349, 61694,
  /* 37468 */ 61695, 0, 57898, 584, 57875, 57972, 0, 0, 57875, 57898, 57898, 584, 584, 57875, 57972, 57972, 0, 57898,
  /* 37486 */ 584, 57875, 57972, 4342, 61687, 4344, 61689, 61690, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875,
  /* 37503 */ 57972, 0, 0, 57875, 57898, 57898, 584, 584, 57875, 57972, 57972, 4337, 61682, 4339, 61684, 61685, 0,
  /* 37520 */ 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 57898, 584, 57875, 57972, 0, 0, 0, 0, 0, 377,
  /* 37540 */ 131072, 0, 436, 377, 0, 0, 0, 447, 453, 0, 0, 377, 464, 477, 477, 477, 490, 490, 490, 490, 490, 490, 490,
  /* 37563 */ 490, 490, 490, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 57880, 57880, 57880,
  /* 37583 */ 57903, 57880, 57880, 57880, 57880, 57903, 57880, 57922, 588, 57951, 588, 57951, 57951, 588, 588, 57951,
  /* 37599 */ 57951, 588, 57880, 588, 588, 57880, 57880, 57880, 57880, 57880, 57880, 57922, 57880, 57922, 57880, 57880,
  /* 37615 */ 57880, 57880, 57880, 57880, 57880, 57880, 57880, 57880, 57880, 57880, 57977, 57977, 57977, 57880, 588, 1,
  /* 37631 */ 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37658 */ 0, 0, 3249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3262, 3263, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 834, 0,
  /* 37689 */ 0, 0, 0, 0, 834, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58247, 57875,
  /* 37708 */ 57875, 57875, 57875, 57875, 57875, 0, 0, 57875, 0, 57875, 57875, 0, 57898, 58247, 57875, 57875, 57972,
  /* 37725 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 58487, 57972, 57972, 57972, 0, 0, 0, 1237, 1238,
  /* 37742 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5767168, 0,
  /* 37774 */ 0, 0, 0, 4857856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 5414912, 57875, 57875, 57875, 57875,
  /* 37797 */ 57875, 57875, 58806, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898, 58818, 57898, 57898,
  /* 37812 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59933, 57898,
  /* 37827 */ 59935, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37842 */ 58841, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58855,
  /* 37857 */ 57898, 57898, 57898, 57898, 57898, 57898, 58863, 57898, 57898, 58865, 57898, 57898, 57898, 57898, 58870,
  /* 37872 */ 57898, 57898, 57898, 57898, 57898, 57898, 59951, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37887 */ 57898, 57898, 57898, 57898, 59962, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59968, 57898, 57898,
  /* 37902 */ 57898, 57898, 57898, 57898, 57898, 58850, 57898, 57898, 58852, 57898, 57898, 57898, 57898, 57898, 58858,
  /* 37917 */ 57898, 57898, 58862, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37932 */ 59463, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59471, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 37947 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1617, 584, 584, 1619, 584, 584, 584, 584, 1624, 584, 584,
  /* 37967 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1649, 584, 584, 584, 584, 584, 584,
  /* 37988 */ 3406, 584, 584, 57875, 60754, 57875, 60756, 57875, 60758, 57875, 57875, 57875, 57875, 57875, 57898, 57875,
  /* 38004 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60093, 57972, 57972, 57972, 57972,
  /* 38019 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59660, 57972,
  /* 38034 */ 57972, 57972, 59666, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59675, 584, 584,
  /* 38049 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59009, 57875, 57875, 57875, 57875, 57875,
  /* 38064 */ 0, 58779, 57898, 57875, 57875, 57875, 57972, 57972, 59022, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 38079 */ 57972, 57972, 57972, 57972, 57972, 60784, 57972, 57972, 60787, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 38094 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60123, 57972, 57972, 57972,
  /* 38109 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59072, 57972,
  /* 38124 */ 57972, 59074, 57972, 57972, 57972, 57972, 59080, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 38139 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59105, 57972, 57972, 57972, 57972, 57875, 57875,
  /* 38154 */ 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2836, 2837, 0, 0, 0, 0,
  /* 38180 */ 0, 0, 0, 0, 0, 4276224, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38212 */ 2359296, 421, 421, 0, 0, 0, 0, 0, 0, 0, 1835, 1836, 1837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38241 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 1867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38275 */ 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2035,
  /* 38306 */ 0, 0, 59450, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38322 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 38338 */ 584, 584, 584, 584, 584, 584, 2654, 584, 584, 584, 584, 2207, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 38359 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 38377 */ 57875, 57875, 57972, 57972, 57972, 57972, 2357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38403 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 0, 0, 0, 2409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38436 */ 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1887, 0, 57875, 57875, 57875, 59837, 57875, 57875, 57875,
  /* 38460 */ 57875, 59841, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 38475 */ 59855, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57898, 60661, 57898,
  /* 38491 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38506 */ 57898, 57898, 60392, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57898,
  /* 38524 */ 57898, 59920, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38539 */ 59934, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38554 */ 57898, 59958, 57898, 57898, 57898, 57898, 57898, 57898, 59965, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38569 */ 57898, 57898, 57898, 57898, 57898, 57898, 59974, 57898, 59976, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38584 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 38601 */ 2653, 584, 584, 584, 584, 584, 584, 3643, 3645, 584, 584, 584, 3648, 584, 3650, 3651, 584, 57875, 57875,
  /* 38620 */ 57875, 57875, 57875, 60999, 57875, 57875, 61003, 57875, 61005, 57898, 57875, 57972, 57972, 57972, 57875,
  /* 38635 */ 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 3200, 0, 0, 3203, 3204, 0, 0, 3207,
  /* 38657 */ 3208, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0,
  /* 38689 */ 0, 584, 584, 2657, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2673, 584,
  /* 38710 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3073, 584, 584, 584, 584, 584, 584,
  /* 38731 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2186, 584, 584, 584, 584, 584, 2193, 584, 584, 584, 584,
  /* 38752 */ 584, 584, 584, 584, 2202, 57972, 57972, 60112, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 38768 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 38783 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60506, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 38798 */ 60314, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 38813 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 2987, 0, 0, 0, 0, 57898, 57898, 57898,
  /* 38831 */ 60335, 60336, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38846 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59940, 57898, 57898, 57898, 57898,
  /* 38861 */ 57898, 57898, 57898, 57898, 0, 0, 0, 3214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3231,
  /* 38889 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 354, 355, 356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 298, 0, 0,
  /* 38920 */ 371, 57875, 57875, 57875, 57875, 60636, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 38935 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60646, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 38950 */ 60651, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59359, 57875, 57875, 57875, 57875,
  /* 38965 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621,
  /* 38980 */ 0, 57898, 57898, 57898, 57898, 57898, 57898, 60681, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 38995 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 39010 */ 57898, 57898, 57898, 59410, 57898, 57898, 57898, 57898, 57898, 57898, 0, 0, 0, 0, 0, 3731, 4049, 0, 0, 0,
  /* 39030 */ 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898,
  /* 39047 */ 57898, 57898, 57898, 57898, 57898, 61549, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 39065 */ 4217, 584, 584, 57875, 61419, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 4086, 584, 584,
  /* 39083 */ 584, 584, 584, 584, 584, 584, 61439, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972,
  /* 39100 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 39121 */ 57875, 57875, 57875, 61240, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 39136 */ 61247, 57875, 57875, 57898, 57898, 57898, 57972, 61452, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 39151 */ 57972, 0, 0, 0, 0, 0, 0, 0, 4122, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 39173 */ 57875, 0, 0, 57875, 0, 57875, 57875, 778, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 39190 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60147, 57972, 57972, 57972, 57972, 57972,
  /* 39205 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60161, 57875, 57898, 57898,
  /* 39220 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61487, 57898, 57898, 57898, 584, 584, 584, 584,
  /* 39236 */ 584, 584, 584, 584, 584, 4155, 584, 584, 584, 584, 584, 57875, 61505, 57875, 57875, 57875, 57875, 57875,
  /* 39254 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61519, 57972, 57972, 57972, 57972, 57972,
  /* 39269 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60316, 57875,
  /* 39290 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 39305 */ 57875, 57875, 57875, 57875, 57875, 0, 2987, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39331 */ 0, 0, 0, 0, 0, 333, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 2924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39361 */ 57875, 57875, 60277, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57898, 57898, 57898,
  /* 39376 */ 57898, 57898, 57898, 57898, 57898, 57898, 58317, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 39391 */ 57898, 57898, 57898, 57898, 57898, 57898, 61349, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 39409 */ 584, 584, 584, 584, 584, 4020, 0, 0, 0, 0, 0, 131072, 0, 330, 0, 0, 0, 0, 0, 0, 0, 332, 0, 465, 478, 478,
  /* 39435 */ 478, 491, 491, 491, 501, 491, 501, 504, 491, 491, 491, 512, 512, 512, 512, 512, 526, 512, 526, 512, 512,
  /* 39456 */ 512, 512, 512, 512, 57881, 57881, 57881, 57904, 57881, 57881, 57881, 57881, 57904, 57881, 57923, 589,
  /* 39472 */ 57952, 589, 57952, 57960, 589, 589, 57960, 57960, 589, 57952, 589, 589, 57952, 57952, 57952, 57952, 57952,
  /* 39489 */ 57952, 57923, 57952, 57923, 57952, 57952, 57952, 57952, 57952, 57952, 57952, 57952, 57952, 57952, 57952,
  /* 39504 */ 57952, 57978, 57978, 57978, 57952, 589, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0,
  /* 39525 */ 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3274, 0, 0, 0, 0, 0, 57875, 60622, 57875, 57875, 57875,
  /* 39551 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898,
  /* 39566 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58836, 57898, 57898, 57898, 712, 0,
  /* 39582 */ 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 368, 0, 0, 0, 0, 0, 0, 734, 735, 0, 0, 0, 0, 0, 741, 0,
  /* 39613 */ 0, 0, 745, 0, 0, 748, 0, 0, 0, 0, 0, 0, 755, 0, 757, 758, 0, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39644 */ 0, 0, 0, 2855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2396, 0, 0, 0, 2399, 0, 0, 0, 0, 0,
  /* 39676 */ 2405, 0, 0, 0, 0, 0, 807, 808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 818, 0, 820, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0,
  /* 39707 */ 0, 0, 0, 832, 0, 0, 0, 0, 0, 0, 58727, 1948, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 39727 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 39742 */ 57875, 57875, 57875, 60329, 57875, 57875, 57875, 0, 2987, 837, 0, 840, 0, 0, 0, 0, 0, 0, 820, 0, 832, 0,
  /* 39764 */ 846, 0, 758, 0, 0, 840, 852, 0, 0, 854, 0, 0, 852, 852, 0, 0, 0, 820, 0, 0, 0, 0, 0, 0, 393688, 0, 393688,
  /* 39791 */ 393688, 393688, 393688, 393688, 393688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318,
  /* 39817 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 864, 818, 0, 57875, 57875,
  /* 39848 */ 57875, 58224, 57875, 58230, 57875, 57875, 58244, 57875, 57875, 58253, 57875, 58258, 57875, 57875, 58267,
  /* 39863 */ 58270, 57875, 57875, 58281, 57875, 0, 57898, 57898, 57898, 58294, 57898, 58300, 57898, 57898, 58314,
  /* 39878 */ 57898, 57898, 58323, 57898, 58328, 57898, 57898, 58337, 58340, 57898, 57898, 58351, 57898, 57898, 57898,
  /* 39893 */ 57898, 57898, 57898, 60934, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60941, 57898, 60942, 57898,
  /* 39908 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60365,
  /* 39923 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 39938 */ 57898, 59986, 59953, 57898, 57898, 57898, 584, 584, 2647, 584, 584, 584, 584, 584, 584, 584, 584, 57898,
  /* 39956 */ 58300, 57898, 58328, 57898, 58340, 58362, 584, 584, 1026, 584, 1032, 584, 584, 1047, 584, 584, 1058, 584,
  /* 39974 */ 1063, 584, 584, 1072, 1075, 1080, 584, 1088, 584, 57875, 57875, 58230, 57875, 57875, 57875, 57875, 57875,
  /* 39991 */ 57875, 57875, 57875, 60639, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60645,
  /* 40006 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 40021 */ 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 40036 */ 60927, 57898, 57875, 57875, 57875, 58258, 57875, 58270, 58448, 57875, 0, 0, 57875, 0, 58258, 58258, 0,
  /* 40053 */ 57898, 57875, 58270, 58448, 57972, 57972, 57972, 58463, 57972, 58469, 57972, 57972, 58484, 57972, 57972,
  /* 40068 */ 58495, 57972, 57972, 57972, 57972, 57972, 57972, 60115, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 40083 */ 57972, 60122, 57972, 60124, 57972, 60127, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 40098 */ 57972, 57972, 57972, 59087, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 40113 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 61049, 57875, 584, 3708, 584, 0, 0, 0, 0, 0, 0, 0,
  /* 40133 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2394, 0, 0, 0, 0, 0, 0, 0, 0, 2402, 0, 0, 0, 0, 0, 0, 58500, 57972, 57972,
  /* 40161 */ 58509, 58512, 58517, 57972, 58525, 57972, 0, 57875, 58224, 57875, 58531, 58448, 57875, 1026, 584, 584,
  /* 40177 */ 1193, 1080, 584, 155944, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 400,
  /* 40205 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40239 */ 0, 212992, 0, 0, 0, 212992, 0, 0, 0, 212992, 0, 0, 0, 1265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1275, 0, 0, 0, 0,
  /* 40267 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1294, 0, 0, 1243,
  /* 40299 */ 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
  /* 40332 */ 2310144, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 2310564,
  /* 40353 */ 2310564, 0, 0, 2310144, 0, 0, 0, 2310564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40382 */ 0, 0, 0, 0, 0, 368, 0, 0, 245760, 0, 0, 57875, 57875, 58799, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 40402 */ 58810, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58824,
  /* 40417 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59394, 57898, 57898, 57898, 57898, 57898,
  /* 40432 */ 57898, 57898, 57898, 59405, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 40447 */ 57898, 57898, 57898, 60389, 57898, 60391, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 40464 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3630, 584, 584, 584, 584, 584, 584,
  /* 40485 */ 584, 584, 57898, 57898, 58842, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 40500 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 40515 */ 57898, 57898, 57898, 58872, 584, 584, 584, 1574, 584, 584, 584, 584, 584, 584, 1589, 584, 584, 584, 1594,
  /* 40534 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1611, 584, 584, 584, 584, 584,
  /* 40555 */ 2175, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 40576 */ 584, 584, 584, 584, 584, 584, 3108, 584, 584, 584, 584, 584, 1653, 584, 57875, 57875, 57875, 57875, 59004,
  /* 40595 */ 57875, 59006, 57875, 57875, 57875, 58786, 57875, 57875, 57875, 57875, 0, 57875, 57898, 57875, 57875,
  /* 40610 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0,
  /* 40628 */ 0, 57875, 57875, 57875, 61624, 61625, 57898, 57898, 57898, 61628, 61629, 57898, 57898, 584, 59029, 57972,
  /* 40644 */ 57972, 57972, 57972, 57972, 57972, 59044, 57972, 57972, 57972, 59049, 57972, 57972, 57972, 57972, 57972,
  /* 40659 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59066, 57972, 57972, 57972, 57972,
  /* 40674 */ 57972, 57972, 57972, 57972, 59620, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 40689 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59668, 59669,
  /* 40704 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 1807, 0, 0, 0, 0, 0, 0, 0, 1813, 0, 0,
  /* 40727 */ 1816, 1817, 1818, 0, 1820, 1821, 0, 0, 0, 1825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1214, 1215, 1216, 1217, 0, 0,
  /* 40752 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 491520, 524288, 0, 0, 0, 0, 0, 0,
  /* 40782 */ 0, 0, 1866, 0, 0, 0, 0, 1871, 1872, 0, 0, 0, 0, 0, 0, 1878, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 1884,
  /* 40810 */ 1885, 1886, 0, 0, 0, 0, 0, 0, 3891, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 40830 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898,
  /* 40845 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 0, 0, 0, 0, 1892, 0, 1894, 0, 0, 0, 0, 0,
  /* 40866 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1910, 1911, 0, 1912, 1913, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 417792, 0,
  /* 40894 */ 0, 0, 312, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 139264, 147456, 417792, 417792, 0, 0, 0, 0, 0, 417792,
  /* 40919 */ 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3509, 0, 0,
  /* 40950 */ 3512, 0, 3513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1209, 1343, 0, 0, 0, 0, 0, 0, 1350,
  /* 40980 */ 0, 0, 0, 0, 0, 0, 0, 0, 1943, 1794, 1794, 58727, 0, 59293, 57875, 59295, 57875, 59296, 59297, 59298,
  /* 41000 */ 57875, 57875, 57875, 59302, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59314, 57875, 57875,
  /* 41015 */ 57875, 59317, 57875, 57875, 57875, 57875, 59321, 57875, 59323, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 41030 */ 57875, 57875, 57875, 59332, 59333, 59335, 57875, 57875, 57875, 57875, 57875, 57875, 59342, 59343, 57875,
  /* 41045 */ 59345, 57875, 57875, 59348, 59349, 57875, 57875, 57875, 57875, 57875, 57875, 59356, 57875, 59358, 57875,
  /* 41060 */ 59361, 57875, 57875, 57875, 59366, 57875, 57875, 59368, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 41075 */ 57875, 57875, 50621, 0, 59383, 57898, 584, 584, 3614, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41094 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3631, 584, 3633, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41115 */ 2147, 2148, 584, 584, 584, 584, 2155, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41135 */ 584, 584, 584, 2170, 59385, 57898, 59386, 59387, 59388, 57898, 57898, 57898, 59392, 57898, 57898, 57898,
  /* 41151 */ 57898, 57898, 57898, 57898, 57898, 59404, 57898, 57898, 57898, 59407, 57898, 57898, 57898, 57898, 59411,
  /* 41166 */ 57898, 59413, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61256, 57898, 57898, 57898, 57898, 61257,
  /* 41181 */ 57898, 57898, 57898, 57898, 57898, 57898, 61260, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584,
  /* 41198 */ 584, 584, 584, 584, 584, 584, 3623, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41219 */ 584, 584, 584, 2222, 584, 584, 584, 584, 584, 57875, 57875, 57875, 59575, 57875, 57875, 57875, 57875,
  /* 41236 */ 57875, 57898, 59451, 57898, 57898, 57898, 59456, 57898, 57898, 59458, 57898, 57898, 57898, 57898, 57898,
  /* 41251 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59473, 59474, 57898, 59476, 57898, 2134, 584,
  /* 41266 */ 2136, 584, 2137, 2138, 584, 2140, 584, 584, 584, 2144, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2157,
  /* 41286 */ 584, 584, 584, 584, 2161, 584, 584, 584, 584, 2165, 584, 2167, 584, 584, 584, 584, 584, 584, 1579, 584,
  /* 41306 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 41327 */ 584, 584, 584, 1644, 584, 584, 584, 584, 584, 584, 2203, 584, 2205, 584, 2208, 584, 584, 584, 584, 584,
  /* 41347 */ 2215, 584, 584, 2217, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 41365 */ 57875, 57875, 57875, 59580, 59581, 57875, 59583, 57875, 57875, 57875, 57875, 57898, 57875, 59589, 59590,
  /* 41380 */ 57972, 59592, 57972, 59593, 59594, 57972, 59596, 57972, 57972, 57972, 59600, 57972, 57972, 57972, 57972,
  /* 41395 */ 57972, 57972, 57972, 57972, 57972, 59613, 57972, 57972, 57972, 57972, 59617, 57972, 57972, 57972, 57972,
  /* 41410 */ 59621, 57972, 59623, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59633, 59634,
  /* 41425 */ 59636, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584,
  /* 41441 */ 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59644, 59645, 57972, 57972, 59647,
  /* 41467 */ 57972, 57972, 59650, 59651, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59659, 57972, 59661, 57972,
  /* 41482 */ 59664, 57972, 57972, 57972, 57972, 57972, 59671, 57972, 57972, 59673, 57972, 57972, 57875, 584, 1, 24578,
  /* 41498 */ 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0,
  /* 41526 */ 0, 0, 0, 2361, 0, 0, 2364, 2365, 0, 0, 0, 2369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41557 */ 0, 2372, 0, 2373, 0, 0, 0, 0, 0, 0, 0, 0, 2381, 0, 2407, 0, 0, 0, 0, 2411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41587 */ 0, 0, 0, 0, 0, 0, 1880, 0, 2426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 1246, 1247, 0, 0, 0, 0, 1251, 0,
  /* 41616 */ 0, 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 690, 0, 0, 0,
  /* 41647 */ 856, 0, 0, 0, 690, 0, 2432, 0, 0, 2435, 0, 0, 0, 0, 2440, 0, 0, 0, 0, 0, 2446, 0, 2448, 0, 0, 0, 0, 0, 0,
  /* 41676 */ 0, 0, 2457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2849, 2850, 0, 2852, 0, 2854, 0, 0, 0, 0, 0, 0, 0, 0, 2859, 0, 0,
  /* 41705 */ 2862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875,
  /* 41732 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59337,
  /* 41747 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 41762 */ 57875, 57875, 57875, 57875, 57898, 57898, 57898, 60920, 57898, 57898, 57898, 60924, 57898, 57898, 57898,
  /* 41777 */ 57898, 57898, 584, 584, 584, 584, 2659, 584, 2661, 584, 584, 584, 584, 584, 584, 2669, 584, 2671, 584,
  /* 41796 */ 584, 584, 584, 584, 584, 584, 2677, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2183, 584, 584,
  /* 41817 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1636, 584, 584,
  /* 41838 */ 1640, 584, 584, 584, 584, 584, 1647, 584, 584, 584, 57972, 57972, 57972, 60137, 60138, 57972, 57972,
  /* 41855 */ 57972, 57972, 57972, 57972, 60145, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 41870 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60159, 57972, 57972, 57875, 584, 1, 24578, 3, 155944,
  /* 41886 */ 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0, 0, 2385, 0,
  /* 41915 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 310, 0, 0, 0, 60162,
  /* 41947 */ 60163, 57972, 59844, 57875, 60166, 57875, 57875, 2661, 584, 2827, 584, 584, 2830, 2351, 0, 2831, 2354, 0,
  /* 41965 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41999 */ 3731, 0, 0, 3881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2846, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2856,
  /* 42030 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2865, 0, 0, 0, 0, 0, 2870, 0, 2872, 2873, 0, 0, 0, 0, 0, 0, 0,
  /* 42061 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 2893, 0, 0, 0, 0, 0, 2897, 0,
  /* 42094 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
  /* 42128 */ 0, 0, 691, 0, 0, 691, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 2922, 2872, 0, 0, 0, 0, 0, 2927, 0, 0, 0, 0,
  /* 42158 */ 2930, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 60281, 57875, 57875, 57875, 57875, 57875,
  /* 42175 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59329, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 42190 */ 57875, 57875, 57875, 57875, 59341, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 42205 */ 57875, 57875, 57875, 57875, 57875, 57875, 59850, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 42220 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 2561, 0, 0, 57898, 57898, 57898,
  /* 42237 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57875, 57875, 57875, 57875, 60311, 57875, 57875, 60315,
  /* 42252 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60323, 57875, 57875, 57875, 57875, 57875, 60326,
  /* 42267 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 2987, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898,
  /* 42285 */ 57898, 60338, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 42300 */ 57898, 60349, 57898, 60351, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60704, 57898, 584,
  /* 42315 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 42336 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3084, 584, 584, 3087, 584, 584, 584, 584, 3091, 584,
  /* 42356 */ 584, 584, 3096, 584, 584, 584, 584, 584, 584, 584, 584, 3104, 584, 584, 584, 584, 584, 584, 584, 3109,
  /* 42376 */ 584, 584, 584, 584, 584, 584, 1580, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 42397 */ 1604, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2720, 584, 584, 2723, 2724, 584,
  /* 42417 */ 57875, 57875, 60071, 57875, 60073, 57875, 57875, 57875, 57875, 57875, 60077, 57875, 57875, 584, 584, 584,
  /* 42433 */ 584, 57875, 57875, 57875, 60460, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875,
  /* 42448 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60478, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 42463 */ 57972, 57972, 57972, 60118, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 42478 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 60815, 584,
  /* 42493 */ 584, 3474, 0, 0, 0, 0, 57972, 60508, 57972, 57972, 57972, 57972, 60512, 57972, 57972, 57972, 60517, 57972,
  /* 42511 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60525, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 42526 */ 60530, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60117, 57972, 57972, 57972, 60120, 57972,
  /* 42541 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 42556 */ 57972, 57972, 57972, 60126, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 42571 */ 57972, 57875, 60634, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 42586 */ 57875, 60644, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60649, 57875,
  /* 42601 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59873, 59874, 57875,
  /* 42616 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59884, 57875, 57875, 57875, 57875,
  /* 42631 */ 57875, 584, 584, 584, 584, 584, 584, 1196, 1778, 1779, 0, 0, 0, 1785, 1786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42656 */ 0, 0, 0, 0, 0, 0, 3491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0,
  /* 42689 */ 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898,
  /* 42707 */ 57972, 57972, 57972, 57972, 57972, 60800, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 42722 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0,
  /* 42742 */ 0, 3483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1857, 0, 0, 0, 0, 0,
  /* 42775 */ 0, 0, 3504, 0, 0, 0, 0, 3506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3525, 0,
  /* 42806 */ 0, 0, 0, 0, 0, 0, 2342912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42839 */ 3530, 3531, 0, 3533, 0, 0, 3536, 0, 0, 0, 3539, 57875, 57875, 57875, 57875, 57875, 60889, 57875, 57875,
  /* 42858 */ 57875, 57875, 60893, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 2563, 57898,
  /* 42874 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 42889 */ 57898, 57898, 57898, 57898, 58838, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 57875,
  /* 42906 */ 60903, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60911, 57875, 57875, 60913, 57875,
  /* 42921 */ 60915, 60916, 57875, 57898, 57898, 57898, 57898, 57898, 60922, 57898, 57898, 57898, 57898, 60926, 57898,
  /* 42936 */ 57898, 57898, 57898, 57898, 57898, 61255, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 42951 */ 57898, 57898, 57898, 57898, 61261, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3621,
  /* 42969 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3636, 3637, 584,
  /* 42989 */ 60955, 584, 584, 584, 584, 584, 584, 3618, 584, 584, 584, 584, 584, 3622, 584, 584, 584, 584, 584, 584,
  /* 43009 */ 584, 3628, 584, 584, 584, 584, 584, 3634, 584, 584, 584, 584, 584, 584, 584, 2146, 584, 584, 584, 584,
  /* 43029 */ 584, 584, 584, 584, 584, 2158, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 43050 */ 2185, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 43070 */ 57875, 57875, 57875, 61000, 57875, 57875, 57875, 57875, 57898, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 43085 */ 57972, 61014, 57972, 57972, 57972, 57972, 57972, 61018, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43100 */ 61024, 57972, 57972, 57972, 57972, 57972, 61030, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43115 */ 57972, 57972, 4117, 0, 4118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 61473, 57875, 61474, 57875, 57875,
  /* 43137 */ 57875, 57875, 57972, 57972, 61039, 61041, 57972, 57972, 57972, 61044, 57972, 61046, 61047, 57972, 57875,
  /* 43152 */ 57875, 61050, 584, 584, 3709, 0, 0, 0, 0, 0, 0, 3715, 0, 0, 3718, 0, 0, 0, 0, 0, 0, 0, 0, 3507, 0, 0, 0,
  /* 43179 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3526, 3527, 0, 0, 3741, 0, 0, 0, 3744, 3745, 0, 0, 0,
  /* 43209 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61104,
  /* 43229 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59895, 57875, 59897, 57875, 57875, 57875,
  /* 43244 */ 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59916, 57898, 57898,
  /* 43261 */ 57898, 57898, 57898, 57898, 59977, 57898, 57898, 59980, 59981, 57898, 57898, 59983, 57898, 59985, 57898,
  /* 43276 */ 57898, 59987, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3624,
  /* 43295 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2695, 584, 584, 584, 584,
  /* 43316 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 61171, 57875, 57875, 57875, 61174,
  /* 43335 */ 57875, 57875, 57875, 61178, 57875, 57898, 57875, 57972, 57972, 57972, 61183, 57972, 57972, 57972, 57972,
  /* 43350 */ 57972, 57972, 57972, 61188, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60143, 57972,
  /* 43365 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60154, 57972,
  /* 43380 */ 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584,
  /* 43396 */ 2350, 1779, 2351, 0, 0, 0, 0, 2353, 1786, 2354, 0, 0, 0, 0, 0, 0, 0, 0, 3971, 3972, 0, 3731, 0, 0, 0, 0,
  /* 43422 */ 0, 3980, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 43442 */ 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43457 */ 57972, 59603, 59604, 57972, 57972, 57972, 57972, 59611, 57972, 57972, 584, 57875, 57875, 57875, 57875,
  /* 43472 */ 57875, 57875, 61371, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61379, 57972,
  /* 43487 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 584, 0, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0,
  /* 43509 */ 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2908, 2909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43542 */ 0, 0, 0, 0, 0, 0, 4048, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 43565 */ 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 43581 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 43598 */ 60761, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43613 */ 57972, 57972, 57972, 60095, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43628 */ 57972, 57972, 57972, 57972, 60522, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43643 */ 57972, 57972, 57972, 60532, 57972, 57972, 57898, 57898, 57898, 57898, 61423, 584, 584, 584, 584, 584, 584,
  /* 43660 */ 584, 584, 584, 584, 584, 584, 584, 584, 4094, 57875, 57875, 57875, 57875, 61443, 57875, 57875, 57972,
  /* 43677 */ 57972, 57972, 57972, 57972, 57972, 61613, 57972, 61614, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 57875,
  /* 43695 */ 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 1019, 584, 584, 584,
  /* 43711 */ 584, 584, 584, 1051, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 58217, 57875, 57875,
  /* 43730 */ 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61486, 57898, 57898, 57898,
  /* 43745 */ 57898, 584, 584, 584, 584, 584, 584, 4152, 584, 584, 584, 584, 584, 584, 584, 584, 61504, 57875, 57875,
  /* 43764 */ 57875, 57875, 57875, 57875, 57875, 57875, 60658, 57875, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 43780 */ 57898, 60665, 57898, 57898, 57898, 57898, 57898, 60672, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 43795 */ 57898, 58885, 57898, 57898, 57898, 57898, 57898, 57898, 58896, 57898, 57898, 57898, 57898, 58902, 57898,
  /* 43810 */ 57898, 58872, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 3619, 584, 584, 584, 584, 584, 584, 584,
  /* 43829 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 3632, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 43848 */ 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 61516, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43863 */ 57972, 57972, 4180, 4181, 0, 0, 0, 4184, 0, 0, 0, 0, 0, 61534, 61535, 61536, 57875, 57875, 57875, 57875,
  /* 43883 */ 61541, 61542, 61543, 57898, 57898, 57898, 57898, 57898, 61548, 57898, 57898, 57898, 4208, 4209, 4210, 584,
  /* 43899 */ 584, 584, 4213, 584, 4215, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 43916 */ 57875, 57875, 57875, 60468, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43931 */ 57972, 57972, 57972, 57972, 57972, 57972, 59626, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 43946 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60149, 57972, 57972, 57972, 60152, 57972,
  /* 43961 */ 57972, 57972, 57972, 57972, 60157, 57972, 57972, 57972, 57972, 61564, 57875, 57875, 57875, 61568, 61569,
  /* 43976 */ 61570, 61571, 61572, 57972, 57972, 57972, 61575, 57972, 61577, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0,
  /* 43994 */ 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 61239, 57875, 57875, 57875, 61243, 57875, 57875, 57875, 57875,
  /* 44012 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 584, 4289, 584, 584, 584, 4293,
  /* 44028 */ 57875, 61639, 57875, 57972, 57972, 61641, 57972, 57972, 57972, 61645, 0, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 44046 */ 57875, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 4084, 584, 584, 584, 584, 584, 584,
  /* 44064 */ 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 61450,
  /* 44080 */ 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 0, 380, 382, 0, 0, 0, 0, 0,
  /* 44113 */ 0, 0, 0, 3723, 3724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319488,
  /* 44144 */ 319488, 0, 0, 0, 0, 0, 425, 0, 372, 372, 0, 131072, 372, 0, 335, 441, 372, 441, 0, 0, 441, 441, 459, 441,
  /* 44168 */ 0, 0, 0, 441, 498, 498, 498, 498, 498, 498, 498, 498, 498, 441, 441, 441, 441, 441, 441, 441, 441, 441,
  /* 44190 */ 441, 441, 441, 441, 441, 57882, 57882, 57882, 57905, 57882, 57882, 57882, 57882, 57905, 57882, 57905, 590,
  /* 44207 */ 57953, 590, 57953, 57953, 590, 590, 57953, 57953, 590, 57953, 590, 590, 57953, 57953, 57953, 57953, 57953,
  /* 44224 */ 57953, 57968, 57953, 57968, 57953, 57953, 57953, 57953, 57953, 57953, 57953, 57953, 57953, 57953, 57953,
  /* 44239 */ 57953, 57979, 57979, 57979, 57953, 590, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0,
  /* 44260 */ 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44293 */ 0, 0, 0, 1344, 0, 0, 0, 0, 1349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44325 */ 1342, 0, 1220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2904, 0, 0, 0, 0, 0, 0, 0, 0, 2912, 0, 0, 0,
  /* 44356 */ 0, 0, 2918, 0, 584, 1572, 584, 584, 584, 584, 584, 1584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 44378 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 44397 */ 57875, 57875, 59579, 57875, 57972, 57972, 57972, 57972, 59039, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 44412 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 44427 */ 57972, 57972, 57972, 57972, 57972, 57972, 60130, 57972, 57972, 57972, 57972, 57972, 584, 584, 2206, 584,
  /* 44443 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 44463 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 61291, 584, 584, 584,
  /* 44479 */ 584, 584, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 61668, 57875, 57875, 61669,
  /* 44497 */ 57898, 57898, 57898, 4327, 584, 584, 584, 57875, 61674, 57972, 57972, 57875, 584, 1, 24578, 3, 155944,
  /* 44514 */ 156311, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1218, 0, 0,
  /* 44543 */ 0, 0, 1223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 368, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44575 */ 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 442, 0, 442, 448, 0, 442, 442, 0, 442, 479, 479, 479, 492, 492,
  /* 44601 */ 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 57883, 57883, 57883, 57906, 57883, 57883,
  /* 44619 */ 57883, 57883, 57906, 57883, 57906, 591, 57883, 591, 57883, 57883, 591, 591, 591, 57883, 57883, 591, 57883,
  /* 44636 */ 591, 591, 57883, 57883, 57883, 57883, 57883, 57883, 57906, 57883, 57906, 57883, 57883, 57883, 57883,
  /* 44651 */ 57883, 57883, 57883, 57883, 57883, 57883, 57883, 57883, 57980, 57980, 57980, 57883, 591, 1, 24578, 3,
  /* 44667 */ 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3727,
  /* 44695 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44729 */ 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
  /* 44763 */ 1328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507904,
  /* 44796 */ 0, 0, 0, 0, 0, 2410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428, 0, 0, 0,
  /* 44829 */ 0, 0, 0, 58727, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 44846 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 44861 */ 57875, 58792, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59868, 57875, 57875, 57875,
  /* 44876 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 44891 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59861, 57875, 57875, 59947,
  /* 44906 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 44921 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 44936 */ 57898, 57898, 59449, 584, 584, 584, 2687, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 44956 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3400, 584, 584, 584, 57875,
  /* 44976 */ 60653, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57898, 57898, 57898, 57898, 57898,
  /* 44992 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 45007 */ 57898, 57898, 61263, 584, 584, 584, 584, 584, 584, 584, 584, 584, 0, 0, 0, 3505, 0, 0, 0, 0, 0, 3508, 0,
  /* 45030 */ 3510, 0, 0, 0, 0, 0, 0, 0, 0, 3518, 0, 0, 0, 0, 0, 3523, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3245, 0, 0, 0, 0, 0,
  /* 45061 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2482, 0, 0, 57875, 57875, 57875, 57875, 57875,
  /* 45089 */ 57875, 57875, 57875, 57875, 57875, 60907, 57875, 57875, 57875, 57875, 57875, 57875, 60912, 57875, 60914,
  /* 45104 */ 57875, 57875, 57875, 60917, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 45119 */ 57898, 59397, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 45134 */ 57898, 57898, 57898, 59414, 59415, 57898, 57898, 57898, 57898, 57898, 60932, 57898, 57898, 57898, 57898,
  /* 45149 */ 57898, 57898, 57898, 57898, 60940, 57898, 57898, 57898, 57898, 57898, 57898, 60945, 57898, 60947, 57898,
  /* 45164 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59954, 57898, 57898, 57898, 57898, 57898,
  /* 45179 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59966, 57898, 57898, 57898, 57898, 57898, 59970, 57898,
  /* 45194 */ 57898, 3638, 584, 584, 584, 584, 584, 584, 584, 584, 3646, 584, 584, 3649, 584, 584, 584, 57875, 57875,
  /* 45213 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 61008, 57972, 57972, 57972,
  /* 45228 */ 57972, 57972, 57972, 57972, 60781, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 45243 */ 57972, 57972, 57972, 57972, 57972, 57972, 60794, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875,
  /* 45258 */ 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2356,
  /* 45282 */ 57972, 57972, 57972, 57972, 57972, 61042, 57972, 57972, 61045, 57972, 57972, 57972, 57875, 57875, 57875,
  /* 45297 */ 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3719, 0, 0, 0, 0, 0, 0, 5808128, 0, 0, 0, 4358144,
  /* 45324 */ 4358144, 4358144, 4825088, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 45335 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5177344,
  /* 45346 */ 4358144, 4358144, 4358144, 4358144, 4358144, 5242880, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 45357 */ 4358144, 4358144, 57875, 57875, 57875, 57875, 61108, 57875, 57875, 57875, 57875, 57875, 57875, 61113,
  /* 45371 */ 61114, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 61119, 57898, 57898, 57898, 57898,
  /* 45386 */ 57898, 57898, 57898, 57898, 57898, 57898, 60360, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 45401 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 45417 */ 584, 584, 584, 2651, 584, 584, 584, 584, 57898, 57898, 57898, 57898, 57898, 61128, 57898, 57898, 57898,
  /* 45434 */ 57898, 57898, 57898, 61133, 61134, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 45449 */ 57898, 57898, 57898, 584, 584, 3801, 584, 584, 584, 584, 584, 584, 3807, 584, 584, 584, 584, 584, 584,
  /* 45468 */ 584, 584, 584, 584, 584, 584, 584, 3817, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 45489 */ 584, 2721, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 45505 */ 57875, 57875, 57875, 57875, 57875, 0, 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972,
  /* 45520 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61194, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 45535 */ 61199, 57972, 61201, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875,
  /* 45550 */ 57875, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 475136, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45578 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3517, 0, 0, 0, 3521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3890, 0, 0, 0, 0, 0,
  /* 45610 */ 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61244, 57875, 57875, 57875, 57875,
  /* 45625 */ 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61598,
  /* 45640 */ 61599, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 4261, 4262, 584, 57875, 61607, 61608, 57875,
  /* 45658 */ 57875, 584, 3927, 584, 584, 584, 584, 584, 584, 584, 584, 3933, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 45678 */ 57875, 57875, 57875, 61284, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 45693 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0, 4186, 0, 0, 0, 57875,
  /* 45714 */ 57972, 57972, 57972, 57972, 57972, 57972, 61297, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 45729 */ 61303, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45750 */ 61237, 57875, 57875, 57875, 57875, 57875, 57875, 61242, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 45765 */ 57875, 57875, 57875, 57875, 57875, 61248, 57898, 57898, 584, 4314, 4315, 584, 584, 57875, 57875, 57972,
  /* 45781 */ 57972, 61663, 61664, 57972, 57972, 0, 0, 0, 0, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 584, 584,
  /* 45799 */ 584, 584, 57875, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 304,
  /* 45816 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 368, 0, 298, 0, 0, 0,
  /* 45849 */ 58298, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 1030, 584, 584, 584, 584, 584, 584, 584,
  /* 45867 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1089, 57875, 58228, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 45885 */ 57875, 57875, 57875, 60291, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 45900 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59340, 57875,
  /* 45915 */ 57875, 57875, 57875, 57875, 59347, 57875, 0, 0, 0, 0, 0, 1267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45941 */ 0, 0, 0, 0, 0, 0, 0, 1289, 0, 0, 0, 0, 0, 0, 0, 0, 3747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 45970 */ 57875, 57875, 57875, 57875, 61101, 61102, 57875, 57875, 57875, 57875, 61106, 57898, 57898, 58878, 57898,
  /* 45985 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 46000 */ 57898, 57898, 57898, 57898, 57898, 58906, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3068,
  /* 46018 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 46039 */ 1603, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 46058 */ 57875, 57875, 57875, 57875, 57875, 57875, 59011, 57875, 57875, 57875, 0, 57875, 57898, 57875, 57875,
  /* 46073 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0,
  /* 46091 */ 0, 61622, 57875, 57875, 57875, 57875, 61626, 57898, 57898, 57898, 57898, 57898, 57898, 4288, 0, 0, 0,
  /* 46108 */ 1919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49705,
  /* 46140 */ 0, 49705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 2358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46171 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 57875, 57875, 57875, 57875, 57875,
  /* 46198 */ 57875, 57875, 59840, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 46213 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58787,
  /* 46228 */ 57875, 57875, 57875, 57875, 57875, 57898, 59919, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 46243 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 46258 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59447, 57898, 584, 2656, 584, 584, 584, 584, 584, 584,
  /* 46275 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 46296 */ 584, 584, 584, 3401, 584, 0, 0, 2867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46327 */ 0, 0, 0, 0, 0, 0, 831, 0, 0, 0, 3238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46361 */ 0, 0, 0, 0, 0, 0, 0, 0, 516570, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46393 */ 336, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
  /* 46419 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 46430 */ 5259264, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5414912, 4358144,
  /* 46441 */ 5447680, 4358144, 5464064, 4358144, 5480448, 5562368, 4358144, 4358144, 4358144, 5636096, 4358144, 0, 0,
  /* 46454 */ 428, 428, 0, 131072, 428, 0, 0, 0, 428, 0, 449, 0, 0, 0, 428, 337, 480, 480, 480, 493, 493, 493, 493, 493,
  /* 46478 */ 493, 493, 493, 493, 493, 513, 521, 521, 521, 521, 521, 527, 521, 527, 521, 521, 521, 521, 521, 521, 57884,
  /* 46499 */ 57884, 57884, 57907, 57884, 57884, 57884, 57884, 57907, 57884, 57907, 592, 57954, 592, 57954, 57954, 592,
  /* 46515 */ 592, 57954, 57954, 592, 57884, 592, 592, 57884, 57884, 57884, 57884, 57884, 57884, 57907, 57969, 57907,
  /* 46531 */ 57969, 57969, 57969, 57969, 57969, 57969, 57969, 57969, 57969, 57969, 57969, 57969, 57981, 57981, 57981,
  /* 46546 */ 57884, 592, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0,
  /* 46571 */ 0, 0, 0, 0, 0, 0, 0, 557056, 0, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875,
  /* 46601 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60629, 57875, 60631, 57875, 0, 805, 0, 0, 809, 0,
  /* 46619 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 825, 0, 0, 0, 0, 0, 0, 0, 829, 0, 0, 0, 0, 0, 0, 0, 4268032, 0,
  /* 46651 */ 0, 0, 0, 0, 0, 0, 499712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 46680 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61105, 57875, 0, 0, 0, 0, 0, 865, 825, 0, 0, 865,
  /* 46700 */ 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 58231, 57875, 58240, 57875, 57875, 57875,
  /* 46719 */ 57875, 57875, 57875, 57875, 0, 0, 57875, 0, 57875, 57875, 0, 58310, 57875, 57875, 57875, 57972, 57972,
  /* 46736 */ 57972, 57972, 57972, 58470, 57972, 58479, 57972, 57972, 57972, 57972, 57972, 57898, 58301, 57898, 57898,
  /* 46751 */ 57898, 57898, 57898, 584, 584, 584, 584, 1033, 584, 1042, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 46770 */ 584, 584, 584, 584, 1090, 57875, 57875, 58231, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 46786 */ 61111, 57875, 57875, 57875, 57875, 61115, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898,
  /* 46801 */ 57898, 57898, 57898, 57898, 57898, 61123, 57898, 57898, 57898, 57898, 57898, 57898, 58884, 57898, 57898,
  /* 46816 */ 57898, 57898, 57898, 57898, 58894, 58895, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 46831 */ 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 1050, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 46851 */ 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 60759, 57875, 57875, 57875, 57875, 57898, 57875,
  /* 46867 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60094, 57972, 57972,
  /* 46882 */ 60097, 57972, 57972, 57972, 57972, 57972, 57972, 60105, 57972, 57972, 57972, 57972, 57972, 0, 1354, 0, 0,
  /* 46899 */ 0, 0, 0, 0, 0, 0, 1359, 0, 0, 0, 0, 0, 0, 0, 0, 1369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3275,
  /* 46931 */ 0, 2930, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60628, 57875, 57875, 60632,
  /* 46947 */ 57875, 57875, 57875, 57875, 57875, 57875, 58767, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 46962 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 46977 */ 58795, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 59591, 57972, 57972,
  /* 46992 */ 57972, 57972, 57972, 57972, 59597, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 47007 */ 57972, 57972, 57972, 59085, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 47022 */ 59102, 57972, 57972, 57972, 57972, 57972, 57972, 58744, 57875, 57875, 57875, 57875, 57875, 58804, 57875,
  /* 47037 */ 57875, 57875, 58811, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47052 */ 57898, 57898, 57898, 58827, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61131, 57898,
  /* 47067 */ 57898, 57898, 57898, 61135, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61142,
  /* 47082 */ 57898, 584, 584, 584, 584, 584, 57898, 57898, 57898, 58844, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47098 */ 57898, 57898, 58853, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47113 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59937, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47128 */ 57898, 59943, 57898, 59945, 57898, 57898, 57898, 57898, 57898, 58881, 57898, 57898, 57898, 57898, 57898,
  /* 47143 */ 57898, 58890, 57898, 57898, 57898, 58897, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47158 */ 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1079, 584, 584,
  /* 47178 */ 584, 584, 57875, 57875, 57875, 57875, 1654, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 47194 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57875, 57898, 57875, 59017, 57875, 57972, 57972,
  /* 47209 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 4275, 0, 4277, 57875,
  /* 47226 */ 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 57972, 57972, 59032,
  /* 47241 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59051, 57972, 57972, 57972, 57972, 57972,
  /* 47256 */ 57972, 57972, 57972, 57972, 59061, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0,
  /* 47271 */ 57875, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 155944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47293 */ 0, 0, 783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3496, 0, 0, 3498, 0, 0, 0,
  /* 47326 */ 0, 0, 0, 0, 1804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819, 0, 0, 1822, 0, 0, 0, 0, 0, 0, 0,
  /* 47358 */ 0, 0, 0, 0, 1843, 0, 1845, 0, 0, 0, 1849, 0, 0, 0, 1853, 0, 0, 0, 0, 1858, 0, 0, 0, 0, 0, 1864, 0, 0, 0,
  /* 47387 */ 0, 0, 0, 0, 0, 0, 0, 0, 1875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2886, 0,
  /* 47420 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1930, 0, 0, 0, 0, 0, 0, 0,
  /* 47453 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 799, 0, 0, 0, 0, 0, 799, 799, 0, 858, 0, 0, 0, 1916, 0, 0, 0, 0, 0,
  /* 47484 */ 58727, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 47499 */ 57875, 57875, 57875, 57875, 59311, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 47514 */ 57875, 57875, 57875, 57875, 57875, 57875, 59875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 47529 */ 57875, 57875, 57875, 57875, 59887, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59355, 57875,
  /* 47544 */ 57875, 57875, 57875, 57875, 57875, 59364, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59372,
  /* 47559 */ 59374, 57875, 57875, 57875, 57875, 50621, 0, 57898, 57898, 57898, 57898, 57898, 58343, 57898, 584, 1024,
  /* 47575 */ 584, 584, 584, 584, 1045, 1049, 1055, 584, 1060, 584, 584, 584, 584, 584, 1078, 584, 584, 584, 584, 58436,
  /* 47595 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59360, 57875, 57875, 57875, 57875,
  /* 47610 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 0,
  /* 47625 */ 57898, 57898, 57898, 57898, 57898, 59454, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59462,
  /* 47640 */ 59464, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584,
  /* 47655 */ 584, 584, 584, 584, 584, 584, 584, 584, 60753, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 47672 */ 60762, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 60769, 57972, 57972, 57972, 57972, 57875,
  /* 47687 */ 57875, 57875, 59364, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 47702 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59610, 57972,
  /* 47717 */ 57972, 57972, 57972, 57972, 57972, 57972, 60802, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 47732 */ 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 3716,
  /* 47752 */ 0, 0, 0, 0, 0, 0, 57972, 59677, 59679, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584,
  /* 47771 */ 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2842, 2431, 0, 0, 0, 0, 0, 0, 0,
  /* 47802 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1831, 57898, 57898, 59949, 57898,
  /* 47831 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47846 */ 57898, 57898, 57898, 57898, 57898, 57898, 59967, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47861 */ 58851, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 47876 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59440, 57898, 57898, 57898, 57898, 57898,
  /* 47891 */ 57898, 57898, 57898, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 60089, 57972,
  /* 47906 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60101, 57972, 57972, 57972, 57972,
  /* 47921 */ 57972, 57972, 57972, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584,
  /* 47938 */ 584, 155944, 1196, 0, 0, 1200, 0, 0, 1205, 0, 0, 57972, 57972, 57972, 59845, 57875, 57875, 57875, 57875,
  /* 47957 */ 2662, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3230, 0, 0, 0,
  /* 47988 */ 0, 0, 0, 0, 0, 0, 0, 2866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2879, 0, 0, 0, 0, 0, 0, 0, 2887, 0, 0,
  /* 48020 */ 0, 0, 2889, 0, 0, 0, 0, 0, 0, 0, 4268810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48052 */ 0, 0, 0, 0, 0, 419, 419, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 60312, 57875, 57875, 57875, 57875, 57875,
  /* 48073 */ 60318, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60325, 57875, 57875, 60327, 57875,
  /* 48088 */ 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 0, 0, 58727, 0, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48107 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48122 */ 57875, 59316, 57875, 0, 0, 0, 0, 57898, 60333, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48139 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48154 */ 60352, 57898, 57898, 57898, 57898, 57898, 58361, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 48172 */ 584, 584, 584, 584, 584, 584, 1074, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48190 */ 57875, 57875, 57875, 57875, 57875, 57898, 60470, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 48205 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61203, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 48220 */ 57972, 57875, 57875, 61209, 584, 584, 3867, 3868, 0, 0, 57898, 57898, 57898, 60382, 57898, 57898, 60384,
  /* 48237 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 3051, 584,
  /* 48253 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1625, 584, 584, 584, 584, 584, 584, 584, 1639,
  /* 48274 */ 584, 584, 584, 584, 584, 584, 584, 584, 1651, 1652, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 48293 */ 60462, 60463, 57875, 57875, 57875, 57875, 57875, 60469, 57875, 57875, 57972, 60472, 57972, 57972, 57972,
  /* 48308 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59082, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 48323 */ 57972, 57972, 57972, 57972, 59098, 57972, 57972, 57972, 57972, 57972, 57972, 59109, 57972, 57875, 57972,
  /* 48338 */ 57972, 57972, 60535, 57875, 57875, 57875, 57875, 3194, 584, 584, 584, 584, 0, 0, 0, 0, 3199, 0, 0, 0, 0,
  /* 48359 */ 0, 0, 0, 0, 0, 3209, 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48392 */ 0, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 3213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48425 */ 3227, 3228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 4358144, 4358144, 4358144,
  /* 48448 */ 4358144, 4358144, 5193728, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5193728, 0,
  /* 48460 */ 3266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 60623, 57875, 57875, 57875,
  /* 48485 */ 57875, 60627, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48500 */ 59899, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48517 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48532 */ 57898, 57898, 57898, 57898, 57898, 57898, 59944, 57898, 57898, 57898, 57898, 60679, 60680, 57898, 57898,
  /* 48547 */ 57898, 60682, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60687, 57898, 57898,
  /* 48562 */ 60689, 57898, 60691, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59427, 57898, 57898,
  /* 48577 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48592 */ 57898, 57898, 57898, 57898, 57898, 58864, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48607 */ 584, 584, 584, 584, 3385, 3386, 584, 584, 584, 584, 3389, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 48627 */ 584, 3394, 584, 584, 584, 3397, 584, 3399, 584, 584, 584, 584, 584, 584, 584, 2177, 2178, 2180, 584, 584,
  /* 48647 */ 584, 584, 584, 584, 584, 2188, 2189, 584, 2191, 584, 584, 2194, 2195, 584, 584, 584, 584, 584, 584, 584,
  /* 48667 */ 584, 584, 584, 2691, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2703, 584, 584, 584,
  /* 48688 */ 584, 584, 584, 584, 584, 584, 584, 2717, 584, 2719, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 48707 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57875, 57898,
  /* 48722 */ 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59027, 57972, 584, 584, 584, 3403,
  /* 48738 */ 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48754 */ 57898, 57875, 60765, 57972, 57972, 57972, 60768, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 48769 */ 57972, 60489, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 48784 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0,
  /* 48801 */ 3477, 0, 60773, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 48817 */ 57972, 57972, 57972, 60789, 60790, 57972, 57972, 57972, 57972, 60793, 57972, 57972, 57972, 57972, 57972,
  /* 48832 */ 57972, 57972, 57972, 57972, 57972, 57972, 59083, 57972, 57972, 59090, 57972, 57972, 57972, 57972, 57972,
  /* 48847 */ 57972, 57972, 57972, 57972, 57972, 59104, 57972, 57972, 57972, 57972, 57972, 57875, 57972, 57972, 60798,
  /* 48862 */ 57972, 57972, 57972, 60801, 57972, 60803, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60807, 57972,
  /* 48877 */ 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 3475, 0, 0, 3478, 3479, 0, 0, 0, 0, 0, 0,
  /* 48898 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2460, 3529, 0, 0, 0, 0, 0, 0,
  /* 48931 */ 0, 0, 0, 0, 0, 57875, 57875, 57875, 60887, 57875, 57875, 57875, 60891, 57875, 57875, 57875, 57875, 57875,
  /* 48949 */ 57875, 57875, 60897, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48964 */ 57875, 60642, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 48979 */ 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 48996 */ 59917, 57898, 57898, 57898, 60930, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 49011 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 49026 */ 57898, 57898, 57898, 60953, 584, 584, 3640, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 49045 */ 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61001, 57875, 57875, 57875, 57898, 57875, 57972,
  /* 49060 */ 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 2830, 2351, 0, 2831, 2354, 0, 0,
  /* 49079 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49112 */ 3752, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972,
  /* 49128 */ 61012, 57972, 57972, 57972, 57972, 61016, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61022, 57972,
  /* 49143 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61036,
  /* 49158 */ 57972, 57972, 57972, 57972, 57972, 57972, 60140, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 49173 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 49188 */ 60160, 57972, 57972, 57972, 57972, 57972, 57972, 59683, 57875, 57875, 57875, 57875, 57875, 584, 584, 584,
  /* 49204 */ 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 3882, 0, 0, 0, 0, 0, 0, 0,
  /* 49236 */ 0, 0, 0, 0, 3742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875,
  /* 49262 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60900, 57875,
  /* 49277 */ 0, 3871, 0, 0, 0, 0, 0, 3874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49309 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61333, 61334, 57875, 57898, 57898, 57898, 61251,
  /* 49324 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61258, 57898, 57898, 57898,
  /* 49339 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 3923, 584, 584, 584, 584, 584, 584,
  /* 49357 */ 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 4302, 0, 0, 0, 0, 57875, 57875,
  /* 49374 */ 57875, 57875, 57898, 57898, 57898, 57898, 61656, 57898, 584, 584, 584, 584, 3616, 584, 584, 584, 584,
  /* 49391 */ 3620, 584, 584, 584, 584, 584, 584, 584, 3626, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 49412 */ 584, 584, 584, 3100, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 49432 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57972, 57972,
  /* 49447 */ 57972, 57972, 57972, 61293, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 49462 */ 57972, 57972, 57972, 61304, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 0,
  /* 49481 */ 0, 0, 0, 245760, 0, 245760, 245760, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49508 */ 0, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 414, 359, 0, 0, 403, 0, 0, 0,
  /* 49540 */ 0, 0, 139264, 147456, 403, 0, 414, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 4051, 4052, 0, 0, 0, 0, 57875, 57875,
  /* 49564 */ 57875, 57875, 57875, 57875, 61407, 61408, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 61416, 61417,
  /* 49579 */ 57898, 57898, 57898, 57898, 57898, 59924, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 49594 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 49609 */ 57898, 57898, 59477, 584, 584, 584, 584, 584, 57898, 57898, 61421, 61422, 57898, 584, 584, 584, 584, 584,
  /* 49627 */ 584, 584, 584, 4088, 584, 4090, 4091, 584, 4093, 584, 57875, 57875, 61441, 61442, 57875, 61444, 57875,
  /* 49644 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60516, 57972, 57972, 57972, 57972, 57972,
  /* 49659 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 49674 */ 57972, 57972, 59100, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57972, 57972, 57972,
  /* 49689 */ 61454, 57972, 61456, 61457, 57972, 61459, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 49712 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60896, 57875,
  /* 49727 */ 57875, 57875, 57875, 57875, 57875, 61591, 61592, 57898, 57898, 57898, 57898, 57898, 61596, 61597, 57898,
  /* 49742 */ 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 4259, 584, 4260, 584, 584, 584, 57875, 57875, 57875,
  /* 49760 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 49775 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60125, 57972, 57972,
  /* 49790 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 389, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49810 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3265, 593, 57955, 57955, 593, 57885,
  /* 49839 */ 593, 593, 57885, 57885, 57885, 57885, 57885, 57885, 57908, 57885, 57908, 57885, 57885, 57885, 57885,
  /* 49854 */ 57885, 57885, 57885, 57885, 57885, 57885, 57885, 57885, 57982, 57982, 57982, 57885, 593, 1, 24578, 3,
  /* 49870 */ 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0,
  /* 49898 */ 0, 695, 696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 2359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49930 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 57875, 57875, 57875, 57875, 59838,
  /* 49957 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 49972 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59346,
  /* 49987 */ 57875, 57875, 0, 384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50018 */ 0, 0, 0, 0, 0, 1253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1351, 0, 0, 0, 0, 1379, 0, 0, 409, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50050 */ 0, 0, 0, 0, 0, 409, 0, 0, 0, 0, 0, 0, 0, 384, 0, 139264, 147456, 0, 0, 409, 0, 0, 0, 131072, 0, 0, 0, 443,
  /* 50078 */ 0, 443, 0, 454, 443, 443, 0, 443, 481, 481, 481, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
  /* 50100 */ 494, 494, 494, 57886, 57886, 57886, 57909, 57886, 57886, 57886, 57886, 57909, 57886, 57909, 594, 57886,
  /* 50116 */ 594, 57886, 57886, 594, 594, 594, 57886, 57886, 594, 57886, 594, 594, 57886, 57886, 57886, 57886, 57886,
  /* 50133 */ 57886, 57909, 57886, 57909, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886, 57886,
  /* 50148 */ 57886, 57983, 57983, 57983, 57886, 594, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0,
  /* 50169 */ 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724, 725, 0, 368, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
  /* 50199 */ 0, 0, 0, 0, 770, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50233 */ 0, 0, 1233, 0, 0, 57875, 57875, 57875, 58271, 57875, 57875, 57875, 57875, 0, 57898, 57898, 58288, 57898,
  /* 50251 */ 57898, 57898, 58303, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58341, 57898,
  /* 50266 */ 57898, 57898, 57898, 58288, 57898, 57898, 58357, 57898, 57898, 58341, 57898, 584, 1020, 584, 584, 584,
  /* 50282 */ 1035, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1076, 584, 584, 584, 584, 58218, 57875, 57875,
  /* 50301 */ 58439, 57875, 57875, 57875, 57875, 57875, 58271, 57875, 58439, 0, 0, 58218, 0, 57875, 57875, 0, 57898,
  /* 50318 */ 57875, 58271, 57875, 57972, 57972, 58457, 57972, 57972, 57972, 58472, 57972, 57972, 57972, 57972, 57972,
  /* 50333 */ 57972, 57972, 57972, 57972, 57972, 57972, 61020, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 50348 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59097, 57972, 57972,
  /* 50363 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57972, 57972, 57972, 57972, 58513, 57972,
  /* 50378 */ 57972, 57972, 57972, 0, 57875, 57875, 57875, 58271, 57875, 57875, 584, 584, 584, 1076, 584, 584, 296,
  /* 50395 */ 1196, 0, 0, 1200, 0, 0, 1205, 0, 0, 0, 0, 0, 0, 58727, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 50417 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59309, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 50432 */ 57875, 57875, 0, 57898, 57898, 57898, 57898, 57898, 57898, 58304, 57898, 57898, 58318, 57898, 57898,
  /* 50447 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58854, 57898, 57898, 57898,
  /* 50462 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 50477 */ 61137, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 0, 1295, 0,
  /* 50495 */ 0, 0, 0, 0, 0, 0, 0, 0, 1306, 1307, 0, 0, 0, 0, 0, 1213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
  /* 50527 */ 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50560 */ 0, 0, 0, 0, 1367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50593 */ 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 57875, 57875,
  /* 50624 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58762, 57875, 57875, 57875, 57875, 57875,
  /* 50639 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58780, 57875,
  /* 50654 */ 58782, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58794, 57875, 57875, 584, 1578, 584, 1635, 584,
  /* 50670 */ 584, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1797, 1798, 0, 0, 0, 57898, 57898, 57898, 57898,
  /* 50696 */ 58846, 57898, 58848, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 50711 */ 57898, 57898, 57898, 57898, 57898, 57898, 58866, 57898, 58868, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 50726 */ 57898, 57898, 61130, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 50741 */ 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 3066, 584, 584, 584,
  /* 50759 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 50780 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898,
  /* 50795 */ 58880, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58893, 57898, 57898, 57898, 57898,
  /* 50810 */ 58828, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 1565, 584, 584, 584, 584, 584, 584, 584,
  /* 50827 */ 2212, 2213, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 50846 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972,
  /* 50861 */ 60474, 60475, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 584, 584, 57875, 57875, 58742,
  /* 50876 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57875, 57898,
  /* 50891 */ 57875, 57875, 57875, 57972, 59020, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875,
  /* 50906 */ 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 2352, 0, 1200, 0, 0, 0, 0, 2355, 0, 1205, 0, 57972,
  /* 50929 */ 57972, 57972, 59033, 59040, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59053, 57972, 59055,
  /* 50944 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 50959 */ 57972, 59057, 57972, 57972, 57972, 59060, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59067, 57972,
  /* 50974 */ 57972, 59071, 57972, 57972, 57972, 57972, 57972, 59076, 57972, 59078, 57972, 57972, 57972, 57972, 57972,
  /* 50989 */ 57972, 57972, 59091, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59106,
  /* 51004 */ 57972, 57972, 57972, 58742, 0, 0, 0, 0, 0, 1869, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51033 */ 0, 1883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393688, 0, 393688, 393688, 0, 393688, 393688, 393688, 393688, 393688,
  /* 51054 */ 393688, 393688, 393688, 393688, 393688, 393688, 393688, 393688, 393688, 393688, 393688, 393688, 0, 57875,
  /* 51068 */ 57875, 57875, 59352, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 51083 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59377, 57875, 50621, 2037, 57898,
  /* 51098 */ 57898, 57898, 57898, 57898, 58847, 58849, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 51113 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58871,
  /* 51128 */ 57898, 57972, 57972, 57972, 59646, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59655, 57972,
  /* 51143 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 51158 */ 57972, 57972, 57972, 57972, 61306, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 57972, 57972,
  /* 51176 */ 57972, 57972, 57972, 59682, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0,
  /* 51195 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 3880, 0, 0, 0, 0, 0, 3886, 0, 0, 0, 0, 0, 57875, 59889,
  /* 51225 */ 57875, 57875, 57875, 57875, 59893, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 51240 */ 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 51257 */ 57898, 60342, 57898, 57898, 57898, 57898, 57898, 60347, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 51272 */ 57898, 59972, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 51287 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 51305 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2709, 584, 584, 584, 584, 584, 584, 2714, 584, 584,
  /* 51326 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 51343 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 1312, 57875, 57898, 57875, 57875, 57875, 57972, 57972,
  /* 51358 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 3267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51383 */ 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60626, 57875, 57875, 57875, 57875, 57875, 584, 584,
  /* 51399 */ 584, 584, 584, 584, 1196, 0, 0, 0, 1783, 0, 0, 0, 0, 1790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1801, 60633,
  /* 51425 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 51440 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 51455 */ 57875, 57875, 57898, 60697, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584,
  /* 51471 */ 584, 584, 584, 584, 3368, 584, 584, 584, 584, 584, 584, 3376, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 51492 */ 584, 3647, 584, 584, 584, 584, 584, 60996, 57875, 60997, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 51509 */ 57875, 57898, 61007, 57972, 57972, 57972, 57898, 57898, 57898, 57898, 57898, 60933, 57898, 57898, 57898,
  /* 51524 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 51539 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60376, 57898, 57898, 57898, 57898, 57898, 584,
  /* 51554 */ 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61177, 57875, 57875, 57898, 57875, 57972,
  /* 51569 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 51584 */ 57972, 60808, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 57875, 57875,
  /* 51602 */ 57875, 57875, 61539, 61540, 57898, 57898, 57898, 57898, 57898, 61546, 61547, 57898, 57898, 57898, 57898,
  /* 51617 */ 57898, 584, 584, 584, 584, 584, 584, 584, 4214, 584, 4216, 584, 584, 584, 57875, 57875, 57875, 57875,
  /* 51635 */ 57875, 57875, 57875, 57875, 57875, 57875, 57898, 61180, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 51650 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61206, 57972, 57972, 57972,
  /* 51665 */ 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 57875, 57875, 57875, 57875, 61593, 57898, 57898,
  /* 51682 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 4256, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 51700 */ 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60760, 57875, 57875, 60763, 57898, 57875,
  /* 51715 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 61610, 57972, 57972, 57972,
  /* 51730 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875,
  /* 51748 */ 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 1022, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 51766 */ 584, 584, 584, 1068, 584, 584, 584, 584, 1086, 584, 584, 58220, 57875, 57875, 57875, 4313, 584, 584, 584,
  /* 51785 */ 584, 57875, 57875, 57972, 61662, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 57875, 57875, 57875, 57898,
  /* 51802 */ 57898, 57898, 57898, 584, 584, 584, 584, 57875, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875,
  /* 51818 */ 584, 584, 584, 584, 584, 2830, 2351, 0, 2831, 2354, 0, 0, 0, 0, 0, 0, 2835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51845 */ 5627904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2899, 2900, 0, 0,
  /* 51874 */ 2903, 0, 0, 2906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2916, 0, 0, 0, 0, 390, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51905 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0,
  /* 51938 */ 0, 450, 0, 0, 0, 0, 466, 482, 482, 482, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 514, 514, 514,
  /* 51961 */ 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 57887, 57887, 57887, 57910, 57887, 57887, 57887,
  /* 51979 */ 57887, 57910, 57887, 57910, 595, 57887, 595, 57887, 57887, 595, 595, 57887, 57887, 595, 57887, 595, 595,
  /* 51996 */ 57887, 57887, 57887, 57887, 57887, 57887, 57910, 57887, 57910, 57887, 57887, 57887, 57887, 57887, 57887,
  /* 52011 */ 57887, 57887, 57887, 57887, 57887, 57887, 57984, 57984, 57984, 57887, 595, 1, 24578, 3, 155944, 156311,
  /* 52027 */ 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0,
  /* 52058 */ 0, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 57898, 57898, 58304, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 52081 */ 584, 584, 1036, 584, 584, 1052, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875,
  /* 52101 */ 57875, 58234, 57875, 58248, 57875, 57875, 57875, 57875, 57875, 58449, 0, 0, 57875, 0, 57875, 57875, 0,
  /* 52118 */ 57898, 58248, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 58473, 57972, 57972, 58489, 57972,
  /* 52133 */ 57972, 57972, 57875, 57875, 57875, 60167, 60168, 584, 584, 584, 2828, 2829, 0, 0, 1783, 0, 0, 1790, 0, 0,
  /* 52153 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 52177 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 2559, 0, 0, 0, 57898, 57898, 57898,
  /* 52194 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 1380, 0, 0, 0, 0, 0, 58727, 872, 57875, 57875, 57875,
  /* 52212 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 52227 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58790, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 52242 */ 57875, 57875, 58802, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898,
  /* 52257 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 52272 */ 57898, 61259, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 52290 */ 57875, 59002, 57875, 57875, 57875, 57875, 57875, 59008, 57875, 57875, 57875, 57875, 57875, 57875, 0,
  /* 52305 */ 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52320 */ 57972, 57972, 0, 0, 4274, 0, 0, 0, 57875, 57875, 61623, 57875, 57875, 57898, 57898, 61627, 57898, 57898,
  /* 52338 */ 57898, 61631, 584, 57972, 57972, 57972, 59034, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52353 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52368 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59674, 57972, 57972, 57972, 59073, 57972, 57972, 57972,
  /* 52383 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59093, 57972, 57972, 57972,
  /* 52398 */ 57972, 57972, 59101, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59002, 57875, 57875, 57875, 59115,
  /* 52413 */ 57875, 584, 1579, 584, 584, 1776, 584, 1196, 0, 0, 1781, 0, 0, 0, 0, 1788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 52439 */ 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 262144, 262144, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1806, 0,
  /* 52467 */ 0, 0, 1809, 0, 0, 1812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560,
  /* 52498 */ 0, 450560, 0, 0, 450560, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3493, 0, 0,
  /* 52526 */ 0, 0, 0, 0, 0, 0, 0, 3500, 3501, 0, 3502, 0, 0, 1890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 52557 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1829, 0, 0, 57898, 59417, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 52580 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 52595 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60694, 57898, 584, 2171, 584, 584, 584,
  /* 52611 */ 584, 584, 584, 584, 584, 2182, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 52632 */ 584, 584, 584, 584, 584, 584, 2675, 584, 584, 584, 584, 584, 584, 2680, 584, 2682, 584, 584, 57972, 57972,
  /* 52652 */ 57972, 59616, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59627,
  /* 52667 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59638, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52682 */ 57972, 57972, 57972, 57972, 59081, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59095, 57972, 57972,
  /* 52697 */ 57972, 57972, 57972, 57972, 57972, 57972, 59107, 59108, 57972, 57972, 57875, 2382, 2383, 0, 0, 0, 0, 0, 0,
  /* 52716 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 2433, 0, 0, 2436, 0,
  /* 52749 */ 0, 0, 0, 2441, 0, 0, 0, 0, 0, 2447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 52779 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58260, 57972, 57972, 57972,
  /* 52794 */ 57972, 57972, 60139, 57972, 57972, 57972, 57972, 60144, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52809 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60498,
  /* 52824 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 3481, 0, 0, 0, 0, 0, 0,
  /* 52845 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 584, 584, 584, 57875,
  /* 52875 */ 57875, 57875, 61173, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57972, 57972, 57972, 57972,
  /* 52890 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59092, 57972,
  /* 52905 */ 57972, 59096, 57972, 57972, 57972, 57972, 57972, 59103, 57972, 57972, 57972, 59110, 57972, 57875, 0, 0, 0,
  /* 52922 */ 0, 0, 3973, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 52946 */ 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52961 */ 57972, 59598, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59609, 57972, 57972, 57972, 584,
  /* 52976 */ 57875, 57875, 57875, 57875, 61369, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 52991 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61386, 57972, 57875, 584, 0, 0, 0, 0, 0, 0,
  /* 53010 */ 0, 5242880, 0, 0, 0, 0, 5603328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
  /* 53040 */ 368, 0, 0, 0, 0, 1259, 1219, 0, 0, 4046, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 53066 */ 57875, 61405, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 61414, 57898, 57898, 57898, 57898,
  /* 53081 */ 57898, 57898, 57898, 59391, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59403, 57898, 57898,
  /* 53096 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59401, 57898,
  /* 53111 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 53126 */ 59467, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 344,
  /* 53143 */ 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 343, 298, 0, 0, 0, 0, 0,
  /* 53176 */ 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144,
  /* 53200 */ 4358144, 4857856, 4874240, 0, 0, 0, 391, 392, 394, 344, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 343, 0, 0, 344,
  /* 53225 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60884, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 53247 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60899, 57875, 57875, 0, 0, 0, 391, 0, 0, 0, 0, 0, 0, 0,
  /* 53268 */ 0, 0, 0, 0, 391, 0, 0, 0, 0, 0, 344, 391, 0, 0, 0, 139264, 147456, 0, 344, 0, 0, 0, 0, 0, 0, 58727, 0,
  /* 53295 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59307,
  /* 53310 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 2987, 0, 57898, 57898, 57898, 57898,
  /* 53326 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60675, 57898,
  /* 53341 */ 57898, 426, 0, 0, 0, 0, 131072, 0, 437, 343, 0, 0, 0, 0, 455, 0, 0, 343, 0, 483, 483, 483, 483, 499, 499,
  /* 53366 */ 499, 499, 499, 499, 499, 499, 499, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
  /* 53387 */ 57888, 57888, 57888, 57911, 57888, 57888, 57888, 57888, 57911, 57888, 57924, 596, 57956, 596, 57956,
  /* 53402 */ 57956, 596, 596, 57956, 57956, 596, 57888, 596, 596, 57888, 57965, 57888, 57965, 57888, 57966, 57924,
  /* 53418 */ 57966, 57924, 57966, 57966, 57966, 57966, 57966, 57966, 57966, 57966, 57966, 57966, 57966, 57966, 57985,
  /* 53433 */ 57985, 57985, 57888, 596, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0,
  /* 53456 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 690, 0, 0, 0, 0, 57875, 57875, 58218, 57875, 57875, 57875, 58233,
  /* 53479 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 742, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 0,
  /* 53503 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2374, 0, 2375, 0, 0, 0, 0, 0, 0, 804, 0, 0, 0, 0, 0,
  /* 53536 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 822, 0, 0, 0, 0, 0, 0, 0, 826, 0, 0, 0, 0, 835, 860, 0, 822, 0, 0,
  /* 53567 */ 0, 0, 0, 866, 0, 0, 0, 826, 692, 870, 0, 0, 0, 57875, 57875, 58219, 57875, 57875, 57875, 58235, 57875,
  /* 53588 */ 57875, 58249, 57875, 57875, 57875, 57875, 57875, 58235, 0, 0, 58219, 0, 57875, 57875, 0, 57898, 58249,
  /* 53605 */ 57875, 57875, 57972, 57972, 58458, 57972, 57972, 57972, 58474, 57972, 57972, 58490, 57972, 57972, 57972,
  /* 53620 */ 58262, 57875, 57875, 57875, 57875, 58278, 57875, 57875, 0, 57898, 57898, 58289, 57898, 57898, 57898,
  /* 53635 */ 58305, 57898, 57898, 58319, 57898, 57898, 57898, 57898, 58332, 57898, 57898, 57898, 57898, 58348, 57898,
  /* 53650 */ 57898, 58289, 57898, 57898, 58305, 57898, 57898, 57898, 57898, 584, 1021, 584, 584, 584, 1037, 584, 584,
  /* 53667 */ 1053, 584, 584, 584, 584, 1067, 584, 584, 584, 584, 1085, 584, 584, 58219, 57875, 57875, 58235, 57972,
  /* 53685 */ 58504, 57972, 57972, 57972, 57972, 58522, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584,
  /* 53701 */ 584, 584, 584, 584, 584, 155944, 1196, 0, 304, 0, 0, 308, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 53728 */ 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 308, 237986, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 53758 */ 0, 1280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 53790 */ 740, 0, 0, 0, 0, 0, 1297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1215, 0, 1217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 53822 */ 0, 0, 0, 0, 368, 368, 368, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1331, 0, 0, 0, 0, 1336,
  /* 53853 */ 0, 0, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1351, 0, 0, 0, 0, 0, 0, 0, 0, 5341184, 0, 5652480,
  /* 53882 */ 0, 0, 4759552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1316, 0, 0, 0, 0, 0, 0, 0,
  /* 53914 */ 0, 0, 0, 58873, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 53931 */ 57898, 57898, 57898, 57898, 58829, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584,
  /* 53947 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1066, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 53967 */ 57875, 584, 584, 57875, 57875, 58743, 57875, 57875, 59005, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 53982 */ 57875, 57875, 57875, 0, 57875, 59016, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 53997 */ 57972, 57972, 57972, 57972, 57972, 57972, 0, 4273, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57898,
  /* 54015 */ 57898, 57898, 57898, 57898, 61630, 57898, 584, 57972, 57972, 57972, 59035, 57972, 57972, 57972, 57972,
  /* 54030 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59059, 57972, 57972, 57972, 57972,
  /* 54045 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59656, 57972, 57972, 57972, 57972, 57972,
  /* 54060 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59094, 57972,
  /* 54075 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 59114,
  /* 54090 */ 57875, 57875, 584, 1773, 584, 1775, 584, 584, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1793, 0, 0, 0, 0, 0,
  /* 54116 */ 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 830, 0, 0, 0, 0, 0, 0, 0, 830, 1832, 0, 1834, 0,
  /* 54147 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1897, 0, 0,
  /* 54180 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2891, 0, 584, 584,
  /* 54212 */ 584, 584, 2142, 584, 584, 584, 584, 584, 584, 584, 584, 2153, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 54233 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 3392, 584, 584, 584, 584, 584, 584, 584, 3398, 584, 584, 584,
  /* 54254 */ 584, 584, 59834, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 54269 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 54284 */ 57875, 57875, 57875, 57875, 0, 0, 57898, 57898, 59973, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 54300 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 2648, 2649,
  /* 54316 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 2214, 584, 584, 584, 584, 584, 584, 2220, 584, 584, 584, 584,
  /* 54337 */ 584, 584, 59572, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57875, 0, 57875, 57875, 0,
  /* 54355 */ 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54370 */ 57972, 57972, 57972, 59089, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54385 */ 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 3710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 54407 */ 0, 0, 0, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 60087, 60088, 57972, 57972, 57972, 57972,
  /* 54424 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54439 */ 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 3476, 0, 0, 57972, 57972, 60136, 57972, 57972,
  /* 54457 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54472 */ 57972, 57972, 57972, 57972, 57972, 60155, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54487 */ 57972, 60490, 57972, 60492, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54502 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61027, 57972, 61029, 57972, 57972, 57972,
  /* 54517 */ 57972, 57972, 57972, 61035, 57972, 57972, 2843, 0, 0, 0, 0, 0, 0, 2848, 0, 0, 0, 2851, 0, 0, 0, 0, 0, 0,
  /* 54541 */ 0, 0, 0, 0, 0, 0, 0, 2861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1271, 0, 0, 0, 0, 0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
  /* 54573 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 58237, 57875, 57875, 57875,
  /* 54594 */ 57875, 57875, 57875, 57875, 0, 0, 0, 2921, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2929, 0, 0, 0, 0, 0, 0, 0, 57875,
  /* 54620 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898,
  /* 54635 */ 57898, 57898, 57898, 57898, 58821, 57898, 57898, 57898, 58825, 57898, 57898, 58835, 57898, 57898, 58838,
  /* 54650 */ 57898, 57875, 57875, 57875, 57875, 60287, 60288, 57875, 57875, 57875, 57875, 57875, 60293, 57875, 57875,
  /* 54665 */ 57875, 57875, 57875, 60297, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60302, 57875, 57875,
  /* 54680 */ 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 1196, 0, 1780, 0, 0, 0, 0, 1787, 0, 0, 0, 0, 0, 0, 0,
  /* 54704 */ 0, 0, 0, 0, 0, 0, 0, 0, 1364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 0, 0, 0,
  /* 54738 */ 416, 139264, 147456, 0, 0, 0, 0, 57875, 57875, 57875, 60310, 57875, 57875, 57875, 57875, 57875, 60317,
  /* 54755 */ 57875, 57875, 57875, 57875, 57875, 60322, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 54770 */ 57875, 57875, 57875, 57875, 57875, 0, 0, 942, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 54786 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59470, 57898, 59472, 57898,
  /* 54801 */ 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 60354, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 54817 */ 57898, 57898, 60359, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60367, 57898, 57898, 57898,
  /* 54832 */ 57898, 57898, 60374, 57898, 57898, 57898, 57898, 57898, 60379, 57898, 57898, 57898, 57898, 57898, 59950,
  /* 54847 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 54862 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58867, 57898, 57898, 57898,
  /* 54877 */ 57898, 57898, 584, 584, 3061, 584, 584, 3064, 3065, 584, 584, 584, 584, 584, 3070, 584, 3072, 584, 584,
  /* 54896 */ 584, 584, 3076, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3082, 584, 584, 584, 584, 584, 584, 57875,
  /* 54916 */ 57875, 57875, 61640, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875,
  /* 54934 */ 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 4082, 584, 584, 584, 584, 4087, 584, 584, 584, 584,
  /* 54952 */ 4092, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 61445, 57972, 57972, 61448, 57972, 57972, 584,
  /* 54968 */ 584, 584, 584, 57875, 57875, 60459, 57875, 60461, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898,
  /* 54984 */ 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 54999 */ 57972, 57972, 57972, 57972, 59608, 57972, 57972, 57972, 57972, 57972, 60482, 57972, 57972, 60485, 60486,
  /* 55014 */ 57972, 57972, 57972, 57972, 57972, 60491, 57972, 60493, 57972, 57972, 57972, 57972, 60497, 57972, 57972,
  /* 55029 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60503, 57972, 57972, 57972, 57875, 57875, 60537, 57875,
  /* 55044 */ 57875, 584, 584, 3196, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 55072 */ 2359296, 0, 0, 0, 2359296, 2359296, 0, 0, 2359296, 2359296, 57972, 57972, 57972, 57972, 57972, 60511,
  /* 55088 */ 57972, 57972, 57972, 57972, 57972, 57972, 60519, 57972, 57972, 57972, 57972, 57972, 60524, 57972, 57972,
  /* 55103 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60786, 57972, 57972, 57972,
  /* 55118 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 55133 */ 57972, 61207, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 3211, 0, 0, 0, 0, 3215, 0,
  /* 55154 */ 0, 0, 0, 0, 0, 0, 3221, 3222, 3223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3236, 0, 0, 0, 0, 0, 419, 0,
  /* 55185 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2485, 57875, 57875, 57875,
  /* 55215 */ 57875, 0, 0, 0, 3268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60621, 57875, 57875, 57875, 57875,
  /* 55240 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 55255 */ 57898, 60918, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57875, 57875,
  /* 55270 */ 57875, 57875, 57875, 60637, 60638, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 55285 */ 57875, 57875, 57875, 57875, 57875, 57875, 60647, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 55300 */ 0, 0, 58220, 0, 57875, 57875, 0, 57898, 57875, 57875, 57875, 57972, 57972, 58459, 57972, 57972, 57972,
  /* 55317 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61472, 57875,
  /* 55340 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60654, 57875, 60656, 57875, 57875,
  /* 55355 */ 60659, 0, 0, 60660, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 55371 */ 57898, 57898, 57898, 57898, 57898, 60676, 60677, 57898, 57898, 60698, 57898, 57898, 60701, 57898, 57898,
  /* 55386 */ 57898, 57898, 3362, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 55406 */ 584, 584, 3380, 584, 584, 584, 584, 584, 2209, 584, 584, 584, 584, 584, 584, 2216, 584, 584, 584, 584,
  /* 55426 */ 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 55443 */ 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 55458 */ 57972, 57972, 57972, 59605, 57972, 57972, 57972, 57972, 57972, 57972, 584, 3383, 584, 584, 584, 584, 584,
  /* 55475 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3393, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 55496 */ 584, 584, 584, 584, 584, 584, 2218, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875,
  /* 55515 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972,
  /* 55530 */ 57972, 57972, 60477, 57972, 57972, 57972, 57972, 57972, 57972, 584, 584, 3402, 584, 584, 3405, 584, 584,
  /* 55547 */ 3408, 57875, 57875, 60755, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875,
  /* 55562 */ 60766, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60518, 57972, 57972,
  /* 55577 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 55592 */ 57972, 57972, 57972, 59631, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 55607 */ 60797, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 55622 */ 60806, 57972, 57972, 60809, 57972, 57972, 60812, 60813, 57875, 57875, 3472, 584, 584, 0, 0, 0, 0, 0, 0, 0,
  /* 55642 */ 0, 6471680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5038080, 0, 0, 0, 5095424, 5103616, 0, 0, 0, 0, 0, 0, 0,
  /* 55669 */ 0, 0, 0, 5890048, 0, 0, 6029312, 0, 0, 0, 6160384, 0, 0, 0, 0, 0, 6406144, 0, 4997120, 0, 5201920, 0, 0,
  /* 55692 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60908, 57875, 60909, 57875, 57875, 57875, 57875, 57875,
  /* 55707 */ 57875, 57875, 57875, 57875, 57898, 57898, 60919, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 55722 */ 57898, 57898, 584, 3363, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 55742 */ 584, 584, 584, 584, 2190, 584, 584, 584, 584, 584, 584, 584, 584, 2199, 584, 584, 584, 584, 3639, 584,
  /* 55762 */ 584, 3641, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 60998,
  /* 55780 */ 57875, 57875, 57875, 57875, 57875, 57875, 61006, 57875, 57972, 57972, 61010, 61037, 57972, 57972, 57972,
  /* 55795 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 3711, 0,
  /* 55813 */ 3713, 0, 0, 0, 3717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144,
  /* 55839 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0,
  /* 55851 */ 5013504, 0, 0, 6053888, 0, 0, 0, 0, 0, 0, 0, 0, 6012928, 0, 0, 5013504, 0, 0, 0, 0, 0, 61107, 57875,
  /* 55874 */ 57875, 57875, 57875, 61109, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 55889 */ 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 61121, 61122, 57898, 57898, 57898, 57898,
  /* 55904 */ 57898, 57898, 57898, 59424, 57898, 57898, 59428, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 55919 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 2646, 584,
  /* 55935 */ 584, 584, 584, 584, 584, 584, 584, 584, 61126, 61127, 57898, 57898, 57898, 57898, 61129, 57898, 57898,
  /* 55952 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 55967 */ 61141, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 2179, 584, 584, 584, 2184, 584, 584, 584,
  /* 55986 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 56005 */ 60072, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60078, 57875, 584, 584, 3804, 3805, 584, 584, 584,
  /* 56022 */ 584, 3809, 3810, 584, 584, 584, 584, 584, 3814, 584, 584, 584, 584, 584, 584, 584, 3819, 584, 584, 584,
  /* 56042 */ 584, 584, 584, 584, 584, 584, 584, 584, 2667, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 56063 */ 584, 584, 584, 584, 584, 584, 584, 584, 60069, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 56080 */ 57875, 57875, 57875, 57875, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 61175, 57875, 57875, 57875,
  /* 56096 */ 57875, 57898, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61185, 61186, 57972, 57972, 57972,
  /* 56111 */ 57972, 61190, 61191, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61017, 57972, 57972, 57972, 57972,
  /* 56126 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61032, 61033,
  /* 56141 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59652, 59653, 57972, 57972, 57972, 57972,
  /* 56156 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 56171 */ 57972, 57972, 59665, 57972, 57972, 57972, 57972, 57972, 57972, 59672, 57972, 57972, 57972, 57972, 57972,
  /* 56186 */ 57972, 61195, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61200, 57972, 57972, 57972, 57972, 57972,
  /* 56201 */ 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 3869, 584, 584, 3928,
  /* 56219 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 61282, 57875, 57875,
  /* 56238 */ 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 61574, 57972, 57972, 57972, 57972,
  /* 56253 */ 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 56274 */ 57875, 57875, 57875, 61245, 57875, 57875, 57875, 57875, 61246, 57875, 57875, 57875, 57875, 57898, 57898,
  /* 56289 */ 57898, 584, 57875, 61366, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 56304 */ 57972, 57972, 57972, 57972, 57972, 57972, 61381, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 584, 0,
  /* 56320 */ 4044, 0, 0, 0, 0, 0, 421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 0, 2359296, 2359296, 2359296, 2359296,
  /* 56344 */ 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 2359296, 0, 0, 0, 0, 0,
  /* 56359 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 581632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4047, 0, 0, 0,
  /* 56391 */ 3731, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 61403, 57875, 57875, 57875, 57875, 57875, 61409, 57898, 57898,
  /* 56411 */ 61412, 57898, 57898, 57898, 57898, 57898, 61418, 57972, 57972, 61453, 57972, 57972, 57972, 57972, 61458,
  /* 56426 */ 57972, 57972, 0, 0, 0, 0, 0, 4120, 0, 0, 4123, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 56448 */ 57875, 57875, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 56463 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59475, 57898, 57898,
  /* 56478 */ 584, 584, 584, 584, 584, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 56494 */ 57898, 61488, 57898, 61490, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 4157, 584, 584, 4159,
  /* 56513 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61112, 57875, 57875, 57875, 57875, 57875,
  /* 56528 */ 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 56543 */ 61124, 57898, 61506, 57875, 61508, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 56558 */ 57972, 57972, 57972, 61521, 57972, 57972, 61523, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 56579 */ 57875, 57875, 57875, 57875, 58236, 0, 0, 57875, 0, 57875, 57875, 0, 57898, 57875, 57875, 57875, 57972,
  /* 56596 */ 57972, 57972, 57972, 57972, 57972, 58475, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 56611 */ 57972, 60783, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 56626 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60796, 584, 584, 4290, 4291, 584, 584, 57875, 57875,
  /* 56642 */ 57875, 57972, 57972, 57972, 61642, 61643, 57972, 57972, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57898,
  /* 56660 */ 57898, 57898, 57898, 57898, 57898, 584, 4081, 584, 4083, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 56679 */ 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 61447, 57972, 61449, 57972, 0, 0, 346, 347,
  /* 56696 */ 348, 349, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 298, 0, 0, 0, 0, 0, 0,
  /* 56727 */ 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 309, 139264, 287142, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 56757 */ 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 344064, 0,
  /* 56787 */ 344064, 0, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064, 344064,
  /* 56801 */ 344064, 344064, 344064, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3519, 0, 0,
  /* 56829 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 131072, 348, 0, 350, 349, 348, 349, 0, 348, 349, 349, 460, 467,
  /* 56855 */ 484, 484, 484, 495, 495, 495, 495, 502, 495, 495, 502, 502, 502, 515, 515, 515, 515, 515, 515, 515, 515,
  /* 56876 */ 515, 515, 515, 515, 515, 515, 57889, 57889, 57889, 57912, 57889, 57889, 57889, 57889, 57912, 57889, 57912,
  /* 56893 */ 597, 57889, 597, 57889, 57889, 597, 597, 57889, 57889, 597, 57889, 597, 597, 57889, 57889, 57889, 57889,
  /* 56910 */ 57889, 57889, 57912, 57889, 57912, 57889, 57889, 57889, 57889, 57889, 57889, 57889, 57889, 57889, 57889,
  /* 56925 */ 57889, 57889, 57986, 57986, 57986, 57889, 597, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305,
  /* 56945 */ 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 6471680, 0, 0, 0, 871, 871, 871, 871, 871,
  /* 56973 */ 871, 871, 871, 871, 5038951, 871, 871, 871, 5096295, 5104487, 871, 871, 871, 871, 871, 4359015, 4359015,
  /* 56990 */ 5014375, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 4359015, 6054759,
  /* 57001 */ 4359015, 4359015, 0, 0, 0, 0, 5193728, 0, 0, 0, 0, 0, 0, 871, 680, 681, 682, 683, 684, 685, 686, 0, 0, 0,
  /* 57025 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 701, 0, 703, 704, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0, 717, 718, 0, 0, 0,
  /* 57056 */ 0, 723, 0, 0, 0, 368, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
  /* 57088 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 747, 0, 749, 0, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57121 */ 0, 763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456,
  /* 57151 */ 0, 0, 0, 344064, 0, 839, 0, 0, 719, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 795, 851, 0, 0, 0, 0, 0, 0, 855,
  /* 57181 */ 726, 0, 0, 859, 0, 0, 0, 0, 0, 0, 58727, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 57202 */ 57875, 57875, 59304, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59315, 57875, 57875, 57875,
  /* 57217 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59327, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 57232 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 57247 */ 57875, 57875, 59339, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 861, 0, 0, 0, 719, 726, 0,
  /* 57266 */ 0, 719, 859, 859, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 58225, 58229, 58232, 57875, 58241, 57875, 57875,
  /* 57286 */ 57875, 58254, 58256, 58259, 57875, 57875, 57875, 58272, 58274, 57875, 57875, 57875, 0, 57898, 57898,
  /* 57301 */ 57898, 58295, 58299, 58302, 57898, 58311, 57898, 57898, 57898, 58324, 58326, 58329, 57898, 57898, 57898,
  /* 57316 */ 58342, 58344, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59952, 59953, 57898, 57898, 57898, 57898,
  /* 57331 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59963, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 57346 */ 57898, 57898, 57898, 57898, 61346, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 57364 */ 584, 4015, 584, 584, 584, 584, 584, 58355, 58356, 57898, 58359, 57898, 58342, 58344, 584, 584, 1027, 1031,
  /* 57382 */ 1034, 584, 1043, 584, 584, 584, 1059, 1061, 1064, 584, 584, 584, 1077, 1081, 584, 584, 584, 57875, 58437,
  /* 57401 */ 58438, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58237, 0, 0, 57875, 0, 57875, 57875, 0, 57898,
  /* 57418 */ 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 58476, 57972, 57972, 57972, 57972, 57972,
  /* 57433 */ 57972, 57972, 57972, 57972, 57972, 61019, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 57448 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61307, 57972, 57875,
  /* 57463 */ 57875, 584, 584, 0, 0, 0, 0, 0, 58241, 57875, 57875, 58444, 57875, 58272, 58274, 57875, 0, 0, 57875, 0,
  /* 57483 */ 58444, 58451, 0, 58311, 57875, 58272, 58274, 57972, 57972, 57972, 58464, 58468, 58471, 57972, 58480,
  /* 57498 */ 57972, 57972, 57972, 58496, 58498, 58501, 57972, 57972, 57972, 58514, 58518, 57972, 57972, 57972, 0,
  /* 57513 */ 58528, 58225, 57875, 58272, 58274, 58533, 1027, 1191, 584, 1077, 1081, 1195, 155944, 1196, 0, 0, 0, 0, 0,
  /* 57532 */ 0, 0, 0, 0, 0, 942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3733, 0, 0, 0,
  /* 57566 */ 0, 3738, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
  /* 57597 */ 1322, 0, 0, 0, 0, 0, 0, 0, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57631 */ 0, 2403, 2404, 0, 0, 0, 0, 0, 0, 1329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 57663 */ 0, 0, 0, 0, 0, 0, 0, 2890, 0, 0, 57875, 58764, 57875, 57875, 58766, 57875, 57875, 57875, 57875, 57875,
  /* 57683 */ 58772, 57875, 57875, 58776, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 57698 */ 57875, 57875, 57875, 58793, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 57713 */ 59845, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 57728 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59857, 57875, 57875, 57875, 57875,
  /* 57743 */ 57875, 57875, 59862, 57875, 57875, 57875, 57875, 57875, 58805, 57875, 57875, 57875, 57875, 57875, 50621,
  /* 57758 */ 58727, 942, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 57773 */ 57898, 57898, 57898, 57898, 57898, 59960, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 57788 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58879, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 57803 */ 57898, 58891, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58905, 58879,
  /* 57818 */ 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2665, 584, 584, 584, 584, 2670, 584, 584, 584, 584,
  /* 57838 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1633, 584, 584, 584, 584, 584, 584, 584,
  /* 57859 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 1616, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 57880 */ 1627, 584, 584, 1634, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1648, 584, 584, 584, 584, 584,
  /* 57900 */ 584, 1581, 584, 584, 584, 584, 1591, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 57921 */ 584, 1607, 584, 584, 584, 584, 584, 584, 584, 2663, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 57942 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3106, 584, 584, 584, 584, 584, 584, 584,
  /* 57963 */ 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59007, 57875, 57875, 59010, 58793, 57875,
  /* 57979 */ 57875, 57875, 0, 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 57994 */ 57972, 57972, 61615, 61616, 57972, 0, 0, 0, 0, 4276, 0, 57875, 57875, 57875, 57875, 57875, 57898, 57898,
  /* 58012 */ 57898, 57898, 57898, 57898, 57898, 584, 57875, 59319, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 58027 */ 57875, 57875, 57875, 59328, 57875, 57875, 59331, 57875, 57875, 59336, 57875, 57875, 57875, 57875, 57875,
  /* 58042 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 58057 */ 59878, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 59418,
  /* 58072 */ 57898, 57898, 59421, 57898, 57898, 59426, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 58087 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60373,
  /* 58102 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 2141, 584, 584, 584, 584, 584, 584,
  /* 58120 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2163, 584, 584, 584, 584, 584, 584, 584,
  /* 58141 */ 584, 584, 584, 584, 2692, 2693, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2704, 584,
  /* 58161 */ 584, 584, 584, 584, 584, 584, 584, 2172, 584, 584, 584, 2176, 584, 584, 2181, 584, 584, 584, 584, 584,
  /* 58181 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2159, 584, 584, 584,
  /* 58202 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 60134, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 58219 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 58234 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 0, 2988, 0, 2037, 57898,
  /* 58250 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 58265 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584,
  /* 58281 */ 584, 584, 584, 3113, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 58297 */ 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 58312 */ 57972, 57972, 57972, 57972, 57972, 57972, 59606, 57972, 57972, 57972, 57972, 57972, 60534, 57972, 57972,
  /* 58327 */ 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 58352 */ 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0, 139264, 147456, 0, 389, 0, 0, 0, 3212, 0, 0, 0, 0, 0, 0, 0, 0, 3218, 0,
  /* 58381 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1936, 0, 0, 0, 0, 0, 0, 0, 60902,
  /* 58413 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 58428 */ 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 60923, 57898, 57898, 57898, 57898, 57898,
  /* 58443 */ 57898, 57898, 57898, 58886, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58831, 57898,
  /* 58458 */ 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2690, 584, 584,
  /* 58476 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2226,
  /* 58497 */ 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 61015,
  /* 58512 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 58527 */ 57972, 61028, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0,
  /* 58546 */ 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 58565 */ 57875, 57875, 57875, 57875, 60898, 57875, 57875, 57875, 0, 0, 0, 3873, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 58589 */ 0, 0, 3731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 368, 0, 0, 0, 303104, 0, 0, 0, 0, 0, 0,
  /* 58620 */ 0, 0, 0, 0, 57898, 57898, 57898, 57898, 61253, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 58637 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 3920, 584, 584, 584, 584, 584, 584,
  /* 58654 */ 584, 3925, 57972, 57972, 57972, 57972, 61295, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 58669 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0,
  /* 58686 */ 3967, 0, 0, 0, 0, 0, 811, 812, 0, 814, 815, 0, 0, 0, 0, 814, 0, 0, 821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 828, 0,
  /* 58716 */ 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 298, 0, 0, 0, 0,
  /* 58748 */ 3970, 0, 0, 0, 0, 3731, 3975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 61329, 57875,
  /* 58772 */ 57875, 57875, 57875, 57875, 57875, 61335, 57898, 57898, 57898, 57898, 57898, 60383, 57898, 57898, 57898,
  /* 58787 */ 57898, 57898, 57898, 57898, 57898, 57898, 60390, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584,
  /* 58804 */ 584, 3057, 584, 584, 584, 584, 584, 584, 584, 1583, 584, 1588, 584, 584, 1592, 584, 584, 1595, 584, 584,
  /* 58824 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3937, 584, 57875, 57875, 57875,
  /* 58843 */ 57875, 57875, 57875, 57875, 57875, 57875, 61289, 57972, 57972, 57972, 57972, 57898, 57898, 61338, 57898,
  /* 58858 */ 57898, 57898, 57898, 57898, 57898, 61344, 61345, 57898, 57898, 57898, 57898, 584, 584, 584, 4008, 584,
  /* 58874 */ 584, 584, 584, 4012, 584, 584, 584, 584, 584, 4018, 584, 584, 584, 584, 584, 1577, 584, 584, 584, 584,
  /* 58894 */ 584, 584, 584, 584, 584, 1596, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1606, 584, 584, 584, 584, 584,
  /* 58915 */ 584, 584, 584, 584, 584, 3095, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 58936 */ 584, 584, 584, 584, 584, 584, 2698, 2699, 584, 584, 584, 584, 584, 584, 2706, 584, 584, 584, 584, 584,
  /* 58956 */ 61365, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 61374, 57972, 57972, 57972,
  /* 58971 */ 57972, 61378, 57972, 57972, 57972, 57972, 57972, 61384, 57972, 57972, 57972, 57875, 584, 0, 0, 0, 0, 0, 0,
  /* 58990 */ 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59019 */ 57875, 61098, 57875, 57875, 61100, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 0,
  /* 59037 */ 3731, 0, 4050, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 61406, 57875, 57875, 57875, 57898,
  /* 59056 */ 57898, 57898, 57898, 57898, 61415, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61342, 61343, 57898,
  /* 59071 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 4014, 584, 4016, 584,
  /* 59090 */ 584, 584, 584, 584, 584, 584, 3092, 584, 584, 584, 584, 584, 584, 3099, 584, 584, 584, 584, 584, 584, 584,
  /* 59111 */ 584, 584, 584, 3107, 584, 584, 584, 3110, 584, 584, 57898, 61420, 57898, 57898, 57898, 584, 584, 584, 584,
  /* 59130 */ 584, 4085, 584, 584, 584, 4089, 584, 584, 584, 584, 584, 57875, 61440, 57875, 57875, 57875, 57875, 57875,
  /* 59148 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 59163 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 61451, 57972, 57972, 57972, 61455, 57972, 57972, 57972, 57972,
  /* 59184 */ 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59207 */ 57875, 57875, 57875, 57875, 60895, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 393, 0, 0,
  /* 59226 */ 0, 397, 393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352256, 0, 352256,
  /* 59257 */ 352256, 0, 0, 0, 0, 351, 0, 411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 411, 0, 0, 0, 0, 0, 0, 411, 0, 351, 0,
  /* 59287 */ 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59318 */ 0, 0, 0, 0, 0, 3261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 438, 0, 0, 0, 0, 451, 0, 0, 0, 0, 0, 0, 0,
  /* 59349 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 509, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516,
  /* 59374 */ 57890, 57890, 57890, 57913, 57890, 57890, 57890, 57890, 57913, 57890, 57925, 598, 57957, 598, 57957,
  /* 59389 */ 57957, 598, 598, 57957, 57957, 598, 57957, 598, 598, 57957, 57957, 57957, 57957, 57957, 57957, 57925,
  /* 59405 */ 57957, 57925, 57957, 57957, 57957, 57957, 57957, 57957, 57957, 57957, 57957, 57957, 57957, 57957, 57987,
  /* 59420 */ 57987, 57987, 57957, 57987, 57987, 57997, 659, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305,
  /* 59440 */ 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59473 */ 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 58263, 57875, 57875, 57875, 57875, 58279, 57875,
  /* 59496 */ 57875, 0, 57898, 57898, 58290, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 59511 */ 57898, 58333, 57898, 57898, 57898, 57898, 58349, 57898, 57898, 58290, 57972, 58505, 57972, 57972, 57972,
  /* 59526 */ 57972, 58523, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584,
  /* 59543 */ 155944, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 1255, 0, 0,
  /* 59572 */ 0, 0, 0, 0, 0, 0, 0, 1296, 0, 0, 0, 1301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59604 */ 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 58220, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59623 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58803, 57875, 57875, 57875, 57875, 57875, 57875, 50621,
  /* 59638 */ 58727, 942, 57898, 57898, 57898, 58819, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58830,
  /* 59653 */ 57898, 57898, 57898, 57898, 58839, 58874, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 59668 */ 58889, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58830, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 59683 */ 57898, 584, 584, 584, 1568, 584, 584, 584, 584, 584, 1618, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 59703 */ 584, 584, 584, 584, 584, 1637, 584, 584, 584, 584, 584, 1645, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 59723 */ 1620, 584, 1622, 584, 584, 584, 584, 584, 584, 584, 1635, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 59743 */ 584, 584, 1650, 584, 584, 584, 57875, 57875, 58744, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59759 */ 57875, 57875, 57875, 57875, 59014, 0, 57875, 57898, 57875, 57875, 59018, 57972, 57972, 57972, 59023,
  /* 59774 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60804, 57972, 57972, 57972, 57972, 57972,
  /* 59789 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0,
  /* 59809 */ 0, 0, 0, 0, 0, 0, 0, 57972, 57972, 57972, 59036, 57972, 57972, 57972, 57972, 59046, 57972, 57972, 57972,
  /* 59828 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59062, 57972, 57972,
  /* 59843 */ 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 2350, 0,
  /* 59860 */ 2351, 0, 0, 0, 0, 2353, 0, 2354, 0, 0, 0, 0, 0, 0, 2462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 59891 */ 0, 0, 0, 0, 0, 0, 0, 2483, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59911 */ 57875, 57875, 59872, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59926 */ 59883, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59941 */ 59330, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59956 */ 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 59910, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 59973 */ 57898, 59863, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 59988 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 60003 */ 57875, 57875, 57875, 0, 2987, 57972, 57972, 57972, 57972, 60114, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60019 */ 60119, 57972, 60121, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60034 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60810, 57972, 57972, 57875, 57875, 57875, 584, 584, 584,
  /* 60050 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60084 */ 0, 0, 368, 0, 0, 0, 262144, 262144, 0, 2894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60114 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 60308, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 60135 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 60150 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 60167 */ 57898, 57898, 57898, 2563, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 60184 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 60199 */ 57898, 57898, 57898, 60377, 57898, 57898, 57898, 57898, 584, 584, 584, 3088, 584, 584, 584, 584, 584, 584,
  /* 60217 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 60238 */ 584, 3824, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60464,
  /* 60255 */ 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60270 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60104, 57972, 57972,
  /* 60285 */ 57972, 57972, 60109, 57972, 57972, 57972, 60509, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60300 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60315 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60533, 3503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60337 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3528, 61337, 57898, 57898, 61339, 57898, 57898,
  /* 60363 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 4007, 584, 584, 4009, 584, 584, 584,
  /* 60380 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2694, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 60401 */ 584, 584, 584, 584, 2707, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 60418 */ 57972, 61373, 57972, 57972, 61375, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60433 */ 57972, 57972, 57972, 57875, 584, 0, 0, 0, 0, 0, 0, 778, 424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60461 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 4054, 0, 4056,
  /* 60492 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 60507 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 60525 */ 57875, 57875, 57875, 61609, 0, 0, 777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60554 */ 0, 0, 0, 0, 0, 0, 0, 2917, 0, 0, 57898, 57898, 58306, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584,
  /* 60576 */ 1038, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 60595 */ 58236, 3085, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 60615 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3826, 584, 584, 584, 57875, 57875, 57875,
  /* 60635 */ 57875, 57875, 57875, 57875, 57875, 57875, 61179, 57898, 57875, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 60650 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61193, 0, 0, 0, 0, 400, 0, 0, 0, 0,
  /* 60670 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 687, 688, 0, 0, 0,
  /* 60701 */ 0, 0, 0, 0, 0, 0, 698, 699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 353, 131072, 0, 0, 353, 400,
  /* 60731 */ 0, 400, 0, 0, 400, 400, 353, 400, 0, 0, 0, 400, 400, 400, 400, 400, 503, 400, 400, 400, 400, 400, 400,
  /* 60754 */ 400, 400, 400, 400, 400, 400, 400, 400, 57891, 57891, 57891, 57914, 57891, 57891, 57891, 57891, 57914,
  /* 60771 */ 57891, 57914, 599, 57891, 599, 57891, 57891, 599, 599, 599, 57891, 57891, 599, 57891, 599, 599, 57891,
  /* 60788 */ 57891, 57891, 57891, 57891, 57891, 57914, 57891, 57914, 57891, 57891, 57891, 57891, 57891, 57891, 57891,
  /* 60803 */ 57891, 57891, 57891, 57891, 57891, 57988, 57988, 57988, 57891, 599, 1, 24578, 3, 155944, 155944, 298, 0,
  /* 60820 */ 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60852 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 816, 0, 0, 0, 0, 0, 0, 0, 841, 842, 0, 0, 0, 0, 0, 0, 796, 0, 0, 847, 0, 0,
  /* 60884 */ 693, 0, 0, 0, 847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450560, 450560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 60915 */ 139264, 147456, 0, 0, 0, 450560, 0, 0, 862, 0, 0, 0, 0, 0, 0, 842, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 60941 */ 57875, 58226, 57875, 57875, 57875, 58242, 58245, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584,
  /* 60957 */ 584, 584, 1196, 1778, 0, 0, 0, 0, 1785, 0, 0, 0, 0, 0, 0, 0, 1795, 1796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2414,
  /* 60985 */ 0, 0, 0, 0, 0, 0, 0, 0, 2422, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2326528, 0, 0, 0, 0, 0,
  /* 61016 */ 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 61029 */ 4358144, 4358144, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 0, 0, 0, 304,
  /* 61048 */ 0, 0, 308, 0, 0, 4857856, 58264, 58266, 57875, 57875, 58275, 57875, 57875, 57875, 0, 57898, 57898, 57898,
  /* 61066 */ 58296, 57898, 57898, 57898, 58312, 58315, 57898, 57898, 57898, 57898, 57898, 58334, 58336, 57898, 57898,
  /* 61081 */ 58345, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59978, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 61096 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 61114 */ 584, 584, 584, 584, 584, 584, 584, 584, 3379, 584, 584, 57898, 57898, 57898, 57898, 58360, 57898, 58345,
  /* 61132 */ 584, 584, 1028, 584, 584, 584, 1044, 1048, 584, 584, 584, 584, 584, 1069, 1071, 584, 584, 1082, 584, 584,
  /* 61152 */ 584, 58435, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59871, 57875,
  /* 61167 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61182 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59375, 57875, 57875, 57875, 50621, 0, 57898,
  /* 61197 */ 57898, 58242, 57875, 57875, 57875, 58445, 57875, 58275, 57875, 0, 0, 57875, 0, 57875, 57875, 0, 58312,
  /* 61214 */ 57875, 57875, 58275, 57972, 57972, 57972, 58465, 57972, 57972, 57972, 58481, 58485, 57972, 57972, 57972,
  /* 61229 */ 57972, 57972, 57972, 57972, 57972, 60142, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60148, 57972,
  /* 61244 */ 57972, 57972, 57972, 57972, 57972, 60153, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 61259 */ 57972, 57972, 59654, 57972, 57972, 59657, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 61274 */ 57972, 59670, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 58506, 58508, 57972, 57972, 58519, 57972,
  /* 61289 */ 57972, 57972, 0, 57875, 58226, 58445, 57875, 58275, 57875, 1028, 584, 1071, 584, 1082, 584, 155944, 1196,
  /* 61306 */ 0, 304, 0, 0, 308, 0, 0, 0, 0, 0, 0, 1211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 1228, 0,
  /* 61337 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 5627904, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 106496, 0, 0, 4284416, 0, 0, 0, 0,
  /* 61365 */ 0, 0, 0, 0, 0, 0, 3538, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61384 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59880, 57875, 57875, 57875,
  /* 61399 */ 57875, 59885, 57875, 57875, 57875, 57875, 1262, 0, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
  /* 61423 */ 0, 1281, 0, 0, 0, 0, 0, 0, 1288, 0, 0, 0, 0, 1293, 58763, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61445 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61460 */ 57875, 58785, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57898, 57898, 57898, 57898,
  /* 61475 */ 57898, 57898, 58307, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 61490 */ 57898, 57898, 57898, 57898, 61136, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 61505 */ 57898, 584, 584, 584, 584, 584, 58798, 57875, 57875, 57875, 57875, 57875, 57875, 58808, 58809, 57875,
  /* 61521 */ 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 61536 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60685, 57898, 57898, 57898, 57898, 57898, 57898, 60690,
  /* 61551 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 59000, 57875, 57875, 57875,
  /* 61566 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59012, 57875, 57875, 0, 57875, 57898, 57875,
  /* 61581 */ 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 57875, 57875, 57875,
  /* 61596 */ 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 155944, 1196, 0, 0, 1201, 0, 0, 1206, 0, 0, 57875,
  /* 61616 */ 59113, 57875, 57875, 59116, 584, 584, 1774, 584, 584, 1777, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61640 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1898,
  /* 61672 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 853, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61706 */ 1844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61738 */ 2416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 61771 */ 0, 0, 0, 0, 0, 57875, 57875, 57875, 59320, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61789 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61804 */ 57875, 57875, 57875, 57875, 50621, 0, 57898, 57898, 57898, 57898, 59453, 57898, 57898, 57898, 57898,
  /* 61819 */ 57898, 57898, 57898, 59460, 57898, 57898, 57898, 57898, 59466, 57898, 57898, 59469, 57898, 57898, 57898,
  /* 61834 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 2715, 584, 584, 584, 584, 584,
  /* 61853 */ 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60076, 59874, 57875,
  /* 61869 */ 57875, 57875, 584, 2139, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 61889 */ 584, 584, 584, 584, 584, 584, 584, 2164, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2716, 584, 584, 584,
  /* 61910 */ 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61927 */ 57875, 57875, 59013, 57875, 0, 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 61942 */ 57972, 57972, 57972, 57972, 584, 2204, 584, 584, 584, 2210, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 61961 */ 2219, 584, 584, 584, 584, 2225, 584, 584, 57875, 59573, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 61978 */ 57875, 0, 57898, 57898, 57898, 57898, 57898, 57898, 58308, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 61993 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59465, 57898, 57898, 57898, 57898,
  /* 62008 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 57972, 57972, 57972,
  /* 62024 */ 57972, 59681, 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0,
  /* 62044 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 385, 387, 2406, 0, 0, 2408, 0,
  /* 62075 */ 0, 0, 0, 2413, 0, 0, 0, 0, 2418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2451, 0, 0,
  /* 62107 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2464, 0, 0, 0, 0, 2469, 2470, 0, 0, 0, 0, 0, 2474, 0, 0, 0, 0, 0,
  /* 62138 */ 0, 0, 0, 0, 0, 0, 59830, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62156 */ 60319, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62171 */ 57875, 57875, 57875, 57875, 0, 2987, 57875, 57875, 59836, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62187 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62202 */ 57875, 59858, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 1196, 1778, 0, 0, 0, 0,
  /* 62221 */ 1785, 0, 0, 0, 0, 1792, 0, 1794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 689, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62252 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1286, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 59864, 57875, 59866, 57875,
  /* 62278 */ 59869, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59877, 57875,
  /* 62293 */ 57875, 57875, 57875, 59882, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57898, 57898,
  /* 62308 */ 58287, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 62323 */ 57898, 57898, 57898, 57898, 57898, 58287, 59948, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 62338 */ 57898, 57898, 57898, 57898, 59956, 57898, 57898, 57898, 57898, 59961, 57898, 57898, 57898, 57898, 57898,
  /* 62353 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59399, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 62368 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59984, 57898, 57898,
  /* 62383 */ 57898, 57898, 59988, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2685, 584, 2688,
  /* 62402 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2696, 584, 584, 584, 584, 584, 2702, 584,
  /* 62423 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3069, 584, 3071, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 62444 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2697, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 62465 */ 584, 584, 584, 57875, 57875, 57898, 57875, 57875, 60084, 57972, 57972, 57972, 57972, 57972, 57972, 60091,
  /* 62481 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 62496 */ 57972, 57972, 57972, 57972, 59663, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 62511 */ 57972, 57972, 57972, 60135, 57972, 57972, 57972, 57972, 57972, 60141, 57972, 57972, 57972, 57972, 57972,
  /* 62526 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 62541 */ 57972, 57972, 57972, 57972, 57875, 60814, 57875, 584, 3473, 584, 0, 0, 0, 0, 0, 0, 2920, 0, 0, 0, 0, 0, 0,
  /* 62564 */ 0, 0, 0, 2928, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62585 */ 57875, 57875, 50621, 58727, 942, 57898, 57898, 58817, 57898, 58820, 57898, 57898, 57898, 57898, 57898,
  /* 62600 */ 57898, 57898, 57898, 58832, 57898, 58837, 57898, 57898, 57875, 57875, 60285, 57875, 57875, 57875, 57875,
  /* 62615 */ 57875, 60290, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62630 */ 57875, 57875, 57875, 57875, 57875, 60303, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62645 */ 57875, 57875, 57875, 59898, 57875, 57875, 59901, 59902, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898,
  /* 62662 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60344, 60345, 57898, 57898,
  /* 62677 */ 57898, 57898, 57898, 60350, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 3062, 584, 584, 584, 584,
  /* 62694 */ 584, 3067, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 62715 */ 584, 3083, 584, 584, 584, 584, 584, 2660, 584, 584, 2664, 584, 584, 584, 2668, 584, 584, 584, 584, 584,
  /* 62735 */ 584, 584, 584, 584, 584, 584, 2678, 584, 584, 584, 2681, 584, 584, 584, 584, 584, 584, 2662, 584, 584,
  /* 62755 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 62776 */ 584, 584, 1643, 584, 584, 584, 584, 584, 584, 57972, 57972, 60483, 57972, 57972, 57972, 57972, 57972,
  /* 62793 */ 60488, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 62808 */ 57972, 57972, 57972, 57972, 57972, 57972, 60504, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61197,
  /* 62823 */ 57972, 57972, 57972, 57972, 57972, 61202, 57972, 61204, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 62838 */ 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 0, 0, 1870, 0, 0, 0, 0, 0, 0, 0, 1877, 0, 1879, 0, 0, 0,
  /* 62864 */ 1881, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 62897 */ 0, 0, 0, 0, 0, 1909, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 60655, 57875, 57875,
  /* 62919 */ 57875, 57875, 0, 0, 57898, 57898, 57898, 57898, 60663, 57898, 60664, 57898, 57898, 57898, 57898, 57898,
  /* 62935 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59429, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 62950 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59959, 57898, 57898,
  /* 62965 */ 57898, 57898, 59964, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 62981 */ 584, 3404, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 62997 */ 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 60770, 57972, 60771, 57972, 57972, 57972,
  /* 63012 */ 57972, 57972, 57972, 60513, 57972, 57972, 57972, 57972, 57972, 57972, 60520, 57972, 57972, 57972, 57972,
  /* 63027 */ 57972, 57972, 57972, 57972, 57972, 57972, 60528, 57972, 57972, 57972, 60531, 57972, 57972, 57972, 57875,
  /* 63042 */ 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 304, 308, 0, 0, 0, 0, 3201, 0, 0, 0, 3205, 0, 0, 0,
  /* 63065 */ 0, 0, 0, 3210, 0, 3969, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 3978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61327, 57875,
  /* 63092 */ 57875, 57875, 57875, 61331, 57875, 57875, 57875, 57875, 57875, 61336, 57898, 57898, 57898, 57898, 61340,
  /* 63107 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61348, 57898, 4006, 584, 584, 584, 584, 4010, 584,
  /* 63124 */ 584, 584, 584, 584, 584, 584, 584, 584, 4019, 584, 584, 584, 584, 584, 3089, 584, 584, 3093, 584, 584,
  /* 63144 */ 584, 584, 584, 584, 584, 584, 584, 3102, 584, 584, 584, 3105, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 63165 */ 584, 584, 2150, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2168,
  /* 63186 */ 2169, 584, 584, 57875, 57875, 57875, 61368, 57875, 57875, 57875, 57875, 61372, 57972, 57972, 57972, 57972,
  /* 63202 */ 61376, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61385, 57972, 57972, 57875, 584, 0,
  /* 63218 */ 0, 0, 0, 0, 0, 1268, 0, 0, 0, 0, 0, 1274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63251 */ 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57898, 57898, 57898, 57898, 57898, 61483, 57898, 57898, 57898,
  /* 63272 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 4151, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 63291 */ 584, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 57875, 57875,
  /* 63309 */ 61651, 61652, 57898, 57898, 61654, 61655, 57898, 57898, 584, 57875, 57875, 57875, 57875, 57875, 57972,
  /* 63324 */ 57972, 57972, 57972, 57972, 61515, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0,
  /* 63341 */ 0, 0, 0, 0, 0, 0, 4188, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58238, 0, 0, 57875, 0, 57875,
  /* 63362 */ 57875, 0, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 58477, 57972, 57972,
  /* 63377 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59048, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 63392 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59063, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 63407 */ 57972, 57972, 57972, 57972, 57972, 60805, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 63422 */ 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 584, 584, 584, 584, 4292, 584, 61638, 57875, 57875,
  /* 63442 */ 57972, 57972, 57972, 57972, 57972, 61644, 57972, 0, 0, 4303, 0, 4305, 57875, 57875, 57875, 57875, 57898,
  /* 63459 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 3615, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 63478 */ 584, 584, 584, 584, 3627, 584, 584, 584, 584, 584, 584, 584, 584, 3635, 584, 584, 584, 584, 584, 584,
  /* 63498 */ 3090, 584, 584, 584, 584, 584, 584, 3098, 584, 584, 584, 584, 584, 3103, 584, 584, 584, 584, 584, 584,
  /* 63518 */ 584, 584, 584, 584, 584, 584, 584, 584, 2154, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 63539 */ 584, 584, 584, 584, 584, 1599, 1601, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 63560 */ 584, 584, 584, 584, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 4323, 0, 57875, 57875,
  /* 63578 */ 57875, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 57875, 57972, 57972, 57972, 57875, 60165, 57875,
  /* 63594 */ 57875, 57875, 584, 2826, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63623 */ 1372, 0, 0, 1375, 0, 0, 0, 0, 1378, 0, 0, 0, 354, 0, 0, 0, 0, 0, 398, 399, 401, 402, 0, 0, 0, 0, 0, 0, 0,
  /* 63652 */ 0, 0, 0, 401, 402, 0, 0, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 1304, 0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
  /* 63681 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3515, 0, 0, 0, 0, 3520, 0, 0, 0, 0, 3524, 0, 0, 0, 0, 371, 379,
  /* 63712 */ 410, 0, 401, 402, 0, 0, 371, 0, 0, 354, 0, 0, 371, 0, 413, 415, 0, 371, 402, 0, 0, 371, 379, 0, 139264,
  /* 63737 */ 147456, 402, 0, 413, 0, 0, 0, 131072, 0, 439, 0, 444, 0, 444, 0, 415, 444, 444, 0, 468, 0, 0, 0, 496, 496,
  /* 63762 */ 496, 496, 496, 496, 496, 496, 496, 496, 517, 517, 517, 517, 517, 517, 528, 517, 528, 517, 517, 517, 517,
  /* 63783 */ 517, 517, 57892, 57892, 57892, 57915, 57892, 57892, 57892, 57892, 57915, 57892, 57926, 600, 57958, 600,
  /* 63799 */ 57958, 57958, 600, 600, 57958, 57958, 600, 57892, 600, 600, 57892, 57892, 57892, 57892, 57892, 57892,
  /* 63815 */ 57926, 57970, 57926, 57970, 57970, 57970, 57970, 57970, 57970, 57970, 57970, 57970, 57970, 57970, 57970,
  /* 63830 */ 57989, 57989, 57989, 57892, 57989, 57989, 57998, 660, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0,
  /* 63849 */ 304, 305, 0, 0, 308, 309, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63881 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3739, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 63915 */ 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 836, 0, 0, 0, 0, 0, 0, 0, 836, 0, 0, 0, 817, 0, 836, 0, 0, 0,
  /* 63946 */ 57875, 57875, 58221, 57875, 57875, 57875, 57875, 57875, 57875, 58250, 58251, 57875, 57875, 57875, 57875,
  /* 63961 */ 57875, 57875, 57875, 57875, 57875, 57875, 58812, 50621, 58727, 942, 58815, 57898, 57898, 57898, 57898,
  /* 63976 */ 57898, 57898, 57898, 57898, 57898, 58826, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 63991 */ 60705, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 64012 */ 584, 584, 2227, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58250, 58442, 57875,
  /* 64028 */ 57875, 57875, 57875, 57875, 0, 0, 58221, 0, 57875, 57875, 0, 57898, 58250, 57875, 57875, 57972, 57972,
  /* 64045 */ 58460, 57972, 57972, 57972, 57972, 57972, 57972, 58491, 58493, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 64060 */ 57972, 61298, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 64075 */ 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 64102 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1882, 0, 0, 0, 0, 0, 0, 0, 1207, 0, 0, 1209, 0, 0, 0, 0, 0, 0,
  /* 64134 */ 0, 0, 0, 0, 0, 0, 1222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2905, 0, 0, 0, 0, 0, 2910, 0, 0,
  /* 64166 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0, 0,
  /* 64199 */ 0, 0, 0, 0, 0, 0, 0, 0, 1337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 64232 */ 3522, 0, 0, 0, 0, 0, 0, 0, 0, 1263, 0, 0, 0, 0, 0, 1269, 0, 0, 1272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 64263 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2480, 0, 0, 0, 57875, 57875, 57875, 57875, 0, 0, 1355, 0, 0, 0, 0, 0,
  /* 64291 */ 0, 0, 0, 1361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0, 0, 0, 0, 0,
  /* 64324 */ 0, 0, 1261, 0, 1355, 1381, 1382, 0, 1355, 58727, 872, 57875, 57875, 57875, 57875, 57875, 57875, 58735,
  /* 64342 */ 57875, 57875, 57875, 58739, 57875, 57875, 58749, 57875, 57875, 58752, 57875, 57875, 57875, 57875, 57875,
  /* 64357 */ 57875, 57875, 57875, 0, 57898, 57898, 58291, 57898, 57898, 57898, 57898, 57898, 57898, 58320, 58321,
  /* 64372 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58291, 1571, 584, 584, 584,
  /* 64388 */ 1575, 584, 584, 1586, 584, 584, 1590, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 64408 */ 584, 584, 584, 584, 1609, 584, 584, 584, 584, 584, 584, 2145, 584, 584, 584, 584, 2151, 584, 584, 584,
  /* 64428 */ 584, 584, 584, 584, 584, 584, 584, 2162, 584, 584, 584, 584, 2166, 584, 584, 584, 584, 584, 584, 584,
  /* 64448 */ 3407, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875,
  /* 64463 */ 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60772, 1613, 584, 584, 584, 584, 584, 584,
  /* 64480 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 64501 */ 584, 584, 584, 584, 3825, 584, 584, 584, 57875, 57875, 57875, 57875, 58752, 57875, 57875, 57875, 57875,
  /* 64518 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972,
  /* 64533 */ 57972, 57972, 57972, 59026, 57972, 57972, 57972, 57972, 57972, 57972, 59077, 57972, 57972, 57972, 57972,
  /* 64548 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 64563 */ 57972, 57972, 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 57972, 59030, 57972, 57972,
  /* 64581 */ 59041, 57972, 57972, 59045, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 64596 */ 57972, 57972, 57972, 57972, 57972, 57972, 59064, 57972, 57972, 57972, 59068, 57972, 57972, 57972, 57972,
  /* 64611 */ 57972, 57972, 59619, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59628, 57972,
  /* 64626 */ 57972, 57972, 59632, 57972, 57972, 59637, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875,
  /* 64641 */ 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 1783, 0, 0, 0, 0, 0, 0, 1790, 0, 0, 0, 0, 57875,
  /* 64665 */ 57875, 57875, 57875, 57875, 57875, 57875, 59324, 59325, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 64680 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 64695 */ 57875, 57875, 57875, 58786, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 59680, 57972,
  /* 64710 */ 57972, 57972, 59307, 57875, 57875, 57875, 57875, 2150, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 64732 */ 0, 0, 0, 0, 0, 0, 0, 759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0, 2375, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 64765 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 64799 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2434, 0, 0, 0, 0, 0, 0, 0,
  /* 64832 */ 0, 0, 0, 2445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 0, 0, 58727, 0, 57875, 57875,
  /* 64861 */ 57875, 57875, 57875, 57875, 57875, 57875, 59300, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59310,
  /* 64876 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 64891 */ 58306, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 64906 */ 57898, 57898, 60686, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 64921 */ 60693, 57898, 60695, 57875, 57875, 57898, 57875, 60083, 57972, 57972, 60086, 57972, 57972, 57972, 57972,
  /* 64936 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 64951 */ 57972, 57972, 57972, 57972, 57972, 59099, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 58745,
  /* 64966 */ 0, 0, 0, 2845, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
  /* 64999 */ 341, 0, 0, 0, 0, 0, 2868, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65033 */ 0, 383, 0, 0, 0, 0, 0, 2895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65067 */ 0, 0, 2919, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60465, 57875,
  /* 65084 */ 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 65099 */ 57972, 57972, 57972, 57972, 57972, 60098, 57972, 60100, 57972, 57972, 57972, 57972, 57972, 57972, 60108,
  /* 65114 */ 57972, 60110, 3382, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 65134 */ 584, 584, 584, 584, 3395, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3097, 584, 584, 584,
  /* 65155 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1602, 584, 584, 584, 1605,
  /* 65176 */ 584, 584, 584, 584, 584, 584, 584, 1612, 57972, 57972, 57972, 60799, 57972, 57972, 57972, 57972, 57972,
  /* 65193 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875,
  /* 65208 */ 57875, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 813, 0, 0, 0, 707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65239 */ 0, 0, 0, 0, 0, 0, 0, 0, 401408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3532, 0, 0, 0, 0, 0, 0, 0, 0, 57875,
  /* 65269 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 65284 */ 57875, 57875, 57875, 57875, 57875, 59879, 57875, 57875, 57875, 57875, 57875, 57875, 59886, 57875, 57875,
  /* 65299 */ 57875, 0, 3721, 3722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3737, 0,
  /* 65330 */ 0, 0, 0, 0, 0, 1300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1315, 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65362 */ 0, 1874, 0, 0, 0, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4399832, 311296, 4399832,
  /* 65390 */ 0, 0, 0, 311296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3740, 0, 0, 0, 0, 0, 0, 0, 0, 3748, 0, 0, 0, 0, 0, 0, 3751,
  /* 65421 */ 0, 3753, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 65437 */ 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 65452 */ 57898, 57898, 60928, 0, 0, 3872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 0, 0,
  /* 65480 */ 3885, 0, 0, 0, 0, 3889, 0, 0, 0, 0, 0, 843, 0, 826, 0, 0, 845, 0, 696, 0, 822, 0, 0, 0, 0, 0, 845, 822, 0,
  /* 65509 */ 845, 843, 0, 0, 857, 0, 0, 0, 692, 57898, 57898, 57898, 61252, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 65528 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 65544 */ 3921, 584, 584, 584, 3924, 584, 584, 584, 584, 584, 3642, 584, 3644, 584, 584, 584, 584, 584, 584, 584,
  /* 65564 */ 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61002, 57875, 57875, 57898, 57875, 57972,
  /* 65579 */ 57972, 57972, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 3202, 0, 0,
  /* 65601 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 836, 57972,
  /* 65632 */ 57972, 57972, 61294, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 65647 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61308, 57875, 3965, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 65667 */ 6078464, 4358144, 4358144, 4841472, 4358144, 4358144, 4358144, 4898816, 4358144, 4358144, 4358144,
  /* 65678 */ 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 5111808, 4358144, 4358144,
  /* 65689 */ 4358144, 4358144, 4358144, 5283840, 4358144, 4358144, 4358144, 4358144, 5472256, 5521408, 4358144,
  /* 65700 */ 4358144, 4358144, 5595136, 5709824, 5718016, 4358144, 5824512, 5865472, 4358144, 4358144, 5922816,
  /* 65711 */ 4358144, 4358144, 6021120, 4358144, 6037504, 4358144, 4358144, 6078464, 6111232, 4358144, 6176768, 584,
  /* 65723 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 65738 */ 57972, 57972, 57972, 61380, 57972, 61382, 57972, 57972, 57972, 57972, 57972, 57875, 584, 0, 0, 0, 0, 0, 0,
  /* 65757 */ 1333, 1334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3234, 0, 0, 0,
  /* 65789 */ 0, 0, 57875, 61479, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 65805 */ 57898, 4147, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 65824 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 57875, 61650, 57875, 57875, 57898, 61653,
  /* 65842 */ 57898, 57898, 57898, 57898, 584, 57875, 57875, 57875, 57875, 57875, 61511, 57972, 57972, 57972, 57972,
  /* 65857 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 4185, 0, 0, 0, 0,
  /* 65878 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58282, 0, 57898, 57898, 57898, 57898, 58298, 57898,
  /* 65893 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 65908 */ 58352, 57898, 584, 3613, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 65928 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2198, 584, 584, 2201, 584, 57875, 61565,
  /* 65948 */ 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61579,
  /* 65963 */ 57972, 57972, 0, 4238, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 61589, 57875, 61590, 57875, 57875, 57898,
  /* 65983 */ 57898, 61594, 57898, 61595, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 4257, 584, 4258, 584, 584,
  /* 66000 */ 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 66016 */ 57875, 57898, 57875, 60471, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 66031 */ 57972, 57972, 60146, 57972, 57972, 57972, 57972, 57972, 60150, 60151, 57972, 57972, 57972, 57972, 57972,
  /* 66046 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59084, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 66061 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59112, 57875, 57972, 57972,
  /* 66076 */ 61611, 57972, 61612, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 57875, 57875,
  /* 66094 */ 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 1023, 584, 584, 584, 584, 584,
  /* 66111 */ 584, 1054, 1056, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 58221, 57875, 57875, 57875, 427,
  /* 66130 */ 414, 0, 0, 0, 131072, 0, 357, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 485, 485, 485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 66160 */ 518, 522, 522, 522, 522, 518, 522, 518, 522, 522, 522, 522, 522, 522, 57893, 57893, 57893, 57916, 57893,
  /* 66179 */ 57893, 57893, 57893, 57916, 57893, 57927, 601, 57959, 601, 57959, 57959, 601, 601, 57959, 57959, 601,
  /* 66195 */ 57959, 601, 601, 57959, 57959, 57959, 57959, 57959, 57959, 57927, 57971, 57927, 57971, 57971, 57971,
  /* 66210 */ 57971, 57971, 57971, 57971, 57971, 57971, 57971, 57971, 57971, 57990, 57990, 57990, 57959, 57990, 57990,
  /* 66225 */ 57999, 661, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 673, 0,
  /* 66250 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 0, 714,
  /* 66283 */ 715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 66315 */ 352, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 298, 0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
  /* 66346 */ 673, 0, 0, 0, 833, 0, 838, 0, 824, 0, 850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
  /* 66377 */ 0, 0, 836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 0, 0, 817, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0,
  /* 66410 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 797, 758, 0, 0, 801, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
  /* 66442 */ 824, 0, 0, 57875, 57875, 58222, 57875, 57875, 57875, 57875, 58243, 58246, 57875, 57875, 58255, 57875,
  /* 66458 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58769, 57875, 57875, 57875, 57875, 57875, 57875, 58777,
  /* 66473 */ 57875, 57875, 58779, 57875, 57875, 57875, 57875, 58784, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 66488 */ 57875, 0, 0, 57875, 0, 57875, 57875, 0, 57898, 57875, 58454, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 66505 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59624, 59625, 57972, 57972, 57972, 57972, 57972,
  /* 66520 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61026,
  /* 66535 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875,
  /* 66550 */ 58273, 57875, 57875, 57875, 57875, 0, 57898, 57898, 58292, 57898, 57898, 57898, 57898, 58313, 58316,
  /* 66565 */ 57898, 57898, 58325, 57898, 57898, 57898, 57898, 57898, 58343, 57898, 57898, 57898, 57898, 58354, 58243,
  /* 66580 */ 58441, 57875, 57875, 57875, 58447, 57875, 57875, 0, 0, 58436, 0, 57875, 57875, 0, 58313, 57875, 58273,
  /* 66597 */ 57875, 57972, 57972, 58461, 57972, 57972, 57972, 57972, 58482, 58486, 58492, 57972, 58497, 57972, 57972,
  /* 66612 */ 57972, 57972, 57972, 57972, 60780, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 66627 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 66642 */ 60129, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 58515, 57972, 57972, 57972,
  /* 66657 */ 57972, 0, 57875, 57875, 57875, 58273, 57875, 57875, 584, 584, 584, 1078, 584, 584, 155944, 1196, 0, 304,
  /* 66675 */ 0, 0, 308, 0, 0, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 0, 1224, 0, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
  /* 66706 */ 1377, 1237, 0, 0, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0,
  /* 66737 */ 0, 0, 0, 0, 0, 0, 0, 1842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1374,
  /* 66770 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1236, 0, 0, 0, 1240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0,
  /* 66802 */ 0, 0, 1258, 0, 0, 0, 0, 0, 0, 0, 872, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 66822 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 66837 */ 57875, 57875, 57875, 57875, 57875, 60305, 57875, 57875, 0, 0, 0, 0, 0, 1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 66860 */ 1340, 0, 0, 1210, 0, 0, 0, 1346, 0, 1348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 844, 0, 0, 0, 0, 0, 0, 849, 0, 0,
  /* 66889 */ 849, 0, 0, 0, 0, 0, 849, 849, 0, 0, 0, 829, 0, 0, 0, 1356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1362, 1323, 0, 1346,
  /* 66918 */ 1365, 0, 1368, 0, 0, 1282, 0, 0, 0, 0, 0, 1376, 0, 0, 0, 0, 0, 0, 0, 1212, 1213, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 66947 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 0, 0, 0, 0, 0, 0, 0, 1376, 0, 0, 1258, 1376,
  /* 66977 */ 58727, 872, 58729, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58740, 57875, 57875,
  /* 66992 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58759, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67007 */ 57875, 57875, 58770, 57875, 57875, 58773, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67022 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59854, 57875, 59856,
  /* 67037 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 58845, 57898, 57898, 57898,
  /* 67052 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58857, 57898, 57898, 57898, 58861, 57898, 57898, 57898,
  /* 67067 */ 57898, 57898, 57898, 57898, 57898, 57898, 58869, 57898, 57898, 57898, 57898, 57898, 57898, 58347, 584,
  /* 67082 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1084, 584, 584, 584,
  /* 67102 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57972, 57972, 61182,
  /* 67117 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59054,
  /* 67132 */ 59056, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 67147 */ 57972, 57972, 61205, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0,
  /* 67164 */ 0, 58875, 58877, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 67179 */ 57898, 57898, 58898, 58899, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 1564, 584, 584, 584,
  /* 67195 */ 584, 1570, 584, 584, 584, 584, 1576, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1597, 584, 584,
  /* 67215 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1610, 584, 584, 584, 584, 584, 584, 2211, 584, 584, 584,
  /* 67236 */ 584, 584, 584, 584, 584, 584, 584, 2221, 2223, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 67254 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 67269 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 67284 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60131, 60132, 57972, 57972, 57972, 584, 1615, 584, 584,
  /* 67300 */ 584, 584, 584, 584, 584, 584, 584, 1623, 584, 584, 584, 1630, 1632, 584, 584, 584, 584, 584, 584, 584,
  /* 67320 */ 584, 584, 584, 584, 584, 584, 584, 584, 1628, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 67341 */ 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61004, 57875, 57898,
  /* 67357 */ 57875, 57972, 61009, 57972, 584, 1655, 57875, 59001, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67372 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 59015, 57898, 57875, 57875, 57875, 59019, 57972, 57972,
  /* 67387 */ 57972, 57972, 59025, 57972, 57972, 57972, 57875, 60536, 57875, 57875, 57875, 584, 3195, 584, 584, 584, 0,
  /* 67404 */ 0, 3197, 3198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 362, 0, 0, 0, 0, 0, 0, 0, 368, 0,
  /* 67435 */ 298, 0, 0, 0, 57972, 59031, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59052,
  /* 67452 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59065, 57972, 57972,
  /* 67467 */ 57972, 57972, 59070, 57972, 57972, 57972, 57972, 57972, 57972, 61043, 57972, 57972, 57972, 57972, 57972,
  /* 67482 */ 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 0, 3714, 0, 0, 0, 0, 0, 0, 0, 3720, 57972, 57972, 57972,
  /* 67505 */ 57972, 59075, 57972, 57972, 57972, 59079, 57972, 57972, 57972, 59086, 59088, 57972, 57972, 57972, 57972,
  /* 67520 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59111, 57875, 57875,
  /* 67535 */ 57875, 57875, 57875, 57875, 57875, 58283, 0, 57898, 57898, 57898, 57898, 57898, 58301, 57898, 58310,
  /* 67550 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58353, 57898,
  /* 67565 */ 3612, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 67586 */ 3629, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2152, 584, 584, 584, 584, 584, 584, 584,
  /* 67607 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67625 */ 57875, 61287, 57875, 57875, 57972, 57972, 57972, 57972, 1802, 0, 0, 0, 0, 0, 1808, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 67648 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828, 0, 0, 0, 0, 0, 0, 1838, 0, 0, 0, 0, 0, 1844, 0, 0, 0, 0, 0,
  /* 67680 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1861, 0, 0, 0, 0, 0, 0, 0, 1920, 1921, 0, 0, 0, 1924, 0, 0, 0, 0, 0,
  /* 67710 */ 1929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1250, 0, 1252, 0, 0, 368, 368, 0, 0, 0, 0, 0, 0,
  /* 67741 */ 0, 0, 0, 0, 1942, 0, 1944, 1920, 58727, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67760 */ 57875, 59303, 57875, 57875, 57875, 59308, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67775 */ 57875, 2987, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 67791 */ 57898, 60673, 57898, 57898, 57898, 57898, 57898, 59318, 57875, 57875, 57875, 57875, 59322, 57875, 57875,
  /* 67806 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59334, 57875, 57875, 59338, 57875, 57875,
  /* 67821 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 67836 */ 57875, 57875, 59369, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 0, 57898, 59384,
  /* 67851 */ 57875, 57875, 57875, 57875, 59585, 59586, 57875, 57898, 59588, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 67866 */ 57972, 57972, 57972, 57972, 57972, 57972, 59601, 57972, 57972, 57972, 57972, 59607, 57972, 57972, 57972,
  /* 67881 */ 57972, 57972, 57972, 57972, 57972, 57972, 61300, 57972, 57972, 57972, 61301, 61302, 57972, 57972, 57972,
  /* 67896 */ 57972, 57972, 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1873, 0, 0, 0, 0, 0,
  /* 67920 */ 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6299648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 67952 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4358144, 4358144, 4358144, 4825088, 4358144, 57972, 57972, 57972, 57972, 57972,
  /* 67971 */ 59618, 57972, 57972, 57972, 57972, 59622, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 67986 */ 57972, 57972, 57972, 59635, 57972, 57972, 57972, 59640, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 68001 */ 57972, 60515, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 68016 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584,
  /* 68032 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2475, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0,
  /* 68064 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58774, 57875, 57875, 57875,
  /* 68079 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 68094 */ 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61125, 57875,
  /* 68109 */ 57875, 59890, 57875, 59892, 57875, 57875, 57875, 57875, 57875, 59896, 57875, 57875, 57875, 57875, 57875,
  /* 68124 */ 57875, 57875, 0, 0, 2563, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59395,
  /* 68141 */ 59396, 57898, 57898, 57898, 59402, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68156 */ 57898, 57898, 57898, 57898, 57898, 59416, 57898, 57898, 57898, 57898, 59922, 57898, 57898, 59926, 57898,
  /* 68171 */ 57898, 57898, 59930, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59939, 57898,
  /* 68186 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60387, 57898, 57898, 57898, 57898, 57898,
  /* 68201 */ 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 68220 */ 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60075, 57875, 57875, 57875,
  /* 68237 */ 57875, 57875, 57898, 57898, 57898, 57898, 59975, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68252 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 68270 */ 584, 584, 584, 584, 584, 584, 3377, 584, 584, 584, 584, 584, 584, 2710, 584, 584, 584, 2713, 584, 584,
  /* 68290 */ 584, 584, 584, 2718, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 60074, 57875,
  /* 68308 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 68323 */ 58778, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 68338 */ 58796, 57875, 57875, 60081, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 68353 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60099, 57972, 57972, 60103, 57972, 57972, 57972, 60107,
  /* 68368 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60116, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 68383 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 68398 */ 57972, 57972, 57875, 61208, 57875, 584, 3866, 584, 0, 0, 0, 0, 0, 2844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 68423 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3235, 0, 0, 0, 0, 0, 0, 2869, 0, 0, 0, 0, 0, 0, 0,
  /* 68456 */ 0, 2877, 0, 0, 0, 2881, 0, 0, 0, 2885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 68487 */ 0, 0, 0, 0, 0, 139264, 147456, 0, 0, 0, 540672, 57875, 60284, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 68506 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60296, 57875, 57875, 57875, 57875, 60299, 57875,
  /* 68521 */ 60300, 57875, 60301, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 68536 */ 57875, 57875, 59900, 57875, 57875, 57875, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68553 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60343, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68568 */ 57898, 57898, 57898, 57898, 57898, 57898, 57875, 57875, 60309, 57875, 57875, 60313, 57875, 57875, 57875,
  /* 68583 */ 57875, 57875, 57875, 57875, 57875, 60321, 57875, 57875, 57875, 60324, 57875, 57875, 57875, 57875, 57875,
  /* 68598 */ 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68614 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584,
  /* 68630 */ 584, 584, 3056, 584, 584, 584, 584, 584, 0, 0, 0, 0, 57898, 57898, 60334, 57898, 57898, 57898, 57898,
  /* 68649 */ 57898, 57898, 57898, 57898, 57898, 60341, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68664 */ 57898, 57898, 57898, 57898, 57898, 60353, 57898, 57898, 57898, 57898, 60356, 57898, 60357, 57898, 60358,
  /* 68679 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60366, 57898, 57898, 60370, 57898, 57898, 57898,
  /* 68694 */ 57898, 57898, 57898, 57898, 57898, 60378, 57898, 57898, 57898, 57898, 57898, 59389, 57898, 57898, 57898,
  /* 68709 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59409,
  /* 68724 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59459, 57898, 57898, 57898, 57898, 57898,
  /* 68739 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 2135, 584, 584,
  /* 68755 */ 584, 57898, 60381, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 68770 */ 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 3052, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 68788 */ 584, 584, 584, 3934, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 68805 */ 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61576, 57972, 61578, 57972, 57972, 57972,
  /* 68820 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61588, 57875, 57875, 584, 3060, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 68844 */ 584, 584, 584, 584, 584, 584, 584, 3075, 584, 584, 584, 584, 3078, 584, 584, 3080, 584, 3081, 584, 584,
  /* 68864 */ 584, 584, 584, 584, 2689, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 68885 */ 584, 584, 584, 584, 584, 584, 584, 2708, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875,
  /* 68903 */ 57875, 57875, 57875, 57875, 57875, 60467, 57875, 57898, 57875, 57875, 57972, 57972, 60473, 57972, 57972,
  /* 68918 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4125, 0, 4127, 0,
  /* 68940 */ 57875, 57875, 57875, 57875, 57875, 61476, 57875, 57875, 60481, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 68955 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60496, 57972, 57972, 57972, 57972,
  /* 68970 */ 60499, 57972, 57972, 60501, 57972, 60502, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61198,
  /* 68985 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875,
  /* 69000 */ 57875, 57875, 584, 584, 584, 0, 0, 0, 3712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57972, 57972, 57972, 57972,
  /* 69023 */ 60510, 57972, 57972, 60514, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60523, 57972,
  /* 69038 */ 57972, 57972, 60526, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0, 0, 0, 0,
  /* 69056 */ 0, 0, 0, 0, 4124, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 61477, 61478, 57875, 57875, 60635,
  /* 69076 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 69091 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 69106 */ 60306, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60657, 57875, 57875, 0, 0, 57898, 57898,
  /* 69122 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60669, 57898, 57898, 57898, 57898, 60674, 57898,
  /* 69137 */ 57898, 57898, 57898, 57898, 57898, 57898, 60385, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 69152 */ 57898, 57898, 57898, 60394, 584, 584, 584, 584, 584, 584, 584, 584, 3058, 584, 584, 584, 60696, 57898,
  /* 69170 */ 57898, 57898, 60700, 57898, 60702, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 69188 */ 3370, 584, 3373, 584, 584, 584, 584, 3378, 584, 584, 584, 3381, 57972, 60774, 57972, 60777, 57972, 57972,
  /* 69206 */ 57972, 57972, 60782, 57972, 57972, 57972, 60785, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 69221 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60791, 57972, 57972, 57972,
  /* 69236 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 60904, 57875, 57875, 57875,
  /* 69251 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898,
  /* 69266 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60363, 57898, 57898, 57898,
  /* 69281 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 69296 */ 60364, 57898, 57898, 57898, 57898, 60368, 57898, 57898, 60372, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 69311 */ 57898, 57898, 60380, 57898, 57898, 57898, 60931, 57898, 57898, 57898, 57898, 57898, 60937, 57898, 57898,
  /* 69326 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60950,
  /* 69341 */ 57898, 60951, 57898, 57898, 57898, 57898, 57898, 57898, 58883, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 69356 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 69372 */ 584, 584, 584, 584, 584, 584, 4013, 584, 584, 584, 584, 584, 584, 584, 61011, 57972, 57972, 57972, 57972,
  /* 69391 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61023, 57972, 57972, 57972, 57972,
  /* 69406 */ 57972, 57972, 57972, 57972, 61031, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875,
  /* 69421 */ 57875, 59688, 584, 584, 584, 584, 2349, 2350, 0, 2351, 0, 0, 0, 0, 2353, 0, 2354, 0, 0, 0, 0, 0, 584, 584,
  /* 69445 */ 584, 584, 3806, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3816, 584, 584, 584,
  /* 69466 */ 584, 584, 3821, 584, 3823, 584, 584, 584, 584, 584, 584, 584, 3808, 584, 584, 584, 584, 584, 584, 584,
  /* 69486 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875,
  /* 69506 */ 57875, 57875, 59577, 57875, 57875, 57875, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 61176,
  /* 69522 */ 57875, 57875, 57875, 57898, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61187,
  /* 69537 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 59349, 57875, 59687, 57875, 584, 2195, 584, 2348,
  /* 69553 */ 584, 2350, 0, 2351, 0, 0, 0, 0, 2353, 0, 2354, 0, 0, 0, 0, 0, 3870, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3875, 0, 0,
  /* 69582 */ 0, 0, 0, 0, 0, 3731, 0, 0, 0, 0, 3883, 0, 0, 0, 0, 0, 3888, 0, 0, 0, 0, 0, 0, 58727, 0, 57875, 59294,
  /* 69609 */ 57875, 57875, 57875, 57875, 57875, 59299, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 69624 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 2564, 57898, 57898, 57898, 57898,
  /* 69641 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61250, 57898, 57898, 57898, 61254, 57898, 57898, 57898,
  /* 69656 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 61262, 57898, 584,
  /* 69671 */ 584, 584, 584, 584, 3922, 584, 584, 584, 584, 584, 584, 3387, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 69692 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2679, 584, 584, 584, 584,
  /* 69713 */ 584, 584, 3926, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3935, 584, 584, 584,
  /* 69733 */ 57875, 57875, 57875, 57875, 57875, 61285, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972,
  /* 69748 */ 57972, 57972, 57972, 61299, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 69763 */ 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 69789 */ 0, 0, 0, 0, 0, 0, 0, 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4276224, 0, 0, 0, 0, 0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
  /* 69821 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 0,
  /* 69852 */ 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992, 212992,
  /* 69865 */ 57972, 61292, 57972, 57972, 57972, 61296, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 69880 */ 57972, 57972, 57972, 57972, 61305, 57972, 57972, 57972, 57875, 57875, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 69900 */ 720, 0, 0, 0, 0, 0, 0, 368, 368, 368, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0,
  /* 69931 */ 0, 0, 0, 0, 0, 0, 792, 0, 0, 693, 796, 0, 0, 0, 0, 0, 803, 57875, 57875, 57875, 61509, 57875, 57972,
  /* 69954 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 0, 0,
  /* 69970 */ 4182, 4183, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58768, 57875, 57875,
  /* 69989 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 70004 */ 57875, 58788, 57875, 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 584, 1196, 1778, 0, 0, 0, 0,
  /* 70023 */ 1785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 434176, 871, 871, 871, 871, 871, 871, 871, 871,
  /* 70050 */ 871, 871, 871, 871, 871, 871, 871, 871, 6300519, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 0,
  /* 70071 */ 0, 941, 941, 57875, 57875, 61537, 57875, 57875, 57875, 57898, 57898, 57898, 61544, 57898, 57898, 57898,
  /* 70087 */ 57898, 57898, 57898, 57898, 61551, 584, 584, 584, 4211, 584, 584, 584, 584, 584, 584, 584, 584, 4219,
  /* 70105 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 58807, 57875, 57875, 57875, 50621, 58727, 942, 57898,
  /* 70120 */ 58816, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58828, 58834, 57898, 57898,
  /* 70135 */ 57898, 57898, 57898, 57898, 57898, 57898, 60936, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 70150 */ 57898, 60944, 57898, 57898, 60946, 57898, 60948, 60949, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 70165 */ 57898, 57898, 60386, 57898, 57898, 57898, 60388, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 70181 */ 584, 584, 3055, 584, 584, 584, 584, 3059, 584, 57875, 57875, 57875, 61567, 57875, 57875, 57972, 57972,
  /* 70198 */ 57972, 61573, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61581, 0, 0, 0, 0, 0, 4239, 4240,
  /* 70216 */ 4241, 0, 4243, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59843, 57875, 57875,
  /* 70232 */ 59847, 57875, 57875, 57875, 59851, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 70247 */ 59860, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 60292, 57875, 60294, 57875,
  /* 70262 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 70277 */ 57875, 57875, 60307, 0, 0, 429, 429, 0, 131072, 429, 0, 0, 0, 429, 0, 0, 456, 0, 0, 429, 0, 486, 486, 486,
  /* 70301 */ 0, 0, 362, 362, 362, 362, 505, 362, 362, 362, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
  /* 70323 */ 486, 486, 57894, 57894, 57894, 57917, 57894, 57894, 57894, 57894, 57917, 57894, 57917, 602, 57894, 602,
  /* 70339 */ 57894, 57894, 602, 602, 57894, 57894, 602, 57894, 602, 602, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70355 */ 57917, 57894, 57917, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894, 57894,
  /* 70370 */ 57991, 57991, 57991, 57894, 602, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308,
  /* 70391 */ 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 816, 0, 0, 0, 0, 0, 57875, 57875, 58217, 57875, 57875, 57875,
  /* 70416 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898,
  /* 70431 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58829, 57898, 57898, 57898, 57898, 57898, 57875,
  /* 70446 */ 57875, 57875, 57875, 58276, 57875, 57875, 57875, 0, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 70461 */ 57898, 57898, 57898, 57898, 57898, 57898, 58330, 57898, 57898, 57898, 57898, 58346, 57898, 57898, 57898,
  /* 70476 */ 57898, 57898, 57898, 57898, 60703, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 70494 */ 3371, 584, 584, 3375, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2149, 584, 584, 584, 584, 584,
  /* 70514 */ 584, 584, 584, 584, 2160, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3813, 584,
  /* 70535 */ 584, 584, 584, 584, 584, 584, 3818, 584, 3820, 584, 584, 584, 584, 584, 584, 584, 57898, 57898, 57898,
  /* 70554 */ 58330, 57898, 57898, 58346, 584, 584, 584, 584, 584, 584, 1046, 584, 584, 584, 584, 584, 1065, 584, 584,
  /* 70573 */ 584, 584, 1083, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 70589 */ 57898, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61189,
  /* 70604 */ 57972, 57972, 57972, 57972, 58440, 57875, 57875, 58260, 57875, 57875, 58276, 57875, 0, 0, 57875, 0, 58260,
  /* 70621 */ 58260, 0, 58452, 57875, 57875, 58276, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 58483, 57972,
  /* 70636 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61460, 0, 0, 0, 0, 0, 0, 4121, 0, 0, 0, 0, 0, 0,
  /* 70658 */ 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 58217, 0, 57875, 57875, 0, 57898, 58453,
  /* 70676 */ 57875, 57875, 57972, 57972, 58456, 57972, 57972, 57972, 57972, 57972, 57972, 58488, 57972, 57972, 57972,
  /* 70691 */ 58502, 57972, 57972, 57972, 57972, 58520, 57972, 57972, 57972, 0, 57875, 57875, 57875, 57875, 58276,
  /* 70706 */ 57875, 584, 584, 584, 584, 1083, 584, 155944, 1196, 0, 1197, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 2362, 2363, 0,
  /* 70729 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2379, 0, 0, 0, 0, 1208, 0, 0, 0, 0, 0, 0, 0,
  /* 70762 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 57875, 57875, 58800,
  /* 70791 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942, 57898, 57898, 57898, 57898,
  /* 70806 */ 57898, 57898, 57898, 57898, 58823, 57898, 57898, 57898, 58831, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 70821 */ 57898, 57898, 59927, 57898, 57898, 57898, 57898, 59932, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 70836 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 58860, 57898, 57898, 57898,
  /* 70851 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 1573, 584, 584,
  /* 70867 */ 584, 1582, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 70888 */ 584, 584, 584, 584, 584, 584, 57875, 57875, 59574, 57875, 59576, 57875, 59578, 57875, 57875, 584, 584,
  /* 70905 */ 57875, 57875, 58745, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 70920 */ 0, 57875, 57898, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59028,
  /* 70935 */ 57972, 57972, 57972, 59037, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 70950 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 70965 */ 57972, 57972, 57972, 57972, 60133, 57972, 0, 1833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 70991 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 1865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 71025 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0, 0, 0, 1891, 0, 0, 0, 0, 0, 1896, 0, 0, 0, 0, 0, 0, 1901, 0,
  /* 71057 */ 1903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 71090 */ 0, 0, 0, 4358144, 4359016, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144, 4358144,
  /* 71103 */ 4358144, 4358144, 4358144, 57875, 57875, 57875, 57875, 59353, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 71117 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59373, 57875, 57875, 57875,
  /* 71132 */ 57875, 57875, 50621, 0, 57898, 57898, 57898, 57898, 57898, 59923, 57898, 57898, 57898, 57898, 57898,
  /* 71147 */ 57898, 59931, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59938, 57898, 57898, 57898, 57898,
  /* 71162 */ 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 3364, 584, 584, 584, 584, 584, 3369, 584, 584,
  /* 71180 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 1626, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 71201 */ 584, 584, 1642, 584, 584, 584, 584, 584, 584, 57898, 57898, 57898, 59419, 57898, 57898, 57898, 57898,
  /* 71218 */ 57898, 57898, 57898, 57898, 57898, 57898, 59431, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 71233 */ 57898, 57898, 57898, 59443, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 59979, 57898, 57898,
  /* 71248 */ 57898, 59982, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 2650, 584,
  /* 71265 */ 584, 584, 584, 584, 584, 584, 584, 1587, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 71286 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3815, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 71307 */ 584, 584, 584, 584, 584, 584, 584, 2174, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2187, 584,
  /* 71328 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2200, 584, 584, 584, 584, 584, 2143, 584, 584, 584,
  /* 71349 */ 584, 584, 584, 584, 584, 584, 2156, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 71370 */ 584, 584, 3074, 584, 584, 584, 584, 584, 584, 584, 3079, 584, 584, 584, 584, 584, 584, 584, 57875, 57875,
  /* 71390 */ 57875, 59584, 57875, 57875, 57875, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71405 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71420 */ 60106, 57972, 57972, 57972, 57972, 57972, 57972, 59615, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71435 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59630, 57972, 57972, 57972, 57972, 57972,
  /* 71450 */ 57972, 57972, 57972, 57972, 57972, 57972, 59643, 57972, 59678, 57972, 57972, 57972, 57972, 57972, 57875,
  /* 71465 */ 57875, 57875, 57875, 57875, 584, 584, 584, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2839, 0,
  /* 71491 */ 0, 0, 0, 0, 0, 0, 57898, 57898, 57898, 57898, 57898, 60337, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 71509 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 71524 */ 57898, 61139, 57898, 57898, 57898, 57898, 584, 3800, 584, 584, 584, 0, 0, 0, 0, 0, 3241, 0, 0, 0, 0, 3246,
  /* 71546 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2860, 0, 0, 0, 0, 0, 0, 0, 57898,
  /* 71579 */ 57898, 57898, 60699, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 3365, 584, 584, 584,
  /* 71596 */ 584, 584, 584, 3372, 584, 3374, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3390, 584, 584,
  /* 71616 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3396, 584, 584, 584, 584, 584, 584, 584, 57972, 57972,
  /* 71636 */ 60776, 57972, 60778, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71651 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71666 */ 60156, 57972, 60158, 57972, 57972, 57972, 584, 584, 584, 3929, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 71684 */ 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61288, 57875, 57972,
  /* 71701 */ 57972, 57972, 57972, 57972, 57972, 57972, 59684, 57875, 59686, 57875, 57875, 2345, 584, 2347, 584, 584, 0,
  /* 71718 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1298, 1880, 0, 0, 0, 0, 1305, 1305, 0, 0, 0, 0, 0, 0, 0,
  /* 71749 */ 57875, 57875, 61566, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71764 */ 57972, 57972, 61580, 57972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 71785 */ 57875, 57875, 57875, 60910, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898,
  /* 71800 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584,
  /* 71817 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972,
  /* 71834 */ 57972, 57972, 57972, 57972, 584, 584, 584, 4316, 584, 61661, 57875, 57972, 57972, 57972, 57972, 61665,
  /* 71850 */ 57972, 0, 0, 0, 0, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 57875, 57972,
  /* 71868 */ 57972, 57972, 57972, 57972, 57972, 57972, 60487, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71883 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 71898 */ 57972, 57875, 57875, 584, 584, 3966, 0, 0, 0, 3968, 363, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 71925 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 0, 516096, 0, 0, 0, 0, 0, 373, 373, 0, 131072, 373,
  /* 71954 */ 0, 0, 0, 373, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0,
  /* 71987 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 139264, 147456, 0, 363, 0, 0, 603, 57895, 57895, 603, 57895,
  /* 72012 */ 603, 603, 57895, 57895, 57895, 57895, 57895, 57895, 57918, 57895, 57918, 57895, 57895, 57895, 57895,
  /* 72027 */ 57895, 57895, 57895, 57895, 57895, 57895, 57895, 57895, 57992, 57992, 57992, 57895, 603, 1, 24578, 3,
  /* 72043 */ 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
  /* 72071 */ 1218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2450, 0, 2452, 2453, 2454, 0, 2456, 0, 0,
  /* 72100 */ 0, 0, 0, 0, 57898, 57898, 58307, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 1039, 584, 584, 584,
  /* 72120 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875, 57875, 58237, 58876, 57898,
  /* 72138 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 72153 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 72170 */ 584, 584, 584, 584, 57972, 57972, 57972, 57972, 57972, 59042, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 72186 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 72201 */ 57972, 57972, 57972, 57972, 57972, 60529, 57972, 57972, 57972, 57972, 57972, 57972, 57898, 57898, 57898,
  /* 72216 */ 57898, 59420, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 72231 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60692,
  /* 72246 */ 57898, 57898, 57898, 57898, 57898, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72274 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 365, 0,
  /* 72306 */ 0, 0, 0, 364, 0, 0, 0, 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 1241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72336 */ 0, 368, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72369 */ 0, 0, 0, 0, 0, 379, 0, 0, 0, 0, 371, 0, 388, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 445, 0, 445, 0, 365, 445,
  /* 72397 */ 445, 0, 469, 0, 0, 0, 497, 497, 500, 500, 500, 500, 500, 506, 507, 500, 519, 519, 519, 519, 519, 519, 519,
  /* 72420 */ 519, 519, 519, 519, 519, 519, 519, 57896, 57896, 57896, 57919, 57896, 57896, 57896, 57896, 57919, 57896,
  /* 72437 */ 57919, 604, 57896, 604, 57896, 57896, 604, 604, 57896, 57896, 604, 57896, 604, 604, 57896, 57896, 57896,
  /* 72454 */ 57896, 57896, 57896, 57919, 57896, 57919, 57896, 57896, 57896, 57896, 57896, 57896, 57896, 57896, 57896,
  /* 72469 */ 57896, 57896, 57896, 57993, 57993, 57993, 57896, 57993, 57993, 58000, 662, 1, 24578, 3, 155944, 155944,
  /* 72485 */ 298, 0, 0, 0, 0, 0, 304, 305, 0, 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2368, 0, 0, 0, 0, 0, 0,
  /* 72516 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1254, 368, 368, 0, 0, 1257, 0, 0, 0, 1260, 0, 57972, 57972,
  /* 72544 */ 57972, 57972, 58516, 57972, 57972, 57972, 57972, 0, 57875, 57875, 57875, 57875, 57875, 57875, 584, 584,
  /* 72560 */ 584, 1079, 584, 584, 155944, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2415, 0, 0, 0, 0, 0, 0, 0, 0, 2423, 0, 0,
  /* 72588 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 245760, 245760, 245760, 245760, 245760, 0, 0, 0, 0, 0, 0,
  /* 72613 */ 0, 0, 0, 0, 0, 57875, 57875, 57898, 57875, 57875, 57972, 60085, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 72631 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 72646 */ 57972, 57972, 57972, 57972, 60128, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57898,
  /* 72661 */ 57898, 57898, 60355, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 72676 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 72691 */ 57898, 61143, 584, 584, 584, 584, 584, 57898, 57898, 58308, 57898, 57898, 57898, 57898, 584, 584, 584,
  /* 72708 */ 584, 584, 1040, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875, 57875,
  /* 72728 */ 57875, 58238, 0, 0, 0, 0, 0, 1299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 72760 */ 0, 0, 368, 0, 0, 0, 319488, 0, 1614, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 72783 */ 584, 584, 584, 584, 584, 584, 584, 584, 1641, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3812,
  /* 72804 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2224,
  /* 72825 */ 584, 584, 584, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 59865,
  /* 72841 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 72856 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 2037,
  /* 72871 */ 57898, 57898, 2684, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 72891 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 3822, 584, 584, 584, 584, 584,
  /* 72911 */ 57875, 57875, 57875, 60286, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 72926 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 72941 */ 57875, 57875, 50621, 2038, 57898, 57898, 584, 584, 584, 584, 3063, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 72960 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 72980 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61290, 57972, 57972, 57972, 57972, 57972,
  /* 72995 */ 57972, 60484, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73010 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73025 */ 57972, 57972, 60505, 57972, 57875, 57875, 57875, 57875, 58277, 57875, 57875, 57875, 0, 57898, 57898,
  /* 73040 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 73055 */ 57898, 58347, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 60935, 57898, 57898, 57898, 57898, 57898,
  /* 73070 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 73085 */ 57898, 57898, 57898, 57898, 59441, 57898, 57898, 59444, 57898, 57898, 57898, 57898, 57875, 57875, 57875,
  /* 73100 */ 57875, 57875, 57875, 58277, 57875, 0, 0, 57875, 0, 57875, 57875, 0, 57898, 57875, 57875, 58455, 57972,
  /* 73117 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 61048, 57875, 57875,
  /* 73132 */ 3707, 584, 584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2930, 0, 0, 0, 0, 57875, 57875, 57875,
  /* 73159 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 58521, 57972,
  /* 73174 */ 57972, 57972, 0, 57875, 58529, 57875, 57875, 58277, 57875, 1190, 584, 584, 584, 1084, 584, 155944, 1196,
  /* 73191 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2875, 0, 2876, 0, 2878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73222 */ 2892, 57875, 57875, 58801, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 50621, 58727, 942,
  /* 73237 */ 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 73252 */ 57898, 57898, 57898, 59957, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 73267 */ 57898, 57898, 57898, 57898, 57898, 57898, 59468, 57898, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 73282 */ 57898, 584, 584, 584, 584, 584, 0, 1803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73312 */ 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 1917, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73346 */ 0, 0, 0, 0, 0, 0, 0, 0, 221655, 57972, 57972, 57972, 57972, 57972, 59648, 57972, 57972, 57972, 57972,
  /* 73365 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73380 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 60527, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73395 */ 57972, 57972, 57875, 60080, 57898, 57875, 57875, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73410 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73425 */ 57972, 57972, 57972, 57972, 60792, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73440 */ 60111, 57972, 60113, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73455 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73470 */ 57972, 57972, 59069, 57972, 57972, 584, 3086, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,
  /* 73489 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 2672, 584, 2674,
  /* 73510 */ 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 60507, 57972, 57972, 57972, 57972, 57972,
  /* 73528 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73543 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 59642, 0, 0, 0, 3240, 0, 0,
  /* 73561 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2427, 0, 0, 0, 57972, 57972,
  /* 73593 */ 61013, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73608 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73623 */ 57972, 59641, 57972, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 61110, 57875, 57875, 57875, 57875,
  /* 73638 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57898, 57898, 57898, 57898, 57898, 57898, 57898,
  /* 73653 */ 57898, 57898, 57898, 57898, 57898, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 57875,
  /* 73672 */ 57972, 57972, 57972, 57972, 57972, 57972, 61196, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972,
  /* 73687 */ 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57972, 57875, 57875, 57875, 584, 584, 584, 0, 0, 0, 0, 0,
  /* 73706 */ 0, 2437, 0, 0, 0, 0, 2442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368, 368, 0,
  /* 73738 */ 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73770 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2310144, 2310144, 0, 0, 0,
  /* 73800 */ 2310144, 0, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1810, 1811,
  /* 73827 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 73861 */ 0, 0, 0, 2310144, 0, 2310144, 0, 0, 0, 0, 0, 2310144, 0, 0, 0, 0, 2310144, 2310144, 0, 2310144, 0,
  /* 73882 */ 2310144, 0, 0, 0, 2310144, 0, 0, 0, 2310144, 0, 0, 2310144, 2310764, 0, 2310144, 2310764, 2310764,
  /* 73899 */ 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764,
  /* 73910 */ 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764, 2310764,
  /* 73921 */ 2310764, 2310144, 1, 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0,
  /* 73944 */ 0, 0, 0, 0, 0, 0, 0, 0, 2390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1226, 0, 0,
  /* 73977 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2318336, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74008 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 0, 0, 0, 0, 0, 4857856,
  /* 74038 */ 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 1302, 0, 0, 0, 0, 0, 0,
  /* 74067 */ 1310, 0, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74097 */ 0, 0, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 694, 0, 0, 697, 0, 0, 0, 0,
  /* 74127 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2930, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 57875, 57875, 57875,
  /* 74151 */ 57875, 57875, 60283, 57875, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 2335207, 2335207,
  /* 74175 */ 2335207, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 2335240, 2335240, 2335240, 2335240, 2335240,
  /* 74191 */ 2335240, 2335240, 2335240, 2335240, 2335240, 2335240, 2335240, 2335240, 2335240, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74208 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2335240, 2335240, 1,
  /* 74237 */ 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74264 */ 0, 2417, 0, 2419, 0, 0, 0, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2359296, 2359296, 2359296, 1,
  /* 74290 */ 24578, 3, 0, 0, 4366336, 0, 0, 0, 0, 0, 304, 305, 0, 4268032, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74317 */ 0, 2471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57875, 57875, 57875, 57875, 60888, 57875, 57875,
  /* 74341 */ 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 57875, 0, 0, 0, 0,
  /* 74358 */ 2367488, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74388 */ 139264, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5480448, 0, 871, 0, 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0,
  /* 74413 */ 0, 0, 0, 0, 0, 0, 0, 0, 5259264, 0, 0, 0, 0, 0, 0, 0, 1839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74445 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1321, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
  /* 74477 */ 0, 0, 0, 4857856, 4874240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74507 */ 768, 0, 673, 768, 0, 772, 773, 0, 0, 0, 0, 1, 24578, 3, 155944, 155944, 298, 0, 0, 0, 0, 0, 304, 305, 0,
  /* 74532 */ 0, 308, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74565 */ 0, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 212992, 212992, 212992, 212992, 212992, 212992,
  /* 74587 */ 212992, 212992, 212992, 212992, 212992, 212992, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74611 */ 0, 0, 329, 329, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212992, 212992, 0, 0, 0, 0, 0, 4366336, 0, 0, 0,
  /* 74639 */ 0, 0, 0, 0, 0, 4268032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
  /* 74672 */ 304, 0, 0, 0, 0, 5840896, 5849088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6275072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74701 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5373952, 5734400,
  /* 74730 */ 6045696, 0, 6258688, 6447104, 0, 0, 6127616, 0, 6348800, 5906432, 0, 5537792, 0, 4882432, 0, 0, 0, 0, 0,
  /* 74749 */ 0, 0, 0, 5939200, 0, 0, 5677056, 0, 0, 5775360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5693440, 0, 6496256,
  /* 74772 */ 5144576, 5136384, 0, 5914624, 0, 0, 5005312, 0, 0, 0, 5120000, 5136384, 0, 0, 0, 0, 0, 0, 0, 1895, 0, 0,
  /* 74794 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2376, 0, 0, 0, 0, 0, 0, 0,
  /* 74826 */ 5513216, 5783552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 74856 */ 57875, 57875, 57875, 57875
];

JSONiqParser.EXPECTED =
[
  /*    0 */ 170, 186, 1558, 230, 307, 732, 246, 1073, 744, 276, 262, 292, 335, 351, 367, 383, 399, 415, 431, 1062,
  /*   20 */ 1729, 1725, 1661, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 461, 477, 493, 1104,
  /*   38 */ 509, 537, 1177, 579, 1466, 550, 595, 624, 1359, 970, 1238, 1543, 640, 445, 669, 685, 701, 717, 760, 1284,
  /*   58 */ 790, 832, 1572, 862, 891, 774, 907, 923, 939, 955, 608, 986, 1002, 1018, 1047, 1089, 803, 1120, 1162, 653,
  /*   78 */ 1934, 1888, 1193, 1223, 1254, 1315, 1331, 816, 1375, 1391, 1407, 1299, 1423, 1438, 1482, 1512, 1585, 1345,
  /*   96 */ 1919, 1528, 1601, 1682, 1698, 1714, 1031, 1748, 1857, 1764, 1948, 1780, 1616, 1453, 846, 1796, 214, 1842,
  /*  114 */ 1873, 1904, 1964, 1980, 1996, 521, 2012, 2028, 2044, 1207, 2060, 1646, 1631, 200, 2076, 875, 2092, 1811,
  /*  132 */ 2108, 2124, 2140, 2156, 319, 2172, 1826, 2188, 1146, 2204, 2220, 1269, 1133, 2236, 563, 2252, 1497, 2268,
  /*  150 */ 2284, 2300, 1731, 1666, 2308, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
  /*  168 */ 1731, 1732, 2324, 2328, 2330, 2330, 2330, 2337, 2330, 2330, 2331, 2335, 2348, 2341, 2345, 2352, 2355, 2359,
  /*  186 */ 2363, 2367, 2371, 2375, 3276, 3276, 5045, 2381, 3276, 3276, 2387, 3276, 3276, 3498, 3276, 3276, 2394, 5076,
  /*  204 */ 3239, 3276, 3276, 3276, 3276, 5091, 3276, 5100, 3276, 3276, 3276, 3276, 2932, 3037, 4952, 3276, 3276, 2931,
  /*  222 */ 4555, 3276, 3520, 3276, 3276, 5181, 4594, 4599, 2575, 3266, 3276, 3276, 3276, 3276, 2425, 2560, 2560, 2560,
  /*  240 */ 2527, 2431, 2431, 2431, 2431, 2554, 2431, 2433, 2500, 2500, 2500, 2500, 2500, 2558, 2471, 2403, 2403, 2403,
  /*  258 */ 2403, 2403, 2590, 2483, 2431, 2431, 2431, 2431, 2431, 2510, 2500, 2500, 2500, 2500, 2515, 2402, 2403, 2403,
  /*  276 */ 2403, 2403, 2591, 2411, 3276, 3276, 3276, 4158, 3276, 3276, 2735, 2560, 2560, 2560, 2560, 2427, 2521, 3276,
  /*  294 */ 3276, 3276, 4159, 3276, 3276, 2525, 2560, 2560, 2428, 2431, 2431, 2431, 2554, 2500, 2500, 2500, 2500, 2438,
  /*  312 */ 2444, 2403, 2403, 2403, 2446, 2451, 2455, 3276, 3276, 3276, 3276, 2494, 5303, 3551, 4783, 5307, 3504, 5311,
  /*  330 */ 5315, 5319, 5323, 5327, 5331, 2500, 2500, 2531, 2401, 2403, 2403, 2403, 2621, 3276, 3276, 4169, 3276, 2412,
  /*  348 */ 2560, 2560, 2583, 2431, 2431, 2499, 2500, 2500, 2415, 2403, 2403, 2404, 2538, 3276, 4597, 3276, 2543, 2560,
  /*  366 */ 2552, 2431, 2433, 2500, 2500, 2565, 2403, 2403, 2474, 3276, 4598, 2606, 2561, 2431, 2434, 2500, 2569, 2403,
  /*  384 */ 2572, 4597, 2414, 2432, 2500, 2533, 2447, 4160, 2582, 2498, 2587, 2548, 2413, 2595, 2501, 2534, 2599, 2429,
  /*  402 */ 2556, 2546, 2605, 2610, 2557, 2506, 2614, 2618, 2628, 2632, 2636, 2640, 2644, 2816, 2648, 2652, 2652, 2652,
  /*  420 */ 2657, 2661, 2652, 2653, 2665, 2669, 2673, 2677, 2681, 2685, 2689, 2693, 2697, 2701, 2707, 3276, 3276, 2840,
  /*  438 */ 2477, 3276, 3276, 2907, 3276, 3276, 2713, 3276, 3276, 3339, 3031, 3276, 3276, 4383, 3036, 3668, 3043, 3051,
  /*  456 */ 4284, 3059, 3063, 3066, 3069, 2769, 2846, 2724, 3276, 3276, 3276, 2730, 2734, 3276, 2739, 3047, 2578, 2743,
  /*  474 */ 2747, 2751, 2754, 2758, 2762, 2766, 2778, 3276, 3276, 3276, 3276, 3276, 3343, 5153, 4062, 4258, 4841, 3682,
  /*  492 */ 5600, 3152, 2787, 5087, 2939, 4102, 5467, 3193, 2793, 5221, 3228, 2799, 3276, 3276, 3276, 3276, 3101, 2838,
  /*  510 */ 3276, 3276, 3276, 2845, 4112, 3037, 3276, 3276, 2377, 5427, 4143, 3276, 3276, 3276, 3276, 4838, 4675, 3276,
  /*  528 */ 4848, 4858, 4862, 4866, 4870, 4874, 4878, 4882, 4886, 4905, 5397, 4062, 3222, 2850, 4020, 2855, 2824, 3276,
  /*  546 */ 3276, 3276, 5015, 4470, 3276, 3276, 3276, 2896, 3276, 3276, 3276, 2902, 3276, 4900, 3276, 2911, 3276, 3276,
  /*  564 */ 3276, 3276, 3613, 5554, 3276, 3276, 3276, 3276, 5560, 5166, 3276, 3276, 3276, 3276, 5567, 2781, 3276, 3276,
  /*  582 */ 3276, 3276, 2875, 3276, 3223, 3276, 2880, 2886, 3276, 3276, 3276, 3276, 4224, 2882, 3276, 3276, 3276, 5398,
  /*  600 */ 2915, 3276, 3276, 3276, 3276, 2919, 2924, 3276, 3276, 3276, 3276, 3617, 3276, 3739, 2898, 4812, 3497, 4153,
  /*  618 */ 4805, 4091, 3623, 3627, 3631, 3634, 3859, 3276, 3276, 3276, 2928, 2987, 4213, 2936, 3276, 3276, 4467, 2964,
  /*  636 */ 3276, 3276, 3953, 2938, 3893, 5512, 3017, 3018, 3017, 3891, 3003, 3895, 3894, 5529, 3011, 3023, 3025, 3276,
  /*  654 */ 3276, 3276, 3707, 3276, 3848, 3053, 3852, 3120, 4159, 3858, 3276, 2383, 3863, 3276, 3276, 3073, 3077, 3081,
  /*  672 */ 2851, 3086, 3276, 3276, 5542, 3276, 4541, 5345, 3096, 3106, 4491, 5219, 3110, 3114, 3126, 4557, 2865, 4815,
  /*  690 */ 5544, 5385, 5364, 3132, 3276, 2982, 2839, 3276, 3729, 3276, 4270, 3723, 3136, 4235, 3140, 3764, 5598, 3276,
  /*  708 */ 3150, 3276, 3276, 3276, 3156, 3276, 3276, 2825, 3160, 3165, 3276, 3276, 3276, 3175, 3276, 3179, 3276, 3276,
  /*  726 */ 3805, 3186, 2981, 3191, 3276, 3051, 3276, 2461, 3738, 3276, 3276, 3276, 2425, 2560, 2560, 2560, 2560, 2439,
  /*  744 */ 2431, 2431, 2431, 2431, 2431, 2498, 2500, 2500, 2500, 2500, 2500, 2559, 2505, 2403, 2403, 2403, 5396, 3389,
  /*  762 */ 3675, 3197, 2490, 3276, 3276, 3205, 3276, 3276, 3276, 3276, 3122, 3209, 3276, 3276, 3391, 3864, 3376, 3276,
  /*  780 */ 3276, 3383, 3387, 2392, 5212, 5352, 5356, 3396, 3276, 4844, 3243, 3276, 3522, 3276, 4269, 2871, 3255, 3263,
  /*  798 */ 2492, 3276, 3271, 3275, 3276, 3276, 3276, 3276, 3809, 3832, 3276, 3276, 3740, 2906, 3276, 3813, 3804, 3276,
  /*  816 */ 3276, 3276, 3276, 4476, 3276, 3498, 3276, 4008, 4579, 3937, 4012, 4024, 4028, 4032, 4035, 4042, 3281, 3276,
  /*  834 */ 3276, 3276, 4543, 3276, 3285, 3276, 3276, 3276, 3276, 4545, 3276, 3285, 3276, 3276, 4133, 3276, 4371, 3276,
  /*  852 */ 3276, 3276, 4573, 2839, 3276, 4456, 3276, 3276, 3276, 4573, 3932, 3315, 3276, 3276, 3390, 3389, 3322, 3276,
  /*  870 */ 3276, 3276, 3392, 3277, 3326, 3276, 3276, 3276, 5116, 5139, 3276, 3276, 3276, 5193, 3411, 5440, 3276, 3276,
  /*  888 */ 3276, 5200, 3329, 3337, 3341, 3523, 3926, 2783, 3216, 3347, 4437, 3354, 3276, 3276, 3359, 3276, 3276, 3367,
  /*  906 */ 3372, 3411, 3211, 3701, 3378, 4542, 3416, 3702, 3276, 2806, 3422, 3052, 4151, 5354, 4105, 3276, 3965, 3362,
  /*  924 */ 3428, 3441, 3276, 3433, 3440, 3276, 3445, 2376, 3449, 3453, 5169, 3456, 5585, 3091, 3463, 3470, 3013, 3476,
  /*  942 */ 3480, 3492, 3502, 3508, 4634, 3459, 3512, 3528, 3537, 3971, 3584, 3545, 3540, 3574, 3567, 3549, 3556, 3555,
  /*  960 */ 3560, 3564, 3571, 3581, 3594, 4363, 3598, 3600, 3604, 3611, 3276, 2709, 2963, 3276, 3214, 3102, 2964, 3276,
  /*  978 */ 3276, 2969, 3276, 2974, 4238, 2953, 3276, 4242, 3638, 3641, 3276, 3276, 4651, 3276, 5397, 3645, 3276, 3649,
  /*  996 */ 3656, 3662, 3666, 4180, 4202, 3672, 3679, 3688, 3290, 3187, 4389, 3259, 3694, 3698, 3276, 3276, 3276, 3706,
  /* 1014 */ 3276, 3910, 3818, 3055, 3711, 3718, 3276, 5550, 5615, 3276, 3722, 5068, 3727, 3276, 3276, 2466, 3733, 3276,
  /* 1032 */ 3276, 3276, 5170, 4639, 3276, 3276, 4393, 4397, 4344, 4056, 4402, 4406, 4410, 4413, 4417, 2467, 3745, 3276,
  /* 1050 */ 3276, 5400, 3388, 3714, 3756, 3276, 3276, 3276, 3276, 3762, 3276, 3768, 3276, 2719, 3276, 3276, 3276, 3276,
  /* 1068 */ 4286, 3276, 2789, 4018, 3276, 3276, 3276, 3276, 3276, 3276, 2487, 3276, 3276, 3276, 2413, 2560, 2560, 2560,
  /* 1086 */ 2560, 2560, 2430, 3772, 3089, 3780, 3276, 3784, 4853, 3276, 2382, 3793, 3276, 3276, 3276, 3276, 3800, 3804,
  /* 1104 */ 3276, 2805, 3418, 2810, 3276, 4085, 2820, 2829, 3276, 3276, 4272, 2837, 3276, 3276, 3833, 2715, 5029, 3276,
  /* 1122 */ 2876, 3817, 3054, 3823, 4119, 3959, 4851, 3276, 3276, 3829, 3276, 3276, 3276, 3276, 5366, 5471, 3276, 3276,
  /* 1140 */ 3276, 3276, 3389, 5523, 4189, 3276, 3276, 3276, 3276, 5421, 4174, 3276, 3276, 3276, 3038, 5433, 4002, 3276,
  /* 1158 */ 3276, 3436, 5437, 3318, 4980, 3837, 3276, 3276, 3276, 3276, 2382, 3844, 3276, 3276, 3276, 3741, 3276, 2382,
  /* 1176 */ 3844, 3276, 2859, 2823, 3276, 3276, 3276, 3276, 2863, 5016, 2869, 3276, 3276, 3276, 3276, 3276, 3161, 3901,
  /* 1194 */ 3276, 3349, 2930, 4590, 4213, 3276, 3276, 3908, 3914, 3920, 4121, 3276, 3311, 3276, 3276, 4530, 5014, 5020,
  /* 1212 */ 3276, 3276, 3276, 5024, 4309, 5028, 3276, 3276, 4565, 5519, 5591, 3925, 3276, 3276, 3930, 3276, 2905, 2735,
  /* 1230 */ 3931, 3276, 5293, 3936, 4617, 3276, 2735, 3941, 3276, 2949, 2839, 3276, 2975, 2979, 3276, 3876, 3276, 2986,
  /* 1248 */ 3897, 3896, 5397, 2991, 3276, 4793, 3946, 3276, 4551, 3276, 3951, 4550, 2930, 3276, 3958, 3995, 3819, 3958,
  /* 1266 */ 3957, 3276, 3941, 3276, 3032, 5494, 2830, 2958, 2994, 4725, 5504, 5510, 3276, 3276, 3276, 3276, 2920, 5516,
  /* 1284 */ 3276, 3213, 5000, 3220, 3276, 3276, 3276, 4544, 3227, 3607, 3288, 3276, 3276, 3276, 3232, 3276, 2624, 4173,
  /* 1302 */ 3276, 4178, 3276, 3276, 4184, 3276, 3276, 3276, 3276, 4473, 3276, 4123, 4188, 3963, 3276, 3485, 5429, 3981,
  /* 1320 */ 2464, 5104, 3276, 3969, 2463, 2801, 5104, 3276, 3975, 3981, 3981, 2801, 3994, 3980, 2464, 2801, 3986, 2464,
  /* 1338 */ 2465, 3993, 3989, 2888, 5459, 5461, 3999, 3276, 3276, 5123, 3276, 4479, 3276, 3276, 5146, 3276, 3276, 4950,
  /* 1356 */ 3276, 3276, 3840, 3276, 3276, 5399, 2943, 3276, 3276, 3276, 3916, 3276, 3276, 2947, 2720, 4240, 2839, 3276,
  /* 1374 */ 2953, 4046, 4038, 3276, 3276, 2841, 5499, 3276, 4050, 4054, 4060, 4066, 4818, 4070, 5410, 4078, 2479, 4075,
  /* 1392 */ 4082, 3488, 4095, 3684, 3982, 4099, 3143, 3276, 3276, 3276, 4109, 3276, 4523, 4247, 4647, 4687, 4116, 4127,
  /* 1410 */ 5500, 4140, 5134, 4157, 3276, 4164, 3276, 3276, 3276, 4773, 4168, 3276, 4369, 4193, 4707, 3117, 4199, 4206,
  /* 1428 */ 5133, 3276, 3276, 3407, 4212, 3276, 3276, 3276, 3276, 4221, 3276, 3406, 3276, 3276, 4228, 3276, 3276, 3589,
  /* 1446 */ 3276, 3276, 3276, 4232, 3276, 3276, 3276, 3276, 3495, 3276, 4930, 4055, 4146, 2996, 3976, 4569, 3276, 3276,
  /* 1464 */ 3276, 3903, 3037, 3276, 3276, 3276, 3215, 2892, 3037, 3276, 3276, 3276, 3276, 2864, 2892, 3037, 3276, 3276,
  /* 1482 */ 4303, 4478, 3276, 4246, 3276, 4729, 5282, 4251, 3276, 3276, 3276, 3389, 4255, 3276, 3276, 3276, 3533, 5165,
  /* 1500 */ 3276, 3276, 3276, 5082, 3276, 4537, 3168, 4904, 4727, 3257, 3276, 5595, 3276, 3658, 4262, 3276, 4975, 3276,
  /* 1518 */ 3276, 3363, 4267, 3276, 3276, 3590, 3276, 3276, 3363, 4267, 5147, 3276, 4949, 3276, 3276, 4307, 3276, 3276,
  /* 1536 */ 4313, 3786, 4318, 5284, 3738, 4326, 3276, 3276, 3889, 3276, 3003, 4668, 3276, 3892, 3882, 4681, 3005, 3893,
  /* 1554 */ 3004, 3251, 3009, 5357, 3276, 2426, 2440, 2431, 2434, 2511, 2517, 2445, 2398, 2408, 3276, 3276, 3276, 2419,
  /* 1572 */ 3276, 3276, 3294, 3577, 3276, 3051, 4122, 2782, 3300, 5563, 3894, 4370, 3306, 3276, 3276, 3276, 4745, 4213,
  /* 1590 */ 3690, 3276, 4276, 3883, 4281, 3276, 3276, 3276, 4290, 3276, 3276, 4324, 3404, 3276, 3465, 3276, 4330, 3276,
  /* 1608 */ 3466, 3276, 3498, 4960, 4335, 5286, 3276, 4342, 3276, 4549, 3276, 3276, 4357, 4555, 3276, 4455, 3738, 3276,
  /* 1626 */ 3276, 4735, 4555, 3276, 4561, 3276, 5036, 5061, 5531, 5065, 4431, 4718, 5506, 4701, 3276, 3276, 3276, 3276,
  /* 1644 */ 5072, 3276, 3276, 5044, 3276, 3276, 3276, 5160, 5094, 4004, 5049, 3276, 3276, 3276, 5160, 5094, 5055, 3276,
  /* 1662 */ 5095, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 5614, 3276, 3276,
  /* 1680 */ 3276, 3276, 3483, 4356, 4331, 3276, 4951, 3276, 4348, 3276, 4990, 3246, 3276, 4325, 4353, 3276, 4361, 4369,
  /* 1698 */ 4367, 3355, 4657, 3276, 3520, 4923, 4263, 3368, 3521, 4952, 4922, 4763, 4952, 3276, 3520, 3519, 4922, 4375,
  /* 1716 */ 4922, 4380, 4922, 3521, 3520, 4387, 4382, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 5103, 3276, 3276, 3276,
  /* 1734 */ 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3045, 4421, 4424, 3276, 3276,
  /* 1752 */ 3276, 4428, 3276, 3424, 4435, 4313, 4441, 4640, 4445, 2970, 3333, 3796, 3531, 4799, 5456, 3276, 2703, 4464,
  /* 1770 */ 3276, 3276, 3902, 4483, 3276, 3276, 3276, 4488, 3276, 4498, 4605, 4088, 3652, 2795, 4584, 4534, 3276, 3276,
  /* 1788 */ 3276, 3904, 3276, 3276, 3276, 3276, 4131, 4135, 2839, 4599, 3651, 3276, 4577, 3942, 4583, 4314, 5295, 3092,
  /* 1806 */ 4588, 3276, 3276, 4663, 3238, 3276, 5143, 5439, 3276, 3276, 2393, 5151, 4540, 5157, 3201, 4916, 4596, 5164,
  /* 1824 */ 3276, 5174, 3276, 5235, 3276, 5374, 3276, 5378, 5382, 5226, 5391, 3276, 3276, 3276, 3436, 5395, 2955, 2421,
  /* 1842 */ 3651, 5473, 3942, 4603, 4953, 5297, 4611, 3276, 3869, 4626, 3276, 3276, 3235, 3276, 3521, 3276, 5273, 3276,
  /* 1860 */ 4449, 4136, 4484, 4453, 5176, 4460, 3276, 3276, 5573, 3276, 3276, 4931, 3497, 3870, 2870, 4911, 3276, 3276,
  /* 1878 */ 3171, 3276, 4632, 4638, 4644, 4655, 2998, 4661, 3429, 4667, 3276, 5280, 3302, 3082, 5267, 3276, 3887, 3276,
  /* 1896 */ 3249, 3276, 3276, 5010, 4213, 3276, 3276, 4854, 4672, 4922, 3276, 5253, 3276, 4680, 3276, 5254, 5342, 4685,
  /* 1914 */ 4987, 4691, 3854, 3276, 4698, 3276, 5497, 3355, 3276, 4277, 4295, 4302, 3276, 5122, 3276, 3276, 3276, 4291,
  /* 1932 */ 3276, 4356, 3276, 3776, 3868, 3276, 3276, 3276, 5005, 3874, 3276, 3276, 3350, 3276, 2965, 3880, 3276, 3276,
  /* 1950 */ 4505, 3276, 4512, 3276, 3276, 4349, 4516, 3296, 4522, 3276, 4398, 3487, 3368, 4527, 4705, 3521, 3619, 4712,
  /* 1968 */ 3521, 3276, 4711, 4717, 4723, 4733, 4739, 4744, 4749, 3276, 4762, 3618, 5490, 4767, 4320, 3541, 4771, 3182,
  /* 1986 */ 3947, 4777, 4752, 4607, 3181, 4376, 5057, 4781, 4771, 4755, 3181, 4787, 4797, 3517, 3181, 4149, 3587, 4803,
  /* 2004 */ 4790, 3515, 4809, 4822, 4824, 4828, 4832, 4834, 4890, 4893, 3276, 3276, 3276, 4563, 3825, 3199, 4897, 4909,
  /* 2022 */ 4915, 4920, 2999, 4713, 5556, 4719, 4927, 5051, 3276, 4935, 5050, 4939, 3027, 4740, 4943, 3276, 3276, 3389,
  /* 2040 */ 4947, 4957, 5532, 4969, 3045, 4973, 4061, 4979, 4984, 5579, 3276, 3276, 3276, 4997, 3276, 3276, 3276, 4508,
  /* 2058 */ 5004, 5009, 3402, 4298, 3774, 4518, 3524, 4208, 3276, 3276, 3276, 3379, 5033, 3276, 3276, 3276, 3276, 5040,
  /* 2076 */ 5091, 3267, 5056, 3276, 5108, 5526, 4338, 2539, 3276, 2390, 3331, 3276, 3276, 3276, 5112, 3276, 5056, 3472,
  /* 2094 */ 3019, 5127, 4965, 4596, 4269, 3276, 3276, 5207, 3276, 3276, 3412, 5131, 5138, 3276, 5387, 2726, 3276, 4214,
  /* 2112 */ 5180, 5185, 3276, 3128, 5190, 5079, 5197, 2832, 5204, 3276, 4620, 3276, 3736, 5240, 3276, 4217, 3752, 3276,
  /* 2130 */ 4216, 5211, 5216, 2833, 4271, 3737, 3748, 3276, 4015, 5225, 4215, 5230, 5234, 2772, 5239, 3789, 3276, 5245,
  /* 2148 */ 5610, 2457, 3788, 5225, 5249, 2959, 5239, 5258, 3788, 5251, 2774, 5262, 4622, 5266, 5271, 3751, 5277, 2601,
  /* 2166 */ 5290, 3146, 3309, 3276, 3276, 3276, 5335, 5339, 3276, 3276, 3276, 3276, 5349, 4271, 5361, 2813, 3099, 5480,
  /* 2184 */ 5186, 5241, 4614, 5370, 4903, 5424, 4676, 5416, 5404, 3276, 3276, 3276, 3276, 3039, 5408, 3276, 3276, 3276,
  /* 2202 */ 5414, 3276, 2772, 2994, 5447, 5444, 5453, 5465, 3276, 3276, 3276, 3276, 4694, 5471, 3276, 3276, 3276, 3038,
  /* 2220 */ 5477, 3276, 3276, 3276, 3276, 3276, 5484, 3276, 5488, 3276, 3276, 3276, 3276, 5484, 5539, 3276, 3389, 5536,
  /* 2238 */ 3486, 3276, 4758, 5437, 2957, 4494, 4071, 4628, 4649, 3276, 3276, 3276, 5417, 5548, 3486, 2840, 5571, 5577,
  /* 2256 */ 3100, 5583, 5589, 3276, 3276, 5298, 5085, 3276, 3276, 5595, 3276, 3276, 5298, 5085, 3276, 3276, 5604, 4992,
  /* 2274 */ 3276, 4499, 5605, 3758, 3399, 5096, 3276, 3276, 5119, 3276, 5299, 3276, 3276, 4501, 5167, 3276, 4500, 3276,
  /* 2292 */ 5609, 5449, 3276, 2832, 2831, 3276, 4195, 4963, 3921, 3276, 4129, 3276, 3276, 4700, 4993, 5168, 3276, 3276,
  /* 2310 */ 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3424, 3276, 3276, 3276, 3276, 3276, 3276, 5619, 6459, 7099, 5631,
  /* 2328 */ 5628, 5653, 5668, 5668, 5668, 5668, 5649, 5658, 5636, 5668, 5668, 5676, 5635, 5670, 5652, 5662, 5643, 5666,
  /* 2346 */ 5674, 5646, 5668, 5640, 5657, 5668, 5680, 5686, 5687, 5687, 5691, 5683, 5695, 5702, 5699, 5708, 5704, 5711,
  /* 2364 */ 5715, 5722, 5729, 5724, 5725, 5718, 5733, 5734, 5619, 6458, 6982, 8039, 5830, 6465, 6465, 6465, 5744, 6714,
  /* 2382 */ 6465, 6465, 6465, 5831, 6233, 5738, 5754, 6465, 7283, 6465, 7457, 6465, 6465, 6465, 6474, 8294, 5778, 5778,
  /* 2400 */ 5783, 5997, 5761, 5778, 5778, 5778, 5778, 5871, 5822, 5788, 5798, 5828, 6465, 6465, 6465, 5997, 5997, 5998,
  /* 2418 */ 5763, 6465, 6712, 6465, 6465, 5832, 6465, 6465, 7397, 5997, 5997, 5997, 5859, 5990, 5990, 5990, 5990, 5991,
  /* 2436 */ 5822, 5822, 5995, 5997, 5997, 5997, 5989, 5990, 8072, 5769, 5778, 5778, 5778, 5764, 5875, 5997, 5821, 5823,
  /* 2454 */ 5799, 5827, 5829, 6465, 6465, 5834, 7530, 5840, 5805, 6092, 6465, 6091, 6465, 6465, 6465, 7251, 7255, 5997,
  /* 2472 */ 5998, 5770, 5778, 5764, 5872, 5875, 6066, 6465, 6465, 5876, 7208, 5848, 5799, 8112, 5828, 6465, 6965, 6274,
  /* 2490 */ 7283, 6968, 6465, 7700, 6465, 6465, 6286, 6290, 5990, 5993, 5822, 5822, 5822, 5822, 5995, 5999, 5763, 5778,
  /* 2508 */ 5778, 5773, 5990, 5822, 5822, 5822, 5997, 5822, 5997, 5997, 5997, 6094, 5758, 5764, 5997, 5822, 5864, 7398,
  /* 2526 */ 5997, 5997, 5997, 7399, 5990, 5822, 5822, 5996, 5997, 5763, 5778, 5778, 5874, 6465, 6465, 6465, 6074, 6093,
  /* 2544 */ 5997, 5997, 5997, 5770, 5778, 5778, 5772, 6465, 5997, 5990, 5990, 5990, 5992, 5822, 5822, 5994, 5997, 5997,
  /* 2562 */ 5997, 5997, 5860, 5994, 5997, 5997, 6000, 5995, 5997, 5997, 5778, 5764, 5873, 6465, 5803, 5809, 6465, 5622,
  /* 2580 */ 6465, 5747, 5997, 5998, 5990, 5990, 5990, 5822, 5997, 5769, 5778, 5764, 5997, 5822, 5848, 5860, 5990, 5990,
  /* 2598 */ 5991, 5778, 6465, 6465, 6093, 6465, 6094, 5779, 6465, 6465, 7398, 5997, 5997, 5990, 5990, 5991, 6093, 5997,
  /* 2616 */ 5990, 5991, 5822, 5995, 5763, 5778, 5765, 5821, 6465, 5774, 7320, 7304, 6465, 7398, 5860, 5991, 5822, 7393,
  /* 2634 */ 5778, 5773, 7398, 5990, 5822, 5763, 7396, 5992, 5771, 5880, 5884, 5883, 5882, 5881, 5915, 5950, 5892, 5929,
  /* 2652 */ 5896, 5896, 5896, 5896, 8081, 5896, 5896, 5902, 5906, 5909, 5941, 5923, 5926, 5938, 5897, 5943, 5895, 5896,
  /* 2670 */ 5974, 5976, 5947, 5974, 5912, 5954, 5964, 5957, 5971, 5967, 5980, 6004, 6008, 6008, 6010, 6012, 6016, 6020,
  /* 2688 */ 6054, 5898, 5986, 5960, 5983, 6024, 6028, 6032, 6038, 6042, 6044, 6048, 6034, 6052, 6465, 6272, 6465, 7569,
  /* 2706 */ 7609, 5918, 6391, 6465, 6465, 5875, 8276, 6465, 7553, 6464, 6465, 6345, 6350, 7596, 6465, 6465, 6465, 6076,
  /* 2724 */ 5790, 6111, 6465, 6465, 6073, 6465, 6604, 6471, 6586, 7057, 6117, 6465, 6465, 6465, 6093, 6465, 7868, 6716,
  /* 2742 */ 8161, 7512, 6138, 7217, 7955, 6148, 6153, 6153, 6152, 6157, 6161, 6163, 6167, 6169, 6175, 6171, 6178, 6181,
  /* 2760 */ 6192, 6194, 6187, 6183, 6182, 6190, 6198, 6465, 5832, 6465, 5831, 5831, 6465, 5831, 6465, 6465, 7529, 6465,
  /* 2778 */ 6465, 7055, 5791, 6112, 6465, 6465, 6465, 6227, 6272, 7967, 6280, 6465, 6465, 6088, 6465, 6339, 6279, 6465,
  /* 2796 */ 6465, 6090, 6465, 6298, 6113, 6465, 6465, 6091, 6465, 6430, 6465, 6465, 7285, 7286, 6940, 6271, 7844, 6465,
  /* 2814 */ 5833, 7274, 6465, 5888, 6838, 8079, 6332, 7931, 6264, 6368, 6373, 6465, 6465, 6465, 6211, 6322, 6465, 6465,
  /* 2832 */ 6465, 6096, 6465, 6465, 7286, 6266, 7625, 6464, 6465, 6465, 6465, 6097, 6058, 6327, 6465, 6465, 6465, 6102,
  /* 2850 */ 7841, 6465, 6465, 6465, 6125, 6330, 7931, 6363, 6368, 5875, 6465, 7932, 6364, 6465, 6778, 6465, 6465, 6465,
  /* 2868 */ 6213, 6308, 6374, 6465, 6465, 6465, 6225, 8277, 6465, 6465, 6429, 6096, 6465, 7281, 7931, 6389, 6409, 6374,
  /* 2886 */ 6369, 6415, 6465, 6465, 6092, 6965, 6067, 6400, 6367, 6413, 6419, 6113, 6465, 6465, 6095, 7361, 6465, 8278,
  /* 2904 */ 6465, 5875, 6428, 6465, 6465, 6465, 6709, 6067, 6400, 6368, 6686, 7931, 6401, 6368, 6686, 6777, 6465, 6465,
  /* 2922 */ 6465, 6229, 7932, 6365, 6409, 6374, 6465, 8279, 5875, 6465, 6465, 6465, 6926, 6797, 8008, 6407, 6437, 6465,
  /* 2940 */ 6465, 6465, 6255, 6465, 8008, 6366, 6436, 6465, 8276, 6428, 6465, 6441, 7024, 6441, 6435, 6465, 6465, 6096,
  /* 2958 */ 6470, 6465, 6465, 5833, 6465, 6443, 6436, 6465, 6465, 6465, 6232, 6747, 6465, 6465, 6465, 6273, 8278, 6430,
  /* 2976 */ 6465, 6465, 6441, 7024, 6464, 6465, 6465, 6126, 6130, 6134, 6430, 6465, 6465, 6578, 6393, 6465, 7804, 6748,
  /* 2994 */ 6465, 6068, 6465, 6465, 7621, 6465, 6465, 6465, 7808, 7810, 6465, 6465, 7811, 6465, 6465, 6465, 7810, 6465,
  /* 3012 */ 6281, 6465, 6465, 6126, 6775, 6465, 7812, 6465, 6465, 6465, 6283, 6281, 6281, 6465, 6283, 6465, 6465, 6144,
  /* 3030 */ 6465, 6503, 6465, 6465, 6465, 6285, 6451, 6323, 6465, 6465, 6465, 6106, 8286, 6465, 8314, 6465, 6462, 6465,
  /* 3048 */ 6465, 6206, 6123, 6465, 7455, 6465, 6465, 6465, 6317, 7290, 6465, 6483, 6493, 6497, 6508, 6511, 6513, 6513,
  /* 3066 */ 6517, 6517, 6518, 6522, 6525, 6527, 6533, 6531, 6540, 6537, 6539, 6540, 6540, 6532, 6544, 6548, 6465, 6465,
  /* 3084 */ 6465, 6318, 6129, 6133, 6504, 6465, 6069, 7510, 6465, 6465, 6465, 6556, 7220, 6092, 7363, 6465, 6070, 6465,
  /* 3102 */ 6465, 6465, 8276, 6443, 6430, 7744, 6089, 6554, 6565, 6555, 6608, 6555, 6465, 6607, 6564, 6465, 6076, 6465,
  /* 3120 */ 6700, 8262, 6465, 6465, 6658, 6664, 7221, 6569, 6465, 6465, 6230, 7640, 6465, 7845, 6465, 7846, 6226, 6090,
  /* 3138 */ 6465, 7372, 6602, 6465, 8028, 6465, 6083, 7243, 6465, 6093, 6465, 8071, 6622, 6626, 6465, 6465, 6246, 6141,
  /* 3156 */ 6465, 7221, 6624, 6422, 6632, 6465, 6465, 6465, 6378, 6211, 6644, 6649, 6465, 6093, 6470, 6465, 6093, 8118,
  /* 3174 */ 6800, 6630, 6465, 6465, 7048, 6643, 6648, 6465, 6465, 6250, 6465, 7361, 7845, 6465, 6465, 6465, 6395, 6134,
  /* 3192 */ 6464, 6465, 6465, 6270, 6465, 6428, 6969, 6603, 6465, 6465, 5830, 6294, 6067, 6078, 6660, 6666, 6686, 6625,
  /* 3210 */ 6323, 6465, 6465, 6336, 6465, 6465, 6465, 6429, 6465, 6606, 6673, 6323, 6465, 6465, 6354, 6465, 6383, 7047,
  /* 3228 */ 6465, 6465, 6465, 6456, 6465, 6679, 6678, 6465, 6093, 8118, 8322, 6465, 6465, 6465, 7668, 6125, 6129, 6133,
  /* 3246 */ 7362, 6700, 6681, 7283, 7083, 6465, 6465, 6701, 6465, 6089, 6271, 6393, 6465, 6465, 6465, 6394, 6954, 5875,
  /* 3264 */ 6603, 6465, 7285, 6465, 6465, 6465, 5844, 6465, 7291, 8148, 8152, 6685, 6465, 6465, 6465, 6465, 5749, 8146,
  /* 3282 */ 8150, 8154, 6722, 7637, 8149, 6690, 6674, 6464, 6465, 6465, 6394, 6950, 6697, 6696, 6465, 6465, 6424, 6465,
  /* 3300 */ 6091, 7372, 6465, 6429, 6929, 7102, 6991, 8151, 6720, 6465, 6095, 6465, 6465, 7562, 7942, 6992, 8152, 6721,
  /* 3318 */ 6465, 6095, 6465, 6473, 6990, 8150, 6691, 6726, 6991, 8151, 6692, 6460, 6465, 6465, 5844, 6465, 6465, 7454,
  /* 3336 */ 7522, 7286, 7285, 6465, 6466, 6128, 6132, 6465, 6465, 6204, 5855, 7286, 7700, 6465, 6465, 6430, 6465, 5875,
  /* 3354 */ 6732, 6465, 6465, 6465, 6467, 6988, 6755, 8153, 6460, 6465, 6465, 6465, 6488, 6335, 6465, 6465, 6465, 6468,
  /* 3372 */ 5750, 6755, 6690, 6739, 6754, 8152, 6738, 6465, 6465, 6465, 6476, 7283, 7284, 6465, 6127, 6131, 6338, 6465,
  /* 3390 */ 6465, 6465, 6470, 6337, 6465, 7049, 6752, 6756, 6733, 6465, 6095, 6473, 6069, 5853, 6465, 6465, 7447, 6465,
  /* 3408 */ 6465, 6465, 7335, 6734, 6465, 6465, 6465, 6475, 6338, 7507, 6465, 6465, 6461, 6305, 6125, 6774, 6465, 6465,
  /* 3426 */ 6466, 6465, 7209, 6465, 6465, 6465, 6549, 7211, 6465, 7509, 6465, 6097, 6288, 6292, 6465, 6761, 6766, 6740,
  /* 3444 */ 6465, 6465, 6617, 6465, 6772, 7204, 6273, 6428, 6603, 6681, 6465, 8030, 7888, 6465, 6465, 7202, 6271, 6465,
  /* 3462 */ 6957, 7220, 7507, 6465, 8030, 7423, 6465, 6465, 7888, 6806, 6465, 6465, 6470, 7997, 6465, 7220, 6274, 6787,
  /* 3480 */ 5831, 7887, 6606, 8030, 7406, 6465, 6465, 6968, 6465, 6465, 6465, 7230, 7888, 7202, 6465, 8030, 7431, 6465,
  /* 3498 */ 6465, 7280, 6465, 6465, 7888, 6806, 6465, 7203, 6571, 7709, 6465, 7510, 6773, 6783, 6077, 6956, 6960, 7204,
  /* 3516 */ 6249, 6465, 6250, 7359, 6465, 7360, 6465, 6465, 6465, 7456, 6465, 7290, 6465, 6958, 6806, 6465, 6098, 6465,
  /* 3534 */ 6465, 7114, 7714, 7204, 7507, 6956, 6804, 6465, 7202, 6465, 6465, 6958, 7202, 6465, 6956, 6077, 6812, 7203,
  /* 3552 */ 6465, 7203, 6941, 7508, 6812, 6806, 6465, 7220, 7079, 6271, 6465, 6959, 8276, 6960, 6465, 7078, 7204, 6273,
  /* 3570 */ 7078, 6817, 6465, 6465, 7509, 6958, 6806, 6465, 6126, 6130, 6706, 6813, 6465, 8277, 6273, 7287, 6959, 6465,
  /* 3588 */ 6119, 6465, 6465, 7356, 6465, 6465, 7737, 7736, 6465, 7737, 6578, 6578, 6465, 6076, 6271, 6075, 6076, 6076,
  /* 3606 */ 6075, 6465, 6200, 6660, 6670, 7677, 6075, 6465, 6465, 6470, 8304, 7532, 7362, 6465, 6465, 6465, 6571, 7044,
  /* 3624 */ 6846, 6850, 6854, 6857, 6863, 6859, 6867, 6875, 6867, 6869, 6871, 6879, 6889, 6882, 6890, 6887, 6883, 6895,
  /* 3642 */ 6895, 6896, 6891, 6094, 8272, 7133, 6464, 6318, 6465, 6578, 6465, 6465, 6465, 7594, 6465, 6638, 6465, 6465,
  /* 3660 */ 6487, 7378, 6465, 6905, 6965, 6460, 6465, 8019, 6465, 6465, 6550, 6465, 6934, 6465, 7295, 7220, 6092, 6271,
  /* 3678 */ 6393, 6465, 7220, 6938, 6465, 6217, 6465, 6465, 6084, 7244, 6465, 6949, 6465, 6465, 6585, 6467, 6394, 6465,
  /* 3696 */ 7050, 6964, 6465, 6973, 6964, 6465, 6229, 6753, 6757, 6738, 6901, 6465, 6465, 6465, 6572, 6077, 6067, 7508,
  /* 3714 */ 6465, 6229, 7254, 7022, 6465, 7810, 6465, 8262, 6996, 6465, 6465, 6465, 6598, 7007, 7049, 6465, 6465, 6593,
  /* 3732 */ 6465, 7255, 7005, 7036, 6465, 6229, 7286, 6465, 6465, 6465, 5875, 6465, 6429, 7023, 5793, 7049, 6465, 6229,
  /* 3750 */ 7286, 7528, 7528, 6968, 6465, 6465, 5792, 7037, 6465, 6465, 6604, 6274, 6465, 7941, 6465, 6465, 6612, 6465,
  /* 3768 */ 6428, 6095, 7131, 7374, 6316, 7289, 6465, 6077, 6465, 6465, 6614, 6234, 6465, 7812, 6465, 8264, 6465, 7219,
  /* 3786 */ 6465, 6468, 6465, 6465, 6634, 6070, 8058, 7905, 6236, 7014, 7510, 6699, 6465, 7526, 6465, 7903, 6234, 7012,
  /* 3804 */ 7016, 6465, 6465, 6465, 6653, 6465, 7903, 6234, 7021, 6465, 7904, 6235, 7028, 7132, 6463, 6465, 6465, 6465,
  /* 3822 */ 6589, 6075, 6069, 7510, 6465, 8272, 6465, 5831, 7905, 7939, 7015, 6465, 6465, 6465, 6654, 6234, 7013, 7017,
  /* 3840 */ 6465, 6229, 8033, 7417, 7905, 7939, 7034, 7510, 6428, 6095, 5934, 6463, 7290, 7041, 6465, 6465, 6639, 6465,
  /* 3858 */ 7054, 6465, 6465, 6465, 6746, 7061, 7510, 6465, 6465, 5749, 7062, 6465, 6465, 6465, 6794, 8119, 7067, 7073,
  /* 3876 */ 6465, 6465, 6698, 6464, 7068, 7063, 6465, 6465, 6698, 6465, 7820, 7286, 6468, 6465, 6465, 6700, 6465, 6281,
  /* 3894 */ 6701, 6465, 6465, 6465, 6281, 7144, 6465, 7565, 6465, 6465, 6465, 6909, 6797, 6323, 6465, 7942, 6465, 6978,
  /* 3912 */ 6465, 7132, 6930, 6464, 6465, 6465, 6745, 6464, 8164, 6465, 6465, 6465, 6927, 7563, 6465, 6465, 6465, 6944,
  /* 3930 */ 6093, 7069, 6465, 6465, 6465, 6988, 6980, 6465, 6465, 6465, 7108, 7929, 6465, 6465, 6465, 7113, 7928, 6465,
  /* 3948 */ 6465, 6465, 7202, 6430, 6465, 6430, 6465, 6400, 6367, 6589, 7942, 6465, 6465, 6465, 7218, 6465, 7087, 6465,
  /* 3966 */ 6465, 6761, 7889, 6465, 6965, 6465, 6465, 6774, 7204, 6967, 6465, 6090, 6465, 6465, 6092, 6089, 6465, 6465,
  /* 3984 */ 6465, 7234, 6465, 6965, 6465, 6090, 6089, 6465, 6090, 6089, 6465, 6465, 6967, 6465, 6465, 6091, 6091, 6090,
  /* 4002 */ 6966, 6465, 6465, 6465, 7597, 7959, 6465, 8052, 5624, 7123, 6465, 7203, 7093, 6465, 6231, 6070, 6465, 6271,
  /* 4020 */ 6465, 6465, 5933, 6465, 7120, 6465, 7137, 7096, 8126, 7142, 7148, 7152, 7156, 7156, 7158, 7162, 7162, 7165,
  /* 4038 */ 7166, 7178, 7190, 7191, 7167, 7171, 7174, 7182, 7176, 7166, 7186, 7166, 6465, 6941, 6586, 7129, 7331, 6465,
  /* 4056 */ 6465, 6465, 7281, 5831, 6549, 6465, 6465, 6465, 7283, 6465, 6465, 7288, 6465, 7359, 7195, 6465, 6465, 7946,
  /* 4074 */ 8275, 5919, 6465, 7215, 6465, 6275, 7201, 7509, 6465, 7229, 7226, 6465, 6313, 6464, 6465, 5918, 6465, 7359,
  /* 4092 */ 6076, 6465, 6842, 7227, 6465, 6465, 7090, 6465, 6831, 7228, 6465, 6340, 6280, 6465, 5831, 6762, 7890, 6055,
  /* 4110 */ 6059, 7282, 6465, 6344, 6349, 7624, 7361, 6578, 6465, 6698, 6465, 8264, 6465, 6465, 6465, 6943, 6105, 6465,
  /* 4128 */ 7248, 6465, 7943, 6465, 6465, 6907, 6911, 8321, 6465, 6465, 6465, 7557, 7268, 6465, 7273, 6465, 6379, 6113,
  /* 4146 */ 6465, 5918, 6465, 7360, 6429, 6465, 7204, 6273, 6465, 5784, 7362, 7278, 6465, 6465, 6465, 7285, 6465, 7397,
  /* 4164 */ 5774, 7301, 7305, 7510, 7309, 6465, 6465, 6465, 7286, 7325, 6465, 6465, 6465, 7292, 6067, 7357, 6465, 6465,
  /* 4182 */ 6915, 6465, 6465, 7319, 7303, 7324, 7329, 6465, 6465, 6465, 7294, 6465, 8270, 6465, 6465, 6928, 6465, 7819,
  /* 4200 */ 6465, 7944, 6465, 6385, 6465, 6924, 6465, 8026, 6465, 6465, 6941, 7362, 6402, 7282, 6465, 6465, 6465, 6230,
  /* 4218 */ 7530, 6465, 6465, 5836, 7352, 7344, 6465, 6399, 6407, 6413, 5835, 7350, 6402, 7358, 5836, 7351, 6403, 6465,
  /* 4236 */ 6430, 7743, 6465, 6076, 7282, 6465, 8007, 6434, 6464, 6465, 7552, 6467, 7330, 6465, 6465, 7444, 7944, 6465,
  /* 4254 */ 6614, 6489, 7380, 7282, 6465, 6462, 7961, 6210, 7008, 6465, 6465, 6465, 7359, 7390, 7416, 6465, 6465, 6943,
  /* 4272 */ 6465, 6465, 6465, 6345, 6465, 7288, 6465, 7362, 6698, 6465, 7946, 6615, 6465, 6463, 6465, 6466, 6082, 8270,
  /* 4290 */ 6465, 7403, 6500, 6465, 6465, 6465, 7820, 7943, 6465, 6464, 6465, 6071, 6616, 6465, 6465, 6465, 7367, 7403,
  /* 4308 */ 7415, 6465, 6465, 6945, 7362, 6465, 7282, 6465, 6465, 7362, 6465, 7289, 7359, 6465, 5875, 7076, 5831, 7405,
  /* 4326 */ 6465, 6465, 6465, 7404, 7411, 6465, 6465, 6465, 7421, 6465, 7362, 6699, 6271, 7910, 6465, 7972, 8031, 7282,
  /* 4344 */ 6465, 6465, 6965, 7281, 7421, 6465, 6465, 6465, 7425, 6465, 7405, 6465, 7446, 6465, 6465, 6465, 7386, 6820,
  /* 4362 */ 6465, 6465, 8276, 6077, 6271, 6465, 6819, 7358, 6465, 6465, 6465, 7291, 7362, 6465, 7362, 6465, 6465, 7202,
  /* 4380 */ 6465, 7361, 7359, 6465, 6465, 6465, 7457, 7361, 7360, 6465, 6465, 6974, 6465, 6465, 8278, 6469, 6258, 7435,
  /* 4398 */ 6465, 6465, 5831, 7586, 7346, 5831, 6098, 6572, 7439, 8115, 6827, 7451, 7461, 7465, 7469, 7470, 7470, 7474,
  /* 4416 */ 7474, 7476, 7483, 7483, 7478, 7479, 7486, 7488, 7490, 7492, 7496, 7500, 7834, 7430, 6968, 6465, 6464, 6465,
  /* 4434 */ 6072, 7726, 7730, 6465, 6465, 6989, 6756, 6097, 6465, 6465, 7702, 6465, 7516, 6465, 6830, 7538, 6465, 6465,
  /* 4452 */ 7542, 6465, 7650, 6465, 6465, 6998, 6465, 6465, 6465, 6790, 6465, 6792, 6698, 6702, 6077, 6465, 6465, 8007,
  /* 4470 */ 6390, 6309, 6323, 6465, 6056, 6060, 6465, 6057, 6061, 6465, 6465, 6465, 7358, 7617, 6423, 6465, 6465, 7542,
  /* 4488 */ 6907, 7615, 6768, 6465, 6465, 8028, 6465, 6070, 6465, 6585, 8233, 6465, 6465, 6465, 7545, 7715, 6465, 7385,
  /* 4506 */ 7616, 7582, 6465, 6465, 8088, 7917, 6465, 8232, 6465, 7575, 7615, 7581, 6465, 6465, 7197, 6465, 6426, 6465,
  /* 4524 */ 6465, 6465, 7552, 6470, 7728, 6588, 6465, 6465, 8102, 7918, 7608, 7510, 7813, 6465, 6465, 8163, 6943, 6944,
  /* 4542 */ 6465, 6465, 6465, 6334, 6338, 6465, 7047, 6999, 6465, 6465, 6465, 7563, 5875, 6797, 6374, 6465, 6465, 7222,
  /* 4560 */ 6570, 6425, 6424, 6465, 6465, 7238, 6446, 6465, 8272, 6465, 7602, 7577, 7629, 6465, 7384, 6911, 6799, 7586,
  /* 4578 */ 6968, 6465, 6465, 7282, 7315, 6454, 6465, 6465, 6465, 7602, 6067, 7634, 6465, 6465, 7283, 7564, 6798, 6323,
  /* 4596 */ 6465, 6465, 7284, 6465, 6465, 6465, 6075, 6454, 6465, 6465, 7279, 6465, 6465, 7220, 7362, 6465, 7577, 7630,
  /* 4614 */ 6465, 6465, 8237, 6465, 6465, 8263, 6465, 6230, 6465, 6465, 7528, 6067, 8119, 6323, 6465, 6465, 7285, 8045,
  /* 4632 */ 6076, 6077, 6465, 6465, 7287, 6775, 6465, 7648, 6465, 6465, 6465, 7506, 6466, 6358, 7730, 6465, 6465, 8271,
  /* 4650 */ 6465, 6465, 6465, 6900, 6465, 7280, 6465, 7359, 6465, 6701, 6465, 7507, 6077, 6465, 6465, 7287, 6796, 7654,
  /* 4668 */ 6465, 6465, 6465, 7811, 6465, 7532, 7655, 6465, 6465, 8275, 6465, 6465, 7361, 6465, 6465, 6465, 7812, 6465,
  /* 4686 */ 7862, 6465, 6465, 7289, 6465, 6465, 7362, 7987, 6465, 6465, 8292, 8328, 6465, 7660, 6465, 6465, 7290, 6465,
  /* 4704 */ 5844, 6465, 7659, 6465, 6465, 7290, 7359, 6571, 7664, 6465, 6465, 6465, 7817, 6075, 6076, 6465, 6465, 6465,
  /* 4722 */ 7831, 6465, 7113, 6587, 6465, 7944, 8273, 6465, 6465, 7290, 7360, 7362, 7988, 6465, 6465, 7291, 7613, 7076,
  /* 4740 */ 6465, 6465, 6465, 7855, 7210, 6465, 6465, 6465, 7874, 6465, 7210, 6465, 7360, 8003, 6465, 7202, 7362, 7360,
  /* 4758 */ 6465, 6465, 8318, 6292, 7209, 7362, 6465, 6465, 7359, 7674, 6465, 6465, 7681, 7203, 7360, 6465, 6465, 7299,
  /* 4776 */ 7303, 7362, 7676, 6465, 6472, 8005, 6465, 7204, 6465, 6776, 7797, 6465, 7362, 5875, 7202, 7362, 7362, 5875,
  /* 4794 */ 6465, 7803, 7030, 6465, 7203, 7361, 6465, 6465, 6428, 6250, 7360, 6465, 6465, 7360, 6075, 7362, 7202, 6301,
  /* 4812 */ 6429, 6824, 6835, 6465, 6211, 6583, 6465, 6076, 6465, 6701, 7203, 6249, 6465, 6300, 6429, 7204, 6251, 7690,
  /* 4830 */ 7689, 7359, 7694, 7706, 7706, 7706, 7362, 6465, 7237, 6445, 7017, 6465, 6466, 7843, 6465, 5831, 6753, 6757,
  /* 4848 */ 6605, 8273, 6284, 6465, 6468, 7056, 6465, 6465, 6465, 6618, 7827, 7942, 6465, 7683, 7930, 6465, 7719, 7685,
  /* 4866 */ 8274, 5932, 7723, 7734, 7741, 6573, 5741, 5833, 7748, 7750, 7754, 5815, 5817, 5817, 7758, 7760, 7762, 7763,
  /* 4884 */ 7767, 7767, 7770, 7791, 7790, 7774, 7779, 7781, 7783, 7784, 7788, 7775, 7795, 6465, 7826, 7911, 6067, 6356,
  /* 4902 */ 7281, 6465, 6067, 6465, 6465, 6465, 8279, 6920, 8046, 6465, 6465, 7360, 6465, 6461, 6465, 6465, 6071, 6465,
  /* 4920 */ 6465, 7801, 6465, 6465, 7361, 6465, 7361, 7126, 6465, 7839, 6465, 6469, 6358, 7729, 6465, 6728, 7851, 6465,
  /* 4938 */ 8225, 7856, 6465, 6465, 5867, 6465, 8256, 6465, 7860, 7239, 6447, 6465, 6465, 7410, 6465, 6465, 6465, 7362,
  /* 4956 */ 6428, 8274, 6465, 6606, 6465, 6469, 6465, 7287, 6465, 6465, 6465, 8001, 6465, 6465, 7531, 6393, 7866, 6073,
  /* 4974 */ 6075, 6465, 6465, 7445, 6465, 6427, 6465, 6465, 6465, 7903, 7456, 6465, 7575, 6467, 6359, 6588, 7282, 6467,
  /* 4992 */ 6465, 7290, 6465, 6465, 6465, 7947, 8090, 7878, 6465, 6470, 6659, 6665, 7896, 6465, 6465, 6465, 7925, 7882,
  /* 5010 */ 6465, 6465, 6465, 7927, 7895, 6465, 6465, 6465, 7933, 6365, 6465, 7670, 7220, 7944, 6465, 8101, 7917, 7894,
  /* 5028 */ 7900, 6465, 6465, 6465, 7941, 7915, 8094, 6464, 6465, 6470, 7239, 5794, 6474, 8294, 8092, 7922, 7666, 6465,
  /* 5046 */ 6465, 6465, 7943, 7945, 6465, 6465, 6465, 7947, 7850, 5844, 6941, 7362, 6465, 6465, 7362, 6465, 8273, 6465,
  /* 5064 */ 6606, 7910, 6465, 5851, 6465, 6470, 7253, 7003, 6476, 8296, 7262, 7922, 8298, 7590, 6464, 6465, 6470, 7314,
  /* 5082 */ 6465, 6470, 7547, 7551, 6465, 6465, 6465, 7968, 6465, 6477, 8297, 7263, 7952, 6465, 6465, 6465, 7944, 8273,
  /* 5100 */ 6465, 7597, 7965, 7946, 6465, 6465, 6465, 6089, 6465, 7238, 7282, 8272, 6475, 8295, 7589, 6460, 6476, 7977,
  /* 5118 */ 7590, 6465, 6470, 7714, 6465, 6470, 8032, 7008, 6465, 6271, 7911, 6067, 7973, 8012, 6356, 6465, 6465, 7502,
  /* 5136 */ 6465, 7278, 7598, 6465, 6465, 6465, 7985, 6475, 6479, 7981, 6465, 6470, 8032, 7416, 6465, 6478, 7980, 6465,
  /* 5154 */ 6465, 7511, 6428, 6465, 7312, 7282, 6465, 6475, 7937, 8093, 6465, 6944, 6465, 6465, 7288, 6465, 6465, 6465,
  /* 5172 */ 8030, 7429, 6229, 8017, 6465, 6465, 7518, 7560, 7640, 6465, 6465, 6465, 8109, 8023, 6465, 6465, 6465, 8223,
  /* 5190 */ 6465, 6941, 6942, 6465, 6475, 7992, 7589, 6281, 6465, 8037, 6465, 6476, 7993, 7264, 7284, 6465, 6941, 6465,
  /* 5208 */ 6476, 8013, 6393, 6942, 6943, 6465, 6470, 7220, 8043, 6283, 6069, 6465, 6560, 6465, 6465, 6223, 6220, 8059,
  /* 5226 */ 6465, 6465, 6465, 8244, 8050, 6465, 5832, 6068, 6093, 6465, 6465, 6465, 8249, 5832, 7528, 6465, 6465, 6465,
  /* 5244 */ 8229, 6636, 6465, 5832, 6069, 6636, 5831, 6070, 6096, 6465, 6465, 7533, 6504, 6465, 6465, 6636, 7528, 6968,
  /* 5262 */ 6465, 7528, 6093, 8060, 6094, 6465, 6465, 6465, 8262, 6465, 7528, 6465, 6465, 7537, 6423, 6465, 7530, 6096,
  /* 5280 */ 6465, 6571, 6465, 6465, 6700, 6271, 7444, 5831, 7286, 6465, 8064, 6465, 8070, 6465, 6572, 6465, 6428, 6392,
  /* 5298 */ 6465, 6465, 6465, 7713, 6274, 6918, 6465, 6273, 8076, 6470, 6940, 6465, 6228, 8085, 6571, 8098, 8106, 6242,
  /* 5316 */ 8123, 8130, 8143, 8054, 8158, 8133, 8136, 8139, 8168, 8171, 8174, 8171, 8176, 8182, 8186, 8190, 8178, 8193,
  /* 5334 */ 8197, 8200, 8202, 8206, 8212, 8208, 8219, 8215, 6465, 6578, 6075, 6465, 6465, 8280, 6485, 6287, 6291, 6465,
  /* 5352 */ 6274, 6465, 5875, 6605, 6744, 6701, 6465, 6465, 7811, 6093, 6465, 6471, 6465, 6582, 6465, 6465, 6231, 8306,
  /* 5370 */ 8241, 6465, 6465, 5812, 7947, 8250, 6465, 7948, 8245, 6465, 6465, 7948, 7279, 6465, 7104, 6465, 6584, 6465,
  /* 5388 */ 6465, 6230, 7942, 8254, 6808, 6465, 8260, 6272, 6942, 6465, 6465, 6465, 6428, 6465, 6465, 6428, 7284, 6465,
  /* 5406 */ 8268, 6699, 7442, 6465, 6465, 6465, 7571, 7269, 8284, 8288, 7444, 6465, 6465, 6465, 8326, 6107, 8287, 7443,
  /* 5424 */ 6465, 6586, 6465, 7943, 6464, 6465, 6465, 6092, 6465, 6261, 7442, 6465, 6968, 5843, 6465, 6465, 6465, 7604,
  /* 5442 */ 7944, 6465, 8274, 6465, 6680, 6465, 6588, 6465, 7945, 8275, 6465, 6465, 7284, 6465, 7596, 6465, 6465, 6089,
  /* 5460 */ 6089, 6465, 6091, 6965, 6090, 7138, 6465, 6465, 6465, 7642, 6465, 7338, 6465, 6465, 6465, 7646, 6465, 6232,
  /* 5478 */ 8330, 7340, 6465, 6588, 7943, 8272, 6466, 8302, 8329, 7339, 7293, 6465, 6465, 6465, 7664, 6465, 6289, 6293,
  /* 5496 */ 6942, 6465, 6603, 6062, 6465, 6465, 6465, 7259, 6465, 6681, 6465, 7284, 6465, 7456, 6465, 8312, 6699, 6465,
  /* 5514 */ 6465, 7811, 8304, 8308, 7340, 6465, 6605, 6465, 6282, 8303, 8307, 7339, 6465, 6605, 6465, 6283, 6282, 6465,
  /* 5532 */ 6283, 6465, 6271, 7910, 8303, 8307, 7339, 6965, 6465, 6968, 6465, 6594, 6465, 6465, 6212, 6577, 8307, 8333,
  /* 5550 */ 6465, 6465, 7697, 7382, 8308, 6077, 6465, 6465, 7824, 6466, 7115, 8305, 8331, 6465, 6605, 7285, 6680, 7116,
  /* 5568 */ 8306, 8332, 6965, 7370, 6942, 6465, 6465, 7835, 7431, 6096, 6471, 6465, 6465, 7872, 6465, 7946, 8275, 6465,
  /* 5586 */ 6465, 7885, 6782, 8066, 6465, 6465, 6465, 7909, 7942, 6465, 7712, 7550, 6465, 6607, 6465, 6465, 6240, 6465,
  /* 5604 */ 7545, 7549, 6465, 6465, 6465, 6605, 6094, 6465, 6465, 5831, 7111, 6465, 6465, 6469, 6986, 2, 4, 8, 262144,
  /* 5623 */ 328192, 0, 0, 1, 256, 4194560, 4196352, 270532608, 2097152, 2097152, 268435456, 4194432, 3145728,
  /* 5636 */ 541065216, -2143289344, -2143289344, -2143289344, 4194304, -2143289088, 4196352, -1606418432, 541065216,
  /* 5645 */ 541065216, 4194304, 4194304, 541065216, 4194304, 4194432, 37748736, -1606418432, 541065216, -2143289344,
  /* 5655 */ 4194304, 4194304, -1606418432, 541065216, 541065216, 541065216, 541065216, 4194304, 4196352, 276901888,
  /* 5665 */ 8540160, 4198144, 541065216, 4194304, 4194304, 4194304, 4194304, 4196352, -1606418432, 4194304, 8425488,
  /* 5676 */ 4194304, 4194304, 16777216, 4194432, 541065216, 37748736, 742391808, 239075328, 775946240, 239075328,
  /* 5686 */ 775946240, 171966464, 171966464, 171966464, 171966464, 171966464, 171966464, 239075328, 171966464,
  /* 5695 */ 775946240, 775946240, 64, 2097216, 4194368, 4194368, 541065312, 4194368, 4194400, 4194368, 4194368,
  /* 5706 */ 4720640, 4718592, 4194400, 4718592, 4194368, 4718592, -2143289280, 4194368, 541589504, -2143285440,
  /* 5716 */ -2142763008, 541589504, -1606414528, -2143285440, -2143285440, -2109731008, -1606414528, -2143285440,
  /* 5724 */ -1606414528, -2143285440, -2143285440, -2143285440, -2109731008, -2143285440, -2143285408, -2143285440,
  /* 5732 */ -2143285408, -2142761152, -1605890240, -2142761152, -1908404416, 776470528, 0, 8192, 8392704, 0,
  /* 5742 */ 0x80000000, 2097152, 0, 0x80000000, 16777216, 0, -2147483646, 0, 0, 2, 12, 64, 0, 16384, 1536, 1792, 64,
  /* 5759 */ 64, 1536, 96, 64, 64, 524352, 524352, 524352, 64, 64, 64, 64, 64, 524352, 524352, 0, 0, 0, 62, 524352,
  /* 5779 */ 524352, 524352, 524352, 0, 524352, 0, 64, 64, 16392, 524288, 524288, 262144, 1048576, 4194304, 16777216,
  /* 5794 */ 33554432, 67108864, 134217728, 0, 0, 128, 128, 128, 128, 0, 8388608, 4096, 4096, 4096, 1024, 4096, 1536,
  /* 5811 */ 1024, 0, 0, 9502720, 1610612736, 1610612736, 393753, 393753, 393753, 393753, 64, 524288, 524288, 524288,
  /* 5825 */ 524288, 1048576, 128, 2048, 2048, 2048, 0, 0, 0, 4, 0, 0, 0, 6, 56, 0, 8388608, 8388608, 4096, 0, 0, 8192,
  /* 5847 */ 268435456, 524288, 128, 128, 128, 0, 16384, 2097152, 0, 0, 328192, 0, 64, 64, 96, 96, 96, 524288, 128,
  /* 5866 */ 2048, 0, 0, 10979312, -503316480, 64, 64, 64, 524288, 524288, 0, 0, 0, 112, 96, 524288, 64, 524352, 0, 96,
  /* 5886 */ 524288, 64, 0, 4096, 536870912, 1073741824, 1056, 262176, 1048608, 2097184, 32, 32, 32, 32, 40, 224, 32,
  /* 5903 */ 524320, 32, 1073872896, 40, 96, 32, 34, 262184, 1048616, 40, 32, 32, 32, 4, 1073872896, 32, 0, 0, 0, 116,
  /* 5923 */ 4195360, 262176, 6291488, 2097184, 4194336, 4194336, 4194336, 536870944, 32, 32, 0, 0, 256, 8192, 2097152,
  /* 5938 */ 40, 40, 40, 40, 48, 1120, 96, 6292512, 4195360, 6292512, 32, 32, 32, 40, 96, 160, 56, 0, 4, 262184, 34, 42,
  /* 5960 */ 32, 42, 32, 106, 262184, 40, 4196128, 32, 42, 1056, 4194336, 327155712, 34, 32, 32, 56, 262184, 40, 40,
  /* 5979 */ 4195104, 32, 1056, 1056, 42, 96, 40, 262176, 40, 1048616, 32, 96, 96, 96, 96, 524288, 524288, 524288, 64,
  /* 5998 */ 64, 64, 64, 96, 64, 524352, 6554720, -326784344, -322851160, -322851160, -320600992, -320600992,
  /* 6010 */ -320600992, -320600992, -320598304, -320598304, -320598304, -320598304, -320598176, -320500000, -320598168,
  /* 6019 */ -319451424, -320499992, -320491800, -320491800, -319451416, 42, 106, 40, 293601323, 41, 262184, 293601323,
  /* 6031 */ 293601323, 293699627, 293863467, 293702203, 293702203, -37744981, 293964347, 293617707, 293702203,
  /* 6040 */ 293716011, 293702203, 293702267, 297896507, 293702203, 293702203, 297896507, 293964347, 293702267,
  /* 6049 */ 297896507, 297896507, 293702203, 297896507, -35385621, -320499992, 0, 0, 32, 128, 2048, 262144, 524288,
  /* 6062 */ 33554432, 134217728, 0, 0, 48, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 131072, 0, 0, 0, 204, 285212672, 0, 0, 0,
  /* 6086 */ 254, 1280, 486539264, 0, 0, 0, 1024, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 32, 64, 65536, 0, 0, 1, 2, 12,
  /* 6111 */ 33554432, 268435456, 536870912, 0x80000000, 0, 0, 65536, 262144, 33554432, 0, 268435456, 0, 262656, 262144,
  /* 6125 */ 0, 0, 1, 4, 8, 32, 64, 512, 2048, 16384, 67108864, 134217728, 268435456, 0, 524288, 5242880, 0, 0,
  /* 6143 */ 18874368, 0, 0, 19367728, -503316480, 201330721, 201330721, 201330721, -2111369023, -2111360575,
  /* 6153 */ -2111369023, -2111369023, -2111369023, -2111369023, -1977151295, -1977151293, -1910042431, -2111368509,
  /* 6161 */ -1893265183, -2111368509, -1893265183, -1893265183, -1893265183, -1893265183, -554213760, -554213760,
  /* 6169 */ -554213760, -554213760, -553689472, -553689472, -553689472, -553656704, -553656704, -553689472, -553656704,
  /* 6178 */ -553656704, -553689472, -553689440, -553689472, -553689440, -553689440, -553689440, -553689440, -553689438,
  /* 6187 */ -553689440, -553689438, -553689376, -553689440, -553689439, -553689440, -553689440, -553689440, -553689432,
  /* 6196 */ -553689440, -553689440, -536912159, -536912159, 0, 0, 2, 204, 0, 262656, 0, 0, 2, 65536, -1845493760, 0, 0,
  /* 6213 */ 0, 1998, 59238400, -603979776, 0, 462976, -2113929216, 0, 0, 32505856, -570425344, 32505856, 0, 0, 2,
  /* 6228 */ 33554432, 0, 0, 2, 4, 16, 64, 128, 256, 1536, 2048, 16384, 0, 471424, 0, -2113929216, 100663296, 100663296,
  /* 6246 */ -1979711488, -1912602624, 463488, 0, 0, 33554432, 268435456, 0, 0, 0, 1007232, -570425344, 0, 0, 67108866,
  /* 6261 */ 12, 80, 128, 7168, 16384, 196608, 262144, 1048576, 2097152, 1007232, 0, 0, 0, 4096, 0, 0, 0, 96, 15728640,
  /* 6280 */ -570425344, 0, 0, 0, 2048, 0, 0, 32, 512, 2048, 32768, 262144, 524288, 8388608, 0, 0, 4096, 32768, 4194304,
  /* 6299 */ 16777216, 33554432, 268435456, 0, 268435456, 0, 0, 128, 196608, 2097152, 4194304, 8388608, 234881024,
  /* 6312 */ 268435456, 0, 256, 12288, 0, 0, 134217728, 4096, 0, 8, 503316480, 1073741824, 0x80000000, 0, 0, 32768,
  /* 6328 */ 786432, 0x80000000, 0, 0, 167772160, 234881024, 0, 0, 2, 50331648, 67108864, 0, 0, 0, 1007232, 15728640, 0,
  /* 6345 */ 128, 512, 7168, 16384, 16384, 196608, 786432, 1048576, 2097152, 0, 128, 131072, 2097152, 0, 0, 2, 67108864,
  /* 6362 */ 0, 3072, 4096, 16384, 131072, 524288, 1048576, 2097152, 4194304, 8388608, 33554432, 234881024, 268435456,
  /* 6375 */ 1073741824, 0x80000000, 0, 0, 1048576, 4194304, 33554432, 268435456, 0, 201326592, 0, 0, 3, 22020096, 3072,
  /* 6390 */ 16384, 131072, 1048576, 2097152, 0, 0, 0, 118, 0, 128, 512, 3072, 16384, 131072, 524288, 58720256,
  /* 6406 */ 402653184, 131072, 1048576, 2097152, 4194304, 8388608, 134217728, 8388608, 33554432, 201326592, 268435456,
  /* 6417 */ 1073741824, 0x80000000, 0, 1048576, 4194304, 268435456, -1073741824, 0, 0, 0, 393216, 0, 0, 0, 524288, 0,
  /* 6433 */ 0, 131072, 1048576, 4194304, 134217728, 0x80000000, 0, 0, 0, 512, 3072, 131072, 524288, 1048576, 33554432,
  /* 6448 */ 67108864, 134217728, 536870912, 16384, 16384, 18432, 67108864, 16384, 0, 65536, 262144, 1048576,
  /* 6460 */ 1073741824, 0, 0, 0, 0x80000000, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 4, 16, 224, 512, 32768, 1, 18952,
  /* 6485 */ 0, 65, 0, 2, 4, 24, 32, 1280, 100663298, 18952, 1024, 65, 1024, 2101248, 524288, 1024, 16777216, 33554432,
  /* 6503 */ 134217728, 268435456, 0x80000000, 0, 0, 268436480, 19017, -1744550912, 8388624, 8388624, -1739308032,
  /* 6514 */ -1739308032, -1739308032, -1739308032, -1736162288, -1736162288, -1736162288, -1736162288, -645402676,
  /* 6522 */ -645402676, -645402676, -645402676, -645402676, -544739378, -7868466, -544739378, -7868466, -7868466,
  /* 6531 */ -7868466, -578293810, -7868466, -7868466, -7868466, -7868466, -578293810, -578293810, -544739378,
  /* 6540 */ -578293810, -578293810, -578293810, -578293810, -578293794, -7868466, -7868466, -578293794, -7868450, 0, 0,
  /* 6551 */ 0, 16384, 8192, 278528, -1744830464, 0, 0, 0, 24576, 0, 1024, 5521408, -1744830464, 1040, 0, -1744830464,
  /* 6567 */ 0, 0, 25683968, -671088640, 0, 0, 0, 32768, 0, 2097152, -603979776, 0, 0, 0, 131072, 1998, 59238400,
  /* 6584 */ -67108864, 0, 0, 0, 65536, 0, 0, 0, 1536, 0, 1073741824, 18432, 0, 0, 0, 520, 0, 65, 278528, 0, 0, 0,
  /* 6606 */ 262144, 0, 0, 0, 1040, 8667136, 5242880, 0x80000000, 0, 0, 4, 16, 0, 0, 16, 64, 0, 1996, 518144, 8388608,
  /* 6626 */ 16777216, 134217728, 268435456, -1073741824, 0, 1998, 50331648, 201326592, 0, 0, 4, 64, 128, 0, 0,
  /* 6641 */ 536870912, 131072, 1998, 518144, 8388608, 50331648, 201326592, 201326592, 805306368, -1073741824, 0, 0,
  /* 6653 */ 2014, 0, 0, 0, 786432, 0, 204, 768, 1024, 10240, 16384, 10240, 16384, 32768, 458752, 8388608, 16777216,
  /* 6670 */ 32768, 458752, 8388608, 50331648, 67108864, 134217728, 805306368, 1073741824, 0, 220, 0, 0, 0, 1048576, 0,
  /* 6685 */ 16777216, 134217728, 268435456, 1073741824, 0x80000000, 16384, 32768, 458752, 50331648, 67108864,
  /* 6695 */ 805306368, 0, 208, 0, 0, 0, 4194304, 0, 0, 0, 12288, 16384, 67108864, 268435456, 0, 0, 318767104, 0, 0,
  /* 6714 */ 16777216, 16777216, 0, 0, 0x80000000, 65536, 458752, 16777216, 268435456, 1073741824, 0, 0, 805306368,
  /* 6727 */ 1073741824, 0, 0, 7, 2590512, 32768, 458752, 16777216, 1073741824, 0, 0, 50331648, 67108864, 536870912,
  /* 6741 */ 1073741824, 0, 0, 16, 0, 0, 1048576, 4194304, 0x80000000, 0, 0, 4, 8, 64, 128, 512, 2048, 8192, 16384,
  /* 6760 */ 458752, 4, 8, 128, 512, 2048, 2048, 196608, 262144, 50331648, -1073741824, 0, 1, 4, 8, 512, 2048, 0, 0,
  /* 6779 */ 32768, 524288, 0, 2048, 196608, 262144, 33554432, 536870912, 0, 524288, 262144, 0, 0, 319160320, 0, 0, 0,
  /* 6796 */ 64, 2048, 57344, 262144, 50331648, 268435456, 1073741824, 0x80000000, 2048, 131072, 33554432, 536870912, 0,
  /* 6809 */ 0, 7, 9633792, 0, 512, 2048, 131072, 536870912, 131072, 536870912, 0, 0, 8, 16, 402653184, 0, 64, 256,
  /* 6827 */ 8192, 8192, 34816, 9216, 0, 0, 0, 671088640, 2097152, 268435456, 0x80000000, 0, 0, 536870912, 1073741824,
  /* 6842 */ 128, 0, 537395200, 537395200, 32768, 4212736, 537395200, 4212736, 1082130432, 0, 4212736, 4212736,
  /* 6854 */ 537427968, 4212736, 51380242, 51380242, 22038531, 22366211, 22366211, 22366211, 55592978, 22366219,
  /* 6864 */ 22366211, 22366219, 22366227, 55592978, 55592978, 55592978, 55592978, 995151862, 995151862, 995151862,
  /* 6874 */ 995151862, 55592978, 324028498, 55592978, 324028498, 995151862, 1062785014, 995676150, 1062785014,
  /* 6883 */ 995676150, 995676150, 1062785014, 995676150, 995676150, 995676150, 995676150, 995676150, 1062785014,
  /* 6892 */ 1062785014, 995676150, 1062785014, 1062785014, 1062785014, 1062785014, 1062785014, 995676150, 0, 16384,
  /* 6902 */ 32768, 268435456, 0, 18432, 4194304, 0, 0, 8, 32, 64, 1024, 2048, 57344, 0, 18, 17825792, 33554432,
  /* 6919 */ 0x80000000, 0, 0, 2113536, 0, 0, 346112, 0, 0, 8, 64, 0, 0, 8192, 2097152, 11, 0, 0, 19, 0, 82, 301989888,
  /* 6941 */ 0, 0, 0, 8192, 0, 0, 0, 9728, 118, 53120, 22020096, 973078528, 0, 577408, 973078528, 0, 0, 8, 512, 2048,
  /* 6961 */ 131072, 0, 0, 1040187392, 0, 0, 0, 8388608, 0, 0, 0, 72, 0, 118, 577408, 22020096, 1040187392, 0, 524288,
  /* 6980 */ 0, 64, 0, 2097152, 4194304, 128, 0, 327680, 0, 0, 12, 64, 128, 512, 1024, 2048, 80, 268435456, 0, 0, 12,
  /* 7001 */ 268435456, 0, 3584, 16384, 32768, 1048576, 4194304, 16777216, 33554432, 134217728, 0, 2048, 16384, 32768,
  /* 7015 */ 4194304, 33554432, 134217728, 536870912, 0, 0, 2048, 16384, 32768, 524288, 1048576, 4194304, 134217728,
  /* 7028 */ 16384, 32768, 524288, 4194304, 0x80000000, 0, 524288, 4194304, 33554432, 134217728, 805306368, 0, 0,
  /* 7041 */ 131072, 128, 536870912, 0, 0, 537395200, 0, 0, 805306368, 0, 0, 0, 577408, 1, 0, 0, 65536, 262144, 0,
  /* 7060 */ 65536, 1536, 32768, 4194304, 134217728, 536870912, 0, 128, 256, 1536, 32768, 524288, 0, 524288, 4194304,
  /* 7075 */ 134217728, 536870912, 131072, 0, 0, 512, 2048, 0, 64, 1536, 32768, 134217728, 0, 1536, 32768, 0, 0,
  /* 7092 */ 939524096, 0, 0, 1073741824, 16384, 8, 8, 0, 0, 1075838976, 2097152, 0x80000000, 0, 0, 15, 0, 0, 16384,
  /* 7110 */ 1073741824, 0, 1, 1, 0, 0, 2, 8, 16, 64, 256, 1073741824, 0, 67174400, 33554432, 1073741824, 0, 0,
  /* 7128 */ 1879048192, 0, 1, 0, 256, 0, 8192, 2097152, 0, 256, 16384, 0, 0, 4194304, 131072, 8, 131072, 4194304,
  /* 7146 */ 0x80000000, 0, -2146430976, 131072, 131072, 134217736, 16908320, 547389524, 547389524, 547389524,
  /* 7156 */ 555909216, 555909216, 555909216, 555909216, 564297840, 564297844, 564297844, 564297844, 564297844,
  /* 7165 */ 564297844, 732620158, 732620158, 732620158, 732620158, 1001055614, 1001055742, 1001056254, 1001055742,
  /* 7174 */ 1001056254, 1001055742, 1001055742, 1001055742, 732620158, 732620158, 732620158, 1001055742, 1001056254,
  /* 7183 */ 1001056254, 1001055742, 732620158, 1001055614, 732620158, 1001055614, 732620158, 1001055742, 1001055742,
  /* 7192 */ 732620158, 1001055742, 0, 1052672, 0x80000000, 0, 0, 16, 393216, 2260992, 0, 0, 0, 33554432, 0, 0,
  /* 7208 */ 25165824, 0, 0, 0, 50331648, 0, 0, 0, 116, 0, 0, 16, 33554432, 0, 0, 0, 1996, 25683968, 2809856, 58720256,
  /* 7228 */ 671088640, 0, 0, 126, 1280, 2809856, 254, 1792, 939524096, 0, 2, 4, 32, 524288, 1048576, 1280, 2809856,
  /* 7245 */ 58720256, 939524096, 0, 4096, 1048576, 0x80000000, 0, 2, 4, 112, 128, 256, 3584, 16384, 0, 20, 64, 32768,
  /* 7263 */ 65536, 131072, 262144, 2097152, 16777216, 2097152, 8388608, 536870912, 0, 0, 163840, 0, 0, 0, 67108864, 52,
  /* 7279 */ 0, 0, 0, 134217728, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 62, 64, 1280, 24576, 163840,
  /* 7305 */ 524288, 2097152, 58720256, 134217728, 58720256, 134217728, 536870912, 0, 2, 4, 524288, 134217728, 0, 0, 62,
  /* 7320 */ 64, 128, 1280, 24576, 58720256, 402653184, 536870912, 0, 0, 0, 256, 67108864, 1073741824, 0, 0, 6, 56,
  /* 7337 */ 1280, 8192, 65536, 131072, 1048576, 0, 0, 524288, 58720256, 134217728, 0, 8388608, 0, 56, 128, 1280, 8192,
  /* 7354 */ 16384, 131072, 128, 1792, 402653184, 0, 0, 0, 268435456, 0, 0, 0, 2101248, 0, 32, 128, 262144, 524288, 0,
  /* 7373 */ 4096, 2097152, 0, 0x80000000, 0, 32, 1280, 8192, 524288, 16777216, 33554432, 0, 0, 12, 32, 64, 1024, 128,
  /* 7391 */ 1280, 8192, 524288, 64, 64, 524352, 0, 0, 64, 64, 64, 32, 2, 4, 8, 16, 134217728, 0, 0, 0, 512, 402653184,
  /* 7413 */ 0, 0, 1024, 16777216, 33554432, 402653184, 0, 0, 4, 8, 16, 402653184, 0, 0, 28, 32, 256, 512, 2048, 8192,
  /* 7433 */ 32768, 8388608, 4, 16384, 65536, 67108864, 2048, 268435460, 32768, 8192, 196608, 1048576, 0, 0, 0,
  /* 7448 */ 402653184, 0, 0, 4096, 4096, 4096, 29696, 0, 0, 0, 1073741824, 0, 0, 29712, 29712, 29712, 29840, 536900624,
  /* 7466 */ 29712, 29840, 29840, 4224144, 144384, 144384, 144384, 144384, -1023083416, -1023083416, -1023083416,
  /* 7477 */ -1023083416, -754647956, -754647956, -754647960, -754647956, -754647960, -754647956, -754647956,
  /* 7485 */ -754647956, -754647956, -754647960, -754647944, -754647956, -754647944, -754647944, -754647944, -754647944,
  /* 7494 */ -754647940, -754647940, -754647940, -754647960, -754647940, -754647940, -754516888, -754516884, 0, 0, 48,
  /* 7505 */ 25165824, 3670016, 0, 0, 0, 536870912, 0, 0, 0, 5242880, 0, 0, 34816, 0, 0, 60, 64576, 16, 0, 0, 29824,
  /* 7526 */ 13312, 131072, 0, 0, 64, 128, 0, 0, 16384, 32768, 50331648, 0, 40, 64576, 50593792, -1073741824, 0, 44,
  /* 7544 */ 319029248, 0, 2, 8, 64, 128, 1024, 4096, 8192, 0, 0, 65536, 201326592, 0, 44, 64576, 319029248,
  /* 7561 */ -1073741824, 0, 0, 64, 1536, 32768, 524288, 134217728, 28672, 0, 0, 0, 84, 2129920, 24, 0, 0, 0, 128,
  /* 7580 */ 536870912, 262144, 318767104, -1073741824, 0, 0, 8, 2048, 8192, 32768, 131072, 262144, 2097152, 1073741824,
  /* 7594 */ 0, 524288, 3145728, 0, 0, 0, 224, 0, 24576, 0, 0, 0, 224, 8388608, 0, 16, 0, 128, 536870912, 16, 32, 64,
  /* 7616 */ 1024, 2048, 61440, 262144, 50331648, 0, 524288, 1048576, 2097152, 4194304, 8388608, 503316480, 1073741824,
  /* 7629 */ 0, 4194304, 131072, 0, 0, 536870912, 4194304, 131072, 0, 2, 12, 192, 32768, 0, 0, 1040000, -570425344, 0,
  /* 7647 */ 2048, 32768, 8388608, 0, 0, 44, 56, 32768, 50331648, 0x80000000, 0, 0, 0, 32768, 50331648, 0, 0, 50331648,
  /* 7665 */ 268435456, 0, 0, 224, 33554432, 0, 0, 480, 10878976, 0, 131072, 0, 131072, 131072, 0, 131072, 1, 0, 2, 0,
  /* 7685 */ 0, 513, 32768, 0, 0, 33554432, 268435456, 268435456, 0, 0, 268435456, 268435456, 0, 2, 16, 1048576,
  /* 7701 */ 4194304, 0, 0, 4, 268435456, 268435456, 268435456, 268435456, 268435456, 2, 33554432, 0, 2, 64, 128, 1024,
  /* 7717 */ 4096, 0, 0, 256, 262144, 2113536, 0, 2097152, 135790592, 0, 2, 67108864, 12, 16384, 0, 65536, 0, 256,
  /* 7735 */ 32768, 0, 0, 512, 131072, 0, 256, 262144, 0, 0, 1024, 585, 0, 33554624, 4, 131585, 0, 135790592, 131585,
  /* 7754 */ 131585, 4, 393745, 1610612736, 805708305, 805708305, 1879450129, 1879450129, 805708561, 1879450129,
  /* 7764 */ 1879450129, 1879450129, -534280393, -534280393, -534280393, -534280393, -534280393, -500725769, -483948553,
  /* 7773 */ -492337161, -483948553, -500725961, -483948553, -483948553, -232282313, -500725961, -500725961, -500725961,
  /* 7782 */ -500725961, -500725769, -483948745, -483948745, -483948745, -483948745, -483948745, -483948553, -483948553,
  /* 7791 */ -483948553, -492337161, -492337161, -483948553, -215504905, 0, 0, 0, 2048, 64, 131584, 0, 0, 0, 2048,
  /* 7806 */ 131072, 524288, 393744, 0, 0, 0, 2048, 4194304, 0, 0, 131072, 0, 1610612736, 0, 0, 4096, 1048576, 0,
  /* 7824 */ 393752, 0, 0, 0, 4096, 4194304, 513, 0, 401936, 805306368, 0, 4, 8, 256, 512, 402192, 0, 0, 0, 4096,
  /* 7844 */ 201326592, 0, 0, 0, 2014, 0, 2590512, -536870912, 0, 0, 0, 7, 19367920, -503316480, 0, 0, 19376112,
  /* 7861 */ -234881024, 0, 0, 32768, 8388608, 1572864, 0, 0, 0, 262144, 65536, 8704, 268435456, 0, 0, 262144, 33554432,
  /* 7878 */ 65536, 2490368, 536870912, -1073741824, 0, 480, 33554432, 0, 4, 8, 512, 2048, 196608, 262144, 16777216,
  /* 7893 */ 1073741824, 16777216, 33554432, 536870912, -1073741824, 0, 0, 0, 9728, 268435456, 0, 4, 16, 32, 64, 128,
  /* 7909 */ 4096, 4194304, 1, 512, 32768, 0, 32, 256, 1536, 32768, 65536, 2490368, 16777216, 2097152, 1073741824,
  /* 7924 */ 0x80000000, 0, 4, 16, 64, 1536, 32768, 0, 0, 128, 512, 3072, 4096, 16, 224, 256, 1536, 16384, 32768, 0, 0,
  /* 7945 */ 0, 16777216, 0, 0, 0, 7, 0, 16777216, 33554432, 1073741824, 0x80000000, 0x80000000, 5242880, -1842937664,
  /* 7959 */ 10485760, 33554432, 0, 0, 458880, 2097152, 8388608, 33554432, 0, 0, 482944, 15728640, -570425344, 128, 0,
  /* 7974 */ 2097152, 0, 0, 32, 256, 512, 32768, 131072, 2097152, 16777216, 0, 224, 0, 0, 0, 524288, 1048576, 0, 16,
  /* 7993 */ 224, 256, 512, 32768, 4, 32, 524288, 134217728, 192, 131072, 0, 0, 524288, 536870912, 0, 0, 512, 3072,
  /* 8011 */ 16384, 16, 32, 512, 32768, 131072, 16, 32768, 0, 0, 557056, 0, 0, 192, 8388608, 0, 4, 16, 8388608, 0, 0, 4,
  /* 8033 */ 8, 16, 1024, 16777216, 4096, 0, 128, 0, 256, 2048, 4, 134217728, 0, 0, 2097152, 0, 1572864, 0, 8192, 0,
  /* 8053 */ 8192, 0, 65536, 4224, 65536, 0, 64, 128, 8388608, 0, 0, 64, 8388608, 0, 0, 2097152, 16384, 64, 0, 64, 0,
  /* 8074 */ 64, 96, 0, 33554432, 33554432, 0, 4, 32, 32, 40, 262184, 0, 33554432, 8192, 0, 7, 16, 288, 1536, 32768,
  /* 8094 */ 65536, 393216, 2097152, 1073741824, 33554436, 262144, 33554432, 0, 7, 16, 480, 1536, 2, 2048, 32768, 0, 8,
  /* 8111 */ 64, 2048, 2048, 2048, 2048, 8192, 3670016, 2048, 16384, 32768, 262144, 50331648, 2, 2048, 33554436, 0, 8,
  /* 8128 */ 268435456, 134217728, 0, 33554436, 4224, 4224, -1072627712, 805306384, -1342177264, -1070006272,
  /* 8138 */ -1070006272, -1069989376, -1069989376, -1069989376, -1069989360, 0, 100663296, 4224, 0, 12, 192, 768, 1024,
  /* 8151 */ 2048, 8192, 16384, 32768, 458752, 16777216, 134217728, 16777216, 262400, 65536, 65536, 262144, 262144, 0,
  /* 8165 */ 4096, 0, 8, -1065795072, -1061600768, -1069989376, -258932720, -258932720, -258932720, -258932720,
  /* 8175 */ -225378288, -258932720, -225378288, 1260759, 1260759, 1260767, 34815199, 1260759, 1260759, 34815191,
  /* 8185 */ 34815191, 1260759, 34815191, 1260759, 34815191, 1260759, 1260767, 1260759, 34815199, 1260759, 1260759,
  /* 8196 */ 34815199, 169032919, 1260767, 34815199, 169032919, 169032919, 169032919, 169032919, 169032927, 169032919,
  /* 8206 */ 169032927, 169032927, 169032927, 169032927, -1978450721, -1978450721, 169032927, 1242774751, -1978450721,
  /* 8215 */ 169032927, -1978450721, -91013929, -225231649, 169032927, 169032927, -1978450721, -1173144361, 1114112,
  /* 8224 */ 1073741824, 0, 0, 2590704, -503316480, 0, 16, 536870912, 0, 12, 318767104, 0, 0, 3735552, 0, 0, 3751936,
  /* 8241 */ 528, 7946240, 12140544, 0, 15, 208, 15360, 1245184, 7, 208, 15360, 1245184, 0, 1245184, 0, 0, 0, 2598704,
  /* 8259 */ -234881024, 15, 9633792, 0, 0, 8388608, 1073741824, 0, 0, 3670016, 0, 0, 16384, 0, 0, 0, 256, 0, 0, 0, 512,
  /* 8280 */ 0, 0, 0, 520, 1, 2, 4, 80, 128, 7168, 8192, 196608, 1, 2, 4, 16, 32, 256, 512, 1024, 32768, 65536, 2, 12,
  /* 8304 */ 16, 64, 128, 1024, 2048, 4096, 8192, 65536, 3145728, 0, 0, 16384, 0, 67108864, 32, 512, 2048, 262144,
  /* 8322 */ 50331648, 1073741824, 0x80000000, 0, 2, 16, 64, 128, 3072, 4096, 8192, 65536, 131072, 0, 0
];

JSONiqParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'$$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'false'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'jsoniq'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'null'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'select'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'true'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

                                                            // line 1276 "JSONiqParser.ebnf"
                                                            });
                                                            // line 39275 "JSONiqParser.js"
// End
